/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _Card = __webpack_require__(381);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _RaisedButton = __webpack_require__(423);

	var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

	var _reactTapEventPlugin = __webpack_require__(425);

	var _reactTapEventPlugin2 = _interopRequireDefault(_reactTapEventPlugin);

	var _Avatar = __webpack_require__(387);

	var _Avatar2 = _interopRequireDefault(_Avatar);

	var _folder = __webpack_require__(430);

	var _folder2 = _interopRequireDefault(_folder);

	var _FontIcon = __webpack_require__(364);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _List = __webpack_require__(417);

	var _List2 = _interopRequireDefault(_List);

	var _ListItem = __webpack_require__(413);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	var _DrawerOpenRight = __webpack_require__(431);

	var _DrawerOpenRight2 = _interopRequireDefault(_DrawerOpenRight);

	var _Title = __webpack_require__(432);

	var _Title2 = _interopRequireDefault(_Title);

	var _Cardaa = __webpack_require__(497);

	var _Cardaa2 = _interopRequireDefault(_Cardaa);

	var _Cardbb = __webpack_require__(895);

	var _Cardbb2 = _interopRequireDefault(_Cardbb);

	var _Cardcc = __webpack_require__(921);

	var _Cardcc2 = _interopRequireDefault(_Cardcc);

	var _Carddd = __webpack_require__(929);

	var _Carddd2 = _interopRequireDefault(_Carddd);

	var _Cardee = __webpack_require__(932);

	var _Cardee2 = _interopRequireDefault(_Cardee);

	var _SimpleChart = __webpack_require__(928);

	var _SimpleChart2 = _interopRequireDefault(_SimpleChart);

	var _Donghua = __webpack_require__(934);

	var _Donghua2 = _interopRequireDefault(_Donghua);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(0, _reactTapEventPlugin2.default)();

	_reactDom2.default.render(_react2.default.createElement(_Title2.default, null), document.getElementById('head'));
	_reactDom2.default.render(_react2.default.createElement(_Donghua2.default, null), document.getElementById('donghua'));

	_reactDom2.default.render(_react2.default.createElement(_Cardaa2.default, null), document.getElementById('card_one'));

	_reactDom2.default.render(_react2.default.createElement(_Cardbb2.default, null), document.getElementById('card_two'));
	_reactDom2.default.render(_react2.default.createElement(_Cardcc2.default, null), document.getElementById('card_three'));
	_reactDom2.default.render(_react2.default.createElement(_Carddd2.default, null), document.getElementById('card_four'));
	_reactDom2.default.render(_react2.default.createElement(_Cardee2.default, null), document.getElementById('card_five'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactChildren = __webpack_require__(5);
	var ReactComponent = __webpack_require__(18);
	var ReactPureComponent = __webpack_require__(21);
	var ReactClass = __webpack_require__(22);
	var ReactDOMFactories = __webpack_require__(24);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(30);

	var onlyChild = __webpack_require__(31);
	var warning = __webpack_require__(11);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function __spread() {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function createMixin(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout() {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	})();
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc'); // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(6);
	var ReactElement = __webpack_require__(9);

	var emptyFunction = __webpack_require__(12);
	var traverseAllChildren = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function standardReleaser(instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _assign = __webpack_require__(4);

	var ReactCurrentOwner = __webpack_require__(10);

	var warning = __webpack_require__(11);
	var canDefineProperty = __webpack_require__(13);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function warnAboutAccessingKey() {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function warnAboutAccessingRef() {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */

	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(12);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function get() {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var getIteratorFn = __webpack_require__(16);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(17);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(7);

	var ReactNoopUpdateQueue = __webpack_require__(19);

	var canDefineProperty = __webpack_require__(13);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(7),
	    _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */

	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function displayName(Constructor, _displayName) {
	    Constructor.displayName = _displayName;
	  },
	  mixins: function mixins(Constructor, _mixins) {
	    if (_mixins) {
	      for (var i = 0; i < _mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, _mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
	  },
	  contextTypes: function contextTypes(Constructor, _contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = _getDefaultProps;
	    }
	  },
	  propTypes: function propTypes(Constructor, _propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
	  },
	  statics: function statics(Constructor, _statics) {
	    mixStaticSpecIntoComponent(Constructor, _statics);
	  },
	  autobind: function autobind() {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec === 'undefined' ? 'undefined' : _typeof(spec);
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && (typeof one === 'undefined' ? 'undefined' : _typeof(one)) === 'object' && (typeof two === 'undefined' ? 'undefined' : _typeof(two)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function replaceState(newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted() {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function ReactClassComponent() {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function injectMixin(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(9);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ReactElement = __webpack_require__(9);

	var checkReactTypeSpec = __webpack_require__(27);

	var canDefineProperty = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function createElement(type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function createFactory(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function get() {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function cloneElement(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function setItem(id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function getItem(id) {
	    return itemMap.get(id);
	  };
	  removeItem = function removeItem(id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function getItemIDs() {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function addRoot(id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function removeRoot(id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function getRootIDs() {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function getKeyFromID(id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function getIDFromKey(key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function setItem(id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function getItem(id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function removeItem(id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function getItemIDs() {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function addRoot(id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function removeRoot(id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function getRootIDs() {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function _getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function onSetChildren(id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || _typeof(nextChild.element) !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function onMountComponent(id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function onUpdateComponent(id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function onUnmountComponent(id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function purgeUnmountedComponents() {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function isMounted(id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
	    var info = '';
	    if (topElement) {
	      var name = _getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function getStackAddendumByID(id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function getChildIDs(id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function getDisplayName(id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return _getDisplayName(element);
	  },
	  getElement: function getElement(id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function getOwnerID(id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function getParentID(id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function getSource(id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function getText(id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function getUpdateCount(id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },

	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(7);

	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var emptyFunction = __webpack_require__(12);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactElement = __webpack_require__(9);

	var invariant = __webpack_require__(8);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(33);

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultInjection = __webpack_require__(38);
	var ReactMount = __webpack_require__(166);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdates = __webpack_require__(56);
	var ReactVersion = __webpack_require__(171);

	var findDOMNode = __webpack_require__(172);
	var getHostComponentFromComposite = __webpack_require__(173);
	var renderSubtreeIntoContainer = __webpack_require__(174);
	var warning = __webpack_require__(11);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function getNodeFromInstance(inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(48);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(62);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(175);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(176);
	  var ReactDOMInvalidARIAHook = __webpack_require__(177);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentFlags = __webpack_require__(37);

	var invariant = __webpack_require__(8);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function injectDOMPropertyConfig(domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function isCustomAttribute(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(39);
	var BeforeInputEventPlugin = __webpack_require__(40);
	var ChangeEventPlugin = __webpack_require__(55);
	var DefaultEventPluginOrder = __webpack_require__(72);
	var EnterLeaveEventPlugin = __webpack_require__(73);
	var HTMLDOMPropertyConfig = __webpack_require__(78);
	var ReactComponentBrowserEnvironment = __webpack_require__(79);
	var ReactDOMComponent = __webpack_require__(92);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMEmptyComponent = __webpack_require__(137);
	var ReactDOMTreeTraversal = __webpack_require__(138);
	var ReactDOMTextComponent = __webpack_require__(139);
	var ReactDefaultBatchingStrategy = __webpack_require__(140);
	var ReactEventListener = __webpack_require__(141);
	var ReactInjection = __webpack_require__(144);
	var ReactReconcileTransaction = __webpack_require__(145);
	var SVGDOMPropertyConfig = __webpack_require__(153);
	var SelectEventPlugin = __webpack_require__(154);
	var SimpleEventPlugin = __webpack_require__(155);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var FallbackCompositionState = __webpack_require__(49);
	var SyntheticCompositionEvent = __webpack_require__(52);
	var SyntheticInputEvent = __webpack_require__(54);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (typeof opera === 'undefined' ? 'undefined' : _typeof(opera)) === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var warning = __webpack_require__(11);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(35);

	var EventPluginRegistry = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(44);
	var ReactErrorUtils = __webpack_require__(45);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var invariant = __webpack_require__(8);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function putListener(inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : _prodInvariant('94', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function getListener(inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function deleteListener(inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function deleteAllListeners(inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function enqueueEvents(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function processEventQueue(simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function __purge() {
	    listenerBank = {};
	  },

	  __getListenerBank: function __getListenerBank() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function _resetEventPlugins() {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactErrorUtils = __webpack_require__(45);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function injectComponentTree(Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function injectTreeTraversal(Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function validateEventDispatches(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function getInstanceFromNode(node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function getNodeFromInstance(node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function isAncestor(a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function getLowestCommonAncestor(a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function getParentInstance(inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function traverseTwoPhase(target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function rethrowCaughtError() {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function destructor() {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function getText() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function getData() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function standardReleaser(instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function timeStamp(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function preventDefault() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function stopPropagation() {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function persist() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function destructor() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function construct(target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function apply(constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function set(target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function E() {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);
	var isEventSupported = __webpack_require__(70);
	var isTextInputElement = __webpack_require__(71);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function get() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function set(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactReconciler = __webpack_require__(59);
	var Transaction = __webpack_require__(68);

	var invariant = __webpack_require__(8);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function initialize() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function close() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function initialize() {
	    this.callbackQueue.reset();
	  },
	  close: function close() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function destructor() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function perform(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function flushBatchedUpdates() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var PooledClass = __webpack_require__(50);

	var invariant = __webpack_require__(8);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */

	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */

	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */

	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */

	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(60);
	var ReactInstrumentation = __webpack_require__(62);

	var warning = __webpack_require__(11);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function getHostNode(internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent(internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var ReactOwner = __webpack_require__(61);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && (typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement)) === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && (typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement)) === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(63);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var ReactInvalidSetStateWarningHook = __webpack_require__(64);
	var ReactHostOperationHistoryHook = __webpack_require__(65);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ExecutionEnvironment = __webpack_require__(48);

	var performanceNow = __webpack_require__(66);
	var warning = __webpack_require__(11);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var _isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (_isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!_isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}

	var ReactDebugTool = {
	  addHook: function addHook(hook) {
	    hooks.push(hook);
	  },
	  removeHook: function removeHook(hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function isProfiling() {
	    return _isProfiling;
	  },
	  beginProfiling: function beginProfiling() {
	    if (_isProfiling) {
	      return;
	    }

	    _isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function endProfiling() {
	    if (!_isProfiling) {
	      return;
	    }

	    _isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function getFlushHistory() {
	    return flushHistory;
	  },
	  onBeginFlush: function onBeginFlush() {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function onEndFlush() {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function onEndProcessingChildContext() {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function onHostOperation(operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function onSetState() {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function onSetChildren(debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function onMountComponent(debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function onUpdateComponent(debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function onUnmountComponent(debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function onTestEvent() {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function warnInvalidSetState() {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function onEndProcessingChildContext() {
	    processingChildContext = false;
	  },
	  onSetState: function onSetState() {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function onHostOperation(operation) {
	    history.push(operation);
	  },
	  clearHistory: function clearHistory() {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function getHistory() {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(67);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function reinitializeTransaction() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function isInTransaction() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function perform(method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function initializeAll(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function closeAll(startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticMouseEvent = __webpack_require__(74);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);
	var ViewportMetrics = __webpack_require__(76);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function button(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function relatedTarget(event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function pageX(event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function pageY(event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function view(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function detail(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function refreshScrollValues(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMIDOperations = __webpack_require__(91);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(81);
	var Danger = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setInnerHTML = __webpack_require__(83);
	var setTextContent = __webpack_require__(85);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function dangerouslyReplaceNodeWithMarkup(oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function processUpdates(parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(82);
	var setInnerHTML = __webpack_require__(83);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setTextContent = __webpack_require__(85);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var DOMNamespaces = __webpack_require__(82);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function setInnerHTML(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(83);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function setTextContent(node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function setTextContent(node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(48);

	var createNodesFromMarkup = __webpack_require__(88);
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function dangerouslyReplaceNodeWithMarkup(oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(48);

	var createArrayFromMixed = __webpack_require__(89);
	var getMarkupWrap = __webpack_require__(90);
	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var invariant = __webpack_require__(8);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(48);

	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMComponentTree = __webpack_require__(34);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function dangerouslyProcessChildrenUpdates(parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var AutoFocusUtils = __webpack_require__(93);
	var CSSPropertyOperations = __webpack_require__(95);
	var DOMLazyTree = __webpack_require__(81);
	var DOMNamespaces = __webpack_require__(82);
	var DOMProperty = __webpack_require__(36);
	var DOMPropertyOperations = __webpack_require__(103);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactDOMComponentFlags = __webpack_require__(37);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMInput = __webpack_require__(108);
	var ReactDOMOption = __webpack_require__(111);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMultiChild = __webpack_require__(114);
	var ReactServerRenderingTransaction = __webpack_require__(133);

	var emptyFunction = __webpack_require__(12);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var isEventSupported = __webpack_require__(70);
	var shallowEqual = __webpack_require__(123);
	var validateDOMNesting = __webpack_require__(136);
	var warning = __webpack_require__(11);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || _typeof(props.style) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function setAndValidateContentChildDev(content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function _createOpenTagMarkupAndPutListeners(transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function _createContentMarkup(transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function _createInitialChildren(transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function receiveComponent(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function _updateDOMChildren(lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[_typeof(lastProps.children)] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[_typeof(nextProps.children)] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function getHostNode() {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function unmountComponent(safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function getPublicInstance() {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);

	var focusNode = __webpack_require__(94);

	var AutoFocusUtils = {
	  focusDOMComponent: function focusDOMComponent() {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactInstrumentation = __webpack_require__(62);

	var camelizeStyleName = __webpack_require__(97);
	var dangerousStyleValue = __webpack_require__(99);
	var hyphenateStyleName = __webpack_require__(100);
	var memoizeStringOnly = __webpack_require__(102);
	var warning = __webpack_require__(11);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function checkRenderMessage(owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function warnValidStyle(name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function createMarkupForStyles(styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function setValueForStyles(node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(98);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var warning = __webpack_require__(11);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(101);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 101 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var quoteAttributeValueForBrowser = __webpack_require__(104);
	var warning = __webpack_require__(11);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function createMarkupForID(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function setAttributeForID(node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function createMarkupForRoot() {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function setAttributeForRoot(node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function createMarkupForProperty(name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function createMarkupForCustomAttribute(name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function setValueForProperty(node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function setValueForAttribute(node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function deleteValueForAttribute(node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function deleteValueForProperty(node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(86);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventPluginRegistry = __webpack_require__(43);
	var ReactEventEmitterMixin = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(76);

	var getVendorPrefixedEventName = __webpack_require__(107);
	var isEventSupported = __webpack_require__(70);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function injectReactEventListener(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function setEnabled(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function isEnabled() {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function listenTo(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function supportsEventPageXY() {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function ensureScrollValueMonitoring() {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMPropertyOperations = __webpack_require__(103);
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function getHostProps(inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function postMountWrapper(inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function value(props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function checked(props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function checkPropTypes(tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function getValue(inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function getChecked(inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function executeOnChange(inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMSelect = __webpack_require__(112);

	var warning = __webpack_require__(11);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function mountWrapper(inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function postMountWrapper(inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function getHostProps(inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function getHostProps(inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function getSelectValueContext(inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function postUpdateWrapper(inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function getHostProps(inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function postMountWrapper(inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactReconciler = __webpack_require__(59);
	var ReactChildReconciler = __webpack_require__(117);

	var emptyFunction = __webpack_require__(12);
	var flattenChildren = __webpack_require__(132);
	var invariant = __webpack_require__(8);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function getDebugID(inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function mountChildren(nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function updateTextContent(nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function updateMarkup(nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function unmountChildren(safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function createChild(child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function removeChild(child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function _unmountChild(child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function injectEnvironment(environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function remove(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function get(key) {
	    return key._reactInternalInstance;
	  },

	  has: function has(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function set(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(59);

	var instantiateReactComponent = __webpack_require__(118);
	var KeyEscapeUtils = __webpack_require__(128);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(26);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function unmountChildren(renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var ReactCompositeComponent = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactHostComponent = __webpack_require__(126);

	var getNextDebugID = __webpack_require__(127);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : _typeof(element.type), getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : _typeof(element.type), getDeclarationErrorAddendum(element._owner)) : void 0;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : _prodInvariant('131', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactErrorUtils = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactNodeTypes = __webpack_require__(120);
	var ReactReconciler = __webpack_require__(59);

	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(121);
	}

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var shallowEqual = __webpack_require__(123);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function construct(element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function getHostNode() {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent(safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function _maskContext(context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function _processContext(context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function _processChildContext(currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(_typeof(Component.childContextTypes) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function _processPendingState(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
	    var inst = this._instance;
	    var renderedElement;

	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function _renderValidatedComponent() {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function attachRef(ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function detachRef(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function getName() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function getPublicInstance() {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);

	var invariant = __webpack_require__(8);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function getType(node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(35);

	var ReactPropTypeLocationNames = __webpack_require__(122);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);
	  var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function create(instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var invariant = __webpack_require__(8);

	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function injectTextComponentClass(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function injectComponentClasses(componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(130);

	var getIteratorFn = __webpack_require__(131);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(128);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var KeyEscapeUtils = __webpack_require__(128);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && (typeof traverseContext === 'undefined' ? 'undefined' : _typeof(traverseContext)) === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(26);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);
	var Transaction = __webpack_require__(68);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactServerUpdateQueue = __webpack_require__(134);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function enqueue() {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function getUpdateQueue() {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {},

	  checkpoint: function checkpoint() {},

	  rollback: function rollback() {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var ReactUpdateQueue = __webpack_require__(135);

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */

	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */

	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */

	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */

	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */

	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function validateCallback(callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function findOwnerStack(instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function validateDOMNesting(childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var ReactDOMEmptyComponent = function ReactDOMEmptyComponent(instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function receiveComponent() {},
	  getHostNode: function getHostNode() {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function unmountComponent() {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMChildrenOperations = __webpack_require__(80);
	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var validateDOMNesting = __webpack_require__(136);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function ReactDOMTextComponent(text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function receiveComponent(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function getHostNode() {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function unmountComponent() {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactUpdates = __webpack_require__(56);
	var Transaction = __webpack_require__(68);

	var emptyFunction = __webpack_require__(12);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function close() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventListener = __webpack_require__(142);
	var ExecutionEnvironment = __webpack_require__(48);
	var PooledClass = __webpack_require__(50);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var getEventTarget = __webpack_require__(69);
	var getUnboundedScrollPosition = __webpack_require__(143);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function destructor() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function setHandleTopLevel(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function setEnabled(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function isEnabled() {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function monitorScrollValue(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function dispatchEvent(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(12);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactHostComponent = __webpack_require__(126);
	var ReactUpdates = __webpack_require__(56);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactInputSelection = __webpack_require__(146);
	var ReactInstrumentation = __webpack_require__(62);
	var Transaction = __webpack_require__(68);
	var ReactUpdateQueue = __webpack_require__(135);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function initialize() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function close(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function close() {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function getUpdateQueue() {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function checkpoint() {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function rollback(checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(147);

	var containsNode = __webpack_require__(149);
	var focusNode = __webpack_require__(94);
	var getActiveElement = __webpack_require__(152);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function hasSelectionCapabilities(elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function getSelectionInformation() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function restoreSelection(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function getSelection(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function setSelection(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var getNodeForCharacterOffset = __webpack_require__(148);
	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(150);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(151);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 151 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 152 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInputSelection = __webpack_require__(146);
	var SyntheticEvent = __webpack_require__(53);

	var getActiveElement = __webpack_require__(152);
	var isTextInputElement = __webpack_require__(71);
	var shallowEqual = __webpack_require__(123);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function didPutListener(inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var EventListener = __webpack_require__(142);
	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticAnimationEvent = __webpack_require__(156);
	var SyntheticClipboardEvent = __webpack_require__(157);
	var SyntheticEvent = __webpack_require__(53);
	var SyntheticFocusEvent = __webpack_require__(158);
	var SyntheticKeyboardEvent = __webpack_require__(159);
	var SyntheticMouseEvent = __webpack_require__(74);
	var SyntheticDragEvent = __webpack_require__(162);
	var SyntheticTouchEvent = __webpack_require__(163);
	var SyntheticTransitionEvent = __webpack_require__(164);
	var SyntheticUIEvent = __webpack_require__(75);
	var SyntheticWheelEvent = __webpack_require__(165);

	var emptyFunction = __webpack_require__(12);
	var getEventCharCode = __webpack_require__(160);
	var invariant = __webpack_require__(8);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function didPutListener(inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function willDeleteListener(inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function clipboardData(event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventCharCode = __webpack_require__(160);
	var getEventKey = __webpack_require__(161);
	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function charCode(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function keyCode(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function which(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(160);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function deltaX(event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function deltaY(event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var DOMProperty = __webpack_require__(36);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMContainerInfo = __webpack_require__(167);
	var ReactDOMFeatureFlags = __webpack_require__(168);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMarkupChecksum = __webpack_require__(169);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdateQueue = __webpack_require__(135);
	var ReactUpdates = __webpack_require__(56);

	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(118);
	var invariant = __webpack_require__(8);
	var setInnerHTML = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function TopLevelWrapper() {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function scrollMonitor(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function _updateRootComponent(prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function render(nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function unmountComponentAtNode(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function _mountImageIntoNode(markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(136);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(170);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function addChecksumToMarkup(markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function canReuseMarkup(markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 171 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(116);

	var getHostComponentFromComposite = __webpack_require__(173);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(120);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(166);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function validateProperty(tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function warnUnknownProperties(debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _toConsumableArray2 = __webpack_require__(179);

	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	exports.default = getMuiTheme;

	var _lodash = __webpack_require__(233);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _colorManipulator = __webpack_require__(235);

	var _lightBaseTheme = __webpack_require__(236);

	var _lightBaseTheme2 = _interopRequireDefault(_lightBaseTheme);

	var _zIndex = __webpack_require__(239);

	var _zIndex2 = _interopRequireDefault(_zIndex);

	var _autoprefixer = __webpack_require__(240);

	var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

	var _callOnce = __webpack_require__(301);

	var _callOnce2 = _interopRequireDefault(_callOnce);

	var _rtl = __webpack_require__(302);

	var _rtl2 = _interopRequireDefault(_rtl);

	var _compose = __webpack_require__(307);

	var _compose2 = _interopRequireDefault(_compose);

	var _typography = __webpack_require__(308);

	var _typography2 = _interopRequireDefault(_typography);

	var _colors = __webpack_require__(237);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Get the MUI theme corresponding to a base theme.
	 * It's possible to override the computed theme values
	 * by providing a second argument. The calculated
	 * theme will be deeply merged with the second argument.
	 */
	function getMuiTheme(muiTheme) {
	  for (var _len = arguments.length, more = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    more[_key - 1] = arguments[_key];
	  }

	  muiTheme = _lodash2.default.apply(undefined, [{
	    zIndex: _zIndex2.default,
	    isRtl: false,
	    userAgent: undefined
	  }, _lightBaseTheme2.default, muiTheme].concat(more));

	  var _muiTheme = muiTheme,
	      spacing = _muiTheme.spacing,
	      fontFamily = _muiTheme.fontFamily,
	      palette = _muiTheme.palette;

	  var baseTheme = { spacing: spacing, fontFamily: fontFamily, palette: palette };

	  muiTheme = (0, _lodash2.default)({
	    appBar: {
	      color: palette.primary1Color,
	      textColor: palette.alternateTextColor,
	      height: spacing.desktopKeylineIncrement,
	      titleFontWeight: _typography2.default.fontWeightNormal,
	      padding: spacing.desktopGutter
	    },
	    avatar: {
	      color: palette.canvasColor,
	      backgroundColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.26)
	    },
	    badge: {
	      color: palette.alternateTextColor,
	      textColor: palette.textColor,
	      primaryColor: palette.primary1Color,
	      primaryTextColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryTextColor: palette.alternateTextColor,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    bottomNavigation: {
	      backgroundColor: palette.canvasColor,
	      unselectedColor: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      selectedColor: palette.primary1Color,
	      height: 56,
	      unselectedFontSize: 12,
	      selectedFontSize: 14
	    },
	    button: {
	      height: 36,
	      minWidth: 88,
	      iconButtonSize: spacing.iconSize * 2
	    },
	    card: {
	      titleColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      subtitleColor: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    cardMedia: {
	      color: _colors.darkWhite,
	      overlayContentBackground: _colors.lightBlack,
	      titleColor: _colors.darkWhite,
	      subtitleColor: _colors.lightWhite
	    },
	    cardText: {
	      textColor: palette.textColor
	    },
	    checkbox: {
	      boxColor: palette.textColor,
	      checkedColor: palette.primary1Color,
	      requiredColor: palette.primary1Color,
	      disabledColor: palette.disabledColor,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor
	    },
	    chip: {
	      backgroundColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.12),
	      deleteIconColor: (0, _colorManipulator.fade)(palette.textColor, 0.26),
	      textColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      fontSize: 14,
	      fontWeight: _typography2.default.fontWeightNormal,
	      shadow: '0 1px 6px ' + (0, _colorManipulator.fade)(palette.shadowColor, 0.12) + ',\n        0 1px 4px ' + (0, _colorManipulator.fade)(palette.shadowColor, 0.12)
	    },
	    datePicker: {
	      color: palette.primary1Color,
	      textColor: palette.alternateTextColor,
	      calendarTextColor: palette.textColor,
	      selectColor: palette.primary2Color,
	      selectTextColor: palette.alternateTextColor,
	      calendarYearBackgroundColor: palette.canvasColor
	    },
	    dialog: {
	      titleFontSize: 22,
	      bodyFontSize: 16,
	      bodyColor: (0, _colorManipulator.fade)(palette.textColor, 0.6)
	    },
	    dropDownMenu: {
	      accentColor: palette.borderColor
	    },
	    enhancedButton: {
	      tapHighlightColor: _colors.transparent
	    },
	    flatButton: {
	      color: _colors.transparent,
	      buttonFilterColor: '#999999',
	      disabledTextColor: (0, _colorManipulator.fade)(palette.textColor, 0.3),
	      textColor: palette.textColor,
	      primaryTextColor: palette.primary1Color,
	      secondaryTextColor: palette.accent1Color,
	      fontSize: _typography2.default.fontStyleButtonFontSize,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    floatingActionButton: {
	      buttonSize: 56,
	      miniSize: 40,
	      color: palette.primary1Color,
	      iconColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryIconColor: palette.alternateTextColor,
	      disabledTextColor: palette.disabledColor,
	      disabledColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.12)
	    },
	    gridTile: {
	      textColor: _colors.white
	    },
	    icon: {
	      color: palette.canvasColor,
	      backgroundColor: palette.primary1Color
	    },
	    inkBar: {
	      backgroundColor: palette.accent1Color
	    },
	    drawer: {
	      width: spacing.desktopKeylineIncrement * 4,
	      color: palette.canvasColor
	    },
	    listItem: {
	      nestedLevelDepth: 18,
	      secondaryTextColor: palette.secondaryTextColor,
	      leftIconColor: _colors.grey600,
	      rightIconColor: _colors.grey600
	    },
	    menu: {
	      backgroundColor: palette.canvasColor,
	      containerBackgroundColor: palette.canvasColor
	    },
	    menuItem: {
	      dataHeight: 32,
	      height: 48,
	      hoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.1),
	      padding: spacing.desktopGutter,
	      selectedTextColor: palette.accent1Color,
	      rightIconDesktopFill: _colors.grey600
	    },
	    menuSubheader: {
	      padding: spacing.desktopGutter,
	      borderColor: palette.borderColor,
	      textColor: palette.primary1Color
	    },
	    overlay: {
	      backgroundColor: _colors.lightBlack
	    },
	    paper: {
	      color: palette.textColor,
	      backgroundColor: palette.canvasColor,
	      zDepthShadows: [[1, 6, 0.12, 1, 4, 0.12], [3, 10, 0.16, 3, 10, 0.23], [10, 30, 0.19, 6, 10, 0.23], [14, 45, 0.25, 10, 18, 0.22], [19, 60, 0.30, 15, 20, 0.22]].map(function (d) {
	        return '0 ' + d[0] + 'px ' + d[1] + 'px ' + (0, _colorManipulator.fade)(palette.shadowColor, d[2]) + ',\n         0 ' + d[3] + 'px ' + d[4] + 'px ' + (0, _colorManipulator.fade)(palette.shadowColor, d[5]);
	      })
	    },
	    radioButton: {
	      borderColor: palette.textColor,
	      backgroundColor: palette.alternateTextColor,
	      checkedColor: palette.primary1Color,
	      requiredColor: palette.primary1Color,
	      disabledColor: palette.disabledColor,
	      size: 24,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor
	    },
	    raisedButton: {
	      color: palette.alternateTextColor,
	      textColor: palette.textColor,
	      primaryColor: palette.primary1Color,
	      primaryTextColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryTextColor: palette.alternateTextColor,
	      disabledColor: (0, _colorManipulator.darken)(palette.alternateTextColor, 0.1),
	      disabledTextColor: (0, _colorManipulator.fade)(palette.textColor, 0.3),
	      fontSize: _typography2.default.fontStyleButtonFontSize,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    refreshIndicator: {
	      strokeColor: palette.borderColor,
	      loadingStrokeColor: palette.primary1Color
	    },
	    ripple: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.87)
	    },
	    slider: {
	      trackSize: 2,
	      trackColor: palette.primary3Color,
	      trackColorSelected: palette.accent3Color,
	      handleSize: 12,
	      handleSizeDisabled: 8,
	      handleSizeActive: 18,
	      handleColorZero: palette.primary3Color,
	      handleFillColor: palette.alternateTextColor,
	      selectionColor: palette.primary1Color,
	      rippleColor: palette.primary1Color
	    },
	    snackbar: {
	      textColor: palette.alternateTextColor,
	      backgroundColor: palette.textColor,
	      actionColor: palette.accent1Color
	    },
	    subheader: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    stepper: {
	      backgroundColor: 'transparent',
	      hoverBackgroundColor: (0, _colorManipulator.fade)(_colors.black, 0.06),
	      iconColor: palette.primary1Color,
	      hoveredIconColor: _colors.grey700,
	      inactiveIconColor: _colors.grey500,
	      textColor: (0, _colorManipulator.fade)(_colors.black, 0.87),
	      disabledTextColor: (0, _colorManipulator.fade)(_colors.black, 0.26),
	      connectorLineColor: _colors.grey400
	    },
	    svgIcon: {
	      color: palette.textColor
	    },
	    table: {
	      backgroundColor: palette.canvasColor
	    },
	    tableFooter: {
	      borderColor: palette.borderColor,
	      textColor: palette.accent3Color
	    },
	    tableHeader: {
	      borderColor: palette.borderColor
	    },
	    tableHeaderColumn: {
	      textColor: palette.accent3Color,
	      height: 56,
	      spacing: 24
	    },
	    tableRow: {
	      hoverColor: palette.accent2Color,
	      stripeColor: (0, _colorManipulator.fade)((0, _colorManipulator.lighten)(palette.primary1Color, 0.5), 0.4),
	      selectedColor: palette.borderColor,
	      textColor: palette.textColor,
	      borderColor: palette.borderColor,
	      height: 48
	    },
	    tableRowColumn: {
	      height: 48,
	      spacing: 24
	    },
	    tabs: {
	      backgroundColor: palette.primary1Color,
	      textColor: (0, _colorManipulator.fade)(palette.alternateTextColor, 0.7),
	      selectedTextColor: palette.alternateTextColor
	    },
	    textField: {
	      textColor: palette.textColor,
	      hintColor: palette.disabledColor,
	      floatingLabelColor: palette.disabledColor,
	      disabledTextColor: palette.disabledColor,
	      errorColor: _colors.red500,
	      focusColor: palette.primary1Color,
	      backgroundColor: 'transparent',
	      borderColor: palette.borderColor
	    },
	    timePicker: {
	      color: palette.alternateTextColor,
	      textColor: palette.alternateTextColor,
	      accentColor: palette.primary1Color,
	      clockColor: palette.textColor,
	      clockCircleColor: palette.clockCircleColor,
	      headerColor: palette.pickerHeaderColor || palette.primary1Color,
	      selectColor: palette.primary2Color,
	      selectTextColor: palette.alternateTextColor
	    },
	    toggle: {
	      thumbOnColor: palette.primary1Color,
	      thumbOffColor: palette.accent2Color,
	      thumbDisabledColor: palette.borderColor,
	      thumbRequiredColor: palette.primary1Color,
	      trackOnColor: (0, _colorManipulator.fade)(palette.primary1Color, 0.5),
	      trackOffColor: palette.primary3Color,
	      trackDisabledColor: palette.primary3Color,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor,
	      trackRequiredColor: (0, _colorManipulator.fade)(palette.primary1Color, 0.5)
	    },
	    toolbar: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      hoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      backgroundColor: (0, _colorManipulator.darken)(palette.accent2Color, 0.05),
	      height: 56,
	      titleFontSize: 20,
	      iconColor: (0, _colorManipulator.fade)(palette.textColor, 0.4),
	      separatorColor: (0, _colorManipulator.fade)(palette.textColor, 0.175),
	      menuHoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.1)
	    },
	    tooltip: {
	      color: _colors.white,
	      rippleBackgroundColor: _colors.grey700
	    }
	  }, muiTheme, {
	    baseTheme: baseTheme, // To provide backward compatibility.
	    rawTheme: baseTheme });

	  var transformers = [_autoprefixer2.default, _rtl2.default, _callOnce2.default].map(function (t) {
	    return t(muiTheme);
	  }).filter(function (t) {
	    return t;
	  });

	  muiTheme.prepareStyles = _compose2.default.apply(undefined, (0, _toConsumableArray3.default)(transformers));

	  return muiTheme;
	}

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _from = __webpack_require__(180);

	var _from2 = _interopRequireDefault(_from);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(181), __esModule: true };

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(182);
	__webpack_require__(226);
	module.exports = __webpack_require__(190).Array.from;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var $at = __webpack_require__(183)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(186)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0; // next index
	  // 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t,
	      index = this._i,
	      point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var toInteger = __webpack_require__(184),
	    defined = __webpack_require__(185);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that)),
	        i = toInteger(pos),
	        l = s.length,
	        a,
	        b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 184 */
/***/ function(module, exports) {

	"use strict";

	// 7.1.4 ToInteger
	var ceil = Math.ceil,
	    floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 185 */
/***/ function(module, exports) {

	"use strict";

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LIBRARY = __webpack_require__(187),
	    $export = __webpack_require__(188),
	    redefine = __webpack_require__(203),
	    hide = __webpack_require__(193),
	    has = __webpack_require__(204),
	    Iterators = __webpack_require__(205),
	    $iterCreate = __webpack_require__(206),
	    setToStringTag = __webpack_require__(222),
	    getPrototypeOf = __webpack_require__(224),
	    ITERATOR = __webpack_require__(223)('iterator'),
	    BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	,
	    FF_ITERATOR = '@@iterator',
	    KEYS = 'keys',
	    VALUES = 'values';

	var returnThis = function returnThis() {
	  return this;
	};

	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function getMethod(kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return new Constructor(this, kind);
	        };
	      case VALUES:
	        return function values() {
	          return new Constructor(this, kind);
	        };
	    }return function entries() {
	      return new Constructor(this, kind);
	    };
	  };
	  var TAG = NAME + ' Iterator',
	      DEF_VALUES = DEFAULT == VALUES,
	      VALUES_BUG = false,
	      proto = Base.prototype,
	      $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
	      $default = $native || getMethod(DEFAULT),
	      $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
	      $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
	      methods,
	      key,
	      IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() {
	      return $native.call(this);
	    };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 187 */
/***/ function(module, exports) {

	"use strict";

	module.exports = true;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var global = __webpack_require__(189),
	    core = __webpack_require__(190),
	    ctx = __webpack_require__(191),
	    hide = __webpack_require__(193),
	    PROTOTYPE = 'prototype';

	var $export = function $export(type, name, source) {
	  var IS_FORCED = type & $export.F,
	      IS_GLOBAL = type & $export.G,
	      IS_STATIC = type & $export.S,
	      IS_PROTO = type & $export.P,
	      IS_BIND = type & $export.B,
	      IS_WRAP = type & $export.W,
	      exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
	      expProto = exports[PROTOTYPE],
	      target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
	      key,
	      own,
	      out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? function (C) {
	      var F = function F(a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0:
	              return new C();
	            case 1:
	              return new C(a);
	            case 2:
	              return new C(a, b);
	          }return new C(a, b, c);
	        }return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	      // make static versions for prototype methods
	    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1; // forced
	$export.G = 2; // global
	$export.S = 4; // static
	$export.P = 8; // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	$export.U = 64; // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 189 */
/***/ function(module, exports) {

	'use strict';

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ },
/* 190 */
/***/ function(module, exports) {

	'use strict';

	var core = module.exports = { version: '2.4.0' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// optional / simple context binding
	var aFunction = __webpack_require__(192);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function () /* ...args */{
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 192 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var dP = __webpack_require__(194),
	    createDesc = __webpack_require__(202);
	module.exports = __webpack_require__(198) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var anObject = __webpack_require__(195),
	    IE8_DOM_DEFINE = __webpack_require__(197),
	    toPrimitive = __webpack_require__(201),
	    dP = Object.defineProperty;

	exports.f = __webpack_require__(198) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) {/* empty */}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isObject = __webpack_require__(196);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 196 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	module.exports = function (it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = !__webpack_require__(198) && !__webpack_require__(199)(function () {
	  return Object.defineProperty(__webpack_require__(200)('div'), 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(199)(function () {
	  return Object.defineProperty({}, 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 199 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isObject = __webpack_require__(196),
	    document = __webpack_require__(189).document
	// in old IE typeof document.createElement is 'object'
	,
	    is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(196);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 202 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(193);

/***/ },
/* 204 */
/***/ function(module, exports) {

	"use strict";

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 205 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var create = __webpack_require__(207),
	    descriptor = __webpack_require__(202),
	    setToStringTag = __webpack_require__(222),
	    IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(193)(IteratorPrototype, __webpack_require__(223)('iterator'), function () {
	  return this;
	});

	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(195),
	    dPs = __webpack_require__(208),
	    enumBugKeys = __webpack_require__(220),
	    IE_PROTO = __webpack_require__(217)('IE_PROTO'),
	    Empty = function Empty() {/* empty */},
	    PROTOTYPE = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var _createDict = function createDict() {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(200)('iframe'),
	      i = enumBugKeys.length,
	      lt = '<',
	      gt = '>',
	      iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(221).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  _createDict = iframeDocument.F;
	  while (i--) {
	    delete _createDict[PROTOTYPE][enumBugKeys[i]];
	  }return _createDict();
	};

	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = _createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var dP = __webpack_require__(194),
	    anObject = __webpack_require__(195),
	    getKeys = __webpack_require__(209);

	module.exports = __webpack_require__(198) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties),
	      length = keys.length,
	      i = 0,
	      P;
	  while (length > i) {
	    dP.f(O, P = keys[i++], Properties[P]);
	  }return O;
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(210),
	    enumBugKeys = __webpack_require__(220);

	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var has = __webpack_require__(204),
	    toIObject = __webpack_require__(211),
	    arrayIndexOf = __webpack_require__(214)(false),
	    IE_PROTO = __webpack_require__(217)('IE_PROTO');

	module.exports = function (object, names) {
	  var O = toIObject(object),
	      i = 0,
	      result = [],
	      key;
	  for (key in O) {
	    if (key != IE_PROTO) has(O, key) && result.push(key);
	  } // Don't enum bug & hidden keys
	  while (names.length > i) {
	    if (has(O, key = names[i++])) {
	      ~arrayIndexOf(result, key) || result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(212),
	    defined = __webpack_require__(185);
	module.exports = function (it) {
	  return IObject(defined(it));
	};

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(213);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 213 */
/***/ function(module, exports) {

	"use strict";

	var toString = {}.toString;

	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(211),
	    toLength = __webpack_require__(215),
	    toIndex = __webpack_require__(216);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this),
	        length = toLength(O.length),
	        index = toIndex(fromIndex, length),
	        value;
	    // Array#includes uses SameValueZero equality algorithm
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      if (value != value) return true;
	      // Array#toIndex ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if (IS_INCLUDES || index in O) {
	        if (O[index] === el) return IS_INCLUDES || index || 0;
	      }
	    }return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(184),
	    min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var toInteger = __webpack_require__(184),
	    max = Math.max,
	    min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var shared = __webpack_require__(218)('keys'),
	    uid = __webpack_require__(219);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var global = __webpack_require__(189),
	    SHARED = '__core-js_shared__',
	    store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 219 */
/***/ function(module, exports) {

	'use strict';

	var id = 0,
	    px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 220 */
/***/ function(module, exports) {

	'use strict';

	// IE 8- don't enum bug keys
	module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(189).document && document.documentElement;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var def = __webpack_require__(194).f,
	    has = __webpack_require__(204),
	    TAG = __webpack_require__(223)('toStringTag');

	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var store = __webpack_require__(218)('wks'),
	    uid = __webpack_require__(219),
	    _Symbol = __webpack_require__(189).Symbol,
	    USE_SYMBOL = typeof _Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(204),
	    toObject = __webpack_require__(225),
	    IE_PROTO = __webpack_require__(217)('IE_PROTO'),
	    ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(185);
	module.exports = function (it) {
	  return Object(defined(it));
	};

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ctx = __webpack_require__(191),
	    $export = __webpack_require__(188),
	    toObject = __webpack_require__(225),
	    call = __webpack_require__(227),
	    isArrayIter = __webpack_require__(228),
	    toLength = __webpack_require__(215),
	    createProperty = __webpack_require__(229),
	    getIterFn = __webpack_require__(230);

	$export($export.S + $export.F * !__webpack_require__(232)(function (iter) {
	  Array.from(iter);
	}), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/) {
	    var O = toObject(arrayLike),
	        C = typeof this == 'function' ? this : Array,
	        aLen = arguments.length,
	        mapfn = aLen > 1 ? arguments[1] : undefined,
	        mapping = mapfn !== undefined,
	        index = 0,
	        iterFn = getIterFn(O),
	        length,
	        result,
	        step,
	        iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(195);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	    // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// check on default Array iterator
	var Iterators = __webpack_require__(205),
	    ITERATOR = __webpack_require__(223)('iterator'),
	    ArrayProto = Array.prototype;

	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var $defineProperty = __webpack_require__(194),
	    createDesc = __webpack_require__(202);

	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
	};

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var classof = __webpack_require__(231),
	    ITERATOR = __webpack_require__(223)('iterator'),
	    Iterators = __webpack_require__(205);
	module.exports = __webpack_require__(190).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
	};

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(213),
	    TAG = __webpack_require__(223)('toStringTag')
	// ES3 wrong here
	,
	    ARG = cof(function () {
	  return arguments;
	}()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function tryGet(it, key) {
	  try {
	    return it[key];
	  } catch (e) {/* empty */}
	};

	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	  // @@toStringTag case
	  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	  // builtinTag case
	  : ARG ? cof(O)
	  // ES3 arguments fallback
	  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ITERATOR = __webpack_require__(223)('iterator'),
	    SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () {
	    SAFE_CLOSING = true;
	  };
	  Array.from(riter, function () {
	    throw 2;
	  });
	} catch (e) {/* empty */}

	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7],
	        iter = arr[ITERATOR]();
	    iter.next = function () {
	      return { done: safe = true };
	    };
	    arr[ITERATOR] = function () {
	      return iter;
	    };
	    exec(arr);
	  } catch (e) {/* empty */}
	  return safe;
	};

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = function () {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}();

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0:
	      return func.call(thisArg);
	    case 1:
	      return func.call(thisArg, args[0]);
	    case 2:
	      return func.call(thisArg, args[0], args[1]);
	    case 3:
	      return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function (value) {
	    return func(value);
	  };
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    _Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object),
	    nativeMax = Math.max;

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map || ListCache)(),
	    'string': new Hash()
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache();
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
	    object[key] = value;
	  }
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || isFunc && !object) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack());
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function (subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  if (!(isArray(source) || isTypedArray(source))) {
	    var props = baseKeysIn(source);
	  }
	  arrayEach(props || source, function (srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack());
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    } else {
	      var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  });
	}

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = object[key],
	      srcValue = source[key],
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    newValue = srcValue;
	    if (isArray(srcValue) || isTypedArray(srcValue)) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      } else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      } else {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      } else {
	        newValue = objValue;
	      }
	    } else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue(object, key, newValue);
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
	  return function () {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor());
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor());
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function (object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	  getTag = function getTag(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString:
	          return dataViewTag;
	        case mapCtorString:
	          return mapTag;
	        case promiseCtorString:
	          return promiseTag;
	        case setCtorString:
	          return setTag;
	        case weakMapCtorString:
	          return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag:case float64Tag:
	    case int8Tag:case int16Tag:case int32Tag:
	    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
	  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

	  return value === proto;
	}

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return func + '';
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || value !== value && other !== other;
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */
	var merge = createAssigner(function (object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = merge;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(234)(module)))

/***/ },
/* 234 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },
/* 235 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.convertColorToString = convertColorToString;
	exports.convertHexToRGB = convertHexToRGB;
	exports.decomposeColor = decomposeColor;
	exports.getContrastRatio = getContrastRatio;
	exports.getLuminance = getLuminance;
	exports.emphasize = emphasize;
	exports.fade = fade;
	exports.darken = darken;
	exports.lighten = lighten;
	/**
	 * Returns a number whose value is limited to the given range.
	 *
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp(value, min, max) {
	  if (value < min) {
	    return min;
	  }
	  if (value > max) {
	    return max;
	  }
	  return value;
	}

	/**
	 * Converts a color object with type and values to a string.
	 *
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */
	function convertColorToString(color) {
	  var type = color.type,
	      values = color.values;

	  if (type.indexOf('rgb') > -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    for (var i = 0; i < 3; i++) {
	      values[i] = parseInt(values[i]);
	    }
	  }

	  var colorString = void 0;

	  if (type.indexOf('hsl') > -1) {
	    colorString = color.type + '(' + values[0] + ', ' + values[1] + '%, ' + values[2] + '%';
	  } else {
	    colorString = color.type + '(' + values[0] + ', ' + values[1] + ', ' + values[2];
	  }

	  if (values.length === 4) {
	    colorString += ', ' + color.values[3] + ')';
	  } else {
	    colorString += ')';
	  }

	  return colorString;
	}

	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 *
	 *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 *  @returns {string} A CSS rgb color string
	 */
	function convertHexToRGB(color) {
	  if (color.length === 4) {
	    var extendedColor = '#';
	    for (var i = 1; i < color.length; i++) {
	      extendedColor += color.charAt(i) + color.charAt(i);
	    }
	    color = extendedColor;
	  }

	  var values = {
	    r: parseInt(color.substr(1, 2), 16),
	    g: parseInt(color.substr(3, 2), 16),
	    b: parseInt(color.substr(5, 2), 16)
	  };

	  return 'rgb(' + values.r + ', ' + values.g + ', ' + values.b + ')';
	}

	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {{type: string, values: number[]}} A MUI color object
	 */
	function decomposeColor(color) {
	  if (color.charAt(0) === '#') {
	    return decomposeColor(convertHexToRGB(color));
	  }

	  var marker = color.indexOf('(');
	  var type = color.substring(0, marker);
	  var values = color.substring(marker + 1, color.length - 1).split(',');
	  values = values.map(function (value) {
	    return parseFloat(value);
	  });

	  return { type: type, values: values };
	}

	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
	 *
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.
	 */
	function getContrastRatio(foreground, background) {
	  var lumA = getLuminance(foreground);
	  var lumB = getLuminance(background);
	  var contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);

	  return Number(contrastRatio.toFixed(2)); // Truncate at two digits
	}

	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */
	function getLuminance(color) {
	  color = decomposeColor(color);

	  if (color.type.indexOf('rgb') > -1) {
	    var rgb = color.values.map(function (val) {
	      val /= 255; // normalized
	      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	    });
	    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits
	  } else if (color.type.indexOf('hsl') > -1) {
	    return color.values[2] / 100;
	  }
	}

	/**
	 * Darken or lighten a colour, depending on its luminance.
	 * Light colors are darkened, dark colors are lightened.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function emphasize(color) {
	  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;

	  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
	}

	/**
	 * Set the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} value - value to set the alpha channel to in the range 0 -1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function fade(color, value) {
	  color = decomposeColor(color);
	  value = clamp(value, 0, 1);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }
	  color.values[3] = value;

	  return convertColorToString(color);
	}

	/**
	 * Darkens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient, 0, 1);

	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i++) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }
	  return convertColorToString(color);
	}

	/**
	 * Lightens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient, 0, 1);

	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i++) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  }

	  return convertColorToString(color);
	}

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _colors = __webpack_require__(237);

	var _colorManipulator = __webpack_require__(235);

	var _spacing = __webpack_require__(238);

	var _spacing2 = _interopRequireDefault(_spacing);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 *  Light Theme is the default theme used in material-ui. It is guaranteed to
	 *  have all theme variables needed for every component. Variables not defined
	 *  in a custom theme will default to these values.
	 */
	exports.default = {
	  spacing: _spacing2.default,
	  fontFamily: 'Roboto, sans-serif',
	  palette: {
	    primary1Color: _colors.cyan500,
	    primary2Color: _colors.cyan700,
	    primary3Color: _colors.grey400,
	    accent1Color: _colors.pinkA200,
	    accent2Color: _colors.grey100,
	    accent3Color: _colors.grey500,
	    textColor: _colors.darkBlack,
	    secondaryTextColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.54),
	    alternateTextColor: _colors.white,
	    canvasColor: _colors.white,
	    borderColor: _colors.grey300,
	    disabledColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.3),
	    pickerHeaderColor: _colors.cyan500,
	    clockCircleColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.07),
	    shadowColor: _colors.fullBlack
	  }
	}; /**
	    * NB: If you update this file, please also update `docs/src/app/customization/Themes.js`
	    */

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var red50 = exports.red50 = '#ffebee';
	var red100 = exports.red100 = '#ffcdd2';
	var red200 = exports.red200 = '#ef9a9a';
	var red300 = exports.red300 = '#e57373';
	var red400 = exports.red400 = '#ef5350';
	var red500 = exports.red500 = '#f44336';
	var red600 = exports.red600 = '#e53935';
	var red700 = exports.red700 = '#d32f2f';
	var red800 = exports.red800 = '#c62828';
	var red900 = exports.red900 = '#b71c1c';
	var redA100 = exports.redA100 = '#ff8a80';
	var redA200 = exports.redA200 = '#ff5252';
	var redA400 = exports.redA400 = '#ff1744';
	var redA700 = exports.redA700 = '#d50000';

	var pink50 = exports.pink50 = '#fce4ec';
	var pink100 = exports.pink100 = '#f8bbd0';
	var pink200 = exports.pink200 = '#f48fb1';
	var pink300 = exports.pink300 = '#f06292';
	var pink400 = exports.pink400 = '#ec407a';
	var pink500 = exports.pink500 = '#e91e63';
	var pink600 = exports.pink600 = '#d81b60';
	var pink700 = exports.pink700 = '#c2185b';
	var pink800 = exports.pink800 = '#ad1457';
	var pink900 = exports.pink900 = '#880e4f';
	var pinkA100 = exports.pinkA100 = '#ff80ab';
	var pinkA200 = exports.pinkA200 = '#ff4081';
	var pinkA400 = exports.pinkA400 = '#f50057';
	var pinkA700 = exports.pinkA700 = '#c51162';

	var purple50 = exports.purple50 = '#f3e5f5';
	var purple100 = exports.purple100 = '#e1bee7';
	var purple200 = exports.purple200 = '#ce93d8';
	var purple300 = exports.purple300 = '#ba68c8';
	var purple400 = exports.purple400 = '#ab47bc';
	var purple500 = exports.purple500 = '#9c27b0';
	var purple600 = exports.purple600 = '#8e24aa';
	var purple700 = exports.purple700 = '#7b1fa2';
	var purple800 = exports.purple800 = '#6a1b9a';
	var purple900 = exports.purple900 = '#4a148c';
	var purpleA100 = exports.purpleA100 = '#ea80fc';
	var purpleA200 = exports.purpleA200 = '#e040fb';
	var purpleA400 = exports.purpleA400 = '#d500f9';
	var purpleA700 = exports.purpleA700 = '#aa00ff';

	var deepPurple50 = exports.deepPurple50 = '#ede7f6';
	var deepPurple100 = exports.deepPurple100 = '#d1c4e9';
	var deepPurple200 = exports.deepPurple200 = '#b39ddb';
	var deepPurple300 = exports.deepPurple300 = '#9575cd';
	var deepPurple400 = exports.deepPurple400 = '#7e57c2';
	var deepPurple500 = exports.deepPurple500 = '#673ab7';
	var deepPurple600 = exports.deepPurple600 = '#5e35b1';
	var deepPurple700 = exports.deepPurple700 = '#512da8';
	var deepPurple800 = exports.deepPurple800 = '#4527a0';
	var deepPurple900 = exports.deepPurple900 = '#311b92';
	var deepPurpleA100 = exports.deepPurpleA100 = '#b388ff';
	var deepPurpleA200 = exports.deepPurpleA200 = '#7c4dff';
	var deepPurpleA400 = exports.deepPurpleA400 = '#651fff';
	var deepPurpleA700 = exports.deepPurpleA700 = '#6200ea';

	var indigo50 = exports.indigo50 = '#e8eaf6';
	var indigo100 = exports.indigo100 = '#c5cae9';
	var indigo200 = exports.indigo200 = '#9fa8da';
	var indigo300 = exports.indigo300 = '#7986cb';
	var indigo400 = exports.indigo400 = '#5c6bc0';
	var indigo500 = exports.indigo500 = '#3f51b5';
	var indigo600 = exports.indigo600 = '#3949ab';
	var indigo700 = exports.indigo700 = '#303f9f';
	var indigo800 = exports.indigo800 = '#283593';
	var indigo900 = exports.indigo900 = '#1a237e';
	var indigoA100 = exports.indigoA100 = '#8c9eff';
	var indigoA200 = exports.indigoA200 = '#536dfe';
	var indigoA400 = exports.indigoA400 = '#3d5afe';
	var indigoA700 = exports.indigoA700 = '#304ffe';

	var blue50 = exports.blue50 = '#e3f2fd';
	var blue100 = exports.blue100 = '#bbdefb';
	var blue200 = exports.blue200 = '#90caf9';
	var blue300 = exports.blue300 = '#64b5f6';
	var blue400 = exports.blue400 = '#42a5f5';
	var blue500 = exports.blue500 = '#2196f3';
	var blue600 = exports.blue600 = '#1e88e5';
	var blue700 = exports.blue700 = '#1976d2';
	var blue800 = exports.blue800 = '#1565c0';
	var blue900 = exports.blue900 = '#0d47a1';
	var blueA100 = exports.blueA100 = '#82b1ff';
	var blueA200 = exports.blueA200 = '#448aff';
	var blueA400 = exports.blueA400 = '#2979ff';
	var blueA700 = exports.blueA700 = '#2962ff';

	var lightBlue50 = exports.lightBlue50 = '#e1f5fe';
	var lightBlue100 = exports.lightBlue100 = '#b3e5fc';
	var lightBlue200 = exports.lightBlue200 = '#81d4fa';
	var lightBlue300 = exports.lightBlue300 = '#4fc3f7';
	var lightBlue400 = exports.lightBlue400 = '#29b6f6';
	var lightBlue500 = exports.lightBlue500 = '#03a9f4';
	var lightBlue600 = exports.lightBlue600 = '#039be5';
	var lightBlue700 = exports.lightBlue700 = '#0288d1';
	var lightBlue800 = exports.lightBlue800 = '#0277bd';
	var lightBlue900 = exports.lightBlue900 = '#01579b';
	var lightBlueA100 = exports.lightBlueA100 = '#80d8ff';
	var lightBlueA200 = exports.lightBlueA200 = '#40c4ff';
	var lightBlueA400 = exports.lightBlueA400 = '#00b0ff';
	var lightBlueA700 = exports.lightBlueA700 = '#0091ea';

	var cyan50 = exports.cyan50 = '#e0f7fa';
	var cyan100 = exports.cyan100 = '#b2ebf2';
	var cyan200 = exports.cyan200 = '#80deea';
	var cyan300 = exports.cyan300 = '#4dd0e1';
	var cyan400 = exports.cyan400 = '#26c6da';
	var cyan500 = exports.cyan500 = '#00bcd4';
	var cyan600 = exports.cyan600 = '#00acc1';
	var cyan700 = exports.cyan700 = '#0097a7';
	var cyan800 = exports.cyan800 = '#00838f';
	var cyan900 = exports.cyan900 = '#006064';
	var cyanA100 = exports.cyanA100 = '#84ffff';
	var cyanA200 = exports.cyanA200 = '#18ffff';
	var cyanA400 = exports.cyanA400 = '#00e5ff';
	var cyanA700 = exports.cyanA700 = '#00b8d4';

	var teal50 = exports.teal50 = '#e0f2f1';
	var teal100 = exports.teal100 = '#b2dfdb';
	var teal200 = exports.teal200 = '#80cbc4';
	var teal300 = exports.teal300 = '#4db6ac';
	var teal400 = exports.teal400 = '#26a69a';
	var teal500 = exports.teal500 = '#009688';
	var teal600 = exports.teal600 = '#00897b';
	var teal700 = exports.teal700 = '#00796b';
	var teal800 = exports.teal800 = '#00695c';
	var teal900 = exports.teal900 = '#004d40';
	var tealA100 = exports.tealA100 = '#a7ffeb';
	var tealA200 = exports.tealA200 = '#64ffda';
	var tealA400 = exports.tealA400 = '#1de9b6';
	var tealA700 = exports.tealA700 = '#00bfa5';

	var green50 = exports.green50 = '#e8f5e9';
	var green100 = exports.green100 = '#c8e6c9';
	var green200 = exports.green200 = '#a5d6a7';
	var green300 = exports.green300 = '#81c784';
	var green400 = exports.green400 = '#66bb6a';
	var green500 = exports.green500 = '#4caf50';
	var green600 = exports.green600 = '#43a047';
	var green700 = exports.green700 = '#388e3c';
	var green800 = exports.green800 = '#2e7d32';
	var green900 = exports.green900 = '#1b5e20';
	var greenA100 = exports.greenA100 = '#b9f6ca';
	var greenA200 = exports.greenA200 = '#69f0ae';
	var greenA400 = exports.greenA400 = '#00e676';
	var greenA700 = exports.greenA700 = '#00c853';

	var lightGreen50 = exports.lightGreen50 = '#f1f8e9';
	var lightGreen100 = exports.lightGreen100 = '#dcedc8';
	var lightGreen200 = exports.lightGreen200 = '#c5e1a5';
	var lightGreen300 = exports.lightGreen300 = '#aed581';
	var lightGreen400 = exports.lightGreen400 = '#9ccc65';
	var lightGreen500 = exports.lightGreen500 = '#8bc34a';
	var lightGreen600 = exports.lightGreen600 = '#7cb342';
	var lightGreen700 = exports.lightGreen700 = '#689f38';
	var lightGreen800 = exports.lightGreen800 = '#558b2f';
	var lightGreen900 = exports.lightGreen900 = '#33691e';
	var lightGreenA100 = exports.lightGreenA100 = '#ccff90';
	var lightGreenA200 = exports.lightGreenA200 = '#b2ff59';
	var lightGreenA400 = exports.lightGreenA400 = '#76ff03';
	var lightGreenA700 = exports.lightGreenA700 = '#64dd17';

	var lime50 = exports.lime50 = '#f9fbe7';
	var lime100 = exports.lime100 = '#f0f4c3';
	var lime200 = exports.lime200 = '#e6ee9c';
	var lime300 = exports.lime300 = '#dce775';
	var lime400 = exports.lime400 = '#d4e157';
	var lime500 = exports.lime500 = '#cddc39';
	var lime600 = exports.lime600 = '#c0ca33';
	var lime700 = exports.lime700 = '#afb42b';
	var lime800 = exports.lime800 = '#9e9d24';
	var lime900 = exports.lime900 = '#827717';
	var limeA100 = exports.limeA100 = '#f4ff81';
	var limeA200 = exports.limeA200 = '#eeff41';
	var limeA400 = exports.limeA400 = '#c6ff00';
	var limeA700 = exports.limeA700 = '#aeea00';

	var yellow50 = exports.yellow50 = '#fffde7';
	var yellow100 = exports.yellow100 = '#fff9c4';
	var yellow200 = exports.yellow200 = '#fff59d';
	var yellow300 = exports.yellow300 = '#fff176';
	var yellow400 = exports.yellow400 = '#ffee58';
	var yellow500 = exports.yellow500 = '#ffeb3b';
	var yellow600 = exports.yellow600 = '#fdd835';
	var yellow700 = exports.yellow700 = '#fbc02d';
	var yellow800 = exports.yellow800 = '#f9a825';
	var yellow900 = exports.yellow900 = '#f57f17';
	var yellowA100 = exports.yellowA100 = '#ffff8d';
	var yellowA200 = exports.yellowA200 = '#ffff00';
	var yellowA400 = exports.yellowA400 = '#ffea00';
	var yellowA700 = exports.yellowA700 = '#ffd600';

	var amber50 = exports.amber50 = '#fff8e1';
	var amber100 = exports.amber100 = '#ffecb3';
	var amber200 = exports.amber200 = '#ffe082';
	var amber300 = exports.amber300 = '#ffd54f';
	var amber400 = exports.amber400 = '#ffca28';
	var amber500 = exports.amber500 = '#ffc107';
	var amber600 = exports.amber600 = '#ffb300';
	var amber700 = exports.amber700 = '#ffa000';
	var amber800 = exports.amber800 = '#ff8f00';
	var amber900 = exports.amber900 = '#ff6f00';
	var amberA100 = exports.amberA100 = '#ffe57f';
	var amberA200 = exports.amberA200 = '#ffd740';
	var amberA400 = exports.amberA400 = '#ffc400';
	var amberA700 = exports.amberA700 = '#ffab00';

	var orange50 = exports.orange50 = '#fff3e0';
	var orange100 = exports.orange100 = '#ffe0b2';
	var orange200 = exports.orange200 = '#ffcc80';
	var orange300 = exports.orange300 = '#ffb74d';
	var orange400 = exports.orange400 = '#ffa726';
	var orange500 = exports.orange500 = '#ff9800';
	var orange600 = exports.orange600 = '#fb8c00';
	var orange700 = exports.orange700 = '#f57c00';
	var orange800 = exports.orange800 = '#ef6c00';
	var orange900 = exports.orange900 = '#e65100';
	var orangeA100 = exports.orangeA100 = '#ffd180';
	var orangeA200 = exports.orangeA200 = '#ffab40';
	var orangeA400 = exports.orangeA400 = '#ff9100';
	var orangeA700 = exports.orangeA700 = '#ff6d00';

	var deepOrange50 = exports.deepOrange50 = '#fbe9e7';
	var deepOrange100 = exports.deepOrange100 = '#ffccbc';
	var deepOrange200 = exports.deepOrange200 = '#ffab91';
	var deepOrange300 = exports.deepOrange300 = '#ff8a65';
	var deepOrange400 = exports.deepOrange400 = '#ff7043';
	var deepOrange500 = exports.deepOrange500 = '#ff5722';
	var deepOrange600 = exports.deepOrange600 = '#f4511e';
	var deepOrange700 = exports.deepOrange700 = '#e64a19';
	var deepOrange800 = exports.deepOrange800 = '#d84315';
	var deepOrange900 = exports.deepOrange900 = '#bf360c';
	var deepOrangeA100 = exports.deepOrangeA100 = '#ff9e80';
	var deepOrangeA200 = exports.deepOrangeA200 = '#ff6e40';
	var deepOrangeA400 = exports.deepOrangeA400 = '#ff3d00';
	var deepOrangeA700 = exports.deepOrangeA700 = '#dd2c00';

	var brown50 = exports.brown50 = '#efebe9';
	var brown100 = exports.brown100 = '#d7ccc8';
	var brown200 = exports.brown200 = '#bcaaa4';
	var brown300 = exports.brown300 = '#a1887f';
	var brown400 = exports.brown400 = '#8d6e63';
	var brown500 = exports.brown500 = '#795548';
	var brown600 = exports.brown600 = '#6d4c41';
	var brown700 = exports.brown700 = '#5d4037';
	var brown800 = exports.brown800 = '#4e342e';
	var brown900 = exports.brown900 = '#3e2723';

	var blueGrey50 = exports.blueGrey50 = '#eceff1';
	var blueGrey100 = exports.blueGrey100 = '#cfd8dc';
	var blueGrey200 = exports.blueGrey200 = '#b0bec5';
	var blueGrey300 = exports.blueGrey300 = '#90a4ae';
	var blueGrey400 = exports.blueGrey400 = '#78909c';
	var blueGrey500 = exports.blueGrey500 = '#607d8b';
	var blueGrey600 = exports.blueGrey600 = '#546e7a';
	var blueGrey700 = exports.blueGrey700 = '#455a64';
	var blueGrey800 = exports.blueGrey800 = '#37474f';
	var blueGrey900 = exports.blueGrey900 = '#263238';

	var grey50 = exports.grey50 = '#fafafa';
	var grey100 = exports.grey100 = '#f5f5f5';
	var grey200 = exports.grey200 = '#eeeeee';
	var grey300 = exports.grey300 = '#e0e0e0';
	var grey400 = exports.grey400 = '#bdbdbd';
	var grey500 = exports.grey500 = '#9e9e9e';
	var grey600 = exports.grey600 = '#757575';
	var grey700 = exports.grey700 = '#616161';
	var grey800 = exports.grey800 = '#424242';
	var grey900 = exports.grey900 = '#212121';

	var black = exports.black = '#000000';
	var white = exports.white = '#ffffff';

	var transparent = exports.transparent = 'rgba(0, 0, 0, 0)';
	var fullBlack = exports.fullBlack = 'rgba(0, 0, 0, 1)';
	var darkBlack = exports.darkBlack = 'rgba(0, 0, 0, 0.87)';
	var lightBlack = exports.lightBlack = 'rgba(0, 0, 0, 0.54)';
	var minBlack = exports.minBlack = 'rgba(0, 0, 0, 0.26)';
	var faintBlack = exports.faintBlack = 'rgba(0, 0, 0, 0.12)';
	var fullWhite = exports.fullWhite = 'rgba(255, 255, 255, 1)';
	var darkWhite = exports.darkWhite = 'rgba(255, 255, 255, 0.87)';
	var lightWhite = exports.lightWhite = 'rgba(255, 255, 255, 0.54)';

/***/ },
/* 238 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  iconSize: 24,

	  desktopGutter: 24,
	  desktopGutterMore: 32,
	  desktopGutterLess: 16,
	  desktopGutterMini: 8,
	  desktopKeylineIncrement: 64,
	  desktopDropDownMenuItemHeight: 32,
	  desktopDropDownMenuFontSize: 15,
	  desktopDrawerMenuItemHeight: 48,
	  desktopSubheaderHeight: 48,
	  desktopToolbarHeight: 56
	};

/***/ },
/* 239 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  menu: 1000,
	  appBar: 1100,
	  drawerOverlay: 1200,
	  drawer: 1300,
	  dialogOverlay: 1400,
	  dialog: 1500,
	  layer: 2000,
	  popover: 2100,
	  snackbar: 2900,
	  tooltip: 3000
	};

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof2 = __webpack_require__(241);

	var _typeof3 = _interopRequireDefault(_typeof2);

	exports.default = function (muiTheme) {
	  var userAgent = muiTheme.userAgent;

	  if (userAgent === undefined && typeof navigator !== 'undefined') {
	    userAgent = navigator.userAgent;
	  }

	  if (userAgent === undefined && !hasWarnedAboutUserAgent) {
	    process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: userAgent should be supplied in the muiTheme context\n      for server-side rendering.') : void 0;

	    hasWarnedAboutUserAgent = true;
	  }

	  var isServer = typeof window === 'undefined';

	  if (userAgent === false) {
	    // Disabled autoprefixer
	    return null;
	  } else if (userAgent === 'all' || userAgent === undefined) {
	    // Prefix for all user agent
	    return function (style) {
	      var isFlex = false;

	      if (isServer) {
	        isFlex = ['flex', 'inline-flex'].indexOf(style.display) !== -1;
	      }

	      var stylePrefixed = _inlineStylePrefixer2.default.prefixAll(style);

	      // We can't apply this join with react-dom:
	      // #https://github.com/facebook/react/issues/6467
	      if (isFlex) {
	        stylePrefixed.display = stylePrefixed.display.join('; display: ');
	      }

	      return stylePrefixed;
	    };
	  } else {
	    var _ret = function () {
	      var prefixer = new _inlineStylePrefixer2.default({
	        userAgent: userAgent
	      });

	      return {
	        v: function v(style) {
	          return prefixer.prefix(style);
	        }
	      };
	    }();

	    if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
	  }
	};

	var _inlineStylePrefixer = __webpack_require__(265);

	var _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var hasWarnedAboutUserAgent = false;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _iterator = __webpack_require__(242);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _symbol = __webpack_require__(249);

	var _symbol2 = _interopRequireDefault(_symbol);

	var _typeof = typeof _symbol2.default === "function" && _typeof2(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(243), __esModule: true };

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(182);
	__webpack_require__(244);
	module.exports = __webpack_require__(248).f('iterator');

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(245);
	var global = __webpack_require__(189),
	    hide = __webpack_require__(193),
	    Iterators = __webpack_require__(205),
	    TO_STRING_TAG = __webpack_require__(223)('toStringTag');

	for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
	  var NAME = collections[i],
	      Collection = global[NAME],
	      proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var addToUnscopables = __webpack_require__(246),
	    step = __webpack_require__(247),
	    Iterators = __webpack_require__(205),
	    toIObject = __webpack_require__(211);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(186)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0; // next index
	  this._k = kind; // kind
	  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t,
	      kind = this._k,
	      index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 246 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function () {/* empty */};

/***/ },
/* 247 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.f = __webpack_require__(223);

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(250), __esModule: true };

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(251);
	__webpack_require__(262);
	__webpack_require__(263);
	__webpack_require__(264);
	module.exports = __webpack_require__(190).Symbol;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var global = __webpack_require__(189),
	    has = __webpack_require__(204),
	    DESCRIPTORS = __webpack_require__(198),
	    $export = __webpack_require__(188),
	    redefine = __webpack_require__(203),
	    META = __webpack_require__(252).KEY,
	    $fails = __webpack_require__(199),
	    shared = __webpack_require__(218),
	    setToStringTag = __webpack_require__(222),
	    uid = __webpack_require__(219),
	    wks = __webpack_require__(223),
	    wksExt = __webpack_require__(248),
	    wksDefine = __webpack_require__(253),
	    keyOf = __webpack_require__(254),
	    enumKeys = __webpack_require__(255),
	    isArray = __webpack_require__(258),
	    anObject = __webpack_require__(195),
	    toIObject = __webpack_require__(211),
	    toPrimitive = __webpack_require__(201),
	    createDesc = __webpack_require__(202),
	    _create = __webpack_require__(207),
	    gOPNExt = __webpack_require__(259),
	    $GOPD = __webpack_require__(261),
	    $DP = __webpack_require__(194),
	    $keys = __webpack_require__(209),
	    gOPD = $GOPD.f,
	    dP = $DP.f,
	    gOPN = gOPNExt.f,
	    $Symbol = global.Symbol,
	    $JSON = global.JSON,
	    _stringify = $JSON && $JSON.stringify,
	    PROTOTYPE = 'prototype',
	    HIDDEN = wks('_hidden'),
	    TO_PRIMITIVE = wks('toPrimitive'),
	    isEnum = {}.propertyIsEnumerable,
	    SymbolRegistry = shared('symbol-registry'),
	    AllSymbols = shared('symbols'),
	    OPSymbols = shared('op-symbols'),
	    ObjectProto = Object[PROTOTYPE],
	    USE_NATIVE = typeof $Symbol == 'function',
	    QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function get() {
	      return dP(this, 'a', { value: 7 }).a;
	    }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function wrap(tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    }return setSymbolDesc(it, key, D);
	  }return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P)),
	      i = 0,
	      l = keys.length,
	      key;
	  while (l > i) {
	    $defineProperty(it, key = keys[i++], P[key]);
	  }return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  }return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto,
	      names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  }return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function _Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function $set(value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(260).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(257).f = $propertyIsEnumerable;
	  __webpack_require__(256).f = $getOwnPropertySymbols;

	  if (DESCRIPTORS && !__webpack_require__(187)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var symbols =
	// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;) {
	  wks(symbols[i++]);
	}for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) {
	  wksDefine(symbols[i++]);
	}$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function _for(key) {
	    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key) {
	    if (isSymbol(key)) return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function useSetter() {
	    setter = true;
	  },
	  useSimple: function useSimple() {
	    setter = false;
	  }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    var args = [it],
	        i = 1,
	        replacer,
	        $replacer;
	    while (arguments.length > i) {
	      args.push(arguments[i++]);
	    }replacer = args[1];
	    if (typeof replacer == 'function') $replacer = replacer;
	    if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
	      if ($replacer) value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(193)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var META = __webpack_require__(219)('meta'),
	    isObject = __webpack_require__(196),
	    has = __webpack_require__(204),
	    setDesc = __webpack_require__(194).f,
	    id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(199)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function setMeta(it) {
	  setDesc(it, META, { value: {
	      i: 'O' + ++id, // object ID
	      w: {} // weak collections IDs
	    } });
	};
	var fastKey = function fastKey(it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	    // return object ID
	  }return it[META].i;
	};
	var getWeak = function getWeak(it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	    // return hash weak collections IDs
	  }return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function onFreeze(it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var global = __webpack_require__(189),
	    core = __webpack_require__(190),
	    LIBRARY = __webpack_require__(187),
	    wksExt = __webpack_require__(248),
	    defineProperty = __webpack_require__(194).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var getKeys = __webpack_require__(209),
	    toIObject = __webpack_require__(211);
	module.exports = function (object, el) {
	  var O = toIObject(object),
	      keys = getKeys(O),
	      length = keys.length,
	      index = 0,
	      key;
	  while (length > index) {
	    if (O[key = keys[index++]] === el) return key;
	  }
	};

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(209),
	    gOPS = __webpack_require__(256),
	    pIE = __webpack_require__(257);
	module.exports = function (it) {
	  var result = getKeys(it),
	      getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it),
	        isEnum = pIE.f,
	        i = 0,
	        key;
	    while (symbols.length > i) {
	      if (isEnum.call(it, key = symbols[i++])) result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 256 */
/***/ function(module, exports) {

	"use strict";

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 257 */
/***/ function(module, exports) {

	"use strict";

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(213);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(211),
	    gOPN = __webpack_require__(260).f,
	    toString = {}.toString;

	var windowNames = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function getWindowNames(it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(210),
	    hiddenKeys = __webpack_require__(220).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var pIE = __webpack_require__(257),
	    createDesc = __webpack_require__(202),
	    toIObject = __webpack_require__(211),
	    toPrimitive = __webpack_require__(201),
	    has = __webpack_require__(204),
	    IE8_DOM_DEFINE = __webpack_require__(197),
	    gOPD = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(198) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) {/* empty */}
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 262 */
/***/ function(module, exports) {

	"use strict";

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(253)('asyncIterator');

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(253)('observable');

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	// special flexbox specifications


	var _prefixAll2 = __webpack_require__(266);

	var _prefixAll3 = _interopRequireDefault(_prefixAll2);

	var _getBrowserInformation = __webpack_require__(283);

	var _getBrowserInformation2 = _interopRequireDefault(_getBrowserInformation);

	var _getPrefixedKeyframes = __webpack_require__(286);

	var _getPrefixedKeyframes2 = _interopRequireDefault(_getPrefixedKeyframes);

	var _capitalizeString = __webpack_require__(268);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	var _sortPrefixedStyle = __webpack_require__(269);

	var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);

	var _prefixProps = __webpack_require__(287);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	var _position = __webpack_require__(288);

	var _position2 = _interopRequireDefault(_position);

	var _calc = __webpack_require__(290);

	var _calc2 = _interopRequireDefault(_calc);

	var _zoomCursor = __webpack_require__(291);

	var _zoomCursor2 = _interopRequireDefault(_zoomCursor);

	var _grabCursor = __webpack_require__(292);

	var _grabCursor2 = _interopRequireDefault(_grabCursor);

	var _flex = __webpack_require__(293);

	var _flex2 = _interopRequireDefault(_flex);

	var _sizing = __webpack_require__(294);

	var _sizing2 = _interopRequireDefault(_sizing);

	var _gradient = __webpack_require__(295);

	var _gradient2 = _interopRequireDefault(_gradient);

	var _transition = __webpack_require__(296);

	var _transition2 = _interopRequireDefault(_transition);

	var _flexboxIE = __webpack_require__(298);

	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

	var _flexboxOld = __webpack_require__(299);

	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var plugins = [_position2.default, _calc2.default, _zoomCursor2.default, _grabCursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default,
	// this must be run AFTER the flexbox specs
	_flex2.default];

	var Prefixer = function () {
	  /**
	   * Instantiante a new prefixer
	   * @param {string} userAgent - userAgent to gather prefix information according to caniuse.com
	   * @param {string} keepUnprefixed - keeps unprefixed properties and values
	   */

	  function Prefixer() {
	    var _this = this;

	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Prefixer);

	    var defaultUserAgent = typeof navigator !== 'undefined' ? navigator.userAgent : undefined;

	    this._userAgent = options.userAgent || defaultUserAgent;
	    this._keepUnprefixed = options.keepUnprefixed || false;

	    this._browserInfo = (0, _getBrowserInformation2.default)(this._userAgent);

	    // Checks if the userAgent was resolved correctly
	    if (this._browserInfo && this._browserInfo.prefix) {
	      // set additional prefix information
	      this.cssPrefix = this._browserInfo.prefix.css;
	      this.jsPrefix = this._browserInfo.prefix.inline;
	      this.prefixedKeyframes = (0, _getPrefixedKeyframes2.default)(this._browserInfo);
	    } else {
	      this._usePrefixAllFallback = true;
	      return false;
	    }

	    var data = this._browserInfo.browser && _prefixProps2.default[this._browserInfo.browser];
	    if (data) {
	      this._requiresPrefix = Object.keys(data).filter(function (key) {
	        return data[key] >= _this._browserInfo.version;
	      }).reduce(function (result, name) {
	        result[name] = true;
	        return result;
	      }, {});
	      this._hasPropsRequiringPrefix = Object.keys(this._requiresPrefix).length > 0;
	    } else {
	      this._usePrefixAllFallback = true;
	    }
	  }

	  /**
	   * Returns a prefixed version of the style object
	   * @param {Object} styles - Style object that gets prefixed properties added
	   * @returns {Object} - Style object with prefixed properties and values
	   */

	  _createClass(Prefixer, [{
	    key: 'prefix',
	    value: function prefix(styles) {
	      var _this2 = this;

	      // use prefixAll as fallback if userAgent can not be resolved
	      if (this._usePrefixAllFallback) {
	        return (0, _prefixAll3.default)(styles);
	      }

	      // only add prefixes if needed
	      if (!this._hasPropsRequiringPrefix) {
	        return styles;
	      }

	      Object.keys(styles).forEach(function (property) {
	        var value = styles[property];
	        if (value instanceof Object && !Array.isArray(value)) {
	          // recurse through nested style objects
	          styles[property] = _this2.prefix(value);
	        } else {
	          // add prefixes if needed
	          if (_this2._requiresPrefix[property]) {
	            styles[_this2.jsPrefix + (0, _capitalizeString2.default)(property)] = value;
	            if (!_this2._keepUnprefixed) {
	              delete styles[property];
	            }
	          }
	        }
	      });

	      Object.keys(styles).forEach(function (property) {
	        [].concat(styles[property]).forEach(function (value) {
	          // resolve plugins
	          plugins.forEach(function (plugin) {
	            // generates a new plugin interface with current data
	            assignStyles(styles, plugin({
	              property: property,
	              value: value,
	              styles: styles,
	              browserInfo: _this2._browserInfo,
	              prefix: {
	                js: _this2.jsPrefix,
	                css: _this2.cssPrefix,
	                keyframes: _this2.prefixedKeyframes
	              },
	              keepUnprefixed: _this2._keepUnprefixed,
	              requiresPrefix: _this2._requiresPrefix
	            }), value, _this2._keepUnprefixed);
	          });
	        });
	      });

	      return (0, _sortPrefixedStyle2.default)(styles);
	    }

	    /**
	     * Returns a prefixed version of the style object using all vendor prefixes
	     * @param {Object} styles - Style object that gets prefixed properties added
	     * @returns {Object} - Style object with prefixed properties and values
	     */

	  }], [{
	    key: 'prefixAll',
	    value: function prefixAll(styles) {
	      return (0, _prefixAll3.default)(styles);
	    }
	  }]);

	  return Prefixer;
	}();

	exports.default = Prefixer;

	function assignStyles(base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var value = arguments[2];
	  var keepUnprefixed = arguments[3];

	  Object.keys(extend).forEach(function (property) {
	    var baseValue = base[property];
	    if (Array.isArray(baseValue)) {
	      [].concat(extend[property]).forEach(function (val) {
	        if (base[property].indexOf(val) === -1) {
	          base[property].splice(baseValue.indexOf(value), keepUnprefixed ? 0 : 1, val);
	        }
	      });
	    } else {
	      base[property] = extend[property];
	    }
	  });
	}
	module.exports = exports['default'];

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = prefixAll;

	var _prefixProps = __webpack_require__(267);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	var _capitalizeString = __webpack_require__(268);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	var _sortPrefixedStyle = __webpack_require__(269);

	var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);

	var _position = __webpack_require__(271);

	var _position2 = _interopRequireDefault(_position);

	var _calc = __webpack_require__(272);

	var _calc2 = _interopRequireDefault(_calc);

	var _cursor = __webpack_require__(275);

	var _cursor2 = _interopRequireDefault(_cursor);

	var _flex = __webpack_require__(276);

	var _flex2 = _interopRequireDefault(_flex);

	var _sizing = __webpack_require__(277);

	var _sizing2 = _interopRequireDefault(_sizing);

	var _gradient = __webpack_require__(278);

	var _gradient2 = _interopRequireDefault(_gradient);

	var _transition = __webpack_require__(279);

	var _transition2 = _interopRequireDefault(_transition);

	var _flexboxIE = __webpack_require__(281);

	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

	var _flexboxOld = __webpack_require__(282);

	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// special flexbox specifications


	var plugins = [_position2.default, _calc2.default, _cursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default, _flex2.default];

	/**
	 * Returns a prefixed version of the style object using all vendor prefixes
	 * @param {Object} styles - Style object that gets prefixed properties added
	 * @returns {Object} - Style object with prefixed properties and values
	 */
	function prefixAll(styles) {
	  Object.keys(styles).forEach(function (property) {
	    var value = styles[property];
	    if (value instanceof Object && !Array.isArray(value)) {
	      // recurse through nested style objects
	      styles[property] = prefixAll(value);
	    } else {
	      Object.keys(_prefixProps2.default).forEach(function (prefix) {
	        var properties = _prefixProps2.default[prefix];
	        // add prefixes if needed
	        if (properties[property]) {
	          styles[prefix + (0, _capitalizeString2.default)(property)] = value;
	        }
	      });
	    }
	  });

	  Object.keys(styles).forEach(function (property) {
	    [].concat(styles[property]).forEach(function (value, index) {
	      // resolve every special plugins
	      plugins.forEach(function (plugin) {
	        return assignStyles(styles, plugin(property, value));
	      });
	    });
	  });

	  return (0, _sortPrefixedStyle2.default)(styles);
	}

	function assignStyles(base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  Object.keys(extend).forEach(function (property) {
	    var baseValue = base[property];
	    if (Array.isArray(baseValue)) {
	      [].concat(extend[property]).forEach(function (value) {
	        var valueIndex = baseValue.indexOf(value);
	        if (valueIndex > -1) {
	          base[property].splice(valueIndex, 1);
	        }
	        base[property].push(value);
	      });
	    } else {
	      base[property] = extend[property];
	    }
	  });
	}
	module.exports = exports['default'];

/***/ },
/* 267 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };
	module.exports = exports["default"];

/***/ },
/* 268 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// helper to capitalize strings

	exports.default = function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};

	module.exports = exports["default"];

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sortPrefixedStyle;

	var _isPrefixedProperty = __webpack_require__(270);

	var _isPrefixedProperty2 = _interopRequireDefault(_isPrefixedProperty);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function sortPrefixedStyle(style) {
	  return Object.keys(style).sort(function (left, right) {
	    if ((0, _isPrefixedProperty2.default)(left) && !(0, _isPrefixedProperty2.default)(right)) {
	      return -1;
	    } else if (!(0, _isPrefixedProperty2.default)(left) && (0, _isPrefixedProperty2.default)(right)) {
	      return 1;
	    }
	    return 0;
	  }).reduce(function (sortedStyle, prop) {
	    sortedStyle[prop] = style[prop];
	    return sortedStyle;
	  }, {});
	}
	module.exports = exports['default'];

/***/ },
/* 270 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (property) {
	  return property.match(/^(Webkit|Moz|O|ms)/) !== null;
	};

	module.exports = exports["default"];

/***/ },
/* 271 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = position;
	function position(property, value) {
	  if (property === 'position' && value === 'sticky') {
	    return { position: ['-webkit-sticky', 'sticky'] };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;

	var _joinPrefixedValue = __webpack_require__(273);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	var _isPrefixedValue = __webpack_require__(274);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function calc(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
	    return (0, _joinPrefixedValue2.default)(property, value, function (prefix, value) {
	      return value.replace(/calc\(/g, prefix + 'calc(');
	    });
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 273 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	// returns a style object with a single concated prefixed value string

	exports.default = function (property, value) {
	  var replacer = arguments.length <= 2 || arguments[2] === undefined ? function (prefix, value) {
	    return prefix + value;
	  } : arguments[2];
	  return _defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
	    return replacer(prefix, value);
	  }));
	};

	module.exports = exports['default'];

/***/ },
/* 274 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (value) {
	  if (Array.isArray(value)) value = value.join(',');

	  return value.match(/-webkit-|-moz-|-ms-/) !== null;
	};

	module.exports = exports['default'];

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = cursor;

	var _joinPrefixedValue = __webpack_require__(273);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var values = {
	  'zoom-in': true,
	  'zoom-out': true,
	  grab: true,
	  grabbing: true
	};

	function cursor(property, value) {
	  if (property === 'cursor' && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 276 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;
	var values = { flex: true, 'inline-flex': true };

	function flex(property, value) {
	  if (property === 'display' && values[value]) {
	    return {
	      display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
	    };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;

	var _joinPrefixedValue = __webpack_require__(273);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};

	function sizing(property, value) {
	  if (properties[property] && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;

	var _joinPrefixedValue = __webpack_require__(273);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	var _isPrefixedValue = __webpack_require__(274);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

	function gradient(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.match(values) !== null) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = transition;

	var _hyphenateStyleName = __webpack_require__(280);

	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

	var _capitalizeString = __webpack_require__(268);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	var _isPrefixedValue = __webpack_require__(274);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	var _prefixProps = __webpack_require__(267);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var properties = {
	  transition: true,
	  transitionProperty: true,
	  WebkitTransition: true,
	  WebkitTransitionProperty: true
	};

	function transition(property, value) {
	  // also check for already prefixed transitions
	  if (typeof value === 'string' && properties[property]) {
	    var _ref2;

	    var outputValue = prefixValue(value);
	    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (value) {
	      return value.match(/-moz-|-ms-/) === null;
	    }).join(',');

	    // if the property is already prefixed
	    if (property.indexOf('Webkit') > -1) {
	      return _defineProperty({}, property, webkitOutput);
	    }

	    return _ref2 = {}, _defineProperty(_ref2, 'Webkit' + (0, _capitalizeString2.default)(property), webkitOutput), _defineProperty(_ref2, property, outputValue), _ref2;
	  }
	}

	function prefixValue(value) {
	  if ((0, _isPrefixedValue2.default)(value)) {
	    return value;
	  }

	  // only split multi values, not cubic beziers
	  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

	  // iterate each single value and check for transitioned properties
	  // that need to be prefixed as well
	  multipleValues.forEach(function (val, index) {
	    multipleValues[index] = Object.keys(_prefixProps2.default).reduce(function (out, prefix) {
	      var dashCasePrefix = '-' + prefix.toLowerCase() + '-';

	      Object.keys(_prefixProps2.default[prefix]).forEach(function (prop) {
	        var dashCaseProperty = (0, _hyphenateStyleName2.default)(prop);

	        if (val.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
	          // join all prefixes and create a new value
	          out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
	        }
	      });
	      return out;
	    }, val);
	  });

	  return multipleValues.join(',');
	}
	module.exports = exports['default'];

/***/ },
/* 280 */
/***/ function(module, exports) {

	'use strict';

	var uppercasePattern = /[A-Z]/g;
	var msPattern = /^ms-/;
	var cache = {};

	function hyphenateStyleName(string) {
	  return string in cache ? cache[string] : cache[string] = string.replace(uppercasePattern, '-$&').toLowerCase().replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 281 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};

	function flexboxIE(property, value) {
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 282 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple'
	};

	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};

	function flexboxOld(property, value) {
	  if (property === 'flexDirection' && typeof value === 'string') {
	    return {
	      WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	      WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	    };
	  }
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _bowser = __webpack_require__(284);

	var _bowser2 = _interopRequireDefault(_bowser);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var vendorPrefixes = {
	  Webkit: ['chrome', 'safari', 'ios', 'android', 'phantom', 'opera', 'webos', 'blackberry', 'bada', 'tizen', 'chromium', 'vivaldi'],
	  Moz: ['firefox', 'seamonkey', 'sailfish'],
	  ms: ['msie', 'msedge']
	};
	var browsers = {
	  chrome: [['chrome'], ['chromium']],
	  safari: [['safari']],
	  firefox: [['firefox']],
	  edge: [['msedge']],
	  opera: [['opera'], ['vivaldi']],
	  ios_saf: [['ios', 'mobile'], ['ios', 'tablet']],
	  ie: [['msie']],
	  op_mini: [['opera', 'mobile'], ['opera', 'tablet']],
	  and_uc: [['android', 'mobile'], ['android', 'tablet']],
	  android: [['android', 'mobile'], ['android', 'tablet']]
	};

	var browserByInfo = function browserByInfo(info) {
	  if (info.firefox) {
	    return 'firefox';
	  }
	  var name = '';

	  Object.keys(browsers).forEach(function (browser) {
	    browsers[browser].forEach(function (condition) {
	      var match = 0;
	      condition.forEach(function (single) {
	        if (info[single]) {
	          match += 1;
	        }
	      });
	      if (condition.length === match) {
	        name = browser;
	      }
	    });
	  });

	  return name;
	};

	/**
	 * Uses bowser to get default browser information such as version and name
	 * Evaluates bowser info and adds vendorPrefix information
	 * @param {string} userAgent - userAgent that gets evaluated
	 */

	exports.default = function (userAgent) {
	  if (!userAgent) {
	    return false;
	  }
	  var info = _bowser2.default._detect(userAgent);

	  Object.keys(vendorPrefixes).forEach(function (prefix) {
	    vendorPrefixes[prefix].forEach(function (browser) {
	      if (info[browser]) {
	        info.prefix = {
	          inline: prefix,
	          css: '-' + prefix.toLowerCase() + '-'
	        };
	      }
	    });
	  });

	  info.browser = browserByInfo(info);

	  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN
	  info.version = info.version ? parseFloat(info.version) : parseInt(parseFloat(info.osversion), 10);
	  info.osversion = parseFloat(info.osversion);

	  // iOS forces all browsers to use Safari under the hood
	  // as the Safari version seems to match the iOS version
	  // we just explicitely use the osversion instead
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/72
	  if (info.browser === 'ios_saf' && info.version > info.osversion) {
	    info.version = info.osversion;
	    info.safari = true;
	  }

	  // seperate native android chrome
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/45
	  if (info.browser === 'android' && info.chrome && info.version > 37) {
	    info.browser = 'and_chr';
	  }

	  // For android < 4.4 we want to check the osversion
	  // not the chrome version, see issue #26
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/26
	  if (info.browser === 'android' && info.osversion < 5) {
	    info.version = info.osversion;
	  }

	  return info;
	};

	module.exports = exports['default'];

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*!
	 * Bowser - a browser detector
	 * https://github.com/ded/bowser
	 * MIT License | (c) Dustin Diaz 2015
	 */

	!function (root, name, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (true) __webpack_require__(285)(name, definition);else root[name] = definition();
	}(undefined, 'bowser', function () {
	  /**
	    * See useragents.js for examples of navigator.userAgent
	    */

	  var t = true;

	  function detect(ua) {

	    function getFirstMatch(regex) {
	      var match = ua.match(regex);
	      return match && match.length > 1 && match[1] || '';
	    }

	    function getSecondMatch(regex) {
	      var match = ua.match(regex);
	      return match && match.length > 1 && match[2] || '';
	    }

	    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
	        likeAndroid = /like android/i.test(ua),
	        android = !likeAndroid && /android/i.test(ua),
	        nexusMobile = /nexus\s*[0-6]\s*/i.test(ua),
	        nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua),
	        chromeos = /CrOS/.test(ua),
	        silk = /silk/i.test(ua),
	        sailfish = /sailfish/i.test(ua),
	        tizen = /tizen/i.test(ua),
	        webos = /(web|hpw)os/i.test(ua),
	        windowsphone = /windows phone/i.test(ua),
	        samsungBrowser = /SamsungBrowser/i.test(ua),
	        windows = !windowsphone && /windows/i.test(ua),
	        mac = !iosdevice && !silk && /macintosh/i.test(ua),
	        linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua),
	        edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i),
	        versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i),
	        tablet = /tablet/i.test(ua),
	        mobile = !tablet && /[^-]mobi/i.test(ua),
	        xbox = /xbox/i.test(ua),
	        result;

	    if (/opera/i.test(ua)) {
	      //  an old Opera
	      result = {
	        name: 'Opera',
	        opera: t,
	        version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
	      };
	    } else if (/opr|opios/i.test(ua)) {
	      // a new Opera
	      result = {
	        name: 'Opera',
	        opera: t,
	        version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
	      };
	    } else if (/SamsungBrowser/i.test(ua)) {
	      result = {
	        name: 'Samsung Internet for Android',
	        samsungBrowser: t,
	        version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
	      };
	    } else if (/coast/i.test(ua)) {
	      result = {
	        name: 'Opera Coast',
	        coast: t,
	        version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
	      };
	    } else if (/yabrowser/i.test(ua)) {
	      result = {
	        name: 'Yandex Browser',
	        yandexbrowser: t,
	        version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
	      };
	    } else if (/ucbrowser/i.test(ua)) {
	      result = {
	        name: 'UC Browser',
	        ucbrowser: t,
	        version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
	      };
	    } else if (/mxios/i.test(ua)) {
	      result = {
	        name: 'Maxthon',
	        maxthon: t,
	        version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
	      };
	    } else if (/epiphany/i.test(ua)) {
	      result = {
	        name: 'Epiphany',
	        epiphany: t,
	        version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
	      };
	    } else if (/puffin/i.test(ua)) {
	      result = {
	        name: 'Puffin',
	        puffin: t,
	        version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
	      };
	    } else if (/sleipnir/i.test(ua)) {
	      result = {
	        name: 'Sleipnir',
	        sleipnir: t,
	        version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
	      };
	    } else if (/k-meleon/i.test(ua)) {
	      result = {
	        name: 'K-Meleon',
	        kMeleon: t,
	        version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
	      };
	    } else if (windowsphone) {
	      result = {
	        name: 'Windows Phone',
	        windowsphone: t
	      };
	      if (edgeVersion) {
	        result.msedge = t;
	        result.version = edgeVersion;
	      } else {
	        result.msie = t;
	        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
	      }
	    } else if (/msie|trident/i.test(ua)) {
	      result = {
	        name: 'Internet Explorer',
	        msie: t,
	        version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
	      };
	    } else if (chromeos) {
	      result = {
	        name: 'Chrome',
	        chromeos: t,
	        chromeBook: t,
	        chrome: t,
	        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      };
	    } else if (/chrome.+? edge/i.test(ua)) {
	      result = {
	        name: 'Microsoft Edge',
	        msedge: t,
	        version: edgeVersion
	      };
	    } else if (/vivaldi/i.test(ua)) {
	      result = {
	        name: 'Vivaldi',
	        vivaldi: t,
	        version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
	      };
	    } else if (sailfish) {
	      result = {
	        name: 'Sailfish',
	        sailfish: t,
	        version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
	      };
	    } else if (/seamonkey\//i.test(ua)) {
	      result = {
	        name: 'SeaMonkey',
	        seamonkey: t,
	        version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
	      };
	    } else if (/firefox|iceweasel|fxios/i.test(ua)) {
	      result = {
	        name: 'Firefox',
	        firefox: t,
	        version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
	      };
	      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
	        result.firefoxos = t;
	      }
	    } else if (silk) {
	      result = {
	        name: 'Amazon Silk',
	        silk: t,
	        version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
	      };
	    } else if (/phantom/i.test(ua)) {
	      result = {
	        name: 'PhantomJS',
	        phantom: t,
	        version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
	      };
	    } else if (/slimerjs/i.test(ua)) {
	      result = {
	        name: 'SlimerJS',
	        slimer: t,
	        version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
	      };
	    } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
	      result = {
	        name: 'BlackBerry',
	        blackberry: t,
	        version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
	      };
	    } else if (webos) {
	      result = {
	        name: 'WebOS',
	        webos: t,
	        version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
	      };
	      /touchpad\//i.test(ua) && (result.touchpad = t);
	    } else if (/bada/i.test(ua)) {
	      result = {
	        name: 'Bada',
	        bada: t,
	        version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
	      };
	    } else if (tizen) {
	      result = {
	        name: 'Tizen',
	        tizen: t,
	        version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
	      };
	    } else if (/qupzilla/i.test(ua)) {
	      result = {
	        name: 'QupZilla',
	        qupzilla: t,
	        version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
	      };
	    } else if (/chromium/i.test(ua)) {
	      result = {
	        name: 'Chromium',
	        chromium: t,
	        version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
	      };
	    } else if (/chrome|crios|crmo/i.test(ua)) {
	      result = {
	        name: 'Chrome',
	        chrome: t,
	        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      };
	    } else if (android) {
	      result = {
	        name: 'Android',
	        version: versionIdentifier
	      };
	    } else if (/safari|applewebkit/i.test(ua)) {
	      result = {
	        name: 'Safari',
	        safari: t
	      };
	      if (versionIdentifier) {
	        result.version = versionIdentifier;
	      }
	    } else if (iosdevice) {
	      result = {
	        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
	      };
	      // WTF: version is not part of user agent in web apps
	      if (versionIdentifier) {
	        result.version = versionIdentifier;
	      }
	    } else if (/googlebot/i.test(ua)) {
	      result = {
	        name: 'Googlebot',
	        googlebot: t,
	        version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
	      };
	    } else {
	      result = {
	        name: getFirstMatch(/^(.*)\/(.*) /),
	        version: getSecondMatch(/^(.*)\/(.*) /)
	      };
	    }

	    // set webkit or gecko flag for browsers based on these engines
	    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
	      if (/(apple)?webkit\/537\.36/i.test(ua)) {
	        result.name = result.name || "Blink";
	        result.blink = t;
	      } else {
	        result.name = result.name || "Webkit";
	        result.webkit = t;
	      }
	      if (!result.version && versionIdentifier) {
	        result.version = versionIdentifier;
	      }
	    } else if (!result.opera && /gecko\//i.test(ua)) {
	      result.name = result.name || "Gecko";
	      result.gecko = t;
	      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
	    }

	    // set OS flags for platforms that have multiple browsers
	    if (!result.windowsphone && !result.msedge && (android || result.silk)) {
	      result.android = t;
	    } else if (!result.windowsphone && !result.msedge && iosdevice) {
	      result[iosdevice] = t;
	      result.ios = t;
	    } else if (mac) {
	      result.mac = t;
	    } else if (xbox) {
	      result.xbox = t;
	    } else if (windows) {
	      result.windows = t;
	    } else if (linux) {
	      result.linux = t;
	    }

	    // OS version extraction
	    var osVersion = '';
	    if (result.windowsphone) {
	      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
	    } else if (iosdevice) {
	      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
	      osVersion = osVersion.replace(/[_\s]/g, '.');
	    } else if (android) {
	      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
	    } else if (result.webos) {
	      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
	    } else if (result.blackberry) {
	      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
	    } else if (result.bada) {
	      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
	    } else if (result.tizen) {
	      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
	    }
	    if (osVersion) {
	      result.osversion = osVersion;
	    }

	    // device type extraction
	    var osMajorVersion = osVersion.split('.')[0];
	    if (tablet || nexusTablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
	      result.tablet = t;
	    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || nexusMobile || result.blackberry || result.webos || result.bada) {
	      result.mobile = t;
	    }

	    // Graded Browser Support
	    // http://developer.yahoo.com/yui/articles/gbs
	    if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1.0 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
	      result.a = t;
	    } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
	      result.c = t;
	    } else result.x = t;

	    return result;
	  }

	  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '');

	  bowser.test = function (browserList) {
	    for (var i = 0; i < browserList.length; ++i) {
	      var browserItem = browserList[i];
	      if (typeof browserItem === 'string') {
	        if (browserItem in bowser) {
	          return true;
	        }
	      }
	    }
	    return false;
	  };

	  /**
	   * Get version precisions count
	   *
	   * @example
	   *   getVersionPrecision("1.10.3") // 3
	   *
	   * @param  {string} version
	   * @return {number}
	   */
	  function getVersionPrecision(version) {
	    return version.split(".").length;
	  }

	  /**
	   * Array::map polyfill
	   *
	   * @param  {Array} arr
	   * @param  {Function} iterator
	   * @return {Array}
	   */
	  function map(arr, iterator) {
	    var result = [],
	        i;
	    if (Array.prototype.map) {
	      return Array.prototype.map.call(arr, iterator);
	    }
	    for (i = 0; i < arr.length; i++) {
	      result.push(iterator(arr[i]));
	    }
	    return result;
	  }

	  /**
	   * Calculate browser version weight
	   *
	   * @example
	   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
	   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
	   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
	   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
	   *
	   * @param  {Array<String>} versions versions to compare
	   * @return {Number} comparison result
	   */
	  function compareVersions(versions) {
	    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
	    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
	    var chunks = map(versions, function (version) {
	      var delta = precision - getVersionPrecision(version);

	      // 2) "9" -> "9.0" (for precision = 2)
	      version = version + new Array(delta + 1).join(".0");

	      // 3) "9.0" -> ["000000000"", "000000009"]
	      return map(version.split("."), function (chunk) {
	        return new Array(20 - chunk.length).join("0") + chunk;
	      }).reverse();
	    });

	    // iterate in reverse order by reversed chunks array
	    while (--precision >= 0) {
	      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
	      if (chunks[0][precision] > chunks[1][precision]) {
	        return 1;
	      } else if (chunks[0][precision] === chunks[1][precision]) {
	        if (precision === 0) {
	          // all version chunks are same
	          return 0;
	        }
	      } else {
	        return -1;
	      }
	    }
	  }

	  /**
	   * Check if browser is unsupported
	   *
	   * @example
	   *   bowser.isUnsupportedBrowser({
	   *     msie: "10",
	   *     firefox: "23",
	   *     chrome: "29",
	   *     safari: "5.1",
	   *     opera: "16",
	   *     phantom: "534"
	   *   });
	   *
	   * @param  {Object}  minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function isUnsupportedBrowser(minVersions, strictMode, ua) {
	    var _bowser = bowser;

	    // make strictMode param optional with ua param usage
	    if (typeof strictMode === 'string') {
	      ua = strictMode;
	      strictMode = void 0;
	    }

	    if (strictMode === void 0) {
	      strictMode = false;
	    }
	    if (ua) {
	      _bowser = detect(ua);
	    }

	    var version = "" + _bowser.version;
	    for (var browser in minVersions) {
	      if (minVersions.hasOwnProperty(browser)) {
	        if (_bowser[browser]) {
	          if (typeof minVersions[browser] !== 'string') {
	            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
	          }

	          // browser version and min supported version.
	          return compareVersions([version, minVersions[browser]]) < 0;
	        }
	      }
	    }

	    return strictMode; // not found
	  }

	  /**
	   * Check if browser is supported
	   *
	   * @param  {Object} minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function check(minVersions, strictMode, ua) {
	    return !isUnsupportedBrowser(minVersions, strictMode, ua);
	  }

	  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
	  bowser.compareVersions = compareVersions;
	  bowser.check = check;

	  /*
	   * Set our detect method to the main bowser object so we can
	   * reuse it to test other user agents.
	   * This is needed to implement future tests.
	   */
	  bowser._detect = detect;

	  return bowser;
	});

/***/ },
/* 285 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 286 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (_ref) {
	  var browser = _ref.browser;
	  var version = _ref.version;
	  var prefix = _ref.prefix;

	  var prefixedKeyframes = 'keyframes';

	  if (browser === 'chrome' && version < 43 || (browser === 'safari' || browser === 'ios_saf') && version < 9 || browser === 'opera' && version < 30 || browser === 'android' && version <= 4.4 || browser === 'and_uc') {
	    prefixedKeyframes = prefix.css + prefixedKeyframes;
	  }
	  return prefixedKeyframes;
	};

	module.exports = exports['default'];

/***/ },
/* 287 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = { "chrome": { "transform": 35, "transformOrigin": 35, "transformOriginX": 35, "transformOriginY": 35, "backfaceVisibility": 35, "perspective": 35, "perspectiveOrigin": 35, "transformStyle": 35, "transformOriginZ": 35, "animation": 42, "animationDelay": 42, "animationDirection": 42, "animationFillMode": 42, "animationDuration": 42, "animationIterationCount": 42, "animationName": 42, "animationPlayState": 42, "animationTimingFunction": 42, "appearance": 55, "userSelect": 55, "fontKerning": 32, "textEmphasisPosition": 55, "textEmphasis": 55, "textEmphasisStyle": 55, "textEmphasisColor": 55, "boxDecorationBreak": 55, "clipPath": 55, "maskImage": 55, "maskMode": 55, "maskRepeat": 55, "maskPosition": 55, "maskClip": 55, "maskOrigin": 55, "maskSize": 55, "maskComposite": 55, "mask": 55, "maskBorderSource": 55, "maskBorderMode": 55, "maskBorderSlice": 55, "maskBorderWidth": 55, "maskBorderOutset": 55, "maskBorderRepeat": 55, "maskBorder": 55, "maskType": 55, "textDecorationStyle": 55, "textDecorationSkip": 55, "textDecorationLine": 55, "textDecorationColor": 55, "filter": 52, "fontFeatureSettings": 47, "breakAfter": 49, "breakBefore": 49, "breakInside": 49, "columnCount": 49, "columnFill": 49, "columnGap": 49, "columnRule": 49, "columnRuleColor": 49, "columnRuleStyle": 49, "columnRuleWidth": 49, "columns": 49, "columnSpan": 49, "columnWidth": 49 }, "safari": { "flex": 8, "flexBasis": 8, "flexDirection": 8, "flexGrow": 8, "flexFlow": 8, "flexShrink": 8, "flexWrap": 8, "alignContent": 8, "alignItems": 8, "alignSelf": 8, "justifyContent": 8, "order": 8, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8, "transformOrigin": 8, "transformOriginX": 8, "transformOriginY": 8, "backfaceVisibility": 8, "perspective": 8, "perspectiveOrigin": 8, "transformStyle": 8, "transformOriginZ": 8, "animation": 8, "animationDelay": 8, "animationDirection": 8, "animationFillMode": 8, "animationDuration": 8, "animationIterationCount": 8, "animationName": 8, "animationPlayState": 8, "animationTimingFunction": 8, "appearance": 10, "userSelect": 10, "backdropFilter": 10, "fontKerning": 9, "scrollSnapType": 10, "scrollSnapPointsX": 10, "scrollSnapPointsY": 10, "scrollSnapDestination": 10, "scrollSnapCoordinate": 10, "textEmphasisPosition": 7, "textEmphasis": 7, "textEmphasisStyle": 7, "textEmphasisColor": 7, "boxDecorationBreak": 10, "clipPath": 10, "maskImage": 10, "maskMode": 10, "maskRepeat": 10, "maskPosition": 10, "maskClip": 10, "maskOrigin": 10, "maskSize": 10, "maskComposite": 10, "mask": 10, "maskBorderSource": 10, "maskBorderMode": 10, "maskBorderSlice": 10, "maskBorderWidth": 10, "maskBorderOutset": 10, "maskBorderRepeat": 10, "maskBorder": 10, "maskType": 10, "textDecorationStyle": 10, "textDecorationSkip": 10, "textDecorationLine": 10, "textDecorationColor": 10, "shapeImageThreshold": 10, "shapeImageMargin": 10, "shapeImageOutside": 10, "filter": 9, "hyphens": 10, "flowInto": 10, "flowFrom": 10, "breakBefore": 8, "breakAfter": 8, "breakInside": 8, "regionFragment": 10, "columnCount": 8, "columnFill": 8, "columnGap": 8, "columnRule": 8, "columnRuleColor": 8, "columnRuleStyle": 8, "columnRuleWidth": 8, "columns": 8, "columnSpan": 8, "columnWidth": 8 }, "firefox": { "appearance": 51, "userSelect": 51, "boxSizing": 28, "textAlignLast": 48, "textDecorationStyle": 35, "textDecorationSkip": 35, "textDecorationLine": 35, "textDecorationColor": 35, "tabSize": 51, "hyphens": 42, "fontFeatureSettings": 33, "breakAfter": 51, "breakBefore": 51, "breakInside": 51, "columnCount": 51, "columnFill": 51, "columnGap": 51, "columnRule": 51, "columnRuleColor": 51, "columnRuleStyle": 51, "columnRuleWidth": 51, "columns": 51, "columnSpan": 51, "columnWidth": 51 }, "opera": { "flex": 16, "flexBasis": 16, "flexDirection": 16, "flexGrow": 16, "flexFlow": 16, "flexShrink": 16, "flexWrap": 16, "alignContent": 16, "alignItems": 16, "alignSelf": 16, "justifyContent": 16, "order": 16, "transform": 22, "transformOrigin": 22, "transformOriginX": 22, "transformOriginY": 22, "backfaceVisibility": 22, "perspective": 22, "perspectiveOrigin": 22, "transformStyle": 22, "transformOriginZ": 22, "animation": 29, "animationDelay": 29, "animationDirection": 29, "animationFillMode": 29, "animationDuration": 29, "animationIterationCount": 29, "animationName": 29, "animationPlayState": 29, "animationTimingFunction": 29, "appearance": 41, "userSelect": 41, "fontKerning": 19, "textEmphasisPosition": 41, "textEmphasis": 41, "textEmphasisStyle": 41, "textEmphasisColor": 41, "boxDecorationBreak": 41, "clipPath": 41, "maskImage": 41, "maskMode": 41, "maskRepeat": 41, "maskPosition": 41, "maskClip": 41, "maskOrigin": 41, "maskSize": 41, "maskComposite": 41, "mask": 41, "maskBorderSource": 41, "maskBorderMode": 41, "maskBorderSlice": 41, "maskBorderWidth": 41, "maskBorderOutset": 41, "maskBorderRepeat": 41, "maskBorder": 41, "maskType": 41, "textDecorationStyle": 41, "textDecorationSkip": 41, "textDecorationLine": 41, "textDecorationColor": 41, "filter": 39, "fontFeatureSettings": 34, "breakAfter": 36, "breakBefore": 36, "breakInside": 36, "columnCount": 36, "columnFill": 36, "columnGap": 36, "columnRule": 36, "columnRuleColor": 36, "columnRuleStyle": 36, "columnRuleWidth": 36, "columns": 36, "columnSpan": 36, "columnWidth": 36 }, "ie": { "flex": 10, "flexDirection": 10, "flexFlow": 10, "flexWrap": 10, "transform": 9, "transformOrigin": 9, "transformOriginX": 9, "transformOriginY": 9, "userSelect": 11, "wrapFlow": 11, "wrapThrough": 11, "wrapMargin": 11, "scrollSnapType": 11, "scrollSnapPointsX": 11, "scrollSnapPointsY": 11, "scrollSnapDestination": 11, "scrollSnapCoordinate": 11, "touchAction": 10, "hyphens": 11, "flowInto": 11, "flowFrom": 11, "breakBefore": 11, "breakAfter": 11, "breakInside": 11, "regionFragment": 11, "gridTemplateColumns": 11, "gridTemplateRows": 11, "gridTemplateAreas": 11, "gridTemplate": 11, "gridAutoColumns": 11, "gridAutoRows": 11, "gridAutoFlow": 11, "grid": 11, "gridRowStart": 11, "gridColumnStart": 11, "gridRowEnd": 11, "gridRow": 11, "gridColumn": 11, "gridColumnEnd": 11, "gridColumnGap": 11, "gridRowGap": 11, "gridArea": 11, "gridGap": 11, "textSizeAdjust": 11 }, "edge": { "userSelect": 14, "wrapFlow": 14, "wrapThrough": 14, "wrapMargin": 14, "scrollSnapType": 14, "scrollSnapPointsX": 14, "scrollSnapPointsY": 14, "scrollSnapDestination": 14, "scrollSnapCoordinate": 14, "hyphens": 14, "flowInto": 14, "flowFrom": 14, "breakBefore": 14, "breakAfter": 14, "breakInside": 14, "regionFragment": 14, "gridTemplateColumns": 14, "gridTemplateRows": 14, "gridTemplateAreas": 14, "gridTemplate": 14, "gridAutoColumns": 14, "gridAutoRows": 14, "gridAutoFlow": 14, "grid": 14, "gridRowStart": 14, "gridColumnStart": 14, "gridRowEnd": 14, "gridRow": 14, "gridColumn": 14, "gridColumnEnd": 14, "gridColumnGap": 14, "gridRowGap": 14, "gridArea": 14, "gridGap": 14 }, "ios_saf": { "flex": 8.1, "flexBasis": 8.1, "flexDirection": 8.1, "flexGrow": 8.1, "flexFlow": 8.1, "flexShrink": 8.1, "flexWrap": 8.1, "alignContent": 8.1, "alignItems": 8.1, "alignSelf": 8.1, "justifyContent": 8.1, "order": 8.1, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8.1, "transformOrigin": 8.1, "transformOriginX": 8.1, "transformOriginY": 8.1, "backfaceVisibility": 8.1, "perspective": 8.1, "perspectiveOrigin": 8.1, "transformStyle": 8.1, "transformOriginZ": 8.1, "animation": 8.1, "animationDelay": 8.1, "animationDirection": 8.1, "animationFillMode": 8.1, "animationDuration": 8.1, "animationIterationCount": 8.1, "animationName": 8.1, "animationPlayState": 8.1, "animationTimingFunction": 8.1, "appearance": 9.3, "userSelect": 9.3, "backdropFilter": 9.3, "fontKerning": 9.3, "scrollSnapType": 9.3, "scrollSnapPointsX": 9.3, "scrollSnapPointsY": 9.3, "scrollSnapDestination": 9.3, "scrollSnapCoordinate": 9.3, "boxDecorationBreak": 9.3, "clipPath": 9.3, "maskImage": 9.3, "maskMode": 9.3, "maskRepeat": 9.3, "maskPosition": 9.3, "maskClip": 9.3, "maskOrigin": 9.3, "maskSize": 9.3, "maskComposite": 9.3, "mask": 9.3, "maskBorderSource": 9.3, "maskBorderMode": 9.3, "maskBorderSlice": 9.3, "maskBorderWidth": 9.3, "maskBorderOutset": 9.3, "maskBorderRepeat": 9.3, "maskBorder": 9.3, "maskType": 9.3, "textSizeAdjust": 9.3, "textDecorationStyle": 9.3, "textDecorationSkip": 9.3, "textDecorationLine": 9.3, "textDecorationColor": 9.3, "shapeImageThreshold": 9.3, "shapeImageMargin": 9.3, "shapeImageOutside": 9.3, "filter": 9, "hyphens": 9.3, "flowInto": 9.3, "flowFrom": 9.3, "breakBefore": 8.1, "breakAfter": 8.1, "breakInside": 8.1, "regionFragment": 9.3, "columnCount": 8.1, "columnFill": 8.1, "columnGap": 8.1, "columnRule": 8.1, "columnRuleColor": 8.1, "columnRuleStyle": 8.1, "columnRuleWidth": 8.1, "columns": 8.1, "columnSpan": 8.1, "columnWidth": 8.1 }, "android": { "flex": 4.2, "flexBasis": 4.2, "flexDirection": 4.2, "flexGrow": 4.2, "flexFlow": 4.2, "flexShrink": 4.2, "flexWrap": 4.2, "alignContent": 4.2, "alignItems": 4.2, "alignSelf": 4.2, "justifyContent": 4.2, "order": 4.2, "transition": 4.2, "transitionDelay": 4.2, "transitionDuration": 4.2, "transitionProperty": 4.2, "transitionTimingFunction": 4.2, "transform": 4.4, "transformOrigin": 4.4, "transformOriginX": 4.4, "transformOriginY": 4.4, "backfaceVisibility": 4.4, "perspective": 4.4, "perspectiveOrigin": 4.4, "transformStyle": 4.4, "transformOriginZ": 4.4, "animation": 4.4, "animationDelay": 4.4, "animationDirection": 4.4, "animationFillMode": 4.4, "animationDuration": 4.4, "animationIterationCount": 4.4, "animationName": 4.4, "animationPlayState": 4.4, "animationTimingFunction": 4.4, "appearance": 51, "userSelect": 51, "fontKerning": 4.4, "textEmphasisPosition": 51, "textEmphasis": 51, "textEmphasisStyle": 51, "textEmphasisColor": 51, "boxDecorationBreak": 51, "clipPath": 51, "maskImage": 51, "maskMode": 51, "maskRepeat": 51, "maskPosition": 51, "maskClip": 51, "maskOrigin": 51, "maskSize": 51, "maskComposite": 51, "mask": 51, "maskBorderSource": 51, "maskBorderMode": 51, "maskBorderSlice": 51, "maskBorderWidth": 51, "maskBorderOutset": 51, "maskBorderRepeat": 51, "maskBorder": 51, "maskType": 51, "filter": 51, "fontFeatureSettings": 4.4, "breakAfter": 51, "breakBefore": 51, "breakInside": 51, "columnCount": 51, "columnFill": 51, "columnGap": 51, "columnRule": 51, "columnRuleColor": 51, "columnRuleStyle": 51, "columnRuleWidth": 51, "columns": 51, "columnSpan": 51, "columnWidth": 51 }, "and_chr": { "appearance": 51, "userSelect": 51, "textEmphasisPosition": 51, "textEmphasis": 51, "textEmphasisStyle": 51, "textEmphasisColor": 51, "boxDecorationBreak": 51, "clipPath": 51, "maskImage": 51, "maskMode": 51, "maskRepeat": 51, "maskPosition": 51, "maskClip": 51, "maskOrigin": 51, "maskSize": 51, "maskComposite": 51, "mask": 51, "maskBorderSource": 51, "maskBorderMode": 51, "maskBorderSlice": 51, "maskBorderWidth": 51, "maskBorderOutset": 51, "maskBorderRepeat": 51, "maskBorder": 51, "maskType": 51, "textDecorationStyle": 51, "textDecorationSkip": 51, "textDecorationLine": 51, "textDecorationColor": 51, "filter": 51 }, "and_uc": { "flex": 9.9, "flexBasis": 9.9, "flexDirection": 9.9, "flexGrow": 9.9, "flexFlow": 9.9, "flexShrink": 9.9, "flexWrap": 9.9, "alignContent": 9.9, "alignItems": 9.9, "alignSelf": 9.9, "justifyContent": 9.9, "order": 9.9, "transition": 9.9, "transitionDelay": 9.9, "transitionDuration": 9.9, "transitionProperty": 9.9, "transitionTimingFunction": 9.9, "transform": 9.9, "transformOrigin": 9.9, "transformOriginX": 9.9, "transformOriginY": 9.9, "backfaceVisibility": 9.9, "perspective": 9.9, "perspectiveOrigin": 9.9, "transformStyle": 9.9, "transformOriginZ": 9.9, "animation": 9.9, "animationDelay": 9.9, "animationDirection": 9.9, "animationFillMode": 9.9, "animationDuration": 9.9, "animationIterationCount": 9.9, "animationName": 9.9, "animationPlayState": 9.9, "animationTimingFunction": 9.9, "appearance": 9.9, "userSelect": 9.9, "fontKerning": 9.9, "textEmphasisPosition": 9.9, "textEmphasis": 9.9, "textEmphasisStyle": 9.9, "textEmphasisColor": 9.9, "maskImage": 9.9, "maskMode": 9.9, "maskRepeat": 9.9, "maskPosition": 9.9, "maskClip": 9.9, "maskOrigin": 9.9, "maskSize": 9.9, "maskComposite": 9.9, "mask": 9.9, "maskBorderSource": 9.9, "maskBorderMode": 9.9, "maskBorderSlice": 9.9, "maskBorderWidth": 9.9, "maskBorderOutset": 9.9, "maskBorderRepeat": 9.9, "maskBorder": 9.9, "maskType": 9.9, "textSizeAdjust": 9.9, "filter": 9.9, "hyphens": 9.9, "flowInto": 9.9, "flowFrom": 9.9, "breakBefore": 9.9, "breakAfter": 9.9, "breakInside": 9.9, "regionFragment": 9.9, "fontFeatureSettings": 9.9, "columnCount": 9.9, "columnFill": 9.9, "columnGap": 9.9, "columnRule": 9.9, "columnRuleColor": 9.9, "columnRuleStyle": 9.9, "columnRuleWidth": 9.9, "columns": 9.9, "columnSpan": 9.9, "columnWidth": 9.9 }, "op_mini": {} };
	module.exports = exports["default"];

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = position;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function position(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var browser = _ref.browserInfo.browser;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if (property === 'position' && value === 'sticky' && (browser === 'safari' || browser === 'ios_saf')) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 289 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (prefixedValue, value, keepUnprefixed) {
	  return keepUnprefixed ? [prefixedValue, value] : prefixedValue;
	};

	module.exports = exports["default"];

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function calc(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if (typeof value === 'string' && value.indexOf('calc(') > -1 && (browser === 'firefox' && version < 15 || browser === 'chrome' && version < 25 || browser === 'safari' && version < 6.1 || browser === 'ios_saf' && version < 7)) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(value.replace(/calc\(/g, css + 'calc('), value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = zoomCursor;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var values = { 'zoom-in': true, 'zoom-out': true };

	function zoomCursor(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if (property === 'cursor' && values[value] && (browser === 'firefox' && version < 24 || browser === 'chrome' && version < 37 || browser === 'safari' && version < 9 || browser === 'opera' && version < 24)) {
	    return {
	      cursor: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
	    };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = grabCursor;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var values = { grab: true, grabbing: true };

	function grabCursor(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var browser = _ref.browserInfo.browser;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  // adds prefixes for firefox, chrome, safari, and opera regardless of version until a reliable brwoser support info can be found (see: https://github.com/rofrischmann/inline-style-prefixer/issues/79)
	  if (property === 'cursor' && values[value] && (browser === 'firefox' || browser === 'chrome' || browser === 'safari' || browser === 'opera')) {
	    return {
	      cursor: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
	    };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var values = { flex: true, 'inline-flex': true };

	function flex(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if (property === 'display' && values[value] && (browser === 'chrome' && version < 29 && version > 20 || (browser === 'safari' || browser === 'ios_saf') && version < 9 && version > 6 || browser === 'opera' && (version == 15 || version == 16))) {
	    return {
	      display: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
	    };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};

	function sizing(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  // This might change in the future
	  // Keep an eye on it
	  if (properties[property] && values[value]) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

	function gradient(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if (typeof value === 'string' && value.match(values) !== null && (browser === 'firefox' && version < 16 || browser === 'chrome' && version < 26 || (browser === 'safari' || browser === 'ios_saf') && version < 7 || (browser === 'opera' || browser === 'op_mini') && version < 12.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	exports.default = transition;

	var _hyphenateStyleName = __webpack_require__(280);

	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

	var _unprefixProperty = __webpack_require__(297);

	var _unprefixProperty2 = _interopRequireDefault(_unprefixProperty);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var properties = { transition: true, transitionProperty: true };

	function transition(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var css = _ref.prefix.css;
	  var requiresPrefix = _ref.requiresPrefix;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  // also check for already prefixed transitions
	  var unprefixedProperty = (0, _unprefixProperty2.default)(property);

	  if (typeof value === 'string' && properties[unprefixedProperty]) {
	    var _ret = function () {
	      // TODO: memoize this array
	      var requiresPrefixDashCased = Object.keys(requiresPrefix).map(function (prop) {
	        return (0, _hyphenateStyleName2.default)(prop);
	      });

	      // only split multi values, not cubic beziers
	      var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

	      requiresPrefixDashCased.forEach(function (prop) {
	        multipleValues.forEach(function (val, index) {
	          if (val.indexOf(prop) > -1 && prop !== 'order') {
	            multipleValues[index] = val.replace(prop, css + prop) + (keepUnprefixed ? ',' + val : '');
	          }
	        });
	      });

	      return {
	        v: _defineProperty({}, property, multipleValues.join(','))
	      };
	    }();

	    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 297 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (property) {
	  var unprefixed = property.replace(/^(ms|Webkit|Moz|O)/, '');
	  return unprefixed.charAt(0).toLowerCase() + unprefixed.slice(1);
	};

	module.exports = exports['default'];

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  flex: 'flexbox',
	  'inline-flex': 'inline-flexbox'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};

	function flexboxIE(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var styles = _ref.styles;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if ((alternativeProps[property] || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'ie_mob' || browser === 'ie') && version == 10) {
	    if (!keepUnprefixed && !Array.isArray(styles[property])) {
	      delete styles[property];
	    }
	    if (property === 'display' && alternativeValues[value]) {
	      return {
	        display: (0, _getPrefixedValue2.default)(css + alternativeValues[value], value, keepUnprefixed)
	      };
	    }
	    if (alternativeProps[property]) {
	      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	    }
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;

	var _getPrefixedValue = __webpack_require__(289);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple',
	  flex: 'box',
	  'inline-flex': 'inline-box'
	};

	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};

	var otherProps = ['alignContent', 'alignSelf', 'order', 'flexGrow', 'flexShrink', 'flexBasis', 'flexDirection'];
	var properties = Object.keys(alternativeProps).concat(otherProps);

	function flexboxOld(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var styles = _ref.styles;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if ((properties.indexOf(property) > -1 || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'firefox' && version < 22 || browser === 'chrome' && version < 21 || (browser === 'safari' || browser === 'ios_saf') && version <= 6.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
	    if (!keepUnprefixed && !Array.isArray(styles[property])) {
	      delete styles[property];
	    }
	    if (property === 'flexDirection' && typeof value === 'string') {
	      return {
	        WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	        WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	      };
	    }
	    if (property === 'display' && alternativeValues[value]) {
	      return {
	        display: (0, _getPrefixedValue2.default)(css + alternativeValues[value], value, keepUnprefixed)
	      };
	    }
	    if (alternativeProps[property]) {
	      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	    }
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function warning() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = callOnce;

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var CALLED_ONCE = 'muiPrepared';

	function callOnce() {
	  if (process.env.NODE_ENV !== 'production') {
	    return function (style) {
	      if (style[CALLED_ONCE]) {
	        process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: You cannot call prepareStyles() on the same style object more than once.') : void 0;
	      }
	      style[CALLED_ONCE] = true;
	      return style;
	    };
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _keys = __webpack_require__(303);

	var _keys2 = _interopRequireDefault(_keys);

	exports.default = rtl;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var reTranslate = /((^|\s)translate(3d|X)?\()(\-?[\d]+)/;
	var reSkew = /((^|\s)skew(x|y)?\()\s*(\-?[\d]+)(deg|rad|grad)(,\s*(\-?[\d]+)(deg|rad|grad))?/;

	/**
	 * This function ensures that `style` supports both ltr and rtl directions by
	 * checking `styleConstants` in `muiTheme` and replacing attribute keys if
	 * necessary.
	 */
	function rtl(muiTheme) {
	  if (muiTheme.isRtl) {
	    return function (style) {
	      if (style.directionInvariant === true) {
	        return style;
	      }

	      var flippedAttributes = {
	        // Keys and their replacements.
	        right: 'left',
	        left: 'right',
	        marginRight: 'marginLeft',
	        marginLeft: 'marginRight',
	        paddingRight: 'paddingLeft',
	        paddingLeft: 'paddingRight',
	        borderRight: 'borderLeft',
	        borderLeft: 'borderRight'
	      };

	      var newStyle = {};

	      (0, _keys2.default)(style).forEach(function (attribute) {
	        var value = style[attribute];
	        var key = attribute;

	        if (flippedAttributes.hasOwnProperty(attribute)) {
	          key = flippedAttributes[attribute];
	        }

	        switch (attribute) {
	          case 'float':
	          case 'textAlign':
	            if (value === 'right') {
	              value = 'left';
	            } else if (value === 'left') {
	              value = 'right';
	            }
	            break;

	          case 'direction':
	            if (value === 'ltr') {
	              value = 'rtl';
	            } else if (value === 'rtl') {
	              value = 'ltr';
	            }
	            break;

	          case 'transform':
	            if (!value) break;
	            var matches = void 0;
	            if (matches = value.match(reTranslate)) {
	              value = value.replace(matches[0], matches[1] + -parseFloat(matches[4]));
	            }
	            if (matches = value.match(reSkew)) {
	              value = value.replace(matches[0], matches[1] + -parseFloat(matches[4]) + matches[5] + matches[6] ? ', ' + (-parseFloat(matches[7]) + matches[8]) : '');
	            }
	            break;

	          case 'transformOrigin':
	            if (!value) break;
	            if (value.indexOf('right') > -1) {
	              value = value.replace('right', 'left');
	            } else if (value.indexOf('left') > -1) {
	              value = value.replace('left', 'right');
	            }
	            break;
	        }

	        newStyle[key] = value;
	      });

	      return newStyle;
	    };
	  }
	}

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(304), __esModule: true };

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(305);
	module.exports = __webpack_require__(190).Object.keys;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(225),
	    $keys = __webpack_require__(209);

	__webpack_require__(306)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(188),
	    core = __webpack_require__(190),
	    fails = __webpack_require__(199);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY],
	      exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () {
	    fn(1);
	  }), 'Object', exp);
	};

/***/ },
/* 307 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = compose;
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _colors = __webpack_require__(237);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var Typography = function Typography() {
	  (0, _classCallCheck3.default)(this, Typography);

	  // text colors
	  this.textFullBlack = _colors.fullBlack;
	  this.textDarkBlack = _colors.darkBlack;
	  this.textLightBlack = _colors.lightBlack;
	  this.textMinBlack = _colors.minBlack;
	  this.textFullWhite = _colors.fullWhite;
	  this.textDarkWhite = _colors.darkWhite;
	  this.textLightWhite = _colors.lightWhite;

	  // font weight
	  this.fontWeightLight = 300;
	  this.fontWeightNormal = 400;
	  this.fontWeightMedium = 500;

	  this.fontStyleButtonFontSize = 14;
	};

	exports.default = new Typography();

/***/ },
/* 309 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(1);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var MuiThemeProvider = function (_Component) {
	  (0, _inherits3.default)(MuiThemeProvider, _Component);

	  function MuiThemeProvider() {
	    (0, _classCallCheck3.default)(this, MuiThemeProvider);
	    return (0, _possibleConstructorReturn3.default)(this, (MuiThemeProvider.__proto__ || (0, _getPrototypeOf2.default)(MuiThemeProvider)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(MuiThemeProvider, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        muiTheme: this.props.muiTheme || (0, _getMuiTheme2.default)()
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);
	  return MuiThemeProvider;
	}(_react.Component);

	MuiThemeProvider.childContextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? MuiThemeProvider.propTypes = {
	  children: _react.PropTypes.element,
	  muiTheme: _react.PropTypes.object
	} : void 0;
	exports.default = MuiThemeProvider;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(312), __esModule: true };

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(313);
	module.exports = __webpack_require__(190).Object.getPrototypeOf;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(225),
	    $getPrototypeOf = __webpack_require__(224);

	__webpack_require__(306)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _defineProperty = __webpack_require__(315);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(316), __esModule: true };

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(317);
	var $Object = __webpack_require__(190).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var $export = __webpack_require__(188);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(198), 'Object', { defineProperty: __webpack_require__(194).f });

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _typeof2 = __webpack_require__(241);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _setPrototypeOf = __webpack_require__(320);

	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

	var _create = __webpack_require__(324);

	var _create2 = _interopRequireDefault(_create);

	var _typeof2 = __webpack_require__(241);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(321), __esModule: true };

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(322);
	module.exports = __webpack_require__(190).Object.setPrototypeOf;

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(188);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(323).set });

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(196),
	    anObject = __webpack_require__(195);
	var check = function check(O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	  function (test, buggy, set) {
	    try {
	      set = __webpack_require__(191)(Function.call, __webpack_require__(261).f(Object.prototype, '__proto__').set, 2);
	      set(test, []);
	      buggy = !(test instanceof Array);
	    } catch (e) {
	      buggy = true;
	    }
	    return function setPrototypeOf(O, proto) {
	      check(O, proto);
	      if (buggy) O.__proto__ = proto;else set(O, proto);
	      return O;
	    };
	  }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(325), __esModule: true };

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(326);
	var $Object = __webpack_require__(190).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var $export = __webpack_require__(188);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(207) });

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _AppBar = __webpack_require__(328);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _AppBar2.default;

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _keys = __webpack_require__(303);

	var _keys2 = _interopRequireDefault(_keys);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	exports.getStyles = getStyles;

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _menu = __webpack_require__(367);

	var _menu2 = _interopRequireDefault(_menu);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var _context$muiTheme = context.muiTheme,
	      appBar = _context$muiTheme.appBar,
	      iconButtonSize = _context$muiTheme.button.iconButtonSize,
	      zIndex = _context$muiTheme.zIndex;

	  var flatButtonSize = 36;

	  var styles = {
	    root: {
	      position: 'relative',
	      zIndex: zIndex.appBar,
	      width: '100%',
	      display: 'flex',
	      backgroundColor: appBar.color,
	      paddingLeft: appBar.padding,
	      paddingRight: appBar.padding
	    },
	    title: {
	      whiteSpace: 'nowrap',
	      overflow: 'hidden',
	      textOverflow: 'ellipsis',
	      margin: 0,
	      paddingTop: 0,
	      letterSpacing: 0,
	      fontSize: 24,
	      fontWeight: appBar.titleFontWeight,
	      color: appBar.textColor,
	      height: appBar.height,
	      lineHeight: appBar.height + 'px'
	    },
	    mainElement: {
	      boxFlex: 1,
	      flex: '1'
	    },
	    iconButtonStyle: {
	      marginTop: (appBar.height - iconButtonSize) / 2,
	      marginRight: 8,
	      marginLeft: -16
	    },
	    iconButtonIconStyle: {
	      fill: appBar.textColor,
	      color: appBar.textColor
	    },
	    flatButton: {
	      color: appBar.textColor,
	      marginTop: (iconButtonSize - flatButtonSize) / 2 + 1
	    }
	  };

	  return styles;
	}

	var AppBar = function (_Component) {
	  (0, _inherits3.default)(AppBar, _Component);

	  function AppBar() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, AppBar);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
	      if (_this.props.onLeftIconButtonTouchTap) {
	        _this.props.onLeftIconButtonTouchTap(event);
	      }
	    }, _this.handleTouchTapRightIconButton = function (event) {
	      if (_this.props.onRightIconButtonTouchTap) {
	        _this.props.onRightIconButtonTouchTap(event);
	      }
	    }, _this.handleTitleTouchTap = function (event) {
	      if (_this.props.onTitleTouchTap) {
	        _this.props.onTitleTouchTap(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(AppBar, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      process.env.NODE_ENV !== "production" ? (0, _warning2.default)(!this.props.iconElementLeft || !this.props.iconClassNameLeft, 'Material-UI: Properties iconElementLeft\n      and iconClassNameLeft cannot be simultaneously defined. Please use one or the other.') : void 0;

	      process.env.NODE_ENV !== "production" ? (0, _warning2.default)(!this.props.iconElementRight || !this.props.iconClassNameRight, 'Material-UI: Properties iconElementRight\n      and iconClassNameRight cannot be simultaneously defined. Please use one or the other.') : void 0;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          title = _props.title,
	          titleStyle = _props.titleStyle,
	          iconStyleLeft = _props.iconStyleLeft,
	          iconStyleRight = _props.iconStyleRight,
	          onTitleTouchTap = _props.onTitleTouchTap,
	          showMenuIconButton = _props.showMenuIconButton,
	          iconElementLeft = _props.iconElementLeft,
	          iconElementRight = _props.iconElementRight,
	          iconClassNameLeft = _props.iconClassNameLeft,
	          iconClassNameRight = _props.iconClassNameRight,
	          onLeftIconButtonTouchTap = _props.onLeftIconButtonTouchTap,
	          onRightIconButtonTouchTap = _props.onRightIconButtonTouchTap,
	          className = _props.className,
	          style = _props.style,
	          zDepth = _props.zDepth,
	          children = _props.children,
	          other = (0, _objectWithoutProperties3.default)(_props, ['title', 'titleStyle', 'iconStyleLeft', 'iconStyleRight', 'onTitleTouchTap', 'showMenuIconButton', 'iconElementLeft', 'iconElementRight', 'iconClassNameLeft', 'iconClassNameRight', 'onLeftIconButtonTouchTap', 'onRightIconButtonTouchTap', 'className', 'style', 'zDepth', 'children']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var menuElementLeft = void 0;
	      var menuElementRight = void 0;

	      // If the title is a string, wrap in an h1 tag.
	      // If not, wrap in a div tag.
	      var titleComponent = typeof title === 'string' || title instanceof String ? 'h1' : 'div';

	      var titleElement = _react2.default.createElement(titleComponent, {
	        onTouchTap: this.handleTitleTouchTap,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.title, styles.mainElement, titleStyle))
	      }, title);

	      var iconLeftStyle = (0, _simpleAssign2.default)({}, styles.iconButtonStyle, iconStyleLeft);

	      if (showMenuIconButton) {
	        if (iconElementLeft) {
	          var iconElementLeftProps = {};

	          if (iconElementLeft.type.muiName === 'IconButton') {
	            var iconElemLeftChildren = iconElementLeft.props.children;
	            var iconButtonIconStyle = !(iconElemLeftChildren && iconElemLeftChildren.props && iconElemLeftChildren.props.color) ? styles.iconButtonIconStyle : null;

	            iconElementLeftProps.iconStyle = (0, _simpleAssign2.default)({}, iconButtonIconStyle, iconElementLeft.props.iconStyle);
	          }

	          if (!iconElementLeft.props.onTouchTap && this.props.onLeftIconButtonTouchTap) {
	            iconElementLeftProps.onTouchTap = this.handleTouchTapLeftIconButton;
	          }

	          menuElementLeft = _react2.default.createElement('div', { style: prepareStyles(iconLeftStyle) }, (0, _keys2.default)(iconElementLeftProps).length > 0 ? (0, _react.cloneElement)(iconElementLeft, iconElementLeftProps) : iconElementLeft);
	        } else {
	          menuElementLeft = _react2.default.createElement(_IconButton2.default, {
	            style: iconLeftStyle,
	            iconStyle: styles.iconButtonIconStyle,
	            iconClassName: iconClassNameLeft,
	            onTouchTap: this.handleTouchTapLeftIconButton
	          }, iconClassNameLeft ? '' : _react2.default.createElement(_menu2.default, { style: (0, _simpleAssign2.default)({}, styles.iconButtonIconStyle) }));
	        }
	      }

	      var iconRightStyle = (0, _simpleAssign2.default)({}, styles.iconButtonStyle, {
	        marginRight: -16,
	        marginLeft: 'auto'
	      }, iconStyleRight);

	      if (iconElementRight) {
	        var iconElementRightProps = {};

	        switch (iconElementRight.type.muiName) {
	          case 'IconMenu':
	          case 'IconButton':
	            var iconElemRightChildren = iconElementRight.props.children;
	            var _iconButtonIconStyle = !(iconElemRightChildren && iconElemRightChildren.props && iconElemRightChildren.props.color) ? styles.iconButtonIconStyle : null;

	            iconElementRightProps.iconStyle = (0, _simpleAssign2.default)({}, _iconButtonIconStyle, iconElementRight.props.iconStyle);
	            break;

	          case 'FlatButton':
	            iconElementRightProps.style = (0, _simpleAssign2.default)({}, styles.flatButton, iconElementRight.props.style);
	            break;

	          default:
	        }

	        if (!iconElementRight.props.onTouchTap && this.props.onRightIconButtonTouchTap) {
	          iconElementRightProps.onTouchTap = this.handleTouchTapRightIconButton;
	        }

	        menuElementRight = _react2.default.createElement('div', { style: prepareStyles(iconRightStyle) }, (0, _keys2.default)(iconElementRightProps).length > 0 ? (0, _react.cloneElement)(iconElementRight, iconElementRightProps) : iconElementRight);
	      } else if (iconClassNameRight) {
	        menuElementRight = _react2.default.createElement(_IconButton2.default, {
	          style: iconRightStyle,
	          iconStyle: styles.iconButtonIconStyle,
	          iconClassName: iconClassNameRight,
	          onTouchTap: this.handleTouchTapRightIconButton
	        });
	      }

	      return _react2.default.createElement(_Paper2.default, (0, _extends3.default)({}, other, {
	        rounded: false,
	        className: className,
	        style: (0, _simpleAssign2.default)({}, styles.root, style),
	        zDepth: zDepth
	      }), menuElementLeft, titleElement, menuElementRight, children);
	    }
	  }]);
	  return AppBar;
	}(_react.Component);

	AppBar.muiName = 'AppBar';
	AppBar.defaultProps = {
	  showMenuIconButton: true,
	  title: '',
	  zDepth: 1
	};
	AppBar.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? AppBar.propTypes = {
	  /**
	   * Can be used to render a tab inside an app bar for instance.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * Applied to the app bar's root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * The classname of the icon on the left of the app bar.
	   * If you are using a stylesheet for your icons, enter the class name for the icon to be used here.
	   */
	  iconClassNameLeft: _react.PropTypes.string,
	  /**
	   * Similiar to the iconClassNameLeft prop except that
	   * it applies to the icon displayed on the right of the app bar.
	   */
	  iconClassNameRight: _react.PropTypes.string,
	  /**
	   * The custom element to be displayed on the left side of the
	   * app bar such as an SvgIcon.
	   */
	  iconElementLeft: _react.PropTypes.element,
	  /**
	   * Similiar to the iconElementLeft prop except that this element is displayed on the right of the app bar.
	   */
	  iconElementRight: _react.PropTypes.element,
	  /**
	   * Override the inline-styles of the element displayed on the left side of the app bar.
	   */
	  iconStyleLeft: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the element displayed on the right side of the app bar.
	   */
	  iconStyleRight: _react.PropTypes.object,
	  /**
	   * Callback function for when the left icon is selected via a touch tap.
	   *
	   * @param {object} event TouchTap event targeting the left `IconButton`.
	   */
	  onLeftIconButtonTouchTap: _react.PropTypes.func,
	  /**
	   * Callback function for when the right icon is selected via a touch tap.
	   *
	   * @param {object} event TouchTap event targeting the right `IconButton`.
	   */
	  onRightIconButtonTouchTap: _react.PropTypes.func,
	  /**
	   * Callback function for when the title text is selected via a touch tap.
	   *
	   * @param {object} event TouchTap event targeting the `title` node.
	   */
	  onTitleTouchTap: _react.PropTypes.func,
	  /**
	   * Determines whether or not to display the Menu icon next to the title.
	   * Setting this prop to false will hide the icon.
	   */
	  showMenuIconButton: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The title to display on the app bar.
	   */
	  title: _react.PropTypes.node,
	  /**
	   * Override the inline-styles of the app bar's title element.
	   */
	  titleStyle: _react.PropTypes.object,
	  /**
	   * The zDepth of the component.
	   * The shadow of the app bar is also dependent on this property.
	   */
	  zDepth: _propTypes2.default.zDepth
	} : void 0;
	exports.default = AppBar;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _assign = __webpack_require__(330);

	var _assign2 = _interopRequireDefault(_assign);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(331), __esModule: true };

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(332);
	module.exports = __webpack_require__(190).Object.assign;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(188);

	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(333) });

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)

	var getKeys = __webpack_require__(209),
	    gOPS = __webpack_require__(256),
	    pIE = __webpack_require__(257),
	    toObject = __webpack_require__(225),
	    IObject = __webpack_require__(212),
	    $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(199)(function () {
	  var A = {},
	      B = {},
	      S = Symbol(),
	      K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) {
	    B[k] = k;
	  });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) {
	  // eslint-disable-line no-unused-vars
	  var T = toObject(target),
	      aLen = arguments.length,
	      index = 1,
	      getSymbols = gOPS.f,
	      isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]),
	        keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
	        length = keys.length,
	        j = 0,
	        key;
	    while (length > j) {
	      if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	    }
	  }return T;
	} : $assign;

/***/ },
/* 334 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

/***/ },
/* 335 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	  return target;
	};

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _IconButton = __webpack_require__(337);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _IconButton2.default;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _EnhancedButton = __webpack_require__(340);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _FontIcon = __webpack_require__(364);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _Tooltip = __webpack_require__(366);

	var _Tooltip2 = _interopRequireDefault(_Tooltip);

	var _childUtils = __webpack_require__(341);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var baseTheme = context.muiTheme.baseTheme;

	  return {
	    root: {
	      position: 'relative',
	      boxSizing: 'border-box',
	      overflow: 'visible',
	      transition: _transitions2.default.easeOut(),
	      padding: baseTheme.spacing.iconSize / 2,
	      width: baseTheme.spacing.iconSize * 2,
	      height: baseTheme.spacing.iconSize * 2,
	      fontSize: 0
	    },
	    tooltip: {
	      boxSizing: 'border-box'
	    },
	    overlay: {
	      position: 'relative',
	      top: 0,
	      width: '100%',
	      height: '100%',
	      background: baseTheme.palette.disabledColor
	    },
	    disabled: {
	      color: baseTheme.palette.disabledColor,
	      fill: baseTheme.palette.disabledColor,
	      cursor: 'not-allowed'
	    }
	  };
	}

	var IconButton = function (_Component) {
	  (0, _inherits3.default)(IconButton, _Component);

	  function IconButton() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, IconButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false,
	      isKeyboardFocused: false,
	      // Not to be confonded with the touch property.
	      // This state is to determined if it's a mobile device.
	      touch: false,
	      tooltipShown: false
	    }, _this.handleBlur = function (event) {
	      _this.hideTooltip();
	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    }, _this.handleFocus = function (event) {
	      _this.showTooltip();
	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	    }, _this.handleMouseLeave = function (event) {
	      if (!_this.button.isKeyboardFocused()) {
	        _this.hideTooltip();
	      }
	      _this.setState({ hovered: false });
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(event);
	      }
	    }, _this.handleMouseOut = function (event) {
	      if (_this.props.disabled) _this.hideTooltip();
	      if (_this.props.onMouseOut) _this.props.onMouseOut(event);
	    }, _this.handleMouseEnter = function (event) {
	      _this.showTooltip();

	      // Cancel hover styles for touch devices
	      if (!_this.state.touch) {
	        _this.setState({ hovered: true });
	      }
	      if (_this.props.onMouseEnter) {
	        _this.props.onMouseEnter(event);
	      }
	    }, _this.handleTouchStart = function (event) {
	      _this.setState({ touch: true });
	      _this.props.onTouchStart(event);
	    }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
	      var _this$props = _this.props,
	          disabled = _this$props.disabled,
	          onFocus = _this$props.onFocus,
	          onBlur = _this$props.onBlur,
	          onKeyboardFocus = _this$props.onKeyboardFocus;

	      if (isKeyboardFocused && !disabled) {
	        _this.showTooltip();
	        if (onFocus) {
	          onFocus(event);
	        }
	      } else {
	        _this.hideTooltip();
	        if (onBlur) {
	          onBlur(event);
	        }
	      }

	      _this.setState({ isKeyboardFocused: isKeyboardFocused });
	      if (onKeyboardFocus) {
	        onKeyboardFocus(event, isKeyboardFocused);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(IconButton, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.disabled) {
	        this.setState({ hovered: false });
	      }
	    }
	  }, {
	    key: 'setKeyboardFocus',
	    value: function setKeyboardFocus() {
	      this.button.setKeyboardFocus();
	    }
	  }, {
	    key: 'showTooltip',
	    value: function showTooltip() {
	      if (this.props.tooltip) {
	        this.setState({ tooltipShown: true });
	      }
	    }
	  }, {
	    key: 'hideTooltip',
	    value: function hideTooltip() {
	      if (this.props.tooltip) this.setState({ tooltipShown: false });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          disabled = _props.disabled,
	          hoveredStyle = _props.hoveredStyle,
	          disableTouchRipple = _props.disableTouchRipple,
	          children = _props.children,
	          iconClassName = _props.iconClassName,
	          style = _props.style,
	          tooltip = _props.tooltip,
	          tooltipPositionProp = _props.tooltipPosition,
	          tooltipStyles = _props.tooltipStyles,
	          touch = _props.touch,
	          iconStyle = _props.iconStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['disabled', 'hoveredStyle', 'disableTouchRipple', 'children', 'iconClassName', 'style', 'tooltip', 'tooltipPosition', 'tooltipStyles', 'touch', 'iconStyle']);

	      var fonticon = void 0;

	      var styles = getStyles(this.props, this.context);
	      var tooltipPosition = tooltipPositionProp.split('-');

	      var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;

	      var mergedRootStyles = (0, _simpleAssign2.default)(styles.root, hovered ? hoveredStyle : {}, style);

	      var tooltipElement = tooltip ? _react2.default.createElement(_Tooltip2.default, {
	        label: tooltip,
	        show: this.state.tooltipShown,
	        touch: touch,
	        style: (0, _simpleAssign2.default)(styles.tooltip, tooltipStyles),
	        verticalPosition: tooltipPosition[0],
	        horizontalPosition: tooltipPosition[1]
	      }) : null;

	      if (iconClassName) {
	        var iconHoverColor = iconStyle.iconHoverColor,
	            iconStyleFontIcon = (0, _objectWithoutProperties3.default)(iconStyle, ['iconHoverColor']);

	        fonticon = _react2.default.createElement(_FontIcon2.default, {
	          className: iconClassName,
	          hoverColor: disabled ? null : iconHoverColor,
	          style: (0, _simpleAssign2.default)({}, disabled && styles.disabled, iconStyleFontIcon),
	          color: this.context.muiTheme.baseTheme.palette.textColor
	        }, children);
	      }

	      var childrenStyle = disabled ? (0, _simpleAssign2.default)({}, iconStyle, styles.disabled) : iconStyle;

	      return _react2.default.createElement(_EnhancedButton2.default, (0, _extends3.default)({
	        ref: function ref(_ref2) {
	          return _this2.button = _ref2;
	        }
	      }, other, {
	        centerRipple: true,
	        disabled: disabled,
	        onTouchStart: this.handleTouchStart,
	        style: mergedRootStyles,
	        disableTouchRipple: disableTouchRipple,
	        onBlur: this.handleBlur,
	        onFocus: this.handleFocus,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseEnter: this.handleMouseEnter,
	        onMouseOut: this.handleMouseOut,
	        onKeyboardFocus: this.handleKeyboardFocus
	      }), tooltipElement, fonticon, (0, _childUtils.extendChildren)(children, {
	        style: childrenStyle
	      }));
	    }
	  }]);
	  return IconButton;
	}(_react.Component);

	IconButton.muiName = 'IconButton';
	IconButton.defaultProps = {
	  disabled: false,
	  disableTouchRipple: false,
	  iconStyle: {},
	  tooltipPosition: 'bottom-center',
	  touch: false
	};
	IconButton.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? IconButton.propTypes = {
	  /**
	   * Can be used to pass a `FontIcon` element as the icon for the button.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The CSS class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * If true, the element's ripple effect will be disabled.
	   */
	  disableTouchRipple: _react.PropTypes.bool,
	  /**
	   * If true, the element will be disabled.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element when the component is hovered.
	   */
	  hoveredStyle: _react.PropTypes.object,
	  /**
	   * The URL to link to when the button is clicked.
	   */
	  href: _react.PropTypes.string,
	  /**
	   * The CSS class name of the icon. Used for setting the icon with a stylesheet.
	   */
	  iconClassName: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the icon element.
	   * Note: you can specify iconHoverColor as a String inside this object.
	   */
	  iconStyle: _react.PropTypes.object,
	  /** @ignore */
	  onBlur: _react.PropTypes.func,
	  /** @ignore */
	  onFocus: _react.PropTypes.func,
	  /**
	   * Callback function fired when the element is focused or blurred by the keyboard.
	   *
	   * @param {object} event `focus` or `blur` event targeting the element.
	   * @param {boolean} keyboardFocused Indicates whether the element is focused.
	   */
	  onKeyboardFocus: _react.PropTypes.func,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /** @ignore */
	  onMouseOut: _react.PropTypes.func,
	  /** @ignore */
	  onTouchStart: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The text to supply to the element's tooltip.
	   */
	  tooltip: _react.PropTypes.node,
	  /**
	   * The vertical and horizontal positions, respectively, of the element's tooltip.
	   * Possible values are: "bottom-center", "top-center", "bottom-right", "top-right",
	   * "bottom-left", and "top-left".
	   */
	  tooltipPosition: _propTypes2.default.cornersAndCenter,
	  /**
	   * Override the inline-styles of the tooltip element.
	   */
	  tooltipStyles: _react.PropTypes.object,
	  /**
	   * If true, increase the tooltip element's size. Useful for increasing tooltip
	   * readability on mobile devices.
	   */
	  touch: _react.PropTypes.bool
	} : void 0;
	exports.default = IconButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 338 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {

	  easeOutFunction: 'cubic-bezier(0.23, 1, 0.32, 1)',
	  easeInOutFunction: 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',

	  easeOut: function easeOut(duration, property, delay, easeFunction) {
	    easeFunction = easeFunction || this.easeOutFunction;

	    if (property && Object.prototype.toString.call(property) === '[object Array]') {
	      var transitions = '';
	      for (var i = 0; i < property.length; i++) {
	        if (transitions) transitions += ',';
	        transitions += this.create(duration, property[i], delay, easeFunction);
	      }

	      return transitions;
	    } else {
	      return this.create(duration, property, delay, easeFunction);
	    }
	  },
	  create: function create(duration, property, delay, easeFunction) {
	    duration = duration || '450ms';
	    property = property || 'all';
	    delay = delay || '0ms';
	    easeFunction = easeFunction || 'linear';

	    return property + ' ' + duration + ' ' + easeFunction + ' ' + delay;
	  }
	};

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var horizontal = _react.PropTypes.oneOf(['left', 'middle', 'right']);
	var vertical = _react.PropTypes.oneOf(['top', 'center', 'bottom']);

	exports.default = {

	  corners: _react.PropTypes.oneOf(['bottom-left', 'bottom-right', 'top-left', 'top-right']),

	  horizontal: horizontal,

	  vertical: vertical,

	  origin: _react.PropTypes.shape({
	    horizontal: horizontal,
	    vertical: vertical
	  }),

	  cornersAndCenter: _react.PropTypes.oneOf(['bottom-center', 'bottom-left', 'bottom-right', 'top-center', 'top-left', 'top-right']),

	  stringOrNumber: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),

	  zDepth: _react.PropTypes.oneOf([0, 1, 2, 3, 4, 5])

	};

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _childUtils = __webpack_require__(341);

	var _events = __webpack_require__(344);

	var _events2 = _interopRequireDefault(_events);

	var _keycode = __webpack_require__(345);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _FocusRipple = __webpack_require__(346);

	var _FocusRipple2 = _interopRequireDefault(_FocusRipple);

	var _TouchRipple = __webpack_require__(360);

	var _TouchRipple2 = _interopRequireDefault(_TouchRipple);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var styleInjected = false;
	var listening = false;
	var tabPressed = false;

	function injectStyle() {
	  if (!styleInjected) {
	    // Remove inner padding and border in Firefox 4+.
	    var style = document.createElement('style');
	    style.innerHTML = '\n      button::-moz-focus-inner,\n      input::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n      }\n    ';

	    document.body.appendChild(style);
	    styleInjected = true;
	  }
	}

	function listenForTabPresses() {
	  if (!listening) {
	    _events2.default.on(window, 'keydown', function (event) {
	      tabPressed = (0, _keycode2.default)(event) === 'tab';
	    });
	    listening = true;
	  }
	}

	var EnhancedButton = function (_Component) {
	  (0, _inherits3.default)(EnhancedButton, _Component);

	  function EnhancedButton() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, EnhancedButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = EnhancedButton.__proto__ || (0, _getPrototypeOf2.default)(EnhancedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isKeyboardFocused: false
	    }, _this.handleKeyDown = function (event) {
	      if (!_this.props.disabled && !_this.props.disableKeyboardFocus) {
	        if ((0, _keycode2.default)(event) === 'enter' && _this.state.isKeyboardFocused) {
	          _this.handleTouchTap(event);
	        }
	        if ((0, _keycode2.default)(event) === 'esc' && _this.state.isKeyboardFocused) {
	          _this.removeKeyboardFocus(event);
	        }
	      }
	      _this.props.onKeyDown(event);
	    }, _this.handleKeyUp = function (event) {
	      if (!_this.props.disabled && !_this.props.disableKeyboardFocus) {
	        if ((0, _keycode2.default)(event) === 'space' && _this.state.isKeyboardFocused) {
	          _this.handleTouchTap(event);
	        }
	      }
	      _this.props.onKeyUp(event);
	    }, _this.handleBlur = function (event) {
	      _this.cancelFocusTimeout();
	      _this.removeKeyboardFocus(event);
	      _this.props.onBlur(event);
	    }, _this.handleFocus = function (event) {
	      if (event) event.persist();
	      if (!_this.props.disabled && !_this.props.disableKeyboardFocus) {
	        // setTimeout is needed because the focus event fires first
	        // Wait so that we can capture if this was a keyboard focus
	        // or touch focus
	        _this.focusTimeout = setTimeout(function () {
	          if (tabPressed) {
	            _this.setKeyboardFocus(event);
	            tabPressed = false;
	          }
	        }, 150);

	        _this.props.onFocus(event);
	      }
	    }, _this.handleClick = function (event) {
	      if (!_this.props.disabled) {
	        tabPressed = false;
	        _this.props.onClick(event);
	      }
	    }, _this.handleTouchTap = function (event) {
	      _this.cancelFocusTimeout();
	      if (!_this.props.disabled) {
	        tabPressed = false;
	        _this.removeKeyboardFocus(event);
	        _this.props.onTouchTap(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(EnhancedButton, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          disabled = _props.disabled,
	          disableKeyboardFocus = _props.disableKeyboardFocus,
	          keyboardFocused = _props.keyboardFocused;

	      if (!disabled && keyboardFocused && !disableKeyboardFocus) {
	        this.setState({ isKeyboardFocused: true });
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      injectStyle();
	      listenForTabPresses();
	      if (this.state.isKeyboardFocused) {
	        this.refs.enhancedButton.focus();
	        this.props.onKeyboardFocus(null, true);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if ((nextProps.disabled || nextProps.disableKeyboardFocus) && this.state.isKeyboardFocused) {
	        this.setState({ isKeyboardFocused: false });
	        if (nextProps.onKeyboardFocus) {
	          nextProps.onKeyboardFocus(null, false);
	        }
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.focusTimeout);
	    }
	  }, {
	    key: 'isKeyboardFocused',
	    value: function isKeyboardFocused() {
	      return this.state.isKeyboardFocused;
	    }
	  }, {
	    key: 'removeKeyboardFocus',
	    value: function removeKeyboardFocus(event) {
	      if (this.state.isKeyboardFocused) {
	        this.setState({ isKeyboardFocused: false });
	        this.props.onKeyboardFocus(event, false);
	      }
	    }
	  }, {
	    key: 'setKeyboardFocus',
	    value: function setKeyboardFocus(event) {
	      if (!this.state.isKeyboardFocused) {
	        this.setState({ isKeyboardFocused: true });
	        this.props.onKeyboardFocus(event, true);
	      }
	    }
	  }, {
	    key: 'cancelFocusTimeout',
	    value: function cancelFocusTimeout() {
	      if (this.focusTimeout) {
	        clearTimeout(this.focusTimeout);
	        this.focusTimeout = null;
	      }
	    }
	  }, {
	    key: 'createButtonChildren',
	    value: function createButtonChildren() {
	      var _props2 = this.props,
	          centerRipple = _props2.centerRipple,
	          children = _props2.children,
	          disabled = _props2.disabled,
	          disableFocusRipple = _props2.disableFocusRipple,
	          disableKeyboardFocus = _props2.disableKeyboardFocus,
	          disableTouchRipple = _props2.disableTouchRipple,
	          focusRippleColor = _props2.focusRippleColor,
	          focusRippleOpacity = _props2.focusRippleOpacity,
	          touchRippleColor = _props2.touchRippleColor,
	          touchRippleOpacity = _props2.touchRippleOpacity;
	      var isKeyboardFocused = this.state.isKeyboardFocused;

	      // Focus Ripple

	      var focusRipple = isKeyboardFocused && !disabled && !disableFocusRipple && !disableKeyboardFocus ? _react2.default.createElement(_FocusRipple2.default, {
	        color: focusRippleColor,
	        opacity: focusRippleOpacity,
	        show: isKeyboardFocused
	      }) : undefined;

	      // Touch Ripple
	      var touchRipple = !disabled && !disableTouchRipple ? _react2.default.createElement(_TouchRipple2.default, {
	        centerRipple: centerRipple,
	        color: touchRippleColor,
	        opacity: touchRippleOpacity
	      }, children) : undefined;

	      return (0, _childUtils.createChildFragment)({
	        focusRipple: focusRipple,
	        touchRipple: touchRipple,
	        children: touchRipple ? undefined : children
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          centerRipple = _props3.centerRipple,
	          children = _props3.children,
	          containerElement = _props3.containerElement,
	          disabled = _props3.disabled,
	          disableFocusRipple = _props3.disableFocusRipple,
	          disableKeyboardFocus = _props3.disableKeyboardFocus,
	          disableTouchRipple = _props3.disableTouchRipple,
	          focusRippleColor = _props3.focusRippleColor,
	          focusRippleOpacity = _props3.focusRippleOpacity,
	          href = _props3.href,
	          keyboardFocused = _props3.keyboardFocused,
	          touchRippleColor = _props3.touchRippleColor,
	          touchRippleOpacity = _props3.touchRippleOpacity,
	          onBlur = _props3.onBlur,
	          onClick = _props3.onClick,
	          onFocus = _props3.onFocus,
	          onKeyUp = _props3.onKeyUp,
	          onKeyDown = _props3.onKeyDown,
	          onKeyboardFocus = _props3.onKeyboardFocus,
	          onTouchTap = _props3.onTouchTap,
	          style = _props3.style,
	          tabIndex = _props3.tabIndex,
	          type = _props3.type,
	          other = (0, _objectWithoutProperties3.default)(_props3, ['centerRipple', 'children', 'containerElement', 'disabled', 'disableFocusRipple', 'disableKeyboardFocus', 'disableTouchRipple', 'focusRippleColor', 'focusRippleOpacity', 'href', 'keyboardFocused', 'touchRippleColor', 'touchRippleOpacity', 'onBlur', 'onClick', 'onFocus', 'onKeyUp', 'onKeyDown', 'onKeyboardFocus', 'onTouchTap', 'style', 'tabIndex', 'type']);
	      var _context$muiTheme = this.context.muiTheme,
	          prepareStyles = _context$muiTheme.prepareStyles,
	          enhancedButton = _context$muiTheme.enhancedButton;

	      var mergedStyles = (0, _simpleAssign2.default)({
	        border: 10,
	        boxSizing: 'border-box',
	        display: 'inline-block',
	        fontFamily: this.context.muiTheme.baseTheme.fontFamily,
	        WebkitTapHighlightColor: enhancedButton.tapHighlightColor, // Remove mobile color flashing (deprecated)
	        cursor: disabled ? 'default' : 'pointer',
	        textDecoration: 'none',
	        margin: 0,
	        padding: 0,
	        outline: 'none',
	        fontSize: 'inherit',
	        fontWeight: 'inherit',
	        /**
	         * This is needed so that ripples do not bleed
	         * past border radius.
	         * See: http://stackoverflow.com/questions/17298739/
	         * css-overflow-hidden-not-working-in-chrome-when-parent-has-border-radius-and-chil
	         */
	        transform: disableTouchRipple && disableFocusRipple ? null : 'translate(0, 0)',
	        verticalAlign: href ? 'middle' : null
	      }, style);

	      // Passing both background:none & backgroundColor can break due to object iteration order
	      if (!mergedStyles.backgroundColor && !mergedStyles.background) {
	        mergedStyles.background = 'none';
	      }

	      if (disabled && href) {
	        return _react2.default.createElement('span', (0, _extends3.default)({}, other, {
	          style: mergedStyles
	        }), children);
	      }

	      var buttonProps = (0, _extends3.default)({}, other, {
	        style: prepareStyles(mergedStyles),
	        ref: 'enhancedButton',
	        disabled: disabled,
	        href: href,
	        onBlur: this.handleBlur,
	        onClick: this.handleClick,
	        onFocus: this.handleFocus,
	        onKeyUp: this.handleKeyUp,
	        onKeyDown: this.handleKeyDown,
	        onTouchTap: this.handleTouchTap,
	        tabIndex: disabled || disableKeyboardFocus ? -1 : tabIndex
	      });

	      var buttonChildren = this.createButtonChildren();

	      if (_react2.default.isValidElement(containerElement)) {
	        return _react2.default.cloneElement(containerElement, buttonProps, buttonChildren);
	      }

	      if (!href && containerElement === 'button') {
	        buttonProps.type = type;
	      }

	      return _react2.default.createElement(href ? 'a' : containerElement, buttonProps, buttonChildren);
	    }
	  }]);
	  return EnhancedButton;
	}(_react.Component);

	EnhancedButton.defaultProps = {
	  containerElement: 'button',
	  onBlur: function onBlur() {},
	  onClick: function onClick() {},
	  onFocus: function onFocus() {},
	  onKeyDown: function onKeyDown() {},
	  onKeyUp: function onKeyUp() {},
	  onKeyboardFocus: function onKeyboardFocus() {},
	  onMouseDown: function onMouseDown() {},
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  onMouseUp: function onMouseUp() {},
	  onTouchEnd: function onTouchEnd() {},
	  onTouchStart: function onTouchStart() {},
	  onTouchTap: function onTouchTap() {},
	  tabIndex: 0,
	  type: 'button'
	};
	EnhancedButton.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? EnhancedButton.propTypes = {
	  centerRipple: _react.PropTypes.bool,
	  children: _react.PropTypes.node,
	  containerElement: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),
	  disableFocusRipple: _react.PropTypes.bool,
	  disableKeyboardFocus: _react.PropTypes.bool,
	  disableTouchRipple: _react.PropTypes.bool,
	  disabled: _react.PropTypes.bool,
	  focusRippleColor: _react.PropTypes.string,
	  focusRippleOpacity: _react.PropTypes.number,
	  href: _react.PropTypes.string,
	  keyboardFocused: _react.PropTypes.bool,
	  onBlur: _react.PropTypes.func,
	  onClick: _react.PropTypes.func,
	  onFocus: _react.PropTypes.func,
	  onKeyDown: _react.PropTypes.func,
	  onKeyUp: _react.PropTypes.func,
	  onKeyboardFocus: _react.PropTypes.func,
	  onMouseDown: _react.PropTypes.func,
	  onMouseEnter: _react.PropTypes.func,
	  onMouseLeave: _react.PropTypes.func,
	  onMouseUp: _react.PropTypes.func,
	  onTouchEnd: _react.PropTypes.func,
	  onTouchStart: _react.PropTypes.func,
	  onTouchTap: _react.PropTypes.func,
	  style: _react.PropTypes.object,
	  tabIndex: _react.PropTypes.number,
	  touchRippleColor: _react.PropTypes.string,
	  touchRippleOpacity: _react.PropTypes.number,
	  type: _react.PropTypes.string
	} : void 0;
	exports.default = EnhancedButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createChildFragment = createChildFragment;
	exports.extendChildren = extendChildren;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactAddonsCreateFragment = __webpack_require__(342);

	var _reactAddonsCreateFragment2 = _interopRequireDefault(_reactAddonsCreateFragment);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function createChildFragment(fragments) {
	  var newFragments = {};
	  var validChildrenCount = 0;
	  var firstKey = void 0;

	  // Only create non-empty key fragments
	  for (var key in fragments) {
	    var currentChild = fragments[key];

	    if (currentChild) {
	      if (validChildrenCount === 0) firstKey = key;
	      newFragments[key] = currentChild;
	      validChildrenCount++;
	    }
	  }

	  if (validChildrenCount === 0) return undefined;
	  if (validChildrenCount === 1) return newFragments[firstKey];
	  return (0, _reactAddonsCreateFragment2.default)(newFragments);
	}

	function extendChildren(children, extendedProps, extendedChildren) {
	  return _react2.default.Children.map(children, function (child) {
	    if (!_react2.default.isValidElement(child)) {
	      return child;
	    }

	    var newProps = typeof extendedProps === 'function' ? extendedProps(child) : extendedProps;

	    var newChildren = typeof extendedChildren === 'function' ? extendedChildren(child) : extendedChildren ? extendedChildren : child.props.children;

	    return _react2.default.cloneElement(child, newProps, newChildren);
	  });
	}

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(343).create;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _prodInvariant = __webpack_require__(7);

	var ReactChildren = __webpack_require__(5);
	var ReactElement = __webpack_require__(9);

	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set or fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is an array.
	 */

	var numericPropertyRegex = /^\d+$/;

	var warnedAboutNumeric = false;

	var ReactFragment = {
	  /**
	   * Wrap a keyed object in an opaque proxy that warns you if you access any
	   * of its properties.
	   * See https://facebook.github.io/react/docs/create-fragment.html
	   */
	  create: function create(object) {
	    if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object' || !object || Array.isArray(object)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : void 0;
	      return object;
	    }
	    if (ReactElement.isValidElement(object)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : void 0;
	      return object;
	    }

	    !(object.nodeType !== 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM elements are not valid children of React components.') : _prodInvariant('0') : void 0;

	    var result = [];

	    for (var key in object) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : void 0;
	          warnedAboutNumeric = true;
	        }
	      }
	      ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
	    }

	    return result;
	  }
	};

	module.exports = ReactFragment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 344 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  once: function once(el, type, callback) {
	    var typeArray = type ? type.split(' ') : [];
	    var recursiveFunction = function recursiveFunction(event) {
	      event.target.removeEventListener(event.type, recursiveFunction);
	      return callback(event);
	    };

	    for (var i = typeArray.length - 1; i >= 0; i--) {
	      this.on(el, typeArray[i], recursiveFunction);
	    }
	  },
	  on: function on(el, type, callback) {
	    if (el.addEventListener) {
	      el.addEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.attachEvent('on' + type, function () {
	        callback.call(el);
	      });
	    }
	  },
	  off: function off(el, type, callback) {
	    if (el.removeEventListener) {
	      el.removeEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.detachEvent('on' + type, callback);
	    }
	  },
	  isKeyboard: function isKeyboard(event) {
	    return ['keydown', 'keypress', 'keyup'].indexOf(event.type) !== -1;
	  }
	};

/***/ },
/* 345 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	// Source: http://jsfiddle.net/vWx8V/
	// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

	/**
	 * Conenience method returns corresponding value for given keyName or keyCode.
	 *
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Mixed}
	 * @api public
	 */

	exports = module.exports = function (searchInput) {
	  // Keyboard Events
	  if (searchInput && 'object' === (typeof searchInput === 'undefined' ? 'undefined' : _typeof(searchInput))) {
	    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;
	    if (hasKeyCode) searchInput = hasKeyCode;
	  }

	  // Numbers
	  if ('number' === typeof searchInput) return names[searchInput];

	  // Everything else (cast to string)
	  var search = String(searchInput);

	  // check codes
	  var foundNamedKey = codes[search.toLowerCase()];
	  if (foundNamedKey) return foundNamedKey;

	  // check aliases
	  var foundNamedKey = aliases[search.toLowerCase()];
	  if (foundNamedKey) return foundNamedKey;

	  // weird character?
	  if (search.length === 1) return search.charCodeAt(0);

	  return undefined;
	};

	/**
	 * Get by name
	 *
	 *   exports.code['enter'] // => 13
	 */

	var codes = exports.code = exports.codes = {
	  'backspace': 8,
	  'tab': 9,
	  'enter': 13,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'pause/break': 19,
	  'caps lock': 20,
	  'esc': 27,
	  'space': 32,
	  'page up': 33,
	  'page down': 34,
	  'end': 35,
	  'home': 36,
	  'left': 37,
	  'up': 38,
	  'right': 39,
	  'down': 40,
	  'insert': 45,
	  'delete': 46,
	  'command': 91,
	  'left command': 91,
	  'right command': 93,
	  'numpad *': 106,
	  'numpad +': 107,
	  'numpad -': 109,
	  'numpad .': 110,
	  'numpad /': 111,
	  'num lock': 144,
	  'scroll lock': 145,
	  'my computer': 182,
	  'my calculator': 183,
	  ';': 186,
	  '=': 187,
	  ',': 188,
	  '-': 189,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '[': 219,
	  '\\': 220,
	  ']': 221,
	  "'": 222
	};

	// Helper aliases

	var aliases = exports.aliases = {
	  'windows': 91,
	  '⇧': 16,
	  '⌥': 18,
	  '⌃': 17,
	  '⌘': 91,
	  'ctl': 17,
	  'control': 17,
	  'option': 18,
	  'pause': 19,
	  'break': 19,
	  'caps': 20,
	  'return': 13,
	  'escape': 27,
	  'spc': 32,
	  'pgup': 33,
	  'pgdn': 34,
	  'ins': 45,
	  'del': 46,
	  'cmd': 91
	};

	/*!
	 * Programatically add the following
	 */

	// lower case chars
	for (i = 97; i < 123; i++) {
	  codes[String.fromCharCode(i)] = i - 32;
	} // numbers
	for (var i = 48; i < 58; i++) {
	  codes[i - 48] = i;
	} // function keys
	for (i = 1; i < 13; i++) {
	  codes['f' + i] = i + 111;
	} // numpad keys
	for (i = 0; i < 10; i++) {
	  codes['numpad ' + i] = i + 96;
	} /**
	   * Get by code
	   *
	   *   exports.name[13] // => 'Enter'
	   */

	var names = exports.names = exports.title = {}; // title for backward compat

	// Create reverse mapping
	for (i in codes) {
	  names[codes[i]] = i;
	} // Add aliases
	for (var alias in aliases) {
	  codes[alias] = aliases[alias];
	}

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(347);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _autoPrefix = __webpack_require__(348);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _ScaleIn = __webpack_require__(349);

	var _ScaleIn2 = _interopRequireDefault(_ScaleIn);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var pulsateDuration = 750;

	var FocusRipple = function (_Component) {
	  (0, _inherits3.default)(FocusRipple, _Component);

	  function FocusRipple() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, FocusRipple);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FocusRipple.__proto__ || (0, _getPrototypeOf2.default)(FocusRipple)).call.apply(_ref, [this].concat(args))), _this), _this.pulsate = function () {
	      var innerCircle = _reactDom2.default.findDOMNode(_this.refs.innerCircle);
	      if (!innerCircle) return;

	      var startScale = 'scale(1)';
	      var endScale = 'scale(0.85)';
	      var currentScale = innerCircle.style.transform || startScale;
	      var nextScale = currentScale === startScale ? endScale : startScale;

	      _autoPrefix2.default.set(innerCircle.style, 'transform', nextScale);
	      _this.timeout = setTimeout(_this.pulsate, pulsateDuration);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(FocusRipple, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.show) {
	        this.setRippleSize();
	        this.pulsate();
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.props.show) {
	        this.setRippleSize();
	        this.pulsate();
	      } else {
	        if (this.timeout) clearTimeout(this.timeout);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.timeout);
	    }
	  }, {
	    key: 'getRippleElement',
	    value: function getRippleElement(props) {
	      var color = props.color,
	          innerStyle = props.innerStyle,
	          opacity = props.opacity;
	      var _context$muiTheme = this.context.muiTheme,
	          prepareStyles = _context$muiTheme.prepareStyles,
	          ripple = _context$muiTheme.ripple;

	      var innerStyles = (0, _simpleAssign2.default)({
	        position: 'absolute',
	        height: '100%',
	        width: '100%',
	        borderRadius: '50%',
	        opacity: opacity ? opacity : 0.16,
	        backgroundColor: color || ripple.color,
	        transition: _transitions2.default.easeOut(pulsateDuration + 'ms', 'transform', null, _transitions2.default.easeInOutFunction)
	      }, innerStyle);

	      return _react2.default.createElement('div', { ref: 'innerCircle', style: prepareStyles((0, _simpleAssign2.default)({}, innerStyles)) });
	    }
	  }, {
	    key: 'setRippleSize',
	    value: function setRippleSize() {
	      var el = _reactDom2.default.findDOMNode(this.refs.innerCircle);
	      var height = el.offsetHeight;
	      var width = el.offsetWidth;
	      var size = Math.max(height, width);

	      var oldTop = 0;
	      // For browsers that don't support endsWith()
	      if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {
	        oldTop = parseInt(el.style.top);
	      }
	      el.style.height = size + 'px';
	      el.style.top = height / 2 - size / 2 + oldTop + 'px';
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          show = _props.show,
	          style = _props.style;

	      var mergedRootStyles = (0, _simpleAssign2.default)({
	        height: '100%',
	        width: '100%',
	        position: 'absolute',
	        top: 0,
	        left: 0
	      }, style);

	      var ripple = show ? this.getRippleElement(this.props) : null;

	      return _react2.default.createElement(_ScaleIn2.default, {
	        maxScale: 0.85,
	        style: mergedRootStyles
	      }, ripple);
	    }
	  }]);
	  return FocusRipple;
	}(_react.Component);

	FocusRipple.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? FocusRipple.propTypes = {
	  color: _react.PropTypes.string,
	  innerStyle: _react.PropTypes.object,
	  opacity: _react.PropTypes.number,
	  show: _react.PropTypes.bool,
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = FocusRipple;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shallowEqual = __webpack_require__(123);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _shallowEqual2.default;

/***/ },
/* 348 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  set: function set(style, key, value) {
	    style[key] = value;
	  }
	};

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactAddonsTransitionGroup = __webpack_require__(350);

	var _reactAddonsTransitionGroup2 = _interopRequireDefault(_reactAddonsTransitionGroup);

	var _ScaleInChild = __webpack_require__(359);

	var _ScaleInChild2 = _interopRequireDefault(_ScaleInChild);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var ScaleIn = function (_Component) {
	  (0, _inherits3.default)(ScaleIn, _Component);

	  function ScaleIn() {
	    (0, _classCallCheck3.default)(this, ScaleIn);
	    return (0, _possibleConstructorReturn3.default)(this, (ScaleIn.__proto__ || (0, _getPrototypeOf2.default)(ScaleIn)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(ScaleIn, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          childStyle = _props.childStyle,
	          enterDelay = _props.enterDelay,
	          maxScale = _props.maxScale,
	          minScale = _props.minScale,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'childStyle', 'enterDelay', 'maxScale', 'minScale', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        position: 'relative',
	        overflow: 'hidden',
	        height: '100%'
	      }, style);

	      var newChildren = _react2.default.Children.map(children, function (child) {
	        return _react2.default.createElement(_ScaleInChild2.default, {
	          key: child.key,
	          enterDelay: enterDelay,
	          maxScale: maxScale,
	          minScale: minScale,
	          style: childStyle
	        }, child);
	      });

	      return _react2.default.createElement(_reactAddonsTransitionGroup2.default, (0, _extends3.default)({}, other, {
	        style: prepareStyles(mergedRootStyles),
	        component: 'div'
	      }), newChildren);
	    }
	  }]);
	  return ScaleIn;
	}(_react.Component);

	ScaleIn.defaultProps = {
	  enterDelay: 0
	};
	ScaleIn.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? ScaleIn.propTypes = {
	  childStyle: _react.PropTypes.object,
	  children: _react.PropTypes.node,
	  enterDelay: _react.PropTypes.number,
	  maxScale: _react.PropTypes.number,
	  minScale: _react.PropTypes.number,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = ScaleIn;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(351);

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _assign = __webpack_require__(4);

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(2);
	var ReactAddonsDOMDependencies = __webpack_require__(352);
	var ReactTransitionChildMapping = __webpack_require__(357);

	var emptyFunction = __webpack_require__(12);

	/**
	 * A basis for animations. When children are declaratively added or removed,
	 * special lifecycle hooks are called.
	 * See https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup
	 */

	var ReactTransitionGroup = function (_React$Component) {
	  _inherits(ReactTransitionGroup, _React$Component);

	  function ReactTransitionGroup() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, ReactTransitionGroup);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      // TODO: can we get useful debug information to show at this point?
	      children: ReactTransitionChildMapping.getChildMapping(_this.props.children)
	    }, _this.performAppear = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;

	      var component = _this.refs[key];

	      if (component.componentWillAppear) {
	        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key));
	      } else {
	        _this._handleDoneAppearing(key);
	      }
	    }, _this._handleDoneAppearing = function (key) {
	      var component = _this.refs[key];
	      if (component.componentDidAppear) {
	        component.componentDidAppear();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping;
	      if (process.env.NODE_ENV !== 'production') {
	        currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children, ReactAddonsDOMDependencies.getReactInstanceMap().get(_this)._debugID);
	      } else {
	        currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children);
	      }

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully appeared. Remove it.
	        _this.performLeave(key);
	      }
	    }, _this.performEnter = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;

	      var component = _this.refs[key];

	      if (component.componentWillEnter) {
	        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key));
	      } else {
	        _this._handleDoneEntering(key);
	      }
	    }, _this._handleDoneEntering = function (key) {
	      var component = _this.refs[key];
	      if (component.componentDidEnter) {
	        component.componentDidEnter();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping;
	      if (process.env.NODE_ENV !== 'production') {
	        currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children, ReactAddonsDOMDependencies.getReactInstanceMap().get(_this)._debugID);
	      } else {
	        currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children);
	      }

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully entered. Remove it.
	        _this.performLeave(key);
	      }
	    }, _this.performLeave = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;

	      var component = _this.refs[key];
	      if (component.componentWillLeave) {
	        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key));
	      } else {
	        // Note that this is somewhat dangerous b/c it calls setState()
	        // again, effectively mutating the component before all the work
	        // is done.
	        _this._handleDoneLeaving(key);
	      }
	    }, _this._handleDoneLeaving = function (key) {
	      var component = _this.refs[key];

	      if (component.componentDidLeave) {
	        component.componentDidLeave();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping;
	      if (process.env.NODE_ENV !== 'production') {
	        currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children, ReactAddonsDOMDependencies.getReactInstanceMap().get(_this)._debugID);
	      } else {
	        currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children);
	      }

	      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	        // This entered again before it fully left. Add it again.
	        _this.performEnter(key);
	      } else {
	        _this.setState(function (state) {
	          var newChildren = _assign({}, state.children);
	          delete newChildren[key];
	          return { children: newChildren };
	        });
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  ReactTransitionGroup.prototype.componentWillMount = function componentWillMount() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  };

	  ReactTransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  };

	  ReactTransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextChildMapping;
	    if (process.env.NODE_ENV !== 'production') {
	      nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children, ReactAddonsDOMDependencies.getReactInstanceMap().get(this)._debugID);
	    } else {
	      nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
	    }
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  };

	  ReactTransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  };

	  ReactTransitionGroup.prototype.render = function render() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
	      }
	    }

	    // Do not forward ReactTransitionGroup props to primitive DOM nodes
	    var props = _assign({}, this.props);
	    delete props.transitionLeave;
	    delete props.transitionName;
	    delete props.transitionAppear;
	    delete props.transitionEnter;
	    delete props.childFactory;
	    delete props.transitionLeaveTimeout;
	    delete props.transitionEnterTimeout;
	    delete props.transitionAppearTimeout;
	    delete props.component;

	    return React.createElement(this.props.component, props, childrenToRender);
	  };

	  return ReactTransitionGroup;
	}(React.Component);

	ReactTransitionGroup.displayName = 'ReactTransitionGroup';
	ReactTransitionGroup.propTypes = {
	  component: React.PropTypes.any,
	  childFactory: React.PropTypes.func
	};
	ReactTransitionGroup.defaultProps = {
	  component: 'span',
	  childFactory: emptyFunction.thatReturnsArgument
	};

	module.exports = ReactTransitionGroup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOM = __webpack_require__(33);
	var ReactInstanceMap = __webpack_require__(116);

	exports.getReactDOM = function () {
	  return ReactDOM;
	};

	exports.getReactInstanceMap = function () {
	  return ReactInstanceMap;
	};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPerf = __webpack_require__(353);
	  var ReactTestUtils = __webpack_require__(354);

	  exports.getReactPerf = function () {
	    return ReactPerf;
	  };

	  exports.getReactTestUtils = function () {
	    return ReactTestUtils;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _assign = __webpack_require__(4);

	var _extends = _assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var ReactDebugTool = __webpack_require__(63);
	var warning = __webpack_require__(11);
	var alreadyWarned = false;

	function roundFloat(val) {
	  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

	  var n = Math.pow(10, base);
	  return Math.floor(val * n) / n;
	}

	// Flow type definition of console.table is too strict right now, see
	// https://github.com/facebook/flow/pull/2353 for updates
	function consoleTable(table) {
	  console.table(table);
	}

	function warnInProduction() {
	  if (alreadyWarned) {
	    return;
	  }
	  alreadyWarned = true;
	  if (typeof console !== 'undefined') {
	    console.error('ReactPerf is not supported in the production builds of React. ' + 'To collect measurements, please use the development build of React instead.');
	  }
	}

	function getLastMeasurements() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }

	  return ReactDebugTool.getFlushHistory();
	}

	function getExclusive() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }

	  var aggregatedStats = {};
	  var affectedIDs = {};

	  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
	    var displayName = treeSnapshot[instanceID].displayName;

	    var key = displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        counts: {},
	        durations: {},
	        totalDuration: 0
	      };
	    }
	    if (!stats.durations[timerType]) {
	      stats.durations[timerType] = 0;
	    }
	    if (!stats.counts[timerType]) {
	      stats.counts[timerType] = 0;
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }

	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot;

	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;

	      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
	        stats.totalDuration += duration;
	        stats.durations[timerType] += duration;
	        stats.counts[timerType]++;
	      });
	    });
	  });

	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.totalDuration - a.totalDuration;
	  });
	}

	function getInclusive() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }

	  var aggregatedStats = {};
	  var affectedIDs = {};

	  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
	    var _treeSnapshot$instanc = treeSnapshot[instanceID],
	        displayName = _treeSnapshot$instanc.displayName,
	        ownerID = _treeSnapshot$instanc.ownerID;

	    var owner = treeSnapshot[ownerID];
	    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        inclusiveRenderDuration: 0,
	        renderCount: 0
	      };
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }

	  var isCompositeByID = {};
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements;

	    measurements.forEach(function (measurement) {
	      var instanceID = measurement.instanceID,
	          timerType = measurement.timerType;

	      if (timerType !== 'render') {
	        return;
	      }
	      isCompositeByID[instanceID] = true;
	    });
	  });

	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot;

	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;

	      if (timerType !== 'render') {
	        return;
	      }
	      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
	        stats.renderCount++;
	      });
	      var nextParentID = instanceID;
	      while (nextParentID) {
	        // As we traverse parents, only count inclusive time towards composites.
	        // We know something is a composite if its render() was called.
	        if (isCompositeByID[nextParentID]) {
	          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
	            stats.inclusiveRenderDuration += duration;
	          });
	        }
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	  });

	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
	  });
	}

	function getWasted() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }

	  var aggregatedStats = {};
	  var affectedIDs = {};

	  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
	    var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
	        displayName = _treeSnapshot$instanc2.displayName,
	        ownerID = _treeSnapshot$instanc2.ownerID;

	    var owner = treeSnapshot[ownerID];
	    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        inclusiveRenderDuration: 0,
	        renderCount: 0
	      };
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }

	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot,
	        operations = flush.operations;

	    var isDefinitelyNotWastedByID = {};

	    // Find host components associated with an operation in this batch.
	    // Mark all components in their parent tree as definitely not wasted.
	    operations.forEach(function (operation) {
	      var instanceID = operation.instanceID;

	      var nextParentID = instanceID;
	      while (nextParentID) {
	        isDefinitelyNotWastedByID[nextParentID] = true;
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });

	    // Find composite components that rendered in this batch.
	    // These are potential candidates for being wasted renders.
	    var renderedCompositeIDs = {};
	    measurements.forEach(function (measurement) {
	      var instanceID = measurement.instanceID,
	          timerType = measurement.timerType;

	      if (timerType !== 'render') {
	        return;
	      }
	      renderedCompositeIDs[instanceID] = true;
	    });

	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;

	      if (timerType !== 'render') {
	        return;
	      }

	      // If there was a DOM update below this component, or it has just been
	      // mounted, its render() is not considered wasted.
	      var updateCount = treeSnapshot[instanceID].updateCount;

	      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
	        return;
	      }

	      // We consider this render() wasted.
	      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
	        stats.renderCount++;
	      });

	      var nextParentID = instanceID;
	      while (nextParentID) {
	        // Any parents rendered during this batch are considered wasted
	        // unless we previously marked them as dirty.
	        var isWasted = renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID];
	        if (isWasted) {
	          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
	            stats.inclusiveRenderDuration += duration;
	          });
	        }
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	  });

	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
	  });
	}

	function getOperations() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }

	  var stats = [];
	  flushHistory.forEach(function (flush, flushIndex) {
	    var operations = flush.operations,
	        treeSnapshot = flush.treeSnapshot;

	    operations.forEach(function (operation) {
	      var instanceID = operation.instanceID,
	          type = operation.type,
	          payload = operation.payload;
	      var _treeSnapshot$instanc3 = treeSnapshot[instanceID],
	          displayName = _treeSnapshot$instanc3.displayName,
	          ownerID = _treeSnapshot$instanc3.ownerID;

	      var owner = treeSnapshot[ownerID];
	      var key = (owner ? owner.displayName + ' > ' : '') + displayName;

	      stats.push({
	        flushIndex: flushIndex,
	        instanceID: instanceID,
	        key: key,
	        type: type,
	        ownerID: ownerID,
	        payload: payload
	      });
	    });
	  });
	  return stats;
	}

	function printExclusive(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }

	  var stats = getExclusive(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        totalDuration = item.totalDuration;

	    var renderCount = item.counts.render || 0;
	    var renderDuration = item.durations.render || 0;
	    return {
	      'Component': key,
	      'Total time (ms)': roundFloat(totalDuration),
	      'Instance count': instanceCount,
	      'Total render time (ms)': roundFloat(renderDuration),
	      'Average render time (ms)': renderCount ? roundFloat(renderDuration / renderCount) : undefined,
	      'Render count': renderCount,
	      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration)
	    };
	  });
	  consoleTable(table);
	}

	function printInclusive(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }

	  var stats = getInclusive(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        inclusiveRenderDuration = item.inclusiveRenderDuration,
	        renderCount = item.renderCount;

	    return {
	      'Owner > Component': key,
	      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
	      'Instance count': instanceCount,
	      'Render count': renderCount
	    };
	  });
	  consoleTable(table);
	}

	function printWasted(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }

	  var stats = getWasted(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        inclusiveRenderDuration = item.inclusiveRenderDuration,
	        renderCount = item.renderCount;

	    return {
	      'Owner > Component': key,
	      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
	      'Instance count': instanceCount,
	      'Render count': renderCount
	    };
	  });
	  consoleTable(table);
	}

	function printOperations(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }

	  var stats = getOperations(flushHistory);
	  var table = stats.map(function (stat) {
	    return {
	      'Owner > Node': stat.key,
	      'Operation': stat.type,
	      'Payload': _typeof(stat.payload) === 'object' ? JSON.stringify(stat.payload) : stat.payload,
	      'Flush index': stat.flushIndex,
	      'Owner Component ID': stat.ownerID,
	      'DOM Component ID': stat.instanceID
	    };
	  });
	  consoleTable(table);
	}

	var warnedAboutPrintDOM = false;
	function printDOM(measurements) {
	  process.env.NODE_ENV !== 'production' ? warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.') : void 0;
	  warnedAboutPrintDOM = true;
	  return printOperations(measurements);
	}

	var warnedAboutGetMeasurementsSummaryMap = false;
	function getMeasurementsSummaryMap(measurements) {
	  process.env.NODE_ENV !== 'production' ? warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.') : void 0;
	  warnedAboutGetMeasurementsSummaryMap = true;
	  return getWasted(measurements);
	}

	function start() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }

	  ReactDebugTool.beginProfiling();
	}

	function stop() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }

	  ReactDebugTool.endProfiling();
	}

	function isRunning() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return false;
	  }

	  return ReactDebugTool.isProfiling();
	}

	var ReactPerfAnalysis = {
	  getLastMeasurements: getLastMeasurements,
	  getExclusive: getExclusive,
	  getInclusive: getInclusive,
	  getWasted: getWasted,
	  getOperations: getOperations,
	  printExclusive: printExclusive,
	  printInclusive: printInclusive,
	  printWasted: printWasted,
	  printOperations: printOperations,
	  start: start,
	  stop: stop,
	  isRunning: isRunning,
	  // Deprecated:
	  printDOM: printDOM,
	  getMeasurementsSummaryMap: getMeasurementsSummaryMap
	};

	module.exports = ReactPerfAnalysis;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var EventConstants = __webpack_require__(355);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginRegistry = __webpack_require__(43);
	var EventPropagators = __webpack_require__(41);
	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(33);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(53);
	var ReactShallowRenderer = __webpack_require__(356);

	var findDOMNode = __webpack_require__(172);
	var invariant = __webpack_require__(8);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	function findAllInRenderedTreeInternal(inst, test) {
	  if (!inst || !inst.getPublicInstance) {
	    return [];
	  }
	  var publicInst = inst.getPublicInstance();
	  var ret = test(publicInst) ? [publicInst] : [];
	  var currentElement = inst._currentElement;
	  if (ReactTestUtils.isDOMComponent(publicInst)) {
	    var renderedChildren = inst._renderedChildren;
	    var key;
	    for (key in renderedChildren) {
	      if (!renderedChildren.hasOwnProperty(key)) {
	        continue;
	      }
	      ret = ret.concat(findAllInRenderedTreeInternal(renderedChildren[key], test));
	    }
	  } else if (React.isValidElement(currentElement) && typeof currentElement.type === 'function') {
	    ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));
	  }
	  return ret;
	}

	/**
	 * Utilities for making it easy to test React components.
	 *
	 * See https://facebook.github.io/react/docs/test-utils.html
	 *
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function renderIntoDocument(element) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return ReactDOM.render(element, div);
	  },

	  isElement: function isElement(element) {
	    return React.isValidElement(element);
	  },

	  isElementOfType: function isElementOfType(inst, convenienceConstructor) {
	    return React.isValidElement(inst) && inst.type === convenienceConstructor;
	  },

	  isDOMComponent: function isDOMComponent(inst) {
	    return !!(inst && inst.nodeType === 1 && inst.tagName);
	  },

	  isDOMComponentElement: function isDOMComponentElement(inst) {
	    return !!(inst && React.isValidElement(inst) && !!inst.tagName);
	  },

	  isCompositeComponent: function isCompositeComponent(inst) {
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      // Accessing inst.setState warns; just return false as that'll be what
	      // this returns when we have DOM nodes as refs directly
	      return false;
	    }
	    return inst != null && typeof inst.render === 'function' && typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function isCompositeComponentWithType(inst, type) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return false;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;

	    return constructor === type;
	  },

	  isCompositeComponentElement: function isCompositeComponentElement(inst) {
	    if (!React.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return typeof prototype.render === 'function' && typeof prototype.setState === 'function';
	  },

	  isCompositeComponentElementWithType: function isCompositeComponentElementWithType(inst, type) {
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;

	    return !!(ReactTestUtils.isCompositeComponentElement(inst) && constructor === type);
	  },

	  getRenderedChildOfCompositeComponent: function getRenderedChildOfCompositeComponent(inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function findAllInRenderedTree(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    !ReactTestUtils.isCompositeComponent(inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findAllInRenderedTree(...): instance must be a composite component') : _prodInvariant('10') : void 0;
	    return findAllInRenderedTreeInternal(ReactInstanceMap.get(inst), test);
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function scryRenderedDOMComponentsWithClass(root, classNames) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      if (ReactTestUtils.isDOMComponent(inst)) {
	        var className = inst.className;
	        if (typeof className !== 'string') {
	          // SVG, probably.
	          className = inst.getAttribute('class') || '';
	        }
	        var classList = className.split(/\s+/);

	        if (!Array.isArray(classNames)) {
	          !(classNames !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TestUtils.scryRenderedDOMComponentsWithClass expects a className as a second argument.') : _prodInvariant('11') : void 0;
	          classNames = classNames.split(/\s+/);
	        }
	        return classNames.every(function (name) {
	          return classList.indexOf(name) !== -1;
	        });
	      }
	      return false;
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function findRenderedDOMComponentWithClass(root, className) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for class:' + className);
	    }
	    return all[0];
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function scryRenderedDOMComponentsWithTag(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isDOMComponent(inst) && inst.tagName.toUpperCase() === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function findRenderedDOMComponentWithTag(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for tag:' + tagName);
	    }
	    return all[0];
	  },

	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function scryRenderedComponentsWithType(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function findRenderedComponentWithType(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for componentType:' + componentType);
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function mockComponent(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || 'div';

	    module.prototype.render.mockImplementation(function () {
	      return React.createElement(mockTagName, null, this.props.children);
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on an `Element` node.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function simulateNativeEventOnNode(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on the `ReactDOMComponent` `comp`.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`.
	   * @param {!ReactDOMComponent} comp
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function simulateNativeEventOnDOMComponent(topLevelType, comp, fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(topLevelType, findDOMNode(comp), fakeNativeEvent);
	  },

	  nativeTouchData: function nativeTouchData(x, y) {
	    return {
	      touches: [{ pageX: x, pageY: y }]
	    };
	  },

	  createRenderer: function createRenderer() {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function (domComponentOrNode, eventData) {
	    var node;
	    !!React.isValidElement(domComponentOrNode) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TestUtils.Simulate expects a component instance and not a ReactElement.TestUtils.Simulate will not work if you are using shallow rendering.') : _prodInvariant('14') : void 0;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = findDOMNode(domComponentOrNode);
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var dispatchConfig = EventPluginRegistry.eventNameDispatchConfigs[eventType];

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    fakeNativeEvent.type = eventType.toLowerCase();

	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(dispatchConfig, ReactDOMComponentTree.getInstanceFromNode(node), fakeNativeEvent, node);
	    // Since we aren't using pooling, always persist the event. This will make
	    // sure it's marked and won't warn when setting additional properties.
	    event.persist();
	    _assign(event, eventData);

	    if (dispatchConfig.phasedRegistrationNames) {
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	    } else {
	      EventPropagators.accumulateDirectDispatches(event);
	    }

	    ReactUpdates.batchedUpdates(function () {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue(true);
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in EventPluginRegistry.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element|ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function () {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function () {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function (domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    _assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);
	    } else if (domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);
	    }
	  };
	}

	Object.keys(topLevelTypes).forEach(function (eventType) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element|ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);
	});

	module.exports = ReactTestUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 355 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */

	var topLevelTypes = {
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	};

	var EventConstants = {
	  topLevelTypes: topLevelTypes
	};

	module.exports = EventConstants;

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var React = __webpack_require__(2);
	var ReactDefaultInjection = __webpack_require__(38);
	var ReactCompositeComponent = __webpack_require__(119);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdates = __webpack_require__(56);

	var emptyObject = __webpack_require__(20);
	var getNextDebugID = __webpack_require__(127);
	var invariant = __webpack_require__(8);

	var NoopInternalComponent = function () {
	  function NoopInternalComponent(element) {
	    _classCallCheck(this, NoopInternalComponent);

	    this._renderedOutput = element;
	    this._currentElement = element;

	    if (process.env.NODE_ENV !== 'production') {
	      this._debugID = getNextDebugID();
	    }
	  }

	  NoopInternalComponent.prototype.mountComponent = function mountComponent() {};

	  NoopInternalComponent.prototype.receiveComponent = function receiveComponent(element) {
	    this._renderedOutput = element;
	    this._currentElement = element;
	  };

	  NoopInternalComponent.prototype.unmountComponent = function unmountComponent() {};

	  NoopInternalComponent.prototype.getHostNode = function getHostNode() {
	    return undefined;
	  };

	  NoopInternalComponent.prototype.getPublicInstance = function getPublicInstance() {
	    return null;
	  };

	  return NoopInternalComponent;
	}();

	var ShallowComponentWrapper = function ShallowComponentWrapper(element) {
	  // TODO: Consolidate with instantiateReactComponent
	  if (process.env.NODE_ENV !== 'production') {
	    this._debugID = getNextDebugID();
	  }

	  this.construct(element);
	};
	_assign(ShallowComponentWrapper.prototype, ReactCompositeComponent, {
	  _constructComponent: ReactCompositeComponent._constructComponentWithoutOwner,
	  _instantiateReactComponent: function _instantiateReactComponent(element) {
	    return new NoopInternalComponent(element);
	  },
	  _replaceNodeWithMarkup: function _replaceNodeWithMarkup() {},
	  _renderValidatedComponent: ReactCompositeComponent._renderValidatedComponentWithoutOwnerOrContext
	});

	function _batchedRender(renderer, element, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
	  renderer._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	var ReactShallowRenderer = function () {
	  function ReactShallowRenderer() {
	    _classCallCheck(this, ReactShallowRenderer);

	    this._instance = null;
	  }

	  ReactShallowRenderer.prototype.getMountedInstance = function getMountedInstance() {
	    return this._instance ? this._instance._instance : null;
	  };

	  ReactShallowRenderer.prototype.render = function render(element, context) {
	    // Ensure we've done the default injections. This might not be true in the
	    // case of a simple test that only requires React and the TestUtils in
	    // conjunction with an inline-requires transform.
	    ReactDefaultInjection.inject();

	    !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Invalid component element.%s', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : _prodInvariant('12', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : void 0;
	    !(typeof element.type !== 'string') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom components, not primitives (%s). Instead of calling `.render(el)` and inspecting the rendered output, look at `el.props` directly instead.', element.type) : _prodInvariant('13', element.type) : void 0;

	    if (!context) {
	      context = emptyObject;
	    }
	    ReactUpdates.batchedUpdates(_batchedRender, this, element, context);

	    return this.getRenderOutput();
	  };

	  ReactShallowRenderer.prototype.getRenderOutput = function getRenderOutput() {
	    return this._instance && this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput || null;
	  };

	  ReactShallowRenderer.prototype.unmount = function unmount() {
	    if (this._instance) {
	      ReactReconciler.unmountComponent(this._instance, false);
	    }
	  };

	  ReactShallowRenderer.prototype._render = function _render(element, transaction, context) {
	    if (this._instance) {
	      ReactReconciler.receiveComponent(this._instance, element, transaction, context);
	    } else {
	      var instance = new ShallowComponentWrapper(element);
	      ReactReconciler.mountComponent(instance, transaction, null, null, context, 0);
	      this._instance = instance;
	    }
	  };

	  return ReactShallowRenderer;
	}();

	module.exports = ReactShallowRenderer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var flattenChildren = __webpack_require__(358);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around flattenChildren().
	   *
	   * @param {*} children `this.props.children`
	   * @param {number=} selfDebugID Optional debugID of the current internal instance.
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function getChildMapping(children, selfDebugID) {
	    if (!children) {
	      return children;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      return flattenChildren(children, selfDebugID);
	    }

	    return flattenChildren(children);
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function mergeChildMappings(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var KeyEscapeUtils = __webpack_require__(17);
	var traverseAllChildren = __webpack_require__(15);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && (typeof traverseContext === 'undefined' ? 'undefined' : _typeof(traverseContext)) === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(26);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _autoPrefix = __webpack_require__(348);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var ScaleInChild = function (_Component) {
	  (0, _inherits3.default)(ScaleInChild, _Component);

	  function ScaleInChild() {
	    (0, _classCallCheck3.default)(this, ScaleInChild);
	    return (0, _possibleConstructorReturn3.default)(this, (ScaleInChild.__proto__ || (0, _getPrototypeOf2.default)(ScaleInChild)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(ScaleInChild, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.enterTimer);
	      clearTimeout(this.leaveTimer);
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentDidAppear',
	    value: function componentDidAppear() {
	      this.animate();
	    }
	  }, {
	    key: 'componentDidEnter',
	    value: function componentDidEnter() {
	      this.animate();
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;

	      style.opacity = '0';
	      _autoPrefix2.default.set(style, 'transform', 'scale(' + this.props.minScale + ')');

	      this.leaveTimer = setTimeout(callback, 450);
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      var style = _reactDom2.default.findDOMNode(this).style;

	      style.opacity = '1';
	      _autoPrefix2.default.set(style, 'transform', 'scale(' + this.props.maxScale + ')');
	    }
	  }, {
	    key: 'initializeAnimation',
	    value: function initializeAnimation(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;

	      style.opacity = '0';
	      _autoPrefix2.default.set(style, 'transform', 'scale(0)');

	      this.enterTimer = setTimeout(callback, this.props.enterDelay);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          enterDelay = _props.enterDelay,
	          maxScale = _props.maxScale,
	          minScale = _props.minScale,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'enterDelay', 'maxScale', 'minScale', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        position: 'absolute',
	        height: '100%',
	        width: '100%',
	        top: 0,
	        left: 0,
	        transition: _transitions2.default.easeOut(null, ['transform', 'opacity'])
	      }, style);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles(mergedRootStyles) }), children);
	    }
	  }]);
	  return ScaleInChild;
	}(_react.Component);

	ScaleInChild.defaultProps = {
	  enterDelay: 0,
	  maxScale: 1,
	  minScale: 0
	};
	ScaleInChild.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? ScaleInChild.propTypes = {
	  children: _react.PropTypes.node,
	  enterDelay: _react.PropTypes.number,
	  maxScale: _react.PropTypes.number,
	  minScale: _react.PropTypes.number,
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = ScaleInChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _toConsumableArray2 = __webpack_require__(179);

	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _toArray2 = __webpack_require__(361);

	var _toArray3 = _interopRequireDefault(_toArray2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactAddonsTransitionGroup = __webpack_require__(350);

	var _reactAddonsTransitionGroup2 = _interopRequireDefault(_reactAddonsTransitionGroup);

	var _dom = __webpack_require__(362);

	var _dom2 = _interopRequireDefault(_dom);

	var _CircleRipple = __webpack_require__(363);

	var _CircleRipple2 = _interopRequireDefault(_CircleRipple);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// Remove the first element of the array
	var shift = function shift(_ref) {
	  var _ref2 = (0, _toArray3.default)(_ref),
	      newArray = _ref2.slice(1);

	  return newArray;
	};

	var TouchRipple = function (_Component) {
	  (0, _inherits3.default)(TouchRipple, _Component);

	  function TouchRipple(props, context) {
	    (0, _classCallCheck3.default)(this, TouchRipple);

	    // Touch start produces a mouse down event for compat reasons. To avoid
	    // showing ripples twice we skip showing a ripple for the first mouse down
	    // after a touch start. Note we don't store ignoreNextMouseDown in this.state
	    // to avoid re-rendering when we change it.
	    var _this = (0, _possibleConstructorReturn3.default)(this, (TouchRipple.__proto__ || (0, _getPrototypeOf2.default)(TouchRipple)).call(this, props, context));

	    _this.handleMouseDown = function (event) {
	      // only listen to left clicks
	      if (event.button === 0) {
	        _this.start(event, false);
	      }
	    };

	    _this.handleMouseUp = function () {
	      _this.end();
	    };

	    _this.handleMouseLeave = function () {
	      _this.end();
	    };

	    _this.handleTouchStart = function (event) {
	      event.stopPropagation();
	      // If the user is swiping (not just tapping), save the position so we can
	      // abort ripples if the user appears to be scrolling.
	      if (_this.props.abortOnScroll && event.touches) {
	        _this.startListeningForScrollAbort(event);
	        _this.startTime = Date.now();
	      }
	      _this.start(event, true);
	    };

	    _this.handleTouchEnd = function () {
	      _this.end();
	    };

	    _this.handleTouchMove = function (event) {
	      // Stop trying to abort if we're already 300ms into the animation
	      var timeSinceStart = Math.abs(Date.now() - _this.startTime);
	      if (timeSinceStart > 300) {
	        _this.stopListeningForScrollAbort();
	        return;
	      }

	      // If the user is scrolling...
	      var deltaY = Math.abs(event.touches[0].clientY - _this.firstTouchY);
	      var deltaX = Math.abs(event.touches[0].clientX - _this.firstTouchX);
	      // Call it a scroll after an arbitrary 6px (feels reasonable in testing)
	      if (deltaY > 6 || deltaX > 6) {
	        var currentRipples = _this.state.ripples;
	        var ripple = currentRipples[0];
	        // This clone will replace the ripple in ReactTransitionGroup with a
	        // version that will disappear immediately when removed from the DOM
	        var abortedRipple = _react2.default.cloneElement(ripple, { aborted: true });
	        // Remove the old ripple and replace it with the new updated one
	        currentRipples = shift(currentRipples);
	        currentRipples = [].concat((0, _toConsumableArray3.default)(currentRipples), [abortedRipple]);
	        _this.setState({ ripples: currentRipples }, function () {
	          // Call end after we've set the ripple to abort otherwise the setState
	          // in end() merges with this and the ripple abort fails
	          _this.end();
	        });
	      }
	    };

	    _this.ignoreNextMouseDown = false;

	    _this.state = {
	      // This prop allows us to only render the ReactTransitionGroup
	      // on the first click of the component, making the inital render faster.
	      hasRipples: false,
	      nextKey: 0,
	      ripples: []
	    };
	    return _this;
	  }

	  (0, _createClass3.default)(TouchRipple, [{
	    key: 'start',
	    value: function start(event, isRippleTouchGenerated) {
	      var theme = this.context.muiTheme.ripple;

	      if (this.ignoreNextMouseDown && !isRippleTouchGenerated) {
	        this.ignoreNextMouseDown = false;
	        return;
	      }

	      var ripples = this.state.ripples;

	      // Add a ripple to the ripples array
	      ripples = [].concat((0, _toConsumableArray3.default)(ripples), [_react2.default.createElement(_CircleRipple2.default, {
	        key: this.state.nextKey,
	        style: !this.props.centerRipple ? this.getRippleStyle(event) : {},
	        color: this.props.color || theme.color,
	        opacity: this.props.opacity,
	        touchGenerated: isRippleTouchGenerated
	      })]);

	      this.ignoreNextMouseDown = isRippleTouchGenerated;
	      this.setState({
	        hasRipples: true,
	        nextKey: this.state.nextKey + 1,
	        ripples: ripples
	      });
	    }
	  }, {
	    key: 'end',
	    value: function end() {
	      var currentRipples = this.state.ripples;
	      this.setState({
	        ripples: shift(currentRipples)
	      });
	      if (this.props.abortOnScroll) {
	        this.stopListeningForScrollAbort();
	      }
	    }

	    // Check if the user seems to be scrolling and abort the animation if so

	  }, {
	    key: 'startListeningForScrollAbort',
	    value: function startListeningForScrollAbort(event) {
	      this.firstTouchY = event.touches[0].clientY;
	      this.firstTouchX = event.touches[0].clientX;
	      // Note that when scolling Chrome throttles this event to every 200ms
	      // Also note we don't listen for scroll events directly as there's no general
	      // way to cover cases like scrolling within containers on the page
	      document.body.addEventListener('touchmove', this.handleTouchMove);
	    }
	  }, {
	    key: 'stopListeningForScrollAbort',
	    value: function stopListeningForScrollAbort() {
	      document.body.removeEventListener('touchmove', this.handleTouchMove);
	    }
	  }, {
	    key: 'getRippleStyle',
	    value: function getRippleStyle(event) {
	      var el = _reactDom2.default.findDOMNode(this);
	      var elHeight = el.offsetHeight;
	      var elWidth = el.offsetWidth;
	      var offset = _dom2.default.offset(el);
	      var isTouchEvent = event.touches && event.touches.length;
	      var pageX = isTouchEvent ? event.touches[0].pageX : event.pageX;
	      var pageY = isTouchEvent ? event.touches[0].pageY : event.pageY;
	      var pointerX = pageX - offset.left;
	      var pointerY = pageY - offset.top;
	      var topLeftDiag = this.calcDiag(pointerX, pointerY);
	      var topRightDiag = this.calcDiag(elWidth - pointerX, pointerY);
	      var botRightDiag = this.calcDiag(elWidth - pointerX, elHeight - pointerY);
	      var botLeftDiag = this.calcDiag(pointerX, elHeight - pointerY);
	      var rippleRadius = Math.max(topLeftDiag, topRightDiag, botRightDiag, botLeftDiag);
	      var rippleSize = rippleRadius * 2;
	      var left = pointerX - rippleRadius;
	      var top = pointerY - rippleRadius;

	      return {
	        directionInvariant: true,
	        height: rippleSize,
	        width: rippleSize,
	        top: top,
	        left: left
	      };
	    }
	  }, {
	    key: 'calcDiag',
	    value: function calcDiag(a, b) {
	      return Math.sqrt(a * a + b * b);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          style = _props.style;
	      var _state = this.state,
	          hasRipples = _state.hasRipples,
	          ripples = _state.ripples;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var rippleGroup = void 0;

	      if (hasRipples) {
	        var mergedStyles = (0, _simpleAssign2.default)({
	          height: '100%',
	          width: '100%',
	          position: 'absolute',
	          top: 0,
	          left: 0,
	          overflow: 'hidden',
	          pointerEvents: 'none'
	        }, style);

	        rippleGroup = _react2.default.createElement(_reactAddonsTransitionGroup2.default, { style: prepareStyles(mergedStyles) }, ripples);
	      }

	      return _react2.default.createElement('div', {
	        onMouseUp: this.handleMouseUp,
	        onMouseDown: this.handleMouseDown,
	        onMouseLeave: this.handleMouseLeave,
	        onTouchStart: this.handleTouchStart,
	        onTouchEnd: this.handleTouchEnd
	      }, rippleGroup, children);
	    }
	  }]);
	  return TouchRipple;
	}(_react.Component);

	TouchRipple.defaultProps = {
	  abortOnScroll: true
	};
	TouchRipple.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
	  abortOnScroll: _react.PropTypes.bool,
	  centerRipple: _react.PropTypes.bool,
	  children: _react.PropTypes.node,
	  color: _react.PropTypes.string,
	  opacity: _react.PropTypes.number,
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = TouchRipple;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _from = __webpack_require__(180);

	var _from2 = _interopRequireDefault(_from);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = function (arr) {
	  return Array.isArray(arr) ? arr : (0, _from2.default)(arr);
	};

/***/ },
/* 362 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  isDescendant: function isDescendant(parent, child) {
	    var node = child.parentNode;

	    while (node !== null) {
	      if (node === parent) return true;
	      node = node.parentNode;
	    }

	    return false;
	  },
	  offset: function offset(el) {
	    var rect = el.getBoundingClientRect();
	    return {
	      top: rect.top + document.body.scrollTop,
	      left: rect.left + document.body.scrollLeft
	    };
	  }
	};

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(347);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _autoPrefix = __webpack_require__(348);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var CircleRipple = function (_Component) {
	  (0, _inherits3.default)(CircleRipple, _Component);

	  function CircleRipple() {
	    (0, _classCallCheck3.default)(this, CircleRipple);
	    return (0, _possibleConstructorReturn3.default)(this, (CircleRipple.__proto__ || (0, _getPrototypeOf2.default)(CircleRipple)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CircleRipple, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.enterTimer);
	      clearTimeout(this.leaveTimer);
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentDidAppear',
	    value: function componentDidAppear() {
	      this.animate();
	    }
	  }, {
	    key: 'componentDidEnter',
	    value: function componentDidEnter() {
	      this.animate();
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;
	      style.opacity = 0;
	      // If the animation is aborted, remove from the DOM immediately
	      var removeAfter = this.props.aborted ? 0 : 2000;
	      this.enterTimer = setTimeout(callback, removeAfter);
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      var style = _reactDom2.default.findDOMNode(this).style;
	      var transitionValue = _transitions2.default.easeOut('2s', 'opacity') + ', ' + _transitions2.default.easeOut('1s', 'transform');
	      _autoPrefix2.default.set(style, 'transition', transitionValue);
	      _autoPrefix2.default.set(style, 'transform', 'scale(1)');
	    }
	  }, {
	    key: 'initializeAnimation',
	    value: function initializeAnimation(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;
	      style.opacity = this.props.opacity;
	      _autoPrefix2.default.set(style, 'transform', 'scale(0)');
	      this.leaveTimer = setTimeout(callback, 0);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          aborted = _props.aborted,
	          color = _props.color,
	          opacity = _props.opacity,
	          style = _props.style,
	          touchGenerated = _props.touchGenerated,
	          other = (0, _objectWithoutProperties3.default)(_props, ['aborted', 'color', 'opacity', 'style', 'touchGenerated']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var mergedStyles = (0, _simpleAssign2.default)({
	        position: 'absolute',
	        top: 0,
	        left: 0,
	        height: '100%',
	        width: '100%',
	        borderRadius: '50%',
	        backgroundColor: color
	      }, style);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles(mergedStyles) }));
	    }
	  }]);
	  return CircleRipple;
	}(_react.Component);

	CircleRipple.defaultProps = {
	  opacity: 0.1,
	  aborted: false
	};
	CircleRipple.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? CircleRipple.propTypes = {
	  aborted: _react.PropTypes.bool,
	  color: _react.PropTypes.string,
	  opacity: _react.PropTypes.number,
	  style: _react.PropTypes.object,
	  touchGenerated: _react.PropTypes.bool
	} : void 0;
	exports.default = CircleRipple;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _FontIcon = __webpack_require__(365);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _FontIcon2.default;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context, state) {
	  var color = props.color,
	      hoverColor = props.hoverColor;
	  var baseTheme = context.muiTheme.baseTheme;

	  var offColor = color || baseTheme.palette.textColor;
	  var onColor = hoverColor || offColor;

	  return {
	    root: {
	      color: state.hovered ? onColor : offColor,
	      position: 'relative',
	      fontSize: baseTheme.spacing.iconSize,
	      display: 'inline-block',
	      userSelect: 'none',
	      transition: _transitions2.default.easeOut()
	    }
	  };
	}

	var FontIcon = function (_Component) {
	  (0, _inherits3.default)(FontIcon, _Component);

	  function FontIcon() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, FontIcon);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FontIcon.__proto__ || (0, _getPrototypeOf2.default)(FontIcon)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false
	    }, _this.handleMouseLeave = function (event) {
	      // hover is needed only when a hoverColor is defined
	      if (_this.props.hoverColor !== undefined) {
	        _this.setState({ hovered: false });
	      }
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(event);
	      }
	    }, _this.handleMouseEnter = function (event) {
	      // hover is needed only when a hoverColor is defined
	      if (_this.props.hoverColor !== undefined) {
	        _this.setState({ hovered: true });
	      }
	      if (_this.props.onMouseEnter) {
	        _this.props.onMouseEnter(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(FontIcon, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          hoverColor = _props.hoverColor,
	          onMouseLeave = _props.onMouseLeave,
	          onMouseEnter = _props.onMouseEnter,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['hoverColor', 'onMouseLeave', 'onMouseEnter', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      return _react2.default.createElement('span', (0, _extends3.default)({}, other, {
	        onMouseLeave: this.handleMouseLeave,
	        onMouseEnter: this.handleMouseEnter,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	      }));
	    }
	  }]);
	  return FontIcon;
	}(_react.Component);

	FontIcon.muiName = 'FontIcon';
	FontIcon.defaultProps = {
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {}
	};
	FontIcon.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? FontIcon.propTypes = {
	  /**
	   * This is the font color of the font icon. If not specified,
	   * this component will default to muiTheme.palette.textColor.
	   */
	  color: _react.PropTypes.string,
	  /**
	   * This is the icon color when the mouse hovers over the icon.
	   */
	  hoverColor: _react.PropTypes.string,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = FontIcon;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context, state) {
	  var verticalPosition = props.verticalPosition;
	  var horizontalPosition = props.horizontalPosition;
	  var touchMarginOffset = props.touch ? 10 : 0;
	  var touchOffsetTop = props.touch ? -20 : -10;
	  var offset = verticalPosition === 'bottom' ? 14 + touchMarginOffset : -14 - touchMarginOffset;

	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      zIndex = _context$muiTheme.zIndex,
	      tooltip = _context$muiTheme.tooltip;

	  var styles = {
	    root: {
	      position: 'absolute',
	      fontFamily: baseTheme.fontFamily,
	      fontSize: '10px',
	      lineHeight: '22px',
	      padding: '0 8px',
	      zIndex: zIndex.tooltip,
	      color: tooltip.color,
	      overflow: 'hidden',
	      top: -10000,
	      borderRadius: 2,
	      userSelect: 'none',
	      opacity: 0,
	      right: horizontalPosition === 'left' ? 12 : null,
	      left: horizontalPosition === 'center' ? (state.offsetWidth - 48) / 2 * -1 : null,
	      transition: _transitions2.default.easeOut('0ms', 'top', '450ms') + ', ' + _transitions2.default.easeOut('450ms', 'transform', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'opacity', '0ms')
	    },
	    label: {
	      position: 'relative',
	      whiteSpace: 'nowrap'
	    },
	    ripple: {
	      position: 'absolute',
	      left: horizontalPosition === 'center' ? '50%' : horizontalPosition === 'left' ? '100%' : '0%',
	      top: verticalPosition === 'bottom' ? 0 : '100%',
	      transform: 'translate(-50%, -50%)',
	      borderRadius: '50%',
	      backgroundColor: 'transparent',
	      transition: _transitions2.default.easeOut('0ms', 'width', '450ms') + ', ' + _transitions2.default.easeOut('0ms', 'height', '450ms') + ', ' + _transitions2.default.easeOut('450ms', 'backgroundColor', '0ms')
	    },
	    rootWhenShown: {
	      top: verticalPosition === 'top' ? touchOffsetTop : 36,
	      opacity: 0.9,
	      transform: 'translate(0px, ' + offset + 'px)',
	      transition: _transitions2.default.easeOut('0ms', 'top', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'transform', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'opacity', '0ms')
	    },
	    rootWhenTouched: {
	      fontSize: '14px',
	      lineHeight: '32px',
	      padding: '0 16px'
	    },
	    rippleWhenShown: {
	      backgroundColor: tooltip.rippleBackgroundColor,
	      transition: _transitions2.default.easeOut('450ms', 'width', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'height', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'backgroundColor', '0ms')
	    }
	  };

	  return styles;
	}

	var Tooltip = function (_Component) {
	  (0, _inherits3.default)(Tooltip, _Component);

	  function Tooltip() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Tooltip);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Tooltip.__proto__ || (0, _getPrototypeOf2.default)(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      offsetWidth: null
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Tooltip, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setRippleSize();
	      this.setTooltipPosition();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps() {
	      this.setTooltipPosition();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.setRippleSize();
	    }
	  }, {
	    key: 'setRippleSize',
	    value: function setRippleSize() {
	      var ripple = this.refs.ripple;
	      var tooltip = this.refs.tooltip;
	      var tooltipWidth = parseInt(tooltip.offsetWidth, 10) / (this.props.horizontalPosition === 'center' ? 2 : 1);
	      var tooltipHeight = parseInt(tooltip.offsetHeight, 10);

	      var rippleDiameter = Math.ceil(Math.sqrt(Math.pow(tooltipHeight, 2) + Math.pow(tooltipWidth, 2)) * 2);
	      if (this.props.show) {
	        ripple.style.height = rippleDiameter + 'px';
	        ripple.style.width = rippleDiameter + 'px';
	      } else {
	        ripple.style.width = '0px';
	        ripple.style.height = '0px';
	      }
	    }
	  }, {
	    key: 'setTooltipPosition',
	    value: function setTooltipPosition() {
	      this.setState({ offsetWidth: this.refs.tooltip.offsetWidth });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          horizontalPosition = _props.horizontalPosition,
	          label = _props.label,
	          show = _props.show,
	          touch = _props.touch,
	          verticalPosition = _props.verticalPosition,
	          other = (0, _objectWithoutProperties3.default)(_props, ['horizontalPosition', 'label', 'show', 'touch', 'verticalPosition']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, {
	        ref: 'tooltip',
	        style: prepareStyles((0, _simpleAssign2.default)(styles.root, this.props.show && styles.rootWhenShown, this.props.touch && styles.rootWhenTouched, this.props.style))
	      }), _react2.default.createElement('div', {
	        ref: 'ripple',
	        style: prepareStyles((0, _simpleAssign2.default)(styles.ripple, this.props.show && styles.rippleWhenShown))
	      }), _react2.default.createElement('span', { style: prepareStyles(styles.label) }, label));
	    }
	  }]);
	  return Tooltip;
	}(_react.Component);

	Tooltip.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Tooltip.propTypes = {
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  horizontalPosition: _react.PropTypes.oneOf(['left', 'right', 'center']),
	  label: _react.PropTypes.node.isRequired,
	  show: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  touch: _react.PropTypes.bool,
	  verticalPosition: _react.PropTypes.oneOf(['top', 'bottom'])
	} : void 0;
	exports.default = Tooltip;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NavigationMenu = function NavigationMenu(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z' }));
	};
	NavigationMenu = (0, _pure2.default)(NavigationMenu);
	NavigationMenu.displayName = 'NavigationMenu';
	NavigationMenu.muiName = 'SvgIcon';

	exports.default = NavigationMenu;

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shouldUpdate = __webpack_require__(369);

	var _shouldUpdate2 = _interopRequireDefault(_shouldUpdate);

	var _shallowEqual = __webpack_require__(347);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _createHelper = __webpack_require__(370);

	var _createHelper2 = _interopRequireDefault(_createHelper);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var pure = (0, _shouldUpdate2.default)(function (props, nextProps) {
	  return !(0, _shallowEqual2.default)(props, nextProps);
	});

	exports.default = (0, _createHelper2.default)(pure, 'pure', true, true);

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _createHelper = __webpack_require__(370);

	var _createHelper2 = _interopRequireDefault(_createHelper);

	var _createEagerFactory = __webpack_require__(373);

	var _createEagerFactory2 = _interopRequireDefault(_createEagerFactory);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var shouldUpdate = function shouldUpdate(test) {
	  return function (BaseComponent) {
	    var factory = (0, _createEagerFactory2.default)(BaseComponent);
	    return function (_Component) {
	      _inherits(_class, _Component);

	      function _class() {
	        _classCallCheck(this, _class);

	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	      }

	      _class.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	        return test(this.props, nextProps);
	      };

	      _class.prototype.render = function render() {
	        return factory(this.props);
	      };

	      return _class;
	    }(_react.Component);
	  };
	};

	exports.default = (0, _createHelper2.default)(shouldUpdate, 'shouldUpdate');

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;
	var createHelper = function createHelper(func, helperName) {
	  var setDisplayName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  var noArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	  if (process.env.NODE_ENV !== 'production' && setDisplayName) {
	    var _ret = function () {
	      /* eslint-disable global-require */
	      var wrapDisplayName = __webpack_require__(371).default;
	      /* eslint-enable global-require */

	      if (noArgs) {
	        return {
	          v: function v(BaseComponent) {
	            var Component = func(BaseComponent);
	            Component.displayName = wrapDisplayName(BaseComponent, helperName);
	            return Component;
	          }
	        };
	      }

	      return {
	        v: function v() {
	          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          return function (BaseComponent) {
	            var Component = func.apply(undefined, args)(BaseComponent);
	            Component.displayName = wrapDisplayName(BaseComponent, helperName);
	            return Component;
	          };
	        }
	      };
	    }();

	    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	  }

	  return func;
	};

	exports.default = createHelper;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _getDisplayName = __webpack_require__(372);

	var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
	  return hocName + '(' + (0, _getDisplayName2.default)(BaseComponent) + ')';
	};

	exports.default = wrapDisplayName;

/***/ },
/* 372 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var getDisplayName = function getDisplayName(Component) {
	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (!Component) {
	    return undefined;
	  }

	  return Component.displayName || Component.name || 'Component';
	};

	exports.default = getDisplayName;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createEagerElementUtil = __webpack_require__(374);

	var _createEagerElementUtil2 = _interopRequireDefault(_createEagerElementUtil);

	var _isReferentiallyTransparentFunctionComponent = __webpack_require__(375);

	var _isReferentiallyTransparentFunctionComponent2 = _interopRequireDefault(_isReferentiallyTransparentFunctionComponent);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var createFactory = function createFactory(type) {
	  var isReferentiallyTransparent = (0, _isReferentiallyTransparentFunctionComponent2.default)(type);
	  return function (p, c) {
	    return (0, _createEagerElementUtil2.default)(false, isReferentiallyTransparent, type, p, c);
	  };
	};

	exports.default = createFactory;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var createEagerElementUtil = function createEagerElementUtil(hasKey, isReferentiallyTransparent, type, props, children) {
	  if (!hasKey && isReferentiallyTransparent) {
	    if (children) {
	      return type(_extends({}, props, { children: children }));
	    }
	    return type(props);
	  }

	  var Component = type;

	  if (children) {
	    return _react2.default.createElement(Component, props, children);
	  }

	  return _react2.default.createElement(Component, props);
	};

	exports.default = createEagerElementUtil;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _isClassComponent = __webpack_require__(376);

	var _isClassComponent2 = _interopRequireDefault(_isClassComponent);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var isReferentiallyTransparentFunctionComponent = function isReferentiallyTransparentFunctionComponent(Component) {
	  return Boolean(typeof Component === 'function' && !(0, _isClassComponent2.default)(Component) && !Component.defaultProps && !Component.contextTypes && (process.env.NODE_ENV === 'production' || !Component.propTypes));
	};

	exports.default = isReferentiallyTransparentFunctionComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 376 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;
	var isClassComponent = function isClassComponent(Component) {
	  return Boolean(Component && Component.prototype && _typeof(Component.prototype.isReactComponent) === 'object');
	};

	exports.default = isClassComponent;

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _SvgIcon = __webpack_require__(378);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _SvgIcon2.default;

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var SvgIcon = function (_Component) {
	  (0, _inherits3.default)(SvgIcon, _Component);

	  function SvgIcon() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, SvgIcon);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = SvgIcon.__proto__ || (0, _getPrototypeOf2.default)(SvgIcon)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false
	    }, _this.handleMouseLeave = function (event) {
	      _this.setState({ hovered: false });
	      _this.props.onMouseLeave(event);
	    }, _this.handleMouseEnter = function (event) {
	      _this.setState({ hovered: true });
	      _this.props.onMouseEnter(event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(SvgIcon, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          color = _props.color,
	          hoverColor = _props.hoverColor,
	          onMouseEnter = _props.onMouseEnter,
	          onMouseLeave = _props.onMouseLeave,
	          style = _props.style,
	          viewBox = _props.viewBox,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'color', 'hoverColor', 'onMouseEnter', 'onMouseLeave', 'style', 'viewBox']);
	      var _context$muiTheme = this.context.muiTheme,
	          svgIcon = _context$muiTheme.svgIcon,
	          prepareStyles = _context$muiTheme.prepareStyles;

	      var offColor = color ? color : 'currentColor';
	      var onColor = hoverColor ? hoverColor : offColor;

	      var mergedStyles = (0, _simpleAssign2.default)({
	        display: 'inline-block',
	        color: svgIcon.color,
	        fill: this.state.hovered ? onColor : offColor,
	        height: 24,
	        width: 24,
	        userSelect: 'none',
	        transition: _transitions2.default.easeOut()
	      }, style);

	      return _react2.default.createElement('svg', (0, _extends3.default)({}, other, {
	        onMouseEnter: this.handleMouseEnter,
	        onMouseLeave: this.handleMouseLeave,
	        style: prepareStyles(mergedStyles),
	        viewBox: viewBox
	      }), children);
	    }
	  }]);
	  return SvgIcon;
	}(_react.Component);

	SvgIcon.muiName = 'SvgIcon';
	SvgIcon.defaultProps = {
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  viewBox: '0 0 24 24'
	};
	SvgIcon.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? SvgIcon.propTypes = {
	  /**
	   * Elements passed into the SVG Icon.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * This is the fill color of the svg icon.
	   * If not specified, this component will default
	   * to muiTheme.palette.textColor.
	   */
	  color: _react.PropTypes.string,
	  /**
	   * This is the icon color when the mouse hovers over the icon.
	   */
	  hoverColor: _react.PropTypes.string,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * Allows you to redefine what the coordinates
	   * without units mean inside an svg element. For example,
	   * if the SVG element is 500 (width) by 200 (height), and you
	   * pass viewBox="0 0 50 20", this means that the coordinates inside
	   * the svg will go from the top left corner (0,0) to bottom right (50,20)
	   * and each unit will be worth 10px.
	   */
	  viewBox: _react.PropTypes.string
	} : void 0;
	exports.default = SvgIcon;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Paper = __webpack_require__(380);

	var _Paper2 = _interopRequireDefault(_Paper);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Paper2.default;

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var rounded = props.rounded,
	      circle = props.circle,
	      transitionEnabled = props.transitionEnabled,
	      zDepth = props.zDepth;
	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      paper = _context$muiTheme.paper;

	  return {
	    root: {
	      color: paper.color,
	      backgroundColor: paper.backgroundColor,
	      transition: transitionEnabled && _transitions2.default.easeOut(),
	      boxSizing: 'border-box',
	      fontFamily: baseTheme.fontFamily,
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)', // Remove mobile color flashing (deprecated)
	      boxShadow: paper.zDepthShadows[zDepth - 1], // No shadow for 0 depth papers
	      borderRadius: circle ? '50%' : rounded ? '2px' : '0px'
	    }
	  };
	}

	var Paper = function (_Component) {
	  (0, _inherits3.default)(Paper, _Component);

	  function Paper() {
	    (0, _classCallCheck3.default)(this, Paper);
	    return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(Paper, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          circle = _props.circle,
	          rounded = _props.rounded,
	          style = _props.style,
	          transitionEnabled = _props.transitionEnabled,
	          zDepth = _props.zDepth,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'circle', 'rounded', 'style', 'transitionEnabled', 'zDepth']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }), children);
	    }
	  }]);
	  return Paper;
	}(_react.Component);

	Paper.defaultProps = {
	  circle: false,
	  rounded: true,
	  transitionEnabled: true,
	  zDepth: 1
	};
	Paper.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Paper.propTypes = {
	  /**
	   * Children passed into the paper element.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * Set to true to generate a circlular paper container.
	   */
	  circle: _react.PropTypes.bool,
	  /**
	   * By default, the paper container will have a border radius.
	   * Set this to false to generate a container with sharp corners.
	   */
	  rounded: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * Set to false to disable CSS transitions for the paper element.
	   */
	  transitionEnabled: _react.PropTypes.bool,
	  /**
	   * This number represents the zDepth of the paper shadow.
	   */
	  zDepth: _propTypes2.default.zDepth
	} : void 0;
	exports.default = Paper;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.CardExpandable = exports.CardActions = exports.CardText = exports.CardMedia = exports.CardTitle = exports.CardHeader = exports.Card = undefined;

	var _Card2 = __webpack_require__(382);

	var _Card3 = _interopRequireDefault(_Card2);

	var _CardHeader2 = __webpack_require__(386);

	var _CardHeader3 = _interopRequireDefault(_CardHeader2);

	var _CardTitle2 = __webpack_require__(389);

	var _CardTitle3 = _interopRequireDefault(_CardTitle2);

	var _CardMedia2 = __webpack_require__(390);

	var _CardMedia3 = _interopRequireDefault(_CardMedia2);

	var _CardText2 = __webpack_require__(391);

	var _CardText3 = _interopRequireDefault(_CardText2);

	var _CardActions2 = __webpack_require__(392);

	var _CardActions3 = _interopRequireDefault(_CardActions2);

	var _CardExpandable2 = __webpack_require__(383);

	var _CardExpandable3 = _interopRequireDefault(_CardExpandable2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.Card = _Card3.default;
	exports.CardHeader = _CardHeader3.default;
	exports.CardTitle = _CardTitle3.default;
	exports.CardMedia = _CardMedia3.default;
	exports.CardText = _CardText3.default;
	exports.CardActions = _CardActions3.default;
	exports.CardExpandable = _CardExpandable3.default;
	exports.default = _Card3.default;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _CardExpandable = __webpack_require__(383);

	var _CardExpandable2 = _interopRequireDefault(_CardExpandable);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var Card = function (_Component) {
	  (0, _inherits3.default)(Card, _Component);

	  function Card() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Card);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Card.__proto__ || (0, _getPrototypeOf2.default)(Card)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      expanded: null
	    }, _this.handleExpanding = function (event) {
	      event.preventDefault();
	      var newExpandedState = !_this.state.expanded;
	      // no automatic state update when the component is controlled
	      if (_this.props.expanded === null) {
	        _this.setState({ expanded: newExpandedState });
	      }
	      if (_this.props.onExpandChange) {
	        _this.props.onExpandChange(newExpandedState);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Card, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setState({
	        expanded: this.props.expanded === null ? this.props.initiallyExpanded === true : this.props.expanded
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // update the state when the component is controlled.
	      if (nextProps.expanded !== null) this.setState({ expanded: nextProps.expanded });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          style = _props.style,
	          containerStyle = _props.containerStyle,
	          children = _props.children,
	          expandable = _props.expandable,
	          expandedProp = _props.expanded,
	          initiallyExpanded = _props.initiallyExpanded,
	          onExpandChange = _props.onExpandChange,
	          other = (0, _objectWithoutProperties3.default)(_props, ['style', 'containerStyle', 'children', 'expandable', 'expanded', 'initiallyExpanded', 'onExpandChange']);

	      var lastElement = void 0;
	      var expanded = this.state.expanded;
	      var newChildren = _react2.default.Children.map(children, function (currentChild) {
	        var doClone = false;
	        var newChild = undefined;
	        var newProps = {};
	        var element = currentChild;
	        if (!currentChild || !currentChild.props) {
	          return null;
	        }
	        if (expanded === false && currentChild.props.expandable === true) return;
	        if (currentChild.props.actAsExpander === true) {
	          doClone = true;
	          newProps.onTouchTap = _this2.handleExpanding;
	          newProps.style = (0, _simpleAssign2.default)({ cursor: 'pointer' }, currentChild.props.style);
	        }
	        if (currentChild.props.showExpandableButton === true) {
	          doClone = true;
	          newChild = _react2.default.createElement(_CardExpandable2.default, {
	            closeIcon: currentChild.props.closeIcon,
	            expanded: expanded,
	            onExpanding: _this2.handleExpanding,
	            openIcon: currentChild.props.openIcon
	          });
	        }
	        if (doClone) {
	          element = _react2.default.cloneElement(currentChild, newProps, currentChild.props.children, newChild);
	        }
	        lastElement = element;
	        return element;
	      }, this);

	      // If the last element is text or a title we should add
	      // 8px padding to the bottom of the card
	      var addBottomPadding = lastElement && (lastElement.type.muiName === 'CardText' || lastElement.type.muiName === 'CardTitle');

	      var mergedStyles = (0, _simpleAssign2.default)({
	        zIndex: 1
	      }, style);
	      var containerMergedStyles = (0, _simpleAssign2.default)({
	        paddingBottom: addBottomPadding ? 8 : 0
	      }, containerStyle);

	      return _react2.default.createElement(_Paper2.default, (0, _extends3.default)({}, other, { style: mergedStyles }), _react2.default.createElement('div', { style: containerMergedStyles }, newChildren));
	    }
	  }]);
	  return Card;
	}(_react.Component);

	Card.defaultProps = {
	  expandable: false,
	  expanded: null,
	  initiallyExpanded: false
	};
	process.env.NODE_ENV !== "production" ? Card.propTypes = {
	  /**
	   * Can be used to render elements inside the Card.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * Override the inline-styles of the container element.
	   */
	  containerStyle: _react.PropTypes.object,
	  /**
	   * If true, this card component is expandable. Can be set on any child of the `Card` component.
	   */
	  expandable: _react.PropTypes.bool,
	  /**
	   * Whether this card is expanded.
	   * If `true` or `false` the component is controlled.
	   * if `null` the component is uncontrolled.
	   */
	  expanded: _react.PropTypes.bool,
	  /**
	   * Whether this card is initially expanded.
	   */
	  initiallyExpanded: _react.PropTypes.bool,
	  /**
	   * Callback function fired when the `expandable` state of the card has changed.
	   *
	   * @param {boolean} newExpandedState Represents the new `expanded` state of the card.
	   */
	  onExpandChange: _react.PropTypes.func,
	  /**
	   * If true, this card component will include a button to expand the card. `CardTitle`,
	   * `CardHeader` and `CardActions` implement `showExpandableButton`. Any child component
	   * of `Card` can implements `showExpandableButton` or forwards the property to a child
	   * component supporting it.
	   */
	  showExpandableButton: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = Card;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _keyboardArrowUp = __webpack_require__(384);

	var _keyboardArrowUp2 = _interopRequireDefault(_keyboardArrowUp);

	var _keyboardArrowDown = __webpack_require__(385);

	var _keyboardArrowDown2 = _interopRequireDefault(_keyboardArrowDown);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles() {
	  return {
	    root: {
	      top: 0,
	      bottom: 0,
	      right: 4,
	      margin: 'auto',
	      position: 'absolute'
	    }
	  };
	}

	var CardExpandable = function (_Component) {
	  (0, _inherits3.default)(CardExpandable, _Component);

	  function CardExpandable() {
	    (0, _classCallCheck3.default)(this, CardExpandable);
	    return (0, _possibleConstructorReturn3.default)(this, (CardExpandable.__proto__ || (0, _getPrototypeOf2.default)(CardExpandable)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardExpandable, [{
	    key: 'render',
	    value: function render() {
	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement(_IconButton2.default, {
	        style: (0, _simpleAssign2.default)(styles.root, this.props.style),
	        onTouchTap: this.props.onExpanding
	      }, this.props.expanded ? this.props.openIcon : this.props.closeIcon);
	    }
	  }]);
	  return CardExpandable;
	}(_react.Component);

	CardExpandable.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	CardExpandable.defaultProps = {
	  closeIcon: _react2.default.createElement(_keyboardArrowDown2.default, null),
	  openIcon: _react2.default.createElement(_keyboardArrowUp2.default, null)
	};
	process.env.NODE_ENV !== "production" ? CardExpandable.propTypes = {
	  closeIcon: _react.PropTypes.node,
	  expanded: _react.PropTypes.bool,
	  onExpanding: _react.PropTypes.func.isRequired,
	  openIcon: _react.PropTypes.node,
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = CardExpandable;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var HardwareKeyboardArrowUp = function HardwareKeyboardArrowUp(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' }));
	};
	HardwareKeyboardArrowUp = (0, _pure2.default)(HardwareKeyboardArrowUp);
	HardwareKeyboardArrowUp.displayName = 'HardwareKeyboardArrowUp';
	HardwareKeyboardArrowUp.muiName = 'SvgIcon';

	exports.default = HardwareKeyboardArrowUp;

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var HardwareKeyboardArrowDown = function HardwareKeyboardArrowDown(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z' }));
	};
	HardwareKeyboardArrowDown = (0, _pure2.default)(HardwareKeyboardArrowDown);
	HardwareKeyboardArrowDown.displayName = 'HardwareKeyboardArrowDown';
	HardwareKeyboardArrowDown.muiName = 'SvgIcon';

	exports.default = HardwareKeyboardArrowDown;

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Avatar = __webpack_require__(387);

	var _Avatar2 = _interopRequireDefault(_Avatar);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var card = context.muiTheme.card;

	  return {
	    root: {
	      padding: 16,
	      fontWeight: card.fontWeight,
	      boxSizing: 'border-box',
	      position: 'relative',
	      whiteSpace: 'nowrap'
	    },
	    text: {
	      display: 'inline-block',
	      verticalAlign: 'top',
	      whiteSpace: 'normal',
	      paddingRight: '90px'
	    },
	    avatar: {
	      marginRight: 16
	    },
	    title: {
	      color: props.titleColor || card.titleColor,
	      display: 'block',
	      fontSize: 15
	    },
	    subtitle: {
	      color: props.subtitleColor || card.subtitleColor,
	      display: 'block',
	      fontSize: 14
	    }
	  };
	}

	var CardHeader = function (_Component) {
	  (0, _inherits3.default)(CardHeader, _Component);

	  function CardHeader() {
	    (0, _classCallCheck3.default)(this, CardHeader);
	    return (0, _possibleConstructorReturn3.default)(this, (CardHeader.__proto__ || (0, _getPrototypeOf2.default)(CardHeader)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardHeader, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          avatarProp = _props.avatar,
	          children = _props.children,
	          closeIcon = _props.closeIcon,
	          expandable = _props.expandable,
	          openIcon = _props.openIcon,
	          showExpandableButton = _props.showExpandableButton,
	          style = _props.style,
	          subtitle = _props.subtitle,
	          subtitleColor = _props.subtitleColor,
	          subtitleStyle = _props.subtitleStyle,
	          textStyle = _props.textStyle,
	          title = _props.title,
	          titleColor = _props.titleColor,
	          titleStyle = _props.titleStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'avatar', 'children', 'closeIcon', 'expandable', 'openIcon', 'showExpandableButton', 'style', 'subtitle', 'subtitleColor', 'subtitleStyle', 'textStyle', 'title', 'titleColor', 'titleStyle']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var avatar = avatarProp;

	      if ((0, _react.isValidElement)(avatarProp)) {
	        avatar = _react2.default.cloneElement(avatar, {
	          style: (0, _simpleAssign2.default)(styles.avatar, avatar.props.style)
	        });
	      } else if (avatar !== null) {
	        avatar = _react2.default.createElement(_Avatar2.default, { src: avatarProp, style: styles.avatar });
	      }

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }), avatar, _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)(styles.text, textStyle)) }, _react2.default.createElement('span', { style: prepareStyles((0, _simpleAssign2.default)(styles.title, titleStyle)) }, title), _react2.default.createElement('span', { style: prepareStyles((0, _simpleAssign2.default)(styles.subtitle, subtitleStyle)) }, subtitle)), children);
	    }
	  }]);
	  return CardHeader;
	}(_react.Component);

	CardHeader.muiName = 'CardHeader';
	CardHeader.defaultProps = {
	  avatar: null
	};
	CardHeader.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? CardHeader.propTypes = {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _react.PropTypes.bool,
	  /**
	   * This is the [Avatar](/#/components/avatar) element to be displayed on the Card Header.
	   * If `avatar` is an `Avatar` or other element, it will be rendered.
	   * If `avatar` is a string, it will be used as the image `src` for an `Avatar`.
	   */
	  avatar: _react.PropTypes.node,
	  /**
	   * Can be used to render elements inside the Card Header.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * Can be used to pass a closeIcon if you don't like the default expandable close Icon.
	   */
	  closeIcon: _react.PropTypes.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _react.PropTypes.bool,
	  /**
	   * Can be used to pass a openIcon if you don't like the default expandable open Icon.
	   */
	  openIcon: _react.PropTypes.node,
	  /**
	   * If true, this card component will include a button to expand the card.
	   */
	  showExpandableButton: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * Can be used to render a subtitle in Card Header.
	   */
	  subtitle: _react.PropTypes.node,
	  /**
	   * Override the subtitle color.
	   */
	  subtitleColor: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the subtitle.
	   */
	  subtitleStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the text.
	   */
	  textStyle: _react.PropTypes.object,
	  /**
	   * Can be used to render a title in Card Header.
	   */
	  title: _react.PropTypes.node,
	  /**
	   * Override the title color.
	   */
	  titleColor: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the title.
	   */
	  titleStyle: _react.PropTypes.object
	} : void 0;
	exports.default = CardHeader;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Avatar = __webpack_require__(388);

	var _Avatar2 = _interopRequireDefault(_Avatar);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Avatar2.default;

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var backgroundColor = props.backgroundColor,
	      color = props.color,
	      size = props.size;
	  var avatar = context.muiTheme.avatar;

	  var styles = {
	    root: {
	      color: color || avatar.color,
	      backgroundColor: backgroundColor || avatar.backgroundColor,
	      userSelect: 'none',
	      display: 'inline-flex',
	      alignItems: 'center',
	      justifyContent: 'center',
	      fontSize: size / 2,
	      borderRadius: '50%',
	      height: size,
	      width: size
	    },
	    icon: {
	      color: color || avatar.color,
	      width: size * 0.6,
	      height: size * 0.6,
	      fontSize: size * 0.6,
	      margin: size * 0.2
	    }
	  };

	  return styles;
	}

	var Avatar = function (_Component) {
	  (0, _inherits3.default)(Avatar, _Component);

	  function Avatar() {
	    (0, _classCallCheck3.default)(this, Avatar);
	    return (0, _possibleConstructorReturn3.default)(this, (Avatar.__proto__ || (0, _getPrototypeOf2.default)(Avatar)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(Avatar, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          backgroundColor = _props.backgroundColor,
	          icon = _props.icon,
	          src = _props.src,
	          style = _props.style,
	          className = _props.className,
	          other = (0, _objectWithoutProperties3.default)(_props, ['backgroundColor', 'icon', 'src', 'style', 'className']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      if (src) {
	        return _react2.default.createElement('img', (0, _extends3.default)({
	          style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	        }, other, {
	          src: src,
	          className: className
	        }));
	      } else {
	        return _react2.default.createElement('div', (0, _extends3.default)({}, other, {
	          style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)),
	          className: className
	        }), icon && _react2.default.cloneElement(icon, {
	          color: styles.icon.color,
	          style: (0, _simpleAssign2.default)(styles.icon, icon.props.style)
	        }), this.props.children);
	      }
	    }
	  }]);
	  return Avatar;
	}(_react.Component);

	Avatar.muiName = 'Avatar';
	Avatar.defaultProps = {
	  size: 40
	};
	Avatar.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Avatar.propTypes = {
	  /**
	   * The backgroundColor of the avatar. Does not apply to image avatars.
	   */
	  backgroundColor: _react.PropTypes.string,
	  /**
	   * Can be used, for instance, to render a letter inside the avatar.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root `div` or `img` element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * The icon or letter's color.
	   */
	  color: _react.PropTypes.string,
	  /**
	   * This is the SvgIcon or FontIcon to be used inside the avatar.
	   */
	  icon: _react.PropTypes.element,
	  /**
	   * This is the size of the avatar in pixels.
	   */
	  size: _react.PropTypes.number,
	  /**
	   * If passed in, this component will render an img element. Otherwise, a div will be rendered.
	   */
	  src: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = Avatar;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var card = context.muiTheme.card;

	  return {
	    root: {
	      padding: 16,
	      position: 'relative'
	    },
	    title: {
	      fontSize: 24,
	      color: props.titleColor || card.titleColor,
	      display: 'block',
	      lineHeight: '36px'
	    },
	    subtitle: {
	      fontSize: 14,
	      color: props.subtitleColor || card.subtitleColor,
	      display: 'block'
	    }
	  };
	}

	var CardTitle = function (_Component) {
	  (0, _inherits3.default)(CardTitle, _Component);

	  function CardTitle() {
	    (0, _classCallCheck3.default)(this, CardTitle);
	    return (0, _possibleConstructorReturn3.default)(this, (CardTitle.__proto__ || (0, _getPrototypeOf2.default)(CardTitle)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardTitle, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          expandable = _props.expandable,
	          showExpandableButton = _props.showExpandableButton,
	          style = _props.style,
	          subtitle = _props.subtitle,
	          subtitleColor = _props.subtitleColor,
	          subtitleStyle = _props.subtitleStyle,
	          title = _props.title,
	          titleColor = _props.titleColor,
	          titleStyle = _props.titleStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'expandable', 'showExpandableButton', 'style', 'subtitle', 'subtitleColor', 'subtitleStyle', 'title', 'titleColor', 'titleStyle']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var rootStyle = (0, _simpleAssign2.default)({}, styles.root, style);
	      var extendedTitleStyle = (0, _simpleAssign2.default)({}, styles.title, titleStyle);
	      var extendedSubtitleStyle = (0, _simpleAssign2.default)({}, styles.subtitle, subtitleStyle);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles(rootStyle) }), _react2.default.createElement('span', { style: prepareStyles(extendedTitleStyle) }, title), _react2.default.createElement('span', { style: prepareStyles(extendedSubtitleStyle) }, subtitle), children);
	    }
	  }]);
	  return CardTitle;
	}(_react.Component);

	CardTitle.muiName = 'CardTitle';
	CardTitle.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? CardTitle.propTypes = {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _react.PropTypes.bool,
	  /**
	   * Can be used to render elements inside the Card Title.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _react.PropTypes.bool,
	  /**
	   * If true, this card component will include a button to expand the card.
	   */
	  showExpandableButton: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * Can be used to render a subtitle in the Card Title.
	   */
	  subtitle: _react.PropTypes.node,
	  /**
	   * Override the subtitle color.
	   */
	  subtitleColor: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the subtitle.
	   */
	  subtitleStyle: _react.PropTypes.object,
	  /**
	   * Can be used to render a title in the Card Title.
	   */
	  title: _react.PropTypes.node,
	  /**
	   * Override the title color.
	   */
	  titleColor: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the title.
	   */
	  titleStyle: _react.PropTypes.object
	} : void 0;
	exports.default = CardTitle;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var cardMedia = context.muiTheme.cardMedia;

	  return {
	    root: {
	      position: 'relative'
	    },
	    overlayContainer: {
	      position: 'absolute',
	      top: 0,
	      bottom: 0,
	      right: 0,
	      left: 0
	    },
	    overlay: {
	      height: '100%',
	      position: 'relative'
	    },
	    overlayContent: {
	      position: 'absolute',
	      bottom: 0,
	      right: 0,
	      left: 0,
	      paddingTop: 8,
	      background: cardMedia.overlayContentBackground
	    },
	    media: {},
	    mediaChild: {
	      verticalAlign: 'top',
	      maxWidth: '100%',
	      minWidth: '100%',
	      width: '100%'
	    }
	  };
	}

	var CardMedia = function (_Component) {
	  (0, _inherits3.default)(CardMedia, _Component);

	  function CardMedia() {
	    (0, _classCallCheck3.default)(this, CardMedia);
	    return (0, _possibleConstructorReturn3.default)(this, (CardMedia.__proto__ || (0, _getPrototypeOf2.default)(CardMedia)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardMedia, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          expandable = _props.expandable,
	          mediaStyle = _props.mediaStyle,
	          overlay = _props.overlay,
	          overlayContainerStyle = _props.overlayContainerStyle,
	          overlayContentStyle = _props.overlayContentStyle,
	          overlayStyle = _props.overlayStyle,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'expandable', 'mediaStyle', 'overlay', 'overlayContainerStyle', 'overlayContentStyle', 'overlayStyle', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var rootStyle = (0, _simpleAssign2.default)(styles.root, style);
	      var extendedMediaStyle = (0, _simpleAssign2.default)(styles.media, mediaStyle);
	      var extendedOverlayContainerStyle = (0, _simpleAssign2.default)(styles.overlayContainer, overlayContainerStyle);
	      var extendedOverlayContentStyle = (0, _simpleAssign2.default)(styles.overlayContent, overlayContentStyle);
	      var extendedOverlayStyle = (0, _simpleAssign2.default)(styles.overlay, overlayStyle);
	      var titleColor = this.context.muiTheme.cardMedia.titleColor;
	      var subtitleColor = this.context.muiTheme.cardMedia.subtitleColor;
	      var color = this.context.muiTheme.cardMedia.color;

	      var styledChildren = _react2.default.Children.map(children, function (child) {
	        return _react2.default.cloneElement(child, {
	          style: prepareStyles((0, _simpleAssign2.default)({}, styles.mediaChild, child.props.style))
	        });
	      });

	      var overlayChildren = _react2.default.Children.map(overlay, function (child) {
	        if (child.type.muiName === 'CardHeader' || child.type.muiName === 'CardTitle') {
	          return _react2.default.cloneElement(child, {
	            titleColor: titleColor,
	            subtitleColor: subtitleColor
	          });
	        } else if (child.type.muiName === 'CardText') {
	          return _react2.default.cloneElement(child, {
	            color: color
	          });
	        } else {
	          return child;
	        }
	      });

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles(rootStyle) }), _react2.default.createElement('div', { style: prepareStyles(extendedMediaStyle) }, styledChildren), overlay ? _react2.default.createElement('div', { style: prepareStyles(extendedOverlayContainerStyle) }, _react2.default.createElement('div', { style: prepareStyles(extendedOverlayStyle) }, _react2.default.createElement('div', { style: prepareStyles(extendedOverlayContentStyle) }, overlayChildren))) : '');
	    }
	  }]);
	  return CardMedia;
	}(_react.Component);

	CardMedia.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? CardMedia.propTypes = {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _react.PropTypes.bool,
	  /**
	   * Can be used to render elements inside the Card Media.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the Card Media.
	   */
	  mediaStyle: _react.PropTypes.object,
	  /**
	   * Can be used to render overlay element in Card Media.
	   */
	  overlay: _react.PropTypes.node,
	  /**
	   * Override the inline-styles of the overlay container.
	   */
	  overlayContainerStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the overlay content.
	   */
	  overlayContentStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the overlay element.
	   */
	  overlayStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = CardMedia;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var cardText = context.muiTheme.cardText;

	  return {
	    root: {
	      padding: 16,
	      fontSize: 14,
	      color: props.color || cardText.textColor
	    }
	  };
	}

	var CardText = function (_Component) {
	  (0, _inherits3.default)(CardText, _Component);

	  function CardText() {
	    (0, _classCallCheck3.default)(this, CardText);
	    return (0, _possibleConstructorReturn3.default)(this, (CardText.__proto__ || (0, _getPrototypeOf2.default)(CardText)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardText, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          color = _props.color,
	          expandable = _props.expandable,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'color', 'expandable', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var rootStyle = (0, _simpleAssign2.default)(styles.root, style);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles(rootStyle) }), children);
	    }
	  }]);
	  return CardText;
	}(_react.Component);

	CardText.muiName = 'CardText';
	CardText.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? CardText.propTypes = {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _react.PropTypes.bool,
	  /**
	   * Can be used to render elements inside the Card Text.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * Override the CardText color.
	   */
	  color: _react.PropTypes.string,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = CardText;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles() {
	  return {
	    root: {
	      padding: 8,
	      position: 'relative'
	    },
	    action: {
	      marginRight: 8
	    }
	  };
	}

	var CardActions = function (_Component) {
	  (0, _inherits3.default)(CardActions, _Component);

	  function CardActions() {
	    (0, _classCallCheck3.default)(this, CardActions);
	    return (0, _possibleConstructorReturn3.default)(this, (CardActions.__proto__ || (0, _getPrototypeOf2.default)(CardActions)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardActions, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          expandable = _props.expandable,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'expandable', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var styledChildren = _react2.default.Children.map(children, function (child) {
	        if (_react2.default.isValidElement(child)) {
	          return _react2.default.cloneElement(child, {
	            style: (0, _simpleAssign2.default)({}, styles.action, child.props.style)
	          });
	        }
	      });

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }), styledChildren);
	    }
	  }]);
	  return CardActions;
	}(_react.Component);

	CardActions.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? CardActions.propTypes = {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _react.PropTypes.bool,
	  /**
	   * Can be used to render elements inside the Card Action.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _react.PropTypes.bool,
	  /**
	   * If true, this card component will include a button to expand the card.
	   */
	  showExpandableButton: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = CardActions;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _FlatButton = __webpack_require__(394);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _FlatButton2.default;

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _childUtils = __webpack_require__(341);

	var _colorManipulator = __webpack_require__(235);

	var _EnhancedButton = __webpack_require__(340);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _FlatButtonLabel = __webpack_require__(395);

	var _FlatButtonLabel2 = _interopRequireDefault(_FlatButtonLabel);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function validateLabel(props, propName, componentName) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!props.children && props.label !== 0 && !props.label && !props.icon) {
	      return new Error('Required prop label or children or icon was not specified in ' + componentName + '.');
	    }
	  }
	}

	var FlatButton = function (_Component) {
	  (0, _inherits3.default)(FlatButton, _Component);

	  function FlatButton() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, FlatButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false,
	      isKeyboardFocused: false,
	      touch: false
	    }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
	      _this.setState({ isKeyboardFocused: isKeyboardFocused });
	      _this.props.onKeyboardFocus(event, isKeyboardFocused);
	    }, _this.handleMouseEnter = function (event) {
	      // Cancel hover styles for touch devices
	      if (!_this.state.touch) _this.setState({ hovered: true });
	      _this.props.onMouseEnter(event);
	    }, _this.handleMouseLeave = function (event) {
	      _this.setState({ hovered: false });
	      _this.props.onMouseLeave(event);
	    }, _this.handleTouchStart = function (event) {
	      _this.setState({ touch: true });
	      _this.props.onTouchStart(event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(FlatButton, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.disabled) {
	        this.setState({
	          hovered: false
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          disabled = _props.disabled,
	          hoverColor = _props.hoverColor,
	          backgroundColor = _props.backgroundColor,
	          icon = _props.icon,
	          label = _props.label,
	          labelStyle = _props.labelStyle,
	          labelPosition = _props.labelPosition,
	          primary = _props.primary,
	          rippleColor = _props.rippleColor,
	          secondary = _props.secondary,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'disabled', 'hoverColor', 'backgroundColor', 'icon', 'label', 'labelStyle', 'labelPosition', 'primary', 'rippleColor', 'secondary', 'style']);
	      var _context$muiTheme = this.context.muiTheme,
	          _context$muiTheme$but = _context$muiTheme.button,
	          buttonHeight = _context$muiTheme$but.height,
	          buttonMinWidth = _context$muiTheme$but.minWidth,
	          buttonTextTransform = _context$muiTheme$but.textTransform,
	          _context$muiTheme$fla = _context$muiTheme.flatButton,
	          buttonFilterColor = _context$muiTheme$fla.buttonFilterColor,
	          buttonColor = _context$muiTheme$fla.color,
	          disabledTextColor = _context$muiTheme$fla.disabledTextColor,
	          fontSize = _context$muiTheme$fla.fontSize,
	          fontWeight = _context$muiTheme$fla.fontWeight,
	          primaryTextColor = _context$muiTheme$fla.primaryTextColor,
	          secondaryTextColor = _context$muiTheme$fla.secondaryTextColor,
	          textColor = _context$muiTheme$fla.textColor,
	          _context$muiTheme$fla2 = _context$muiTheme$fla.textTransform,
	          textTransform = _context$muiTheme$fla2 === undefined ? buttonTextTransform || 'uppercase' : _context$muiTheme$fla2;

	      var defaultTextColor = disabled ? disabledTextColor : primary ? primaryTextColor : secondary ? secondaryTextColor : textColor;

	      var defaultHoverColor = (0, _colorManipulator.fade)(buttonFilterColor, 0.2);
	      var defaultRippleColor = buttonFilterColor;
	      var buttonHoverColor = hoverColor || defaultHoverColor;
	      var buttonRippleColor = rippleColor || defaultRippleColor;
	      var buttonBackgroundColor = backgroundColor || buttonColor;
	      var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;

	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        height: buttonHeight,
	        lineHeight: buttonHeight + 'px',
	        minWidth: buttonMinWidth,
	        color: defaultTextColor,
	        transition: _transitions2.default.easeOut(),
	        borderRadius: 2,
	        userSelect: 'none',
	        position: 'relative',
	        overflow: 'hidden',
	        backgroundColor: hovered ? buttonHoverColor : buttonBackgroundColor,
	        padding: 0,
	        margin: 0,
	        textAlign: 'center'
	      }, style);

	      var iconCloned = void 0;
	      var labelStyleIcon = {};

	      if (icon) {
	        var iconStyles = (0, _simpleAssign2.default)({
	          verticalAlign: 'middle',
	          marginLeft: label && labelPosition !== 'before' ? 12 : 0,
	          marginRight: label && labelPosition === 'before' ? 12 : 0
	        }, icon.props.style);
	        iconCloned = _react2.default.cloneElement(icon, {
	          color: icon.props.color || mergedRootStyles.color,
	          style: iconStyles
	        });

	        if (labelPosition === 'before') {
	          labelStyleIcon.paddingRight = 8;
	        } else {
	          labelStyleIcon.paddingLeft = 8;
	        }
	      }

	      var mergedLabelStyles = (0, _simpleAssign2.default)({
	        letterSpacing: 0,
	        textTransform: textTransform,
	        fontWeight: fontWeight,
	        fontSize: fontSize
	      }, labelStyleIcon, labelStyle);

	      var labelElement = label ? _react2.default.createElement(_FlatButtonLabel2.default, { label: label, style: mergedLabelStyles }) : undefined;

	      // Place label before or after children.
	      var childrenFragment = labelPosition === 'before' ? {
	        labelElement: labelElement,
	        iconCloned: iconCloned,
	        children: children
	      } : {
	        children: children,
	        iconCloned: iconCloned,
	        labelElement: labelElement
	      };

	      var enhancedButtonChildren = (0, _childUtils.createChildFragment)(childrenFragment);

	      return _react2.default.createElement(_EnhancedButton2.default, (0, _extends3.default)({}, other, {
	        disabled: disabled,
	        focusRippleColor: buttonRippleColor,
	        focusRippleOpacity: 0.3,
	        onKeyboardFocus: this.handleKeyboardFocus,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseEnter: this.handleMouseEnter,
	        onTouchStart: this.handleTouchStart,
	        style: mergedRootStyles,
	        touchRippleColor: buttonRippleColor,
	        touchRippleOpacity: 0.3
	      }), enhancedButtonChildren);
	    }
	  }]);
	  return FlatButton;
	}(_react.Component);

	FlatButton.muiName = 'FlatButton';
	FlatButton.defaultProps = {
	  disabled: false,
	  labelStyle: {},
	  labelPosition: 'after',
	  onKeyboardFocus: function onKeyboardFocus() {},
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  onTouchStart: function onTouchStart() {},
	  primary: false,
	  secondary: false
	};
	FlatButton.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? FlatButton.propTypes = {
	  /**
	   * Color of button when mouse is not hovering over it.
	   */
	  backgroundColor: _react.PropTypes.string,
	  /**
	   * This is what will be displayed inside the button.
	   * If a label is specified, the text within the label prop will
	   * be displayed. Otherwise, the component will expect children
	   * which will then be displayed. (In our example,
	   * we are nesting an `<input type="file" />` and a `span`
	   * that acts as our label to be displayed.) This only
	   * applies to flat and raised buttons.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * Disables the button if set to true.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * Color of button when mouse hovers over.
	   */
	  hoverColor: _react.PropTypes.string,
	  /**
	   * The URL to link to when the button is clicked.
	   */
	  href: _react.PropTypes.string,
	  /**
	   * Use this property to display an icon.
	   */
	  icon: _react.PropTypes.node,
	  /**
	   * Label for the button.
	   */
	  label: validateLabel,
	  /**
	   * Place label before or after the passed children.
	   */
	  labelPosition: _react.PropTypes.oneOf(['before', 'after']),
	  /**
	   * Override the inline-styles of the button's label element.
	   */
	  labelStyle: _react.PropTypes.object,
	  /**
	   * Callback function fired when the element is focused or blurred by the keyboard.
	   *
	   * @param {object} event `focus` or `blur` event targeting the element.
	   * @param {boolean} isKeyboardFocused Indicates whether the element is focused.
	   */
	  onKeyboardFocus: _react.PropTypes.func,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /** @ignore */
	  onTouchStart: _react.PropTypes.func,
	  /**
	   * If true, colors button according to
	   * primaryTextColor from the Theme.
	   */
	  primary: _react.PropTypes.bool,
	  /**
	   * Color for the ripple after button is clicked.
	   */
	  rippleColor: _react.PropTypes.string,
	  /**
	   * If true, colors button according to secondaryTextColor from the theme.
	   * The primary prop has precendent if set to true.
	   */
	  secondary: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = FlatButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var baseTheme = context.muiTheme.baseTheme;

	  return {
	    root: {
	      position: 'relative',
	      paddingLeft: baseTheme.spacing.desktopGutterLess,
	      paddingRight: baseTheme.spacing.desktopGutterLess,
	      verticalAlign: 'middle'
	    }
	  };
	}

	var FlatButtonLabel = function (_Component) {
	  (0, _inherits3.default)(FlatButtonLabel, _Component);

	  function FlatButtonLabel() {
	    (0, _classCallCheck3.default)(this, FlatButtonLabel);
	    return (0, _possibleConstructorReturn3.default)(this, (FlatButtonLabel.__proto__ || (0, _getPrototypeOf2.default)(FlatButtonLabel)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(FlatButtonLabel, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          label = _props.label,
	          style = _props.style;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement('span', { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }, label);
	    }
	  }]);
	  return FlatButtonLabel;
	}(_react.Component);

	FlatButtonLabel.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? FlatButtonLabel.propTypes = {
	  label: _react.PropTypes.node,
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = FlatButtonLabel;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Drawer = __webpack_require__(397);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Drawer2.default;

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactEventListener = __webpack_require__(398);

	var _reactEventListener2 = _interopRequireDefault(_reactEventListener);

	var _keycode = __webpack_require__(345);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _autoPrefix = __webpack_require__(348);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _Overlay = __webpack_require__(403);

	var _Overlay2 = _interopRequireDefault(_Overlay);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var openNavEventHandler = null;

	var Drawer = function (_Component) {
	  (0, _inherits3.default)(Drawer, _Component);

	  function Drawer() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Drawer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Drawer.__proto__ || (0, _getPrototypeOf2.default)(Drawer)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapOverlay = function (event) {
	      event.preventDefault();
	      _this.close('clickaway');
	    }, _this.handleKeyUp = function (event) {
	      if (_this.state.open && !_this.props.docked && (0, _keycode2.default)(event) === 'esc') {
	        _this.close('escape');
	      }
	    }, _this.onBodyTouchStart = function (event) {
	      var swipeAreaWidth = _this.props.swipeAreaWidth;

	      var touchStartX = event.touches[0].pageX;
	      var touchStartY = event.touches[0].pageY;

	      // Open only if swiping from far left (or right) while closed
	      if (swipeAreaWidth !== null && !_this.state.open) {
	        if (_this.props.openSecondary) {
	          // If openSecondary is true calculate from the far right
	          if (touchStartX < document.body.offsetWidth - swipeAreaWidth) return;
	        } else {
	          // If openSecondary is false calculate from the far left
	          if (touchStartX > swipeAreaWidth) return;
	        }
	      }

	      if (!_this.state.open && (openNavEventHandler !== _this.onBodyTouchStart || _this.props.disableSwipeToOpen)) {
	        return;
	      }

	      _this.maybeSwiping = true;
	      _this.touchStartX = touchStartX;
	      _this.touchStartY = touchStartY;

	      document.body.addEventListener('touchmove', _this.onBodyTouchMove);
	      document.body.addEventListener('touchend', _this.onBodyTouchEnd);
	      document.body.addEventListener('touchcancel', _this.onBodyTouchEnd);
	    }, _this.onBodyTouchMove = function (event) {
	      var currentX = event.touches[0].pageX;
	      var currentY = event.touches[0].pageY;

	      if (_this.state.swiping) {
	        event.preventDefault();
	        _this.setPosition(_this.getTranslateX(currentX));
	      } else if (_this.maybeSwiping) {
	        var dXAbs = Math.abs(currentX - _this.touchStartX);
	        var dYAbs = Math.abs(currentY - _this.touchStartY);
	        // If the user has moved his thumb ten pixels in either direction,
	        // we can safely make an assumption about whether he was intending
	        // to swipe or scroll.
	        var threshold = 10;

	        if (dXAbs > threshold && dYAbs <= threshold) {
	          _this.swipeStartX = currentX;
	          _this.setState({
	            swiping: _this.state.open ? 'closing' : 'opening'
	          });
	          _this.setPosition(_this.getTranslateX(currentX));
	        } else if (dXAbs <= threshold && dYAbs > threshold) {
	          _this.onBodyTouchEnd();
	        }
	      }
	    }, _this.onBodyTouchEnd = function (event) {
	      if (_this.state.swiping) {
	        var currentX = event.changedTouches[0].pageX;
	        var translateRatio = _this.getTranslateX(currentX) / _this.getMaxTranslateX();

	        _this.maybeSwiping = false;
	        var swiping = _this.state.swiping;
	        _this.setState({
	          swiping: null
	        });

	        // We have to open or close after setting swiping to null,
	        // because only then CSS transition is enabled.
	        if (translateRatio > 0.5) {
	          if (swiping === 'opening') {
	            _this.setPosition(_this.getMaxTranslateX());
	          } else {
	            _this.close('swipe');
	          }
	        } else {
	          if (swiping === 'opening') {
	            _this.open('swipe');
	          } else {
	            _this.setPosition(0);
	          }
	        }
	      } else {
	        _this.maybeSwiping = false;
	      }

	      document.body.removeEventListener('touchmove', _this.onBodyTouchMove);
	      document.body.removeEventListener('touchend', _this.onBodyTouchEnd);
	      document.body.removeEventListener('touchcancel', _this.onBodyTouchEnd);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Drawer, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.maybeSwiping = false;
	      this.touchStartX = null;
	      this.touchStartY = null;
	      this.swipeStartX = null;

	      this.setState({
	        open: this.props.open !== null ? this.props.open : this.props.docked,
	        swiping: null
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.enableSwipeHandling();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // If controlled then the open prop takes precedence.
	      if (nextProps.open !== null) {
	        this.setState({
	          open: nextProps.open
	        });
	        // Otherwise, if docked is changed, change the open state for when uncontrolled.
	      } else if (this.props.docked !== nextProps.docked) {
	        this.setState({
	          open: nextProps.docked
	        });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.enableSwipeHandling();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.disableSwipeHandling();
	    }
	  }, {
	    key: 'getStyles',
	    value: function getStyles() {
	      var muiTheme = this.context.muiTheme;
	      var theme = muiTheme.drawer;

	      var x = this.getTranslateMultiplier() * (this.state.open ? 0 : this.getMaxTranslateX());

	      var styles = {
	        root: {
	          height: '100%',
	          width: this.props.width || theme.width,
	          position: 'fixed',
	          zIndex: muiTheme.zIndex.drawer,
	          left: 0,
	          top: 0,
	          transform: 'translate(' + x + 'px, 0)',
	          transition: !this.state.swiping && _transitions2.default.easeOut(null, 'transform', null),
	          backgroundColor: theme.color,
	          overflow: 'auto',
	          WebkitOverflowScrolling: 'touch' },
	        overlay: {
	          zIndex: muiTheme.zIndex.drawerOverlay,
	          pointerEvents: this.state.open ? 'auto' : 'none' },
	        rootWhenOpenRight: {
	          left: 'auto',
	          right: 0
	        }
	      };

	      return styles;
	    }
	  }, {
	    key: 'shouldShow',
	    value: function shouldShow() {
	      return this.state.open || !!this.state.swiping; // component is swiping
	    }
	  }, {
	    key: 'close',
	    value: function close(reason) {
	      if (this.props.open === null) this.setState({ open: false });
	      if (this.props.onRequestChange) this.props.onRequestChange(false, reason);
	      return this;
	    }
	  }, {
	    key: 'open',
	    value: function open(reason) {
	      if (this.props.open === null) this.setState({ open: true });
	      if (this.props.onRequestChange) this.props.onRequestChange(true, reason);
	      return this;
	    }
	  }, {
	    key: 'getMaxTranslateX',
	    value: function getMaxTranslateX() {
	      var width = this.props.width || this.context.muiTheme.drawer.width;
	      return width + 10;
	    }
	  }, {
	    key: 'getTranslateMultiplier',
	    value: function getTranslateMultiplier() {
	      return this.props.openSecondary ? 1 : -1;
	    }
	  }, {
	    key: 'enableSwipeHandling',
	    value: function enableSwipeHandling() {
	      if (!this.props.docked) {
	        document.body.addEventListener('touchstart', this.onBodyTouchStart);
	        if (!openNavEventHandler) {
	          openNavEventHandler = this.onBodyTouchStart;
	        }
	      } else {
	        this.disableSwipeHandling();
	      }
	    }
	  }, {
	    key: 'disableSwipeHandling',
	    value: function disableSwipeHandling() {
	      document.body.removeEventListener('touchstart', this.onBodyTouchStart);
	      if (openNavEventHandler === this.onBodyTouchStart) {
	        openNavEventHandler = null;
	      }
	    }
	  }, {
	    key: 'setPosition',
	    value: function setPosition(translateX) {
	      var drawer = _reactDom2.default.findDOMNode(this.refs.clickAwayableElement);
	      var transformCSS = 'translate(' + this.getTranslateMultiplier() * translateX + 'px, 0)';
	      this.refs.overlay.setOpacity(1 - translateX / this.getMaxTranslateX());
	      _autoPrefix2.default.set(drawer.style, 'transform', transformCSS);
	    }
	  }, {
	    key: 'getTranslateX',
	    value: function getTranslateX(currentX) {
	      return Math.min(Math.max(this.state.swiping === 'closing' ? this.getTranslateMultiplier() * (currentX - this.swipeStartX) : this.getMaxTranslateX() - this.getTranslateMultiplier() * (this.swipeStartX - currentX), 0), this.getMaxTranslateX());
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          containerClassName = _props.containerClassName,
	          containerStyle = _props.containerStyle,
	          docked = _props.docked,
	          openSecondary = _props.openSecondary,
	          overlayClassName = _props.overlayClassName,
	          overlayStyle = _props.overlayStyle,
	          style = _props.style,
	          zDepth = _props.zDepth;

	      var styles = this.getStyles();

	      var overlay = void 0;
	      if (!docked) {
	        overlay = _react2.default.createElement(_Overlay2.default, {
	          ref: 'overlay',
	          show: this.shouldShow(),
	          className: overlayClassName,
	          style: (0, _simpleAssign2.default)(styles.overlay, overlayStyle),
	          transitionEnabled: !this.state.swiping,
	          onTouchTap: this.handleTouchTapOverlay
	        });
	      }

	      return _react2.default.createElement('div', {
	        className: className,
	        style: style
	      }, _react2.default.createElement(_reactEventListener2.default, { target: 'window', onKeyUp: this.handleKeyUp }), overlay, _react2.default.createElement(_Paper2.default, {
	        ref: 'clickAwayableElement',
	        zDepth: zDepth,
	        rounded: false,
	        transitionEnabled: !this.state.swiping,
	        className: containerClassName,
	        style: (0, _simpleAssign2.default)(styles.root, openSecondary && styles.rootWhenOpenRight, containerStyle)
	      }, children));
	    }
	  }]);
	  return Drawer;
	}(_react.Component);

	Drawer.defaultProps = {
	  disableSwipeToOpen: false,
	  docked: true,
	  open: null,
	  openSecondary: false,
	  swipeAreaWidth: 30,
	  width: null,
	  zDepth: 2
	};
	Drawer.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Drawer.propTypes = {
	  /**
	   * The contents of the `Drawer`
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The CSS class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * The CSS class name of the container element.
	   */
	  containerClassName: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the container element.
	   */
	  containerStyle: _react.PropTypes.object,
	  /**
	   * If true, swiping sideways when the `Drawer` is closed will not open it.
	   */
	  disableSwipeToOpen: _react.PropTypes.bool,
	  /**
	   * If true, the `Drawer` will be docked. In this state, the overlay won't show and
	   * clicking on a menu item will not close the `Drawer`.
	   */
	  docked: _react.PropTypes.bool,
	  /**
	   * Callback function fired when the `open` state of the `Drawer` is requested to be changed.
	   *
	   * @param {boolean} open If true, the `Drawer` was requested to be opened.
	   * @param {string} reason The reason for the open or close request. Possible values are
	   * 'swipe' for open requests; 'clickaway' (on overlay clicks),
	   * 'escape' (on escape key press), and 'swipe' for close requests.
	   */
	  onRequestChange: _react.PropTypes.func,
	  /**
	   * If true, the `Drawer` is opened.  Providing a value will turn the `Drawer`
	   * into a controlled component.
	   */
	  open: _react.PropTypes.bool,
	  /**
	   * If true, the `Drawer` is positioned to open from the opposite side.
	   */
	  openSecondary: _react.PropTypes.bool,
	  /**
	   * The CSS class name to add to the `Overlay` component that is rendered behind the `Drawer`.
	   */
	  overlayClassName: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the `Overlay` component that is rendered behind the `Drawer`.
	   */
	  overlayStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The width of the left most (or right most) area in pixels where the `Drawer` can be
	   * swiped open from. Setting this to `null` spans that area to the entire page
	   * (**CAUTION!** Setting this property to `null` might cause issues with sliders and
	   * swipeable `Tabs`: use at your own risk).
	   */
	  swipeAreaWidth: _react.PropTypes.number,
	  /**
	   * The width of the `Drawer` in pixels. Defaults to using the values from theme.
	   */
	  width: _react.PropTypes.number,
	  /**
	   * The zDepth of the `Drawer`.
	   */
	  zDepth: _propTypes2.default.zDepth

	} : void 0;
	exports.default = Drawer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _typeof2 = __webpack_require__(241);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _assign = __webpack_require__(330);

	var _assign2 = _interopRequireDefault(_assign);

	exports.withOptions = withOptions;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactAddonsShallowCompare = __webpack_require__(399);

	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	var _supports = __webpack_require__(401);

	var supports = _interopRequireWildcard(_supports);

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var defaultEventOptions = {
	  capture: false,
	  passive: false
	};

	function mergeDefaultEventOptions(options) {
	  return (0, _assign2.default)({}, defaultEventOptions, options);
	}

	function getEventListenerArgs(eventName, callback, options) {
	  var args = [eventName, callback];
	  args.push(supports.passiveOption ? options : options.capture);
	  return args;
	}

	function on(target, eventName, callback, options) {
	  if (supports.addEventListener) {
	    target.addEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
	  } else if (supports.attachEvent) {
	    // IE8+ Support
	    target.attachEvent('on' + eventName, function () {
	      callback.call(target);
	    });
	  }
	}

	function off(target, eventName, callback, options) {
	  if (supports.removeEventListener) {
	    target.removeEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
	  } else if (supports.detachEvent) {
	    // IE8+ Support
	    target.detachEvent('on' + eventName, callback);
	  }
	}

	var state = {};

	function forEachListener(props, iteratee) {
	  for (var name in props) {
	    if (name.substring(0, 2) !== 'on') continue;

	    var prop = props[name];
	    var type = typeof prop === 'undefined' ? 'undefined' : (0, _typeof3.default)(prop);
	    var isObject = type === 'object';
	    var isFunction = type === 'function';

	    if (!isObject && !isFunction) continue;

	    var _capture = name.substr(-7).toLowerCase() === 'capture';
	    var _eventName = name.substring(2).toLowerCase();
	    _eventName = _capture ? _eventName.substring(0, _eventName.length - 7) : _eventName;

	    if (isObject) {
	      iteratee(_eventName, prop.handler, prop.options);
	    } else {
	      iteratee(_eventName, prop, mergeDefaultEventOptions({ capture: _capture }));
	    }
	  }
	}

	function withOptions(handler, options) {
	  process.env.NODE_ENV !== "production" ? (0, _warning2.default)(options, '[react-event-listener] Should be specified options in withOptions.') : void 0;

	  return {
	    handler: handler,
	    options: mergeDefaultEventOptions(options)
	  };
	}

	var EventListener = function (_Component) {
	  (0, _inherits3.default)(EventListener, _Component);

	  function EventListener() {
	    (0, _classCallCheck3.default)(this, EventListener);
	    return (0, _possibleConstructorReturn3.default)(this, (EventListener.__proto__ || (0, _getPrototypeOf2.default)(EventListener)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(EventListener, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.addListeners();
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      return (0, _reactAddonsShallowCompare2.default)({
	        props: this.props,
	        state: state
	      }, nextProps, state);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate() {
	      this.removeListeners();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.addListeners();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.removeListeners();
	    }
	  }, {
	    key: 'addListeners',
	    value: function addListeners() {
	      this.applyListeners(on);
	    }
	  }, {
	    key: 'removeListeners',
	    value: function removeListeners() {
	      this.applyListeners(off);
	    }
	  }, {
	    key: 'applyListeners',
	    value: function applyListeners(onOrOff) {
	      var target = this.props.target;

	      if (target) {
	        var element = target;

	        if (typeof target === 'string') {
	          element = window[target];
	        }

	        forEachListener(this.props, onOrOff.bind(null, element));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children || null;
	    }
	  }]);
	  return EventListener;
	}(_react.Component);

	process.env.NODE_ENV !== "production" ? EventListener.propTypes = {
	  /**
	   * You can provide a children too.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The DOM target to listen to.
	   */
	  target: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string])
	} : void 0;
	exports.default = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(400);

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var shallowEqual = __webpack_require__(123);

	/**
	 * Does a shallow comparison for props and state.
	 * See ReactComponentWithPureRenderMixin
	 * See also https://facebook.github.io/react/docs/shallow-compare.html
	 */
	function shallowCompare(instance, nextProps, nextState) {
	  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
	}

	module.exports = shallowCompare;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.passiveOption = exports.detachEvent = exports.attachEvent = exports.removeEventListener = exports.addEventListener = exports.canUseDOM = undefined;

	var _defineProperty = __webpack_require__(402);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// Inspired by https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/ExecutionEnvironment.js
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var addEventListener = exports.addEventListener = canUseDOM && 'addEventListener' in window;
	var removeEventListener = exports.removeEventListener = canUseDOM && 'removeEventListener' in window;

	// IE8+ Support
	var attachEvent = exports.attachEvent = canUseDOM && 'attachEvent' in window;
	var detachEvent = exports.detachEvent = canUseDOM && 'detachEvent' in window;

	// Passive options
	// Inspired by https://github.com/Modernizr/Modernizr/blob/master/feature-detects/dom/passiveeventlisteners.js
	var passiveOption = exports.passiveOption = function () {
	  var cache = null;

	  return function () {
	    if (cache !== null) {
	      return cache;
	    }

	    var supportsPassiveOption = false;

	    try {
	      window.addEventListener('test', null, (0, _defineProperty2.default)({}, 'passive', {
	        get: function get() {
	          supportsPassiveOption = true;
	        }
	      }));
	    } catch (e) {} // eslint-disable-line no-empty

	    cache = supportsPassiveOption;

	    return supportsPassiveOption;
	  }();
	}();

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _defineProperty = __webpack_require__(315);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	exports.default = defineProperty;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	//  weak

	function defineProperty(o, p, attr) {
	  return (0, _defineProperty2.default)(o, p, attr);
	}

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _AutoLockScrolling = __webpack_require__(404);

	var _AutoLockScrolling2 = _interopRequireDefault(_AutoLockScrolling);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var overlay = context.muiTheme.overlay;

	  var style = {
	    root: {
	      position: 'fixed',
	      height: '100%',
	      width: '100%',
	      top: 0,
	      left: '-100%',
	      opacity: 0,
	      backgroundColor: overlay.backgroundColor,
	      WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', // Remove mobile color flashing (deprecated)

	      // Two ways to promote overlay to its own render layer
	      willChange: 'opacity',
	      transform: 'translateZ(0)',

	      transition: props.transitionEnabled && _transitions2.default.easeOut('0ms', 'left', '400ms') + ', ' + _transitions2.default.easeOut('400ms', 'opacity')
	    }
	  };

	  if (props.show) {
	    (0, _simpleAssign2.default)(style.root, {
	      left: 0,
	      opacity: 1,
	      transition: _transitions2.default.easeOut('0ms', 'left') + ', ' + _transitions2.default.easeOut('400ms', 'opacity')
	    });
	  }

	  return style;
	}

	var Overlay = function (_Component) {
	  (0, _inherits3.default)(Overlay, _Component);

	  function Overlay() {
	    (0, _classCallCheck3.default)(this, Overlay);
	    return (0, _possibleConstructorReturn3.default)(this, (Overlay.__proto__ || (0, _getPrototypeOf2.default)(Overlay)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(Overlay, [{
	    key: 'setOpacity',
	    value: function setOpacity(opacity) {
	      this.refs.overlay.style.opacity = opacity;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          autoLockScrolling = _props.autoLockScrolling,
	          show = _props.show,
	          style = _props.style,
	          transitionEnabled = _props.transitionEnabled,
	          other = (0, _objectWithoutProperties3.default)(_props, ['autoLockScrolling', 'show', 'style', 'transitionEnabled']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { ref: 'overlay', style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }), autoLockScrolling && _react2.default.createElement(_AutoLockScrolling2.default, { lock: show }));
	    }
	  }]);
	  return Overlay;
	}(_react.Component);

	Overlay.defaultProps = {
	  autoLockScrolling: true,
	  style: {},
	  transitionEnabled: true
	};
	Overlay.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Overlay.propTypes = {
	  autoLockScrolling: _react.PropTypes.bool,
	  show: _react.PropTypes.bool.isRequired,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  transitionEnabled: _react.PropTypes.bool
	} : void 0;
	exports.default = Overlay;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(1);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var originalBodyOverflow = null;
	var lockingCounter = 0;

	var AutoLockScrolling = function (_Component) {
	  (0, _inherits3.default)(AutoLockScrolling, _Component);

	  function AutoLockScrolling() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, AutoLockScrolling);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AutoLockScrolling.__proto__ || (0, _getPrototypeOf2.default)(AutoLockScrolling)).call.apply(_ref, [this].concat(args))), _this), _this.locked = false, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(AutoLockScrolling, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.lock === true) {
	        this.preventScrolling();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.lock !== nextProps.lock) {
	        if (nextProps.lock) {
	          this.preventScrolling();
	        } else {
	          this.allowScrolling();
	        }
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.allowScrolling();
	    }

	    // force to only lock/unlock once

	  }, {
	    key: 'preventScrolling',
	    value: function preventScrolling() {
	      if (this.locked === true) {
	        return;
	      }

	      lockingCounter = lockingCounter + 1;
	      this.locked = true;

	      // only lock the first time the component is mounted.
	      if (lockingCounter === 1) {
	        var body = document.getElementsByTagName('body')[0];
	        originalBodyOverflow = body.style.overflow;
	        body.style.overflow = 'hidden';
	      }
	    }
	  }, {
	    key: 'allowScrolling',
	    value: function allowScrolling() {
	      if (this.locked === true) {
	        lockingCounter = lockingCounter - 1;
	        this.locked = false;
	      }

	      if (lockingCounter === 0 && originalBodyOverflow !== null) {
	        var body = document.getElementsByTagName('body')[0];
	        body.style.overflow = originalBodyOverflow || '';
	        originalBodyOverflow = null;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);
	  return AutoLockScrolling;
	}(_react.Component);

	process.env.NODE_ENV !== "production" ? AutoLockScrolling.propTypes = {
	  lock: _react.PropTypes.bool.isRequired
	} : void 0;
	exports.default = AutoLockScrolling;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _MenuItem = __webpack_require__(406);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _MenuItem2.default;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(347);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _Popover = __webpack_require__(407);

	var _Popover2 = _interopRequireDefault(_Popover);

	var _check = __webpack_require__(412);

	var _check2 = _interopRequireDefault(_check);

	var _ListItem = __webpack_require__(413);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	var _Menu = __webpack_require__(420);

	var _Menu2 = _interopRequireDefault(_Menu);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var nestedMenuStyle = {
	  position: 'relative'
	};

	function getStyles(props, context) {
	  var disabledColor = context.muiTheme.baseTheme.palette.disabledColor;
	  var textColor = context.muiTheme.baseTheme.palette.textColor;
	  var indent = props.desktop ? 64 : 72;
	  var sidePadding = props.desktop ? 24 : 16;

	  var styles = {
	    root: {
	      color: props.disabled ? disabledColor : textColor,
	      cursor: props.disabled ? 'not-allowed' : 'pointer',
	      minHeight: props.desktop ? '32px' : '48px',
	      lineHeight: props.desktop ? '32px' : '48px',
	      fontSize: props.desktop ? 15 : 16,
	      whiteSpace: 'nowrap'
	    },

	    innerDivStyle: {
	      paddingLeft: props.leftIcon || props.insetChildren || props.checked ? indent : sidePadding,
	      paddingRight: props.rightIcon ? indent : sidePadding,
	      paddingBottom: 0,
	      paddingTop: 0
	    },

	    secondaryText: {
	      float: 'right'
	    },

	    leftIconDesktop: {
	      margin: 0,
	      left: 24,
	      top: 4
	    },

	    rightIconDesktop: {
	      margin: 0,
	      right: 24,
	      top: 4,
	      fill: context.muiTheme.menuItem.rightIconDesktopFill
	    }
	  };

	  return styles;
	}

	var MenuItem = function (_Component) {
	  (0, _inherits3.default)(MenuItem, _Component);

	  function MenuItem() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, MenuItem);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      open: false
	    }, _this.cloneMenuItem = function (item) {
	      return _react2.default.cloneElement(item, {
	        onTouchTap: function onTouchTap(event) {
	          if (!item.props.menuItems) {
	            _this.handleRequestClose();
	          }

	          if (item.props.onTouchTap) {
	            item.props.onTouchTap(event);
	          }
	        }
	      });
	    }, _this.handleTouchTap = function (event) {
	      event.preventDefault();

	      _this.setState({
	        open: true,
	        anchorEl: _reactDom2.default.findDOMNode(_this)
	      });

	      if (_this.props.onTouchTap) {
	        _this.props.onTouchTap(event);
	      }
	    }, _this.handleRequestClose = function () {
	      _this.setState({
	        open: false,
	        anchorEl: null
	      });
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(MenuItem, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.applyFocusState();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.state.open && nextProps.focusState === 'none') {
	        this.handleRequestClose();
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.applyFocusState();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.state.open) {
	        this.setState({
	          open: false
	        });
	      }
	    }
	  }, {
	    key: 'applyFocusState',
	    value: function applyFocusState() {
	      this.refs.listItem.applyFocusState(this.props.focusState);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          checked = _props.checked,
	          children = _props.children,
	          desktop = _props.desktop,
	          disabled = _props.disabled,
	          focusState = _props.focusState,
	          innerDivStyle = _props.innerDivStyle,
	          insetChildren = _props.insetChildren,
	          leftIcon = _props.leftIcon,
	          menuItems = _props.menuItems,
	          rightIcon = _props.rightIcon,
	          secondaryText = _props.secondaryText,
	          style = _props.style,
	          animation = _props.animation,
	          value = _props.value,
	          other = (0, _objectWithoutProperties3.default)(_props, ['checked', 'children', 'desktop', 'disabled', 'focusState', 'innerDivStyle', 'insetChildren', 'leftIcon', 'menuItems', 'rightIcon', 'secondaryText', 'style', 'animation', 'value']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var mergedRootStyles = (0, _simpleAssign2.default)(styles.root, style);
	      var mergedInnerDivStyles = (0, _simpleAssign2.default)(styles.innerDivStyle, innerDivStyle);

	      // Left Icon
	      var leftIconElement = leftIcon ? leftIcon : checked ? _react2.default.createElement(_check2.default, null) : null;
	      if (leftIconElement) {
	        var mergedLeftIconStyles = desktop ? (0, _simpleAssign2.default)(styles.leftIconDesktop, leftIconElement.props.style) : leftIconElement.props.style;
	        leftIconElement = _react2.default.cloneElement(leftIconElement, { style: mergedLeftIconStyles });
	      }

	      // Right Icon
	      var rightIconElement = void 0;
	      if (rightIcon) {
	        var mergedRightIconStyles = desktop ? (0, _simpleAssign2.default)(styles.rightIconDesktop, rightIcon.props.style) : rightIcon.props.style;
	        rightIconElement = _react2.default.cloneElement(rightIcon, { style: mergedRightIconStyles });
	      }

	      // Secondary Text
	      var secondaryTextElement = void 0;
	      if (secondaryText) {
	        var secondaryTextIsAnElement = _react2.default.isValidElement(secondaryText);
	        var mergedSecondaryTextStyles = secondaryTextIsAnElement ? (0, _simpleAssign2.default)(styles.secondaryText, secondaryText.props.style) : null;

	        secondaryTextElement = secondaryTextIsAnElement ? _react2.default.cloneElement(secondaryText, { style: mergedSecondaryTextStyles }) : _react2.default.createElement('div', { style: prepareStyles(styles.secondaryText) }, secondaryText);
	      }
	      var childMenuPopover = void 0;
	      if (menuItems) {
	        childMenuPopover = _react2.default.createElement(_Popover2.default, {
	          animation: animation,
	          anchorOrigin: { horizontal: 'right', vertical: 'top' },
	          anchorEl: this.state.anchorEl,
	          open: this.state.open,
	          useLayerForClickAway: false,
	          onRequestClose: this.handleRequestClose
	        }, _react2.default.createElement(_Menu2.default, { desktop: desktop, disabled: disabled, style: nestedMenuStyle }, _react2.default.Children.map(menuItems, this.cloneMenuItem)));
	        other.onTouchTap = this.handleTouchTap;
	      }

	      return _react2.default.createElement(_ListItem2.default, (0, _extends3.default)({}, other, {
	        disabled: disabled,
	        hoverColor: this.context.muiTheme.menuItem.hoverColor,
	        innerDivStyle: mergedInnerDivStyles,
	        insetChildren: insetChildren,
	        leftIcon: leftIconElement,
	        ref: 'listItem',
	        rightIcon: rightIconElement,
	        style: mergedRootStyles
	      }), children, secondaryTextElement, childMenuPopover);
	    }
	  }]);
	  return MenuItem;
	}(_react.Component);

	MenuItem.muiName = 'MenuItem';
	MenuItem.defaultProps = {
	  checked: false,
	  desktop: false,
	  disabled: false,
	  focusState: 'none',
	  insetChildren: false
	};
	MenuItem.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? MenuItem.propTypes = {
	  /**
	   * Override the default animation component used.
	   */
	  animation: _react.PropTypes.func,
	  /**
	   * If true, a left check mark will be rendered.
	   */
	  checked: _react.PropTypes.bool,
	  /**
	   * Elements passed as children to the underlying `ListItem`.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * @ignore
	   * If true, the menu item will render with compact desktop
	   * styles.
	   */
	  desktop: _react.PropTypes.bool,
	  /**
	   * If true, the menu item will be disabled.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * The focus state of the menu item. This prop is used to set the focus
	   * state of the underlying `ListItem`.
	   */
	  focusState: _react.PropTypes.oneOf(['none', 'focused', 'keyboard-focused']),
	  /**
	   * Override the inline-styles of the inner div.
	   */
	  innerDivStyle: _react.PropTypes.object,
	  /**
	   * If true, the children will be indented.
	   * This is only needed when there is no `leftIcon`.
	   */
	  insetChildren: _react.PropTypes.bool,
	  /**
	   * The `SvgIcon` or `FontIcon` to be displayed on the left side.
	   */
	  leftIcon: _react.PropTypes.element,
	  /**
	   * `MenuItem` elements to nest within the menu item.
	   */
	  menuItems: _react.PropTypes.node,
	  /**
	   * Callback function fired when the menu item is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the menu item.
	   */
	  onTouchTap: _react.PropTypes.func,
	  /**
	   * Can be used to render primary text within the menu item.
	   */
	  primaryText: _react.PropTypes.node,
	  /**
	   * The `SvgIcon` or `FontIcon` to be displayed on the right side.
	   */
	  rightIcon: _react.PropTypes.element,
	  /**
	   * Can be used to render secondary text within the menu item.
	   */
	  secondaryText: _react.PropTypes.node,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The value of the menu item.
	   */
	  value: _react.PropTypes.any
	} : void 0;
	exports.default = MenuItem;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactEventListener = __webpack_require__(398);

	var _reactEventListener2 = _interopRequireDefault(_reactEventListener);

	var _RenderToLayer = __webpack_require__(408);

	var _RenderToLayer2 = _interopRequireDefault(_RenderToLayer);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _lodash = __webpack_require__(409);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _PopoverAnimationDefault = __webpack_require__(410);

	var _PopoverAnimationDefault2 = _interopRequireDefault(_PopoverAnimationDefault);

	var _iOSHelpers = __webpack_require__(411);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var styles = {
	  root: {
	    display: 'none'
	  }
	};

	var Popover = function (_Component) {
	  (0, _inherits3.default)(Popover, _Component);

	  function Popover(props, context) {
	    (0, _classCallCheck3.default)(this, Popover);

	    var _this = (0, _possibleConstructorReturn3.default)(this, (Popover.__proto__ || (0, _getPrototypeOf2.default)(Popover)).call(this, props, context));

	    _this.timeout = null;

	    _this.renderLayer = function () {
	      var _this$props = _this.props,
	          animated = _this$props.animated,
	          animation = _this$props.animation,
	          anchorEl = _this$props.anchorEl,
	          anchorOrigin = _this$props.anchorOrigin,
	          autoCloseWhenOffScreen = _this$props.autoCloseWhenOffScreen,
	          canAutoPosition = _this$props.canAutoPosition,
	          children = _this$props.children,
	          onRequestClose = _this$props.onRequestClose,
	          style = _this$props.style,
	          targetOrigin = _this$props.targetOrigin,
	          useLayerForClickAway = _this$props.useLayerForClickAway,
	          other = (0, _objectWithoutProperties3.default)(_this$props, ['animated', 'animation', 'anchorEl', 'anchorOrigin', 'autoCloseWhenOffScreen', 'canAutoPosition', 'children', 'onRequestClose', 'style', 'targetOrigin', 'useLayerForClickAway']);

	      var styleRoot = style;

	      if (!animated) {
	        styleRoot = {
	          position: 'fixed',
	          zIndex: _this.context.muiTheme.zIndex.popover
	        };

	        if (!_this.state.open) {
	          return null;
	        }

	        return _react2.default.createElement(_Paper2.default, (0, _extends3.default)({ style: (0, _simpleAssign2.default)(styleRoot, style) }, other), children);
	      }

	      var Animation = animation || _PopoverAnimationDefault2.default;

	      return _react2.default.createElement(Animation, (0, _extends3.default)({
	        targetOrigin: targetOrigin,
	        style: styleRoot
	      }, other, {
	        open: _this.state.open && !_this.state.closing
	      }), children);
	    };

	    _this.componentClickAway = function (event) {
	      event.preventDefault();
	      _this.requestClose('clickAway');
	    };

	    _this.setPlacement = function (scrolling) {
	      if (!_this.state.open) {
	        return;
	      }

	      if (!_this.refs.layer.getLayer()) {
	        return;
	      }

	      var targetEl = _this.refs.layer.getLayer().children[0];
	      if (!targetEl) {
	        return;
	      }

	      var _this$props2 = _this.props,
	          targetOrigin = _this$props2.targetOrigin,
	          anchorOrigin = _this$props2.anchorOrigin;

	      var anchorEl = _this.props.anchorEl || _this.anchorEl;

	      var anchor = _this.getAnchorPosition(anchorEl);
	      var target = _this.getTargetPosition(targetEl);

	      var targetPosition = {
	        top: anchor[anchorOrigin.vertical] - target[targetOrigin.vertical],
	        left: anchor[anchorOrigin.horizontal] - target[targetOrigin.horizontal]
	      };

	      if (scrolling && _this.props.autoCloseWhenOffScreen) {
	        _this.autoCloseWhenOffScreen(anchor);
	      }

	      if (_this.props.canAutoPosition) {
	        target = _this.getTargetPosition(targetEl); // update as height may have changed
	        targetPosition = _this.applyAutoPositionIfNeeded(anchor, target, targetOrigin, anchorOrigin, targetPosition);
	      }

	      targetEl.style.top = Math.max(0, targetPosition.top) + 'px';
	      targetEl.style.left = Math.max(0, targetPosition.left) + 'px';
	      targetEl.style.maxHeight = window.innerHeight + 'px';
	    };

	    _this.handleResize = (0, _lodash2.default)(_this.setPlacement, 100);
	    _this.handleScroll = (0, _lodash2.default)(_this.setPlacement.bind(_this, true), 50);

	    _this.state = {
	      open: props.open,
	      closing: false
	    };
	    return _this;
	  }

	  (0, _createClass3.default)(Popover, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setPlacement();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _this2 = this;

	      if (nextProps.open !== this.state.open) {
	        if (nextProps.open) {
	          this.anchorEl = nextProps.anchorEl || this.props.anchorEl;
	          this.setState({
	            open: true,
	            closing: false
	          });
	        } else {
	          if (nextProps.animated) {
	            if (this.timeout !== null) return;
	            this.setState({ closing: true });
	            this.timeout = setTimeout(function () {
	              _this2.setState({
	                open: false
	              }, function () {
	                _this2.timeout = null;
	              });
	            }, 500);
	          } else {
	            this.setState({
	              open: false
	            });
	          }
	        }
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.setPlacement();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.handleResize.cancel();
	      this.handleScroll.cancel();

	      if (this.timeout) {
	        clearTimeout(this.timeout);
	        this.timeout = null;
	      }
	    }
	  }, {
	    key: 'requestClose',
	    value: function requestClose(reason) {
	      if (this.props.onRequestClose) {
	        this.props.onRequestClose(reason);
	      }
	    }
	  }, {
	    key: 'getAnchorPosition',
	    value: function getAnchorPosition(el) {
	      if (!el) {
	        el = _reactDom2.default.findDOMNode(this);
	      }

	      var rect = el.getBoundingClientRect();
	      var a = {
	        top: rect.top,
	        left: rect.left,
	        width: el.offsetWidth,
	        height: el.offsetHeight
	      };

	      a.right = rect.right || a.left + a.width;

	      // The fixed positioning isn't respected on iOS when an input is focused.
	      // We need to compute the position from the top of the page and not the viewport.
	      if ((0, _iOSHelpers.isIOS)() && document.activeElement.tagName === 'INPUT') {
	        a.bottom = (0, _iOSHelpers.getOffsetTop)(el) + a.height;
	      } else {
	        a.bottom = rect.bottom || a.top + a.height;
	      }
	      a.middle = a.left + (a.right - a.left) / 2;
	      a.center = a.top + (a.bottom - a.top) / 2;

	      return a;
	    }
	  }, {
	    key: 'getTargetPosition',
	    value: function getTargetPosition(targetEl) {
	      return {
	        top: 0,
	        center: targetEl.offsetHeight / 2,
	        bottom: targetEl.offsetHeight,
	        left: 0,
	        middle: targetEl.offsetWidth / 2,
	        right: targetEl.offsetWidth
	      };
	    }
	  }, {
	    key: 'autoCloseWhenOffScreen',
	    value: function autoCloseWhenOffScreen(anchorPosition) {
	      if (anchorPosition.top < 0 || anchorPosition.top > window.innerHeight || anchorPosition.left < 0 || anchorPosition.left > window.innerWidth) {
	        this.requestClose('offScreen');
	      }
	    }
	  }, {
	    key: 'getOverlapMode',
	    value: function getOverlapMode(anchor, target, median) {
	      if ([anchor, target].indexOf(median) >= 0) return 'auto';
	      if (anchor === target) return 'inclusive';
	      return 'exclusive';
	    }
	  }, {
	    key: 'getPositions',
	    value: function getPositions(anchor, target) {
	      var a = (0, _extends3.default)({}, anchor);
	      var t = (0, _extends3.default)({}, target);

	      var positions = {
	        x: ['left', 'right'].filter(function (p) {
	          return p !== t.horizontal;
	        }),
	        y: ['top', 'bottom'].filter(function (p) {
	          return p !== t.vertical;
	        })
	      };

	      var overlap = {
	        x: this.getOverlapMode(a.horizontal, t.horizontal, 'middle'),
	        y: this.getOverlapMode(a.vertical, t.vertical, 'center')
	      };

	      positions.x.splice(overlap.x === 'auto' ? 0 : 1, 0, 'middle');
	      positions.y.splice(overlap.y === 'auto' ? 0 : 1, 0, 'center');

	      if (overlap.y !== 'auto') {
	        a.vertical = a.vertical === 'top' ? 'bottom' : 'top';
	        if (overlap.y === 'inclusive') {
	          t.vertical = t.vertical;
	        }
	      }

	      if (overlap.x !== 'auto') {
	        a.horizontal = a.horizontal === 'left' ? 'right' : 'left';
	        if (overlap.y === 'inclusive') {
	          t.horizontal = t.horizontal;
	        }
	      }

	      return {
	        positions: positions,
	        anchorPos: a
	      };
	    }
	  }, {
	    key: 'applyAutoPositionIfNeeded',
	    value: function applyAutoPositionIfNeeded(anchor, target, targetOrigin, anchorOrigin, targetPosition) {
	      var _getPositions = this.getPositions(anchorOrigin, targetOrigin),
	          positions = _getPositions.positions,
	          anchorPos = _getPositions.anchorPos;

	      if (targetPosition.top < 0 || targetPosition.top + target.bottom > window.innerHeight) {
	        var newTop = anchor[anchorPos.vertical] - target[positions.y[0]];
	        if (newTop + target.bottom <= window.innerHeight) {
	          targetPosition.top = Math.max(0, newTop);
	        } else {
	          newTop = anchor[anchorPos.vertical] - target[positions.y[1]];
	          if (newTop + target.bottom <= window.innerHeight) {
	            targetPosition.top = Math.max(0, newTop);
	          }
	        }
	      }

	      if (targetPosition.left < 0 || targetPosition.left + target.right > window.innerWidth) {
	        var newLeft = anchor[anchorPos.horizontal] - target[positions.x[0]];
	        if (newLeft + target.right <= window.innerWidth) {
	          targetPosition.left = Math.max(0, newLeft);
	        } else {
	          newLeft = anchor[anchorPos.horizontal] - target[positions.x[1]];
	          if (newLeft + target.right <= window.innerWidth) {
	            targetPosition.left = Math.max(0, newLeft);
	          }
	        }
	      }

	      return targetPosition;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', { style: styles.root }, _react2.default.createElement(_reactEventListener2.default, {
	        target: 'window',
	        onScroll: this.handleScroll,
	        onResize: this.handleResize
	      }), _react2.default.createElement(_RenderToLayer2.default, {
	        ref: 'layer',
	        open: this.state.open,
	        componentClickAway: this.componentClickAway,
	        useLayerForClickAway: this.props.useLayerForClickAway,
	        render: this.renderLayer
	      }));
	    }
	  }]);
	  return Popover;
	}(_react.Component);

	Popover.defaultProps = {
	  anchorOrigin: {
	    vertical: 'bottom',
	    horizontal: 'left'
	  },
	  animated: true,
	  autoCloseWhenOffScreen: true,
	  canAutoPosition: true,
	  onRequestClose: function onRequestClose() {},
	  open: false,
	  style: {
	    overflowY: 'auto'
	  },
	  targetOrigin: {
	    vertical: 'top',
	    horizontal: 'left'
	  },
	  useLayerForClickAway: true,
	  zDepth: 1
	};
	Popover.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Popover.propTypes = {
	  /**
	   * This is the DOM element that will be used to set the position of the
	   * popover.
	   */
	  anchorEl: _react.PropTypes.object,
	  /**
	   * This is the point on the anchor where the popover's
	   * `targetOrigin` will attach to.
	   * Options:
	   * vertical: [top, center, bottom]
	   * horizontal: [left, middle, right].
	   */
	  anchorOrigin: _propTypes2.default.origin,
	  /**
	   * If true, the popover will apply transitions when
	   * it is added to the DOM.
	   */
	  animated: _react.PropTypes.bool,
	  /**
	   * Override the default animation component used.
	   */
	  animation: _react.PropTypes.func,
	  /**
	   * If true, the popover will hide when the anchor is scrolled off the screen.
	   */
	  autoCloseWhenOffScreen: _react.PropTypes.bool,
	  /**
	   * If true, the popover (potentially) ignores `targetOrigin`
	   * and `anchorOrigin` to make itself fit on screen,
	   * which is useful for mobile devices.
	   */
	  canAutoPosition: _react.PropTypes.bool,
	  /**
	   * The content of the popover.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The CSS class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * Callback function fired when the popover is requested to be closed.
	   *
	   * @param {string} reason The reason for the close request. Possibles values
	   * are 'clickAway' and 'offScreen'.
	   */
	  onRequestClose: _react.PropTypes.func,
	  /**
	   * If true, the popover is visible.
	   */
	  open: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * This is the point on the popover which will attach to
	   * the anchor's origin.
	   * Options:
	   * vertical: [top, center, bottom]
	   * horizontal: [left, middle, right].
	   */
	  targetOrigin: _propTypes2.default.origin,
	  /**
	   * If true, the popover will render on top of an invisible
	   * layer, which will prevent clicks to the underlying
	   * elements, and trigger an `onRequestClose('clickAway')` call.
	   */
	  useLayerForClickAway: _react.PropTypes.bool,
	  /**
	   * The zDepth of the popover.
	   */
	  zDepth: _propTypes2.default.zDepth
	} : void 0;
	exports.default = Popover;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(1);

	var _reactDom = __webpack_require__(32);

	var _dom = __webpack_require__(362);

	var _dom2 = _interopRequireDefault(_dom);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// heavily inspired by https://github.com/Khan/react-components/blob/master/js/layered-component-mixin.jsx
	var RenderToLayer = function (_Component) {
	  (0, _inherits3.default)(RenderToLayer, _Component);

	  function RenderToLayer() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, RenderToLayer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RenderToLayer.__proto__ || (0, _getPrototypeOf2.default)(RenderToLayer)).call.apply(_ref, [this].concat(args))), _this), _this.onClickAway = function (event) {
	      if (event.defaultPrevented) {
	        return;
	      }

	      if (!_this.props.componentClickAway) {
	        return;
	      }

	      if (!_this.props.open) {
	        return;
	      }

	      var el = _this.layer;
	      if (event.target !== el && event.target === window || document.documentElement.contains(event.target) && !_dom2.default.isDescendant(el, event.target)) {
	        _this.props.componentClickAway(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(RenderToLayer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.renderLayer();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.renderLayer();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.unrenderLayer();
	    }
	  }, {
	    key: 'getLayer',
	    value: function getLayer() {
	      return this.layer;
	    }
	  }, {
	    key: 'unrenderLayer',
	    value: function unrenderLayer() {
	      if (!this.layer) {
	        return;
	      }

	      if (this.props.useLayerForClickAway) {
	        this.layer.style.position = 'relative';
	        this.layer.removeEventListener('touchstart', this.onClickAway);
	        this.layer.removeEventListener('click', this.onClickAway);
	      } else {
	        window.removeEventListener('touchstart', this.onClickAway);
	        window.removeEventListener('click', this.onClickAway);
	      }

	      (0, _reactDom.unmountComponentAtNode)(this.layer);
	      document.body.removeChild(this.layer);
	      this.layer = null;
	    }

	    /**
	     * By calling this method in componentDidMount() and
	     * componentDidUpdate(), you're effectively creating a "wormhole" that
	     * funnels React's hierarchical updates through to a DOM node on an
	     * entirely different part of the page.
	     */

	  }, {
	    key: 'renderLayer',
	    value: function renderLayer() {
	      var _this2 = this;

	      var _props = this.props,
	          open = _props.open,
	          render = _props.render;

	      if (open) {
	        if (!this.layer) {
	          this.layer = document.createElement('div');
	          document.body.appendChild(this.layer);

	          if (this.props.useLayerForClickAway) {
	            this.layer.addEventListener('touchstart', this.onClickAway);
	            this.layer.addEventListener('click', this.onClickAway);
	            this.layer.style.position = 'fixed';
	            this.layer.style.top = 0;
	            this.layer.style.bottom = 0;
	            this.layer.style.left = 0;
	            this.layer.style.right = 0;
	            this.layer.style.zIndex = this.context.muiTheme.zIndex.layer;
	          } else {
	            setTimeout(function () {
	              window.addEventListener('touchstart', _this2.onClickAway);
	              window.addEventListener('click', _this2.onClickAway);
	            }, 0);
	          }
	        }

	        var layerElement = render();
	        this.layerElement = (0, _reactDom.unstable_renderSubtreeIntoContainer)(this, layerElement, this.layer);
	      } else {
	        this.unrenderLayer();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);
	  return RenderToLayer;
	}(_react.Component);

	RenderToLayer.defaultProps = {
	  useLayerForClickAway: true
	};
	RenderToLayer.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? RenderToLayer.propTypes = {
	  componentClickAway: _react.PropTypes.func,
	  open: _react.PropTypes.bool.isRequired,
	  render: _react.PropTypes.func.isRequired,
	  useLayerForClickAway: _react.PropTypes.bool
	} : void 0;
	exports.default = RenderToLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 409 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function now() {
	  return root.Date.now();
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;

	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? other + '' : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}

	module.exports = throttle;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context, state) {
	  var targetOrigin = props.targetOrigin;
	  var open = state.open;
	  var muiTheme = context.muiTheme;

	  var horizontal = targetOrigin.horizontal.replace('middle', 'vertical');

	  return {
	    root: {
	      position: 'fixed',
	      zIndex: muiTheme.zIndex.popover,
	      opacity: open ? 1 : 0,
	      transform: open ? 'scale(1, 1)' : 'scale(0, 0)',
	      transformOrigin: horizontal + ' ' + targetOrigin.vertical,
	      transition: _transitions2.default.easeOut('250ms', ['transform', 'opacity']),
	      maxHeight: '100%'
	    },
	    horizontal: {
	      maxHeight: '100%',
	      overflowY: 'auto',
	      transform: open ? 'scaleX(1)' : 'scaleX(0)',
	      opacity: open ? 1 : 0,
	      transformOrigin: horizontal + ' ' + targetOrigin.vertical,
	      transition: _transitions2.default.easeOut('250ms', ['transform', 'opacity'])
	    },
	    vertical: {
	      opacity: open ? 1 : 0,
	      transform: open ? 'scaleY(1)' : 'scaleY(0)',
	      transformOrigin: horizontal + ' ' + targetOrigin.vertical,
	      transition: _transitions2.default.easeOut('500ms', ['transform', 'opacity'])
	    }
	  };
	}

	var PopoverAnimationDefault = function (_Component) {
	  (0, _inherits3.default)(PopoverAnimationDefault, _Component);

	  function PopoverAnimationDefault() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, PopoverAnimationDefault);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = PopoverAnimationDefault.__proto__ || (0, _getPrototypeOf2.default)(PopoverAnimationDefault)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      open: false
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(PopoverAnimationDefault, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setState({ open: true }); // eslint-disable-line react/no-did-mount-set-state
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({
	        open: nextProps.open
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          style = _props.style,
	          zDepth = _props.zDepth;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      return _react2.default.createElement(_Paper2.default, {
	        style: (0, _simpleAssign2.default)(styles.root, style),
	        zDepth: zDepth,
	        className: className
	      }, _react2.default.createElement('div', { style: prepareStyles(styles.horizontal) }, _react2.default.createElement('div', { style: prepareStyles(styles.vertical) }, this.props.children)));
	    }
	  }]);
	  return PopoverAnimationDefault;
	}(_react.Component);

	PopoverAnimationDefault.defaultProps = {
	  style: {},
	  zDepth: 1
	};
	PopoverAnimationDefault.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? PopoverAnimationDefault.propTypes = {
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  open: _react.PropTypes.bool.isRequired,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  targetOrigin: _propTypes2.default.origin.isRequired,
	  zDepth: _propTypes2.default.zDepth
	} : void 0;
	exports.default = PopoverAnimationDefault;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 411 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	* Returns a number of pixels from the top of the screen for given dom element.
	*
	* @param {object} dom element
	* @returns {number} A position from the top of the screen in pixels
	*/
	var getOffsetTop = exports.getOffsetTop = function getOffsetTop(elem) {
	  var yPos = elem.offsetTop;
	  var tempEl = elem.offsetParent;

	  while (tempEl != null) {
	    yPos += tempEl.offsetTop;
	    tempEl = tempEl.offsetParent;
	  }

	  return yPos;
	};

	var isIOS = exports.isIOS = function isIOS() {
	  return (/iPad|iPhone|iPod/.test(window.navigator.userAgent) && !window.MSStream
	  );
	};

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NavigationCheck = function NavigationCheck(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z' }));
	};
	NavigationCheck = (0, _pure2.default)(NavigationCheck);
	NavigationCheck.displayName = 'NavigationCheck';
	NavigationCheck.muiName = 'SvgIcon';

	exports.default = NavigationCheck;

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(347);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _colorManipulator = __webpack_require__(235);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _EnhancedButton = __webpack_require__(340);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _expandLess = __webpack_require__(414);

	var _expandLess2 = _interopRequireDefault(_expandLess);

	var _expandMore = __webpack_require__(415);

	var _expandMore2 = _interopRequireDefault(_expandMore);

	var _NestedList = __webpack_require__(416);

	var _NestedList2 = _interopRequireDefault(_NestedList);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context, state) {
	  var insetChildren = props.insetChildren,
	      leftAvatar = props.leftAvatar,
	      leftCheckbox = props.leftCheckbox,
	      leftIcon = props.leftIcon,
	      nestedLevel = props.nestedLevel,
	      rightAvatar = props.rightAvatar,
	      rightIcon = props.rightIcon,
	      rightIconButton = props.rightIconButton,
	      rightToggle = props.rightToggle,
	      secondaryText = props.secondaryText,
	      secondaryTextLines = props.secondaryTextLines;
	  var muiTheme = context.muiTheme;
	  var listItem = muiTheme.listItem;

	  var textColor = muiTheme.baseTheme.palette.textColor;
	  var hoverColor = props.hoverColor || (0, _colorManipulator.fade)(textColor, 0.1);
	  var singleAvatar = !secondaryText && (leftAvatar || rightAvatar);
	  var singleNoAvatar = !secondaryText && !(leftAvatar || rightAvatar);
	  var twoLine = secondaryText && secondaryTextLines === 1;
	  var threeLine = secondaryText && secondaryTextLines > 1;

	  var styles = {
	    root: {
	      backgroundColor: (state.isKeyboardFocused || state.hovered) && !state.rightIconButtonHovered && !state.rightIconButtonKeyboardFocused ? hoverColor : null,
	      color: textColor,
	      display: 'block',
	      fontSize: 16,
	      lineHeight: '16px',
	      position: 'relative',
	      transition: _transitions2.default.easeOut()
	    },

	    // This inner div is needed so that ripples will span the entire container
	    innerDiv: {
	      marginLeft: nestedLevel * listItem.nestedLevelDepth,
	      paddingLeft: leftIcon || leftAvatar || leftCheckbox || insetChildren ? 72 : 16,
	      paddingRight: rightIcon || rightAvatar || rightIconButton ? 56 : rightToggle ? 72 : 16,
	      paddingBottom: singleAvatar ? 20 : 16,
	      paddingTop: singleNoAvatar || threeLine ? 16 : 20,
	      position: 'relative'
	    },

	    icons: {
	      height: 24,
	      width: 24,
	      display: 'block',
	      position: 'absolute',
	      top: twoLine ? 12 : singleAvatar ? 4 : 0,
	      margin: 12
	    },

	    leftIcon: {
	      left: 4
	    },

	    rightIcon: {
	      right: 4
	    },

	    avatars: {
	      position: 'absolute',
	      top: singleAvatar ? 8 : 16
	    },

	    label: {
	      cursor: 'pointer'
	    },

	    leftAvatar: {
	      left: 16
	    },

	    rightAvatar: {
	      right: 16
	    },

	    leftCheckbox: {
	      position: 'absolute',
	      display: 'block',
	      width: 24,
	      top: twoLine ? 24 : singleAvatar ? 16 : 12,
	      left: 16
	    },

	    primaryText: {},

	    rightIconButton: {
	      position: 'absolute',
	      display: 'block',
	      top: twoLine ? 12 : singleAvatar ? 4 : 0,
	      right: 4
	    },

	    rightToggle: {
	      position: 'absolute',
	      display: 'block',
	      width: 54,
	      top: twoLine ? 25 : singleAvatar ? 17 : 13,
	      right: 8
	    },

	    secondaryText: {
	      fontSize: 14,
	      lineHeight: threeLine ? '18px' : '16px',
	      height: threeLine ? 36 : 16,
	      margin: 0,
	      marginTop: 4,
	      color: listItem.secondaryTextColor,

	      // needed for 2 and 3 line ellipsis
	      overflow: 'hidden',
	      textOverflow: 'ellipsis',
	      whiteSpace: threeLine ? null : 'nowrap',
	      display: threeLine ? '-webkit-box' : null,
	      WebkitLineClamp: threeLine ? 2 : null,
	      WebkitBoxOrient: threeLine ? 'vertical' : null
	    }
	  };

	  return styles;
	}

	var ListItem = function (_Component) {
	  (0, _inherits3.default)(ListItem, _Component);

	  function ListItem() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, ListItem);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ListItem.__proto__ || (0, _getPrototypeOf2.default)(ListItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false,
	      isKeyboardFocused: false,
	      open: false,
	      rightIconButtonHovered: false,
	      rightIconButtonKeyboardFocused: false,
	      touch: false
	    }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
	      _this.setState({ isKeyboardFocused: isKeyboardFocused });
	      _this.props.onKeyboardFocus(event, isKeyboardFocused);
	    }, _this.handleMouseEnter = function (event) {
	      if (!_this.state.touch) _this.setState({ hovered: true });
	      _this.props.onMouseEnter(event);
	    }, _this.handleMouseLeave = function (event) {
	      _this.setState({ hovered: false });
	      _this.props.onMouseLeave(event);
	    }, _this.handleNestedListToggle = function (event) {
	      event.stopPropagation();

	      if (_this.props.open === null) {
	        _this.setState({ open: !_this.state.open }, function () {
	          _this.props.onNestedListToggle(_this);
	        });
	      } else {
	        // Exposing `this` in the callback is quite a bad API.
	        // I'm doing a one level deep clone to expose a fake state.open.
	        _this.props.onNestedListToggle((0, _extends3.default)({}, _this, {
	          state: {
	            open: !_this.state.open
	          }
	        }));
	      }
	    }, _this.handleRightIconButtonKeyboardFocus = function (event, isKeyboardFocused) {
	      if (isKeyboardFocused) {
	        _this.setState({
	          isKeyboardFocused: false,
	          rightIconButtonKeyboardFocused: isKeyboardFocused
	        });
	      }

	      var iconButton = _this.props.rightIconButton;

	      if (iconButton && iconButton.props.onKeyboardFocus) iconButton.props.onKeyboardFocus(event, isKeyboardFocused);
	    }, _this.handleRightIconButtonMouseLeave = function (event) {
	      var iconButton = _this.props.rightIconButton;
	      _this.setState({ rightIconButtonHovered: false });
	      if (iconButton && iconButton.props.onMouseLeave) iconButton.props.onMouseLeave(event);
	    }, _this.handleRightIconButtonMouseEnter = function (event) {
	      var iconButton = _this.props.rightIconButton;
	      _this.setState({ rightIconButtonHovered: true });
	      if (iconButton && iconButton.props.onMouseEnter) iconButton.props.onMouseEnter(event);
	    }, _this.handleRightIconButtonMouseUp = function (event) {
	      var iconButton = _this.props.rightIconButton;
	      event.stopPropagation();
	      if (iconButton && iconButton.props.onMouseUp) iconButton.props.onMouseUp(event);
	    }, _this.handleRightIconButtonTouchTap = function (event) {
	      var iconButton = _this.props.rightIconButton;

	      // Stop the event from bubbling up to the list-item
	      event.stopPropagation();
	      if (iconButton && iconButton.props.onTouchTap) iconButton.props.onTouchTap(event);
	    }, _this.handleTouchStart = function (event) {
	      _this.setState({ touch: true });
	      _this.props.onTouchStart(event);
	    }, _this.handleTouchEnd = function (event) {
	      _this.setState({ touch: true });
	      _this.props.onTouchEnd(event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(ListItem, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setState({
	        open: this.props.open === null ? this.props.initiallyOpen === true : this.props.open
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // update the state when the component is controlled.
	      if (nextProps.open !== null) this.setState({ open: nextProps.open });
	      if (nextProps.disabled && this.state.hovered) this.setState({ hovered: false });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);
	    }

	    // This method is needed by the `MenuItem` component.

	  }, {
	    key: 'applyFocusState',
	    value: function applyFocusState(focusState) {
	      var button = this.refs.enhancedButton;

	      if (button) {
	        var buttonEl = _reactDom2.default.findDOMNode(button);

	        switch (focusState) {
	          case 'none':
	            buttonEl.blur();
	            break;
	          case 'focused':
	            buttonEl.focus();
	            break;
	          case 'keyboard-focused':
	            button.setKeyboardFocus();
	            buttonEl.focus();
	            break;
	        }
	      }
	    }
	  }, {
	    key: 'createDisabledElement',
	    value: function createDisabledElement(styles, contentChildren, additionalProps) {
	      var _props = this.props,
	          innerDivStyle = _props.innerDivStyle,
	          style = _props.style;

	      var mergedDivStyles = (0, _simpleAssign2.default)({}, styles.root, styles.innerDiv, innerDivStyle, style);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, additionalProps, {
	        style: this.context.muiTheme.prepareStyles(mergedDivStyles)
	      }), contentChildren);
	    }
	  }, {
	    key: 'createLabelElement',
	    value: function createLabelElement(styles, contentChildren, additionalProps) {
	      var _props2 = this.props,
	          innerDivStyle = _props2.innerDivStyle,
	          style = _props2.style;

	      var mergedLabelStyles = (0, _simpleAssign2.default)({}, styles.root, styles.innerDiv, innerDivStyle, styles.label, style);

	      return _react2.default.createElement('label', (0, _extends3.default)({}, additionalProps, {
	        style: this.context.muiTheme.prepareStyles(mergedLabelStyles)
	      }), contentChildren);
	    }
	  }, {
	    key: 'createTextElement',
	    value: function createTextElement(styles, data, key) {
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      if (_react2.default.isValidElement(data)) {
	        var style = (0, _simpleAssign2.default)({}, styles, data.props.style);
	        if (typeof data.type === 'string') {
	          // if element is a native dom node
	          style = prepareStyles(style);
	        }
	        return _react2.default.cloneElement(data, {
	          key: key,
	          style: style
	        });
	      }

	      return _react2.default.createElement('div', { key: key, style: prepareStyles(styles) }, data);
	    }
	  }, {
	    key: 'pushElement',
	    value: function pushElement(children, element, baseStyles, additionalProps) {
	      if (element) {
	        var styles = (0, _simpleAssign2.default)({}, baseStyles, element.props.style);
	        children.push(_react2.default.cloneElement(element, (0, _extends3.default)({
	          key: children.length,
	          style: styles
	        }, additionalProps)));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          autoGenerateNestedIndicator = _props3.autoGenerateNestedIndicator,
	          children = _props3.children,
	          disabled = _props3.disabled,
	          disableKeyboardFocus = _props3.disableKeyboardFocus,
	          hoverColor = _props3.hoverColor,
	          initiallyOpen = _props3.initiallyOpen,
	          innerDivStyle = _props3.innerDivStyle,
	          insetChildren = _props3.insetChildren,
	          leftAvatar = _props3.leftAvatar,
	          leftCheckbox = _props3.leftCheckbox,
	          leftIcon = _props3.leftIcon,
	          nestedItems = _props3.nestedItems,
	          nestedLevel = _props3.nestedLevel,
	          nestedListStyle = _props3.nestedListStyle,
	          onKeyboardFocus = _props3.onKeyboardFocus,
	          onMouseEnter = _props3.onMouseEnter,
	          onMouseLeave = _props3.onMouseLeave,
	          onNestedListToggle = _props3.onNestedListToggle,
	          onTouchStart = _props3.onTouchStart,
	          onTouchTap = _props3.onTouchTap,
	          rightAvatar = _props3.rightAvatar,
	          rightIcon = _props3.rightIcon,
	          rightIconButton = _props3.rightIconButton,
	          rightToggle = _props3.rightToggle,
	          primaryText = _props3.primaryText,
	          primaryTogglesNestedList = _props3.primaryTogglesNestedList,
	          secondaryText = _props3.secondaryText,
	          secondaryTextLines = _props3.secondaryTextLines,
	          style = _props3.style,
	          other = (0, _objectWithoutProperties3.default)(_props3, ['autoGenerateNestedIndicator', 'children', 'disabled', 'disableKeyboardFocus', 'hoverColor', 'initiallyOpen', 'innerDivStyle', 'insetChildren', 'leftAvatar', 'leftCheckbox', 'leftIcon', 'nestedItems', 'nestedLevel', 'nestedListStyle', 'onKeyboardFocus', 'onMouseEnter', 'onMouseLeave', 'onNestedListToggle', 'onTouchStart', 'onTouchTap', 'rightAvatar', 'rightIcon', 'rightIconButton', 'rightToggle', 'primaryText', 'primaryTogglesNestedList', 'secondaryText', 'secondaryTextLines', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);
	      var contentChildren = [children];

	      if (leftIcon) {
	        var additionalProps = {
	          color: leftIcon.props.color || this.context.muiTheme.listItem.leftIconColor
	        };
	        this.pushElement(contentChildren, leftIcon, (0, _simpleAssign2.default)({}, styles.icons, styles.leftIcon), additionalProps);
	      }

	      if (rightIcon) {
	        var _additionalProps = {
	          color: rightIcon.props.color || this.context.muiTheme.listItem.rightIconColor
	        };
	        this.pushElement(contentChildren, rightIcon, (0, _simpleAssign2.default)({}, styles.icons, styles.rightIcon), _additionalProps);
	      }

	      if (leftAvatar) {
	        this.pushElement(contentChildren, leftAvatar, (0, _simpleAssign2.default)({}, styles.avatars, styles.leftAvatar));
	      }

	      if (rightAvatar) {
	        this.pushElement(contentChildren, rightAvatar, (0, _simpleAssign2.default)({}, styles.avatars, styles.rightAvatar));
	      }

	      if (leftCheckbox) {
	        this.pushElement(contentChildren, leftCheckbox, (0, _simpleAssign2.default)({}, styles.leftCheckbox));
	      }

	      // RightIconButtonElement
	      var hasNestListItems = nestedItems.length;
	      var hasRightElement = rightAvatar || rightIcon || rightIconButton || rightToggle;
	      var needsNestedIndicator = hasNestListItems && autoGenerateNestedIndicator && !hasRightElement;

	      if (rightIconButton || needsNestedIndicator) {
	        var rightIconButtonElement = rightIconButton;
	        var rightIconButtonHandlers = {
	          onKeyboardFocus: this.handleRightIconButtonKeyboardFocus,
	          onMouseEnter: this.handleRightIconButtonMouseEnter,
	          onMouseLeave: this.handleRightIconButtonMouseLeave,
	          onTouchTap: this.handleRightIconButtonTouchTap,
	          onMouseDown: this.handleRightIconButtonMouseUp,
	          onMouseUp: this.handleRightIconButtonMouseUp
	        };

	        // Create a nested list indicator icon if we don't have an icon on the right
	        if (needsNestedIndicator) {
	          rightIconButtonElement = this.state.open ? _react2.default.createElement(_IconButton2.default, null, _react2.default.createElement(_expandLess2.default, null)) : _react2.default.createElement(_IconButton2.default, null, _react2.default.createElement(_expandMore2.default, null));
	          rightIconButtonHandlers.onTouchTap = this.handleNestedListToggle;
	        }

	        this.pushElement(contentChildren, rightIconButtonElement, (0, _simpleAssign2.default)({}, styles.rightIconButton), rightIconButtonHandlers);
	      }

	      if (rightToggle) {
	        this.pushElement(contentChildren, rightToggle, (0, _simpleAssign2.default)({}, styles.rightToggle));
	      }

	      if (primaryText) {
	        var primaryTextElement = this.createTextElement(styles.primaryText, primaryText, 'primaryText');
	        contentChildren.push(primaryTextElement);
	      }

	      if (secondaryText) {
	        var secondaryTextElement = this.createTextElement(styles.secondaryText, secondaryText, 'secondaryText');
	        contentChildren.push(secondaryTextElement);
	      }

	      var nestedList = nestedItems.length ? _react2.default.createElement(_NestedList2.default, { nestedLevel: nestedLevel, open: this.state.open, style: nestedListStyle }, nestedItems) : undefined;

	      var simpleLabel = !primaryTogglesNestedList && (leftCheckbox || rightToggle);

	      return _react2.default.createElement('div', null, simpleLabel ? this.createLabelElement(styles, contentChildren, other) : disabled ? this.createDisabledElement(styles, contentChildren, other) : _react2.default.createElement(_EnhancedButton2.default, (0, _extends3.default)({
	        containerElement: 'span'
	      }, other, {
	        disableKeyboardFocus: disableKeyboardFocus || this.state.rightIconButtonKeyboardFocused,
	        onKeyboardFocus: this.handleKeyboardFocus,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseEnter: this.handleMouseEnter,
	        onTouchStart: this.handleTouchStart,
	        onTouchEnd: this.handleTouchEnd,
	        onTouchTap: primaryTogglesNestedList ? this.handleNestedListToggle : onTouchTap,
	        ref: 'enhancedButton',
	        style: (0, _simpleAssign2.default)({}, styles.root, style)
	      }), _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)(styles.innerDiv, innerDivStyle)) }, contentChildren)), nestedList);
	    }
	  }]);
	  return ListItem;
	}(_react.Component);

	ListItem.muiName = 'ListItem';
	ListItem.defaultProps = {
	  autoGenerateNestedIndicator: true,
	  disableKeyboardFocus: false,
	  disabled: false,
	  initiallyOpen: false,
	  insetChildren: false,
	  nestedItems: [],
	  nestedLevel: 0,
	  onKeyboardFocus: function onKeyboardFocus() {},
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  onNestedListToggle: function onNestedListToggle() {},
	  onTouchEnd: function onTouchEnd() {},
	  onTouchStart: function onTouchStart() {},
	  open: null,
	  primaryTogglesNestedList: false,
	  secondaryTextLines: 1
	};
	ListItem.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? ListItem.propTypes = {
	  /**
	   * If true, generate a nested-list-indicator icon when nested list
	   * items are detected. Note that an indicator will not be created
	   * if a `rightIcon` or `rightIconButton` has been provided to
	   * the element.
	   */
	  autoGenerateNestedIndicator: _react.PropTypes.bool,
	  /**
	   * Children passed into the `ListItem`.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * If true, the element will not be able to be focused by the keyboard.
	   */
	  disableKeyboardFocus: _react.PropTypes.bool,
	  /**
	   * If true, the element will not be clickable
	   * and will not display hover effects.
	   * This is automatically disabled if either `leftCheckbox`
	   * or `rightToggle` is set.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	  * Override the hover background color.
	  */
	  hoverColor: _react.PropTypes.string,
	  /**
	   * If true, the nested `ListItem`s are initially displayed.
	   */
	  initiallyOpen: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the inner div element.
	   */
	  innerDivStyle: _react.PropTypes.object,
	  /**
	   * If true, the children will be indented by 72px.
	   * This is useful if there is no left avatar or left icon.
	   */
	  insetChildren: _react.PropTypes.bool,
	  /**
	   * This is the `Avatar` element to be displayed on the left side.
	   */
	  leftAvatar: _react.PropTypes.element,
	  /**
	   * This is the `Checkbox` element to be displayed on the left side.
	   */
	  leftCheckbox: _react.PropTypes.element,
	  /**
	   * This is the `SvgIcon` or `FontIcon` to be displayed on the left side.
	   */
	  leftIcon: _react.PropTypes.element,
	  /**
	   * An array of `ListItem`s to nest underneath the current `ListItem`.
	   */
	  nestedItems: _react.PropTypes.arrayOf(_react.PropTypes.element),
	  /**
	   * Controls how deep a `ListItem` appears.
	   * This property is automatically managed, so modify at your own risk.
	   */
	  nestedLevel: _react.PropTypes.number,
	  /**
	   * Override the inline-styles of the nested items' `NestedList`.
	   */
	  nestedListStyle: _react.PropTypes.object,
	  /**
	   * Callback function fired when the `ListItem` is focused or blurred by the keyboard.
	   *
	   * @param {object} event `focus` or `blur` event targeting the `ListItem`.
	   * @param {boolean} isKeyboardFocused If true, the `ListItem` is focused.
	   */
	  onKeyboardFocus: _react.PropTypes.func,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /**
	   * Callbak function fired when the `ListItem` toggles its nested list.
	   *
	   * @param {object} listItem The `ListItem`.
	   */
	  onNestedListToggle: _react.PropTypes.func,
	  /** @ignore */
	  onTouchEnd: _react.PropTypes.func,
	  /** @ignore */
	  onTouchStart: _react.PropTypes.func,
	  /** @ignore */
	  onTouchTap: _react.PropTypes.func,
	  /**
	   * Control toggle state of nested list.
	   */
	  open: _react.PropTypes.bool,
	  /**
	   * This is the block element that contains the primary text.
	   * If a string is passed in, a div tag will be rendered.
	   */
	  primaryText: _react.PropTypes.node,
	  /**
	   * If true, clicking or tapping the primary text of the `ListItem`
	   * toggles the nested list.
	   */
	  primaryTogglesNestedList: _react.PropTypes.bool,
	  /**
	   * This is the `Avatar` element to be displayed on the right side.
	   */
	  rightAvatar: _react.PropTypes.element,
	  /**
	   * This is the `SvgIcon` or `FontIcon` to be displayed on the right side.
	   */
	  rightIcon: _react.PropTypes.element,
	  /**
	   * This is the `IconButton` to be displayed on the right side.
	   * Hovering over this button will remove the `ListItem` hover.
	   * Also, clicking on this button will not trigger a
	   * ripple on the `ListItem`; the event will be stopped and prevented
	   * from bubbling up to cause a `ListItem` click.
	   */
	  rightIconButton: _react.PropTypes.element,
	  /**
	   * This is the `Toggle` element to display on the right side.
	   */
	  rightToggle: _react.PropTypes.element,
	  /**
	   * This is the block element that contains the secondary text.
	   * If a string is passed in, a div tag will be rendered.
	   */
	  secondaryText: _react.PropTypes.node,
	  /**
	   * Can be 1 or 2. This is the number of secondary
	   * text lines before ellipsis will show.
	   */
	  secondaryTextLines: _react.PropTypes.oneOf([1, 2]),
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = ListItem;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NavigationExpandLess = function NavigationExpandLess(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z' }));
	};
	NavigationExpandLess = (0, _pure2.default)(NavigationExpandLess);
	NavigationExpandLess.displayName = 'NavigationExpandLess';
	NavigationExpandLess.muiName = 'SvgIcon';

	exports.default = NavigationExpandLess;

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NavigationExpandMore = function NavigationExpandMore(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z' }));
	};
	NavigationExpandMore = (0, _pure2.default)(NavigationExpandMore);
	NavigationExpandMore.displayName = 'NavigationExpandMore';
	NavigationExpandMore.muiName = 'SvgIcon';

	exports.default = NavigationExpandMore;

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _List = __webpack_require__(417);

	var _List2 = _interopRequireDefault(_List);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NestedList = function NestedList(props) {
	  var children = props.children,
	      open = props.open,
	      nestedLevel = props.nestedLevel,
	      style = props.style;

	  if (!open) {
	    return null;
	  }

	  return _react2.default.createElement(_List2.default, { style: style }, _react.Children.map(children, function (child) {
	    return (0, _react.isValidElement)(child) ? (0, _react.cloneElement)(child, {
	      nestedLevel: nestedLevel + 1
	    }) : child;
	  }));
	};

	process.env.NODE_ENV !== "production" ? NestedList.propTypes = {
	  children: _react.PropTypes.node,
	  nestedLevel: _react.PropTypes.number.isRequired,
	  open: _react.PropTypes.bool.isRequired,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;

	exports.default = NestedList;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Subheader = __webpack_require__(418);

	var _Subheader2 = _interopRequireDefault(_Subheader);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var List = function (_Component) {
	  (0, _inherits3.default)(List, _Component);

	  function List() {
	    (0, _classCallCheck3.default)(this, List);
	    return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(List, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var hasSubheader = false;

	      var firstChild = _react.Children.toArray(children)[0];
	      if ((0, _react.isValidElement)(firstChild) && firstChild.type === _Subheader2.default) {
	        hasSubheader = true;
	      }

	      var styles = {
	        root: {
	          padding: (hasSubheader ? 0 : 8) + 'px 0px 8px 0px'
	        }
	      };

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }), children);
	    }
	  }]);
	  return List;
	}(_react.Component);

	List.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? List.propTypes = {
	  /**
	   * These are usually `ListItem`s that are passed to
	   * be part of the list.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = List;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Subheader = __webpack_require__(419);

	var _Subheader2 = _interopRequireDefault(_Subheader);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Subheader2.default;

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var Subheader = function Subheader(props, context) {
	  var children = props.children,
	      inset = props.inset,
	      style = props.style,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
	  var _context$muiTheme = context.muiTheme,
	      prepareStyles = _context$muiTheme.prepareStyles,
	      subheader = _context$muiTheme.subheader;

	  var styles = {
	    root: {
	      boxSizing: 'border-box',
	      color: subheader.color,
	      fontSize: 14,
	      fontWeight: subheader.fontWeight,
	      lineHeight: '48px',
	      paddingLeft: inset ? 72 : 16,
	      width: '100%'
	    }
	  };

	  return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }), children);
	};

	Subheader.muiName = 'Subheader';

	process.env.NODE_ENV !== "production" ? Subheader.propTypes = {
	  /**
	   * Node that will be placed inside the `Subheader`.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * If true, the `Subheader` will be indented.
	   */
	  inset: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;

	Subheader.defaultProps = {
	  inset: false
	};

	Subheader.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};

	exports.default = Subheader;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _toArray2 = __webpack_require__(361);

	var _toArray3 = _interopRequireDefault(_toArray2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(347);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _ClickAwayListener = __webpack_require__(421);

	var _ClickAwayListener2 = _interopRequireDefault(_ClickAwayListener);

	var _keycode = __webpack_require__(345);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _List = __webpack_require__(417);

	var _List2 = _interopRequireDefault(_List);

	var _menuUtils = __webpack_require__(422);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var desktop = props.desktop,
	      maxHeight = props.maxHeight,
	      width = props.width;
	  var muiTheme = context.muiTheme;

	  var styles = {
	    root: {
	      // Nested div bacause the List scales x faster than it scales y
	      zIndex: muiTheme.zIndex.menu,
	      maxHeight: maxHeight,
	      overflowY: maxHeight ? 'auto' : null
	    },
	    divider: {
	      marginTop: 7,
	      marginBottom: 8
	    },
	    list: {
	      display: 'table-cell',
	      paddingBottom: desktop ? 16 : 8,
	      paddingTop: desktop ? 16 : 8,
	      userSelect: 'none',
	      width: width
	    },
	    selectedMenuItem: {
	      color: muiTheme.menuItem.selectedTextColor
	    }
	  };

	  return styles;
	}

	var Menu = function (_Component) {
	  (0, _inherits3.default)(Menu, _Component);

	  function Menu(props, context) {
	    (0, _classCallCheck3.default)(this, Menu);

	    var _this = (0, _possibleConstructorReturn3.default)(this, (Menu.__proto__ || (0, _getPrototypeOf2.default)(Menu)).call(this, props, context));

	    _initialiseProps.call(_this);

	    var filteredChildren = _this.getFilteredChildren(props.children);
	    var selectedIndex = _this.getSelectedIndex(props, filteredChildren);

	    _this.state = {
	      focusIndex: props.disableAutoFocus ? -1 : selectedIndex >= 0 ? selectedIndex : 0,
	      isKeyboardFocused: props.initiallyKeyboardFocused,
	      keyWidth: props.desktop ? 64 : 56
	    };

	    _this.hotKeyHolder = new _menuUtils.HotKeyHolder();
	    return _this;
	  }

	  (0, _createClass3.default)(Menu, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.autoWidth) {
	        this.setWidth();
	      }
	      this.setScollPosition();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var filteredChildren = this.getFilteredChildren(nextProps.children);
	      var selectedIndex = this.getSelectedIndex(nextProps, filteredChildren);

	      this.setState({
	        focusIndex: nextProps.disableAutoFocus ? -1 : selectedIndex >= 0 ? selectedIndex : 0,
	        keyWidth: nextProps.desktop ? 64 : 56
	      });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.props.autoWidth) this.setWidth();
	    }
	  }, {
	    key: 'getValueLink',

	    // Do not use outside of this component, it will be removed once valueLink is deprecated
	    value: function getValueLink(props) {
	      return props.valueLink || {
	        value: props.value,
	        requestChange: props.onChange
	      };
	    }
	  }, {
	    key: 'setKeyboardFocused',
	    value: function setKeyboardFocused(keyboardFocused) {
	      this.setState({
	        isKeyboardFocused: keyboardFocused
	      });
	    }
	  }, {
	    key: 'getFilteredChildren',
	    value: function getFilteredChildren(children) {
	      var filteredChildren = [];
	      _react2.default.Children.forEach(children, function (child) {
	        if (child) {
	          filteredChildren.push(child);
	        }
	      });
	      return filteredChildren;
	    }
	  }, {
	    key: 'cloneMenuItem',
	    value: function cloneMenuItem(child, childIndex, styles, index) {
	      var _this2 = this;

	      var _props = this.props,
	          desktop = _props.desktop,
	          menuItemStyle = _props.menuItemStyle,
	          selectedMenuItemStyle = _props.selectedMenuItemStyle;

	      var selected = this.isChildSelected(child, this.props);
	      var selectedChildrenStyles = {};

	      if (selected) {
	        selectedChildrenStyles = (0, _simpleAssign2.default)(styles.selectedMenuItem, selectedMenuItemStyle);
	      }

	      var mergedChildrenStyles = (0, _simpleAssign2.default)({}, child.props.style, menuItemStyle, selectedChildrenStyles);

	      var isFocused = childIndex === this.state.focusIndex;
	      var focusState = 'none';
	      if (isFocused) {
	        focusState = this.state.isKeyboardFocused ? 'keyboard-focused' : 'focused';
	      }

	      return _react2.default.cloneElement(child, {
	        desktop: desktop,
	        focusState: focusState,
	        onTouchTap: function onTouchTap(event) {
	          _this2.handleMenuItemTouchTap(event, child, index);
	          if (child.props.onTouchTap) child.props.onTouchTap(event);
	        },
	        ref: isFocused ? 'focusedMenuItem' : null,
	        style: mergedChildrenStyles
	      });
	    }
	  }, {
	    key: 'decrementKeyboardFocusIndex',
	    value: function decrementKeyboardFocusIndex() {
	      var index = this.state.focusIndex;

	      index--;
	      if (index < 0) index = 0;

	      this.setFocusIndex(index, true);
	    }
	  }, {
	    key: 'getMenuItemCount',
	    value: function getMenuItemCount(filteredChildren) {
	      var menuItemCount = 0;
	      filteredChildren.forEach(function (child) {
	        var childIsADivider = child.type && child.type.muiName === 'Divider';
	        var childIsDisabled = child.props.disabled;
	        if (!childIsADivider && !childIsDisabled) menuItemCount++;
	      });
	      return menuItemCount;
	    }
	  }, {
	    key: 'getSelectedIndex',
	    value: function getSelectedIndex(props, filteredChildren) {
	      var _this3 = this;

	      var selectedIndex = -1;
	      var menuItemIndex = 0;

	      filteredChildren.forEach(function (child) {
	        var childIsADivider = child.type && child.type.muiName === 'Divider';

	        if (_this3.isChildSelected(child, props)) selectedIndex = menuItemIndex;
	        if (!childIsADivider) menuItemIndex++;
	      });

	      return selectedIndex;
	    }
	  }, {
	    key: 'setFocusIndexStartsWith',
	    value: function setFocusIndexStartsWith(keys) {
	      var foundIndex = -1;
	      _react2.default.Children.forEach(this.props.children, function (child, index) {
	        if (foundIndex >= 0) {
	          return;
	        }
	        var primaryText = child.props.primaryText;

	        if (typeof primaryText === 'string' && new RegExp('^' + keys, 'i').test(primaryText)) {
	          foundIndex = index;
	        }
	      });
	      if (foundIndex >= 0) {
	        this.setFocusIndex(foundIndex, true);
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: 'handleMenuItemTouchTap',
	    value: function handleMenuItemTouchTap(event, item, index) {
	      var children = this.props.children;
	      var multiple = this.props.multiple;
	      var valueLink = this.getValueLink(this.props);
	      var menuValue = valueLink.value;
	      var itemValue = item.props.value;
	      var focusIndex = _react2.default.isValidElement(children) ? 0 : children.indexOf(item);

	      this.setFocusIndex(focusIndex, false);

	      if (multiple) {
	        var itemIndex = menuValue.indexOf(itemValue);

	        var _menuValue = (0, _toArray3.default)(menuValue),
	            newMenuValue = _menuValue;

	        if (itemIndex === -1) {
	          newMenuValue.push(itemValue);
	        } else {
	          newMenuValue.splice(itemIndex, 1);
	        }

	        valueLink.requestChange(event, newMenuValue);
	      } else if (!multiple && itemValue !== menuValue) {
	        valueLink.requestChange(event, itemValue);
	      }

	      this.props.onItemTouchTap(event, item, index);
	    }
	  }, {
	    key: 'incrementKeyboardFocusIndex',
	    value: function incrementKeyboardFocusIndex(filteredChildren) {
	      var index = this.state.focusIndex;
	      var maxIndex = this.getMenuItemCount(filteredChildren) - 1;

	      index++;
	      if (index > maxIndex) index = maxIndex;

	      this.setFocusIndex(index, true);
	    }
	  }, {
	    key: 'isChildSelected',
	    value: function isChildSelected(child, props) {
	      var menuValue = this.getValueLink(props).value;
	      var childValue = child.props.value;

	      if (props.multiple) {
	        return menuValue.length && menuValue.indexOf(childValue) !== -1;
	      } else {
	        return child.props.hasOwnProperty('value') && menuValue === childValue;
	      }
	    }
	  }, {
	    key: 'setFocusIndex',
	    value: function setFocusIndex(newIndex, isKeyboardFocused) {
	      this.setState({
	        focusIndex: newIndex,
	        isKeyboardFocused: isKeyboardFocused
	      });
	    }
	  }, {
	    key: 'setScollPosition',
	    value: function setScollPosition() {
	      var desktop = this.props.desktop;
	      var focusedMenuItem = this.refs.focusedMenuItem;
	      var menuItemHeight = desktop ? 32 : 48;

	      if (focusedMenuItem) {
	        var selectedOffSet = _reactDom2.default.findDOMNode(focusedMenuItem).offsetTop;

	        // Make the focused item be the 2nd item in the list the user sees
	        var scrollTop = selectedOffSet - menuItemHeight;
	        if (scrollTop < menuItemHeight) scrollTop = 0;

	        _reactDom2.default.findDOMNode(this.refs.scrollContainer).scrollTop = scrollTop;
	      }
	    }
	  }, {
	    key: 'cancelScrollEvent',
	    value: function cancelScrollEvent(event) {
	      event.stopPropagation();
	      event.preventDefault();
	      return false;
	    }
	  }, {
	    key: 'setWidth',
	    value: function setWidth() {
	      var el = _reactDom2.default.findDOMNode(this);
	      var listEl = _reactDom2.default.findDOMNode(this.refs.list);
	      var elWidth = el.offsetWidth;
	      var keyWidth = this.state.keyWidth;
	      var minWidth = keyWidth * 1.5;
	      var keyIncrements = elWidth / keyWidth;
	      var newWidth = void 0;

	      keyIncrements = keyIncrements <= 1.5 ? 1.5 : Math.ceil(keyIncrements);
	      newWidth = keyIncrements * keyWidth;

	      if (newWidth < minWidth) newWidth = minWidth;

	      el.style.width = newWidth + 'px';
	      listEl.style.width = newWidth + 'px';
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;

	      var _props2 = this.props,
	          autoWidth = _props2.autoWidth,
	          children = _props2.children,
	          desktop = _props2.desktop,
	          disableAutoFocus = _props2.disableAutoFocus,
	          initiallyKeyboardFocused = _props2.initiallyKeyboardFocused,
	          listStyle = _props2.listStyle,
	          maxHeight = _props2.maxHeight,
	          multiple = _props2.multiple,
	          onItemTouchTap = _props2.onItemTouchTap,
	          onEscKeyDown = _props2.onEscKeyDown,
	          selectedMenuItemStyle = _props2.selectedMenuItemStyle,
	          menuItemStyle = _props2.menuItemStyle,
	          style = _props2.style,
	          value = _props2.value,
	          valueLink = _props2.valueLink,
	          width = _props2.width,
	          other = (0, _objectWithoutProperties3.default)(_props2, ['autoWidth', 'children', 'desktop', 'disableAutoFocus', 'initiallyKeyboardFocused', 'listStyle', 'maxHeight', 'multiple', 'onItemTouchTap', 'onEscKeyDown', 'selectedMenuItemStyle', 'menuItemStyle', 'style', 'value', 'valueLink', 'width']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var mergedRootStyles = (0, _simpleAssign2.default)(styles.root, style);
	      var mergedListStyles = (0, _simpleAssign2.default)(styles.list, listStyle);

	      var filteredChildren = this.getFilteredChildren(children);

	      var menuItemIndex = 0;
	      var newChildren = _react2.default.Children.map(filteredChildren, function (child, index) {
	        var childIsADivider = child.type && child.type.muiName === 'Divider';
	        var childIsDisabled = child.props.disabled;

	        var clonedChild = childIsADivider ? _react2.default.cloneElement(child, {
	          style: (0, _simpleAssign2.default)({}, styles.divider, child.props.style)
	        }) : childIsDisabled ? _react2.default.cloneElement(child, { desktop: desktop }) : _this4.cloneMenuItem(child, menuItemIndex, styles, index);

	        if (!childIsADivider && !childIsDisabled) {
	          menuItemIndex++;
	        }

	        return clonedChild;
	      });

	      return _react2.default.createElement(_ClickAwayListener2.default, { onClickAway: this.handleClickAway }, _react2.default.createElement('div', {
	        onKeyDown: this.handleKeyDown,
	        onWheel: this.handleOnWheel,
	        style: prepareStyles(mergedRootStyles),
	        ref: 'scrollContainer'
	      }, _react2.default.createElement(_List2.default, (0, _extends3.default)({}, other, {
	        ref: 'list',
	        style: mergedListStyles
	      }), newChildren)));
	    }
	  }]);
	  return Menu;
	}(_react.Component);

	Menu.defaultProps = {
	  autoWidth: true,
	  desktop: false,
	  disableAutoFocus: false,
	  initiallyKeyboardFocused: false,
	  maxHeight: null,
	  multiple: false,
	  onChange: function onChange() {},
	  onEscKeyDown: function onEscKeyDown() {},
	  onItemTouchTap: function onItemTouchTap() {},
	  onKeyDown: function onKeyDown() {}
	};
	Menu.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this5 = this;

	  this.handleClickAway = function (event) {
	    if (event.defaultPrevented) {
	      return;
	    }

	    _this5.setFocusIndex(-1, false);
	  };

	  this.handleKeyDown = function (event) {
	    var filteredChildren = _this5.getFilteredChildren(_this5.props.children);
	    var key = (0, _keycode2.default)(event);
	    switch (key) {
	      case 'down':
	        event.preventDefault();
	        _this5.incrementKeyboardFocusIndex(filteredChildren);
	        break;
	      case 'esc':
	        _this5.props.onEscKeyDown(event);
	        break;
	      case 'tab':
	        event.preventDefault();
	        if (event.shiftKey) {
	          _this5.decrementKeyboardFocusIndex();
	        } else {
	          _this5.incrementKeyboardFocusIndex(filteredChildren);
	        }
	        break;
	      case 'up':
	        event.preventDefault();
	        _this5.decrementKeyboardFocusIndex();
	        break;
	      default:
	        if (key && key.length === 1) {
	          var hotKeys = _this5.hotKeyHolder.append(key);
	          if (_this5.setFocusIndexStartsWith(hotKeys)) {
	            event.preventDefault();
	          }
	        }
	    }
	    _this5.props.onKeyDown(event);
	  };

	  this.handleOnWheel = function (event) {
	    var scrollContainer = _this5.refs.scrollContainer;
	    // Only scroll lock if the the Menu is scrollable.
	    if (scrollContainer.scrollHeight <= scrollContainer.clientHeight) return;

	    var scrollTop = scrollContainer.scrollTop,
	        scrollHeight = scrollContainer.scrollHeight,
	        clientHeight = scrollContainer.clientHeight;

	    var wheelDelta = event.deltaY;
	    var isDeltaPositive = wheelDelta > 0;

	    if (isDeltaPositive && wheelDelta > scrollHeight - clientHeight - scrollTop) {
	      scrollContainer.scrollTop = scrollHeight;
	      return _this5.cancelScrollEvent(event);
	    } else if (!isDeltaPositive && -wheelDelta > scrollTop) {
	      scrollContainer.scrollTop = 0;
	      return _this5.cancelScrollEvent(event);
	    }
	  };
	};

	process.env.NODE_ENV !== "production" ? Menu.propTypes = {
	  /**
	   * If true, the width of the menu will be set automatically
	   * according to the widths of its children,
	   * using proper keyline increments (64px for desktop,
	   * 56px otherwise).
	   */
	  autoWidth: _react.PropTypes.bool,
	  /**
	   * The content of the menu. This is usually used to pass `MenuItem`
	   * elements.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * If true, the menu item will render with compact desktop styles.
	   */
	  desktop: _react.PropTypes.bool,
	  /**
	   * If true, the menu will not be auto-focused.
	   */
	  disableAutoFocus: _react.PropTypes.bool,
	  /**
	   * If true, the menu will be keyboard-focused initially.
	   */
	  initiallyKeyboardFocused: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the underlying `List` element.
	   */
	  listStyle: _react.PropTypes.object,
	  /**
	   * The maximum height of the menu in pixels. If specified,
	   * the menu will be scrollable if it is taller than the provided
	   * height.
	   */
	  maxHeight: _react.PropTypes.number,
	  /**
	   * Override the inline-styles of menu items.
	   */
	  menuItemStyle: _react.PropTypes.object,
	  /**
	   * If true, `value` must be an array and the menu will support
	   * multiple selections.
	   */
	  multiple: _react.PropTypes.bool,
	  /**
	   * Callback function fired when a menu item with `value` not
	   * equal to the current `value` of the menu is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the menu item.
	   * @param {any}  value If `multiple` is true, the menu's `value`
	   * array with either the menu item's `value` added (if
	   * it wasn't already selected) or omitted (if it was already selected).
	   * Otherwise, the `value` of the menu item.
	   */
	  onChange: _react.PropTypes.func,
	  /**
	   * Callback function fired when the menu is focused and the *Esc* key
	   * is pressed.
	   *
	   * @param {object} event `keydown` event targeting the menu.
	   */
	  onEscKeyDown: _react.PropTypes.func,
	  /**
	   * Callback function fired when a menu item is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the menu item.
	   * @param {object} menuItem The menu item.
	   * @param {number} index The index of the menu item.
	   */
	  onItemTouchTap: _react.PropTypes.func,
	  /** @ignore */
	  onKeyDown: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of selected menu items.
	   */
	  selectedMenuItemStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * If `multiple` is true, an array of the `value`s of the selected
	   * menu items. Otherwise, the `value` of the selected menu item.
	   * If provided, the menu will be a controlled component.
	   * This component also supports valueLink.
	   */
	  value: _react.PropTypes.any,
	  /**
	   * ValueLink for the menu's `value`.
	   */
	  valueLink: _react.PropTypes.object,
	  /**
	   * The width of the menu. If not specified, the menu's width
	   * will be set according to the widths of its children, using
	   * proper keyline increments (64px for desktop, 56px otherwise).
	   */
	  width: _propTypes2.default.stringOrNumber
	} : void 0;
	exports.default = Menu;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(1);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _events = __webpack_require__(344);

	var _events2 = _interopRequireDefault(_events);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var isDescendant = function isDescendant(el, target) {
	  if (target !== null) {
	    return el === target || isDescendant(el, target.parentNode);
	  }
	  return false;
	};

	var clickAwayEvents = ['mouseup', 'touchend'];
	var bind = function bind(callback) {
	  return clickAwayEvents.forEach(function (event) {
	    return _events2.default.on(document, event, callback);
	  });
	};
	var unbind = function unbind(callback) {
	  return clickAwayEvents.forEach(function (event) {
	    return _events2.default.off(document, event, callback);
	  });
	};

	var ClickAwayListener = function (_Component) {
	  (0, _inherits3.default)(ClickAwayListener, _Component);

	  function ClickAwayListener() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, ClickAwayListener);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ClickAwayListener.__proto__ || (0, _getPrototypeOf2.default)(ClickAwayListener)).call.apply(_ref, [this].concat(args))), _this), _this.handleClickAway = function (event) {
	      if (event.defaultPrevented) {
	        return;
	      }

	      // IE11 support, which trigger the handleClickAway even after the unbind
	      if (_this.isCurrentlyMounted) {
	        var el = _reactDom2.default.findDOMNode(_this);

	        if (document.documentElement.contains(event.target) && !isDescendant(el, event.target)) {
	          _this.props.onClickAway(event);
	        }
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(ClickAwayListener, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.isCurrentlyMounted = true;
	      if (this.props.onClickAway) {
	        bind(this.handleClickAway);
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      if (prevProps.onClickAway !== this.props.onClickAway) {
	        unbind(this.handleClickAway);
	        if (this.props.onClickAway) {
	          bind(this.handleClickAway);
	        }
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.isCurrentlyMounted = false;
	      unbind(this.handleClickAway);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);
	  return ClickAwayListener;
	}(_react.Component);

	process.env.NODE_ENV !== "production" ? ClickAwayListener.propTypes = {
	  children: _react.PropTypes.element,
	  onClickAway: _react.PropTypes.func
	} : void 0;
	exports.default = ClickAwayListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HotKeyHolder = undefined;

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var HotKeyHolder = exports.HotKeyHolder = function () {
	  function HotKeyHolder() {
	    var _this = this;

	    (0, _classCallCheck3.default)(this, HotKeyHolder);

	    this.clear = function () {
	      _this.timerId = null;
	      _this.lastKeys = null;
	    };
	  }

	  (0, _createClass3.default)(HotKeyHolder, [{
	    key: 'append',
	    value: function append(key) {
	      clearTimeout(this.timerId);
	      this.timerId = setTimeout(this.clear, 500);
	      return this.lastKeys = (this.lastKeys || '') + key;
	    }
	  }]);
	  return HotKeyHolder;
	}();

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _RaisedButton = __webpack_require__(424);

	var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _RaisedButton2.default;

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _colorManipulator = __webpack_require__(235);

	var _childUtils = __webpack_require__(341);

	var _EnhancedButton = __webpack_require__(340);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function validateLabel(props, propName, componentName) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!props.children && props.label !== 0 && !props.label && !props.icon) {
	      return new Error('Required prop label or children or icon was not specified in ' + componentName + '.');
	    }
	  }
	}

	function getStyles(props, context, state) {
	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      button = _context$muiTheme.button,
	      raisedButton = _context$muiTheme.raisedButton;
	  var disabled = props.disabled,
	      disabledBackgroundColor = props.disabledBackgroundColor,
	      disabledLabelColor = props.disabledLabelColor,
	      fullWidth = props.fullWidth,
	      icon = props.icon,
	      label = props.label,
	      labelPosition = props.labelPosition,
	      primary = props.primary,
	      secondary = props.secondary,
	      style = props.style;

	  var amount = primary || secondary ? 0.4 : 0.08;

	  var backgroundColor = raisedButton.color;
	  var labelColor = raisedButton.textColor;

	  if (disabled) {
	    backgroundColor = disabledBackgroundColor || raisedButton.disabledColor;
	    labelColor = disabledLabelColor || raisedButton.disabledTextColor;
	  } else if (primary) {
	    backgroundColor = raisedButton.primaryColor;
	    labelColor = raisedButton.primaryTextColor;
	  } else if (secondary) {
	    backgroundColor = raisedButton.secondaryColor;
	    labelColor = raisedButton.secondaryTextColor;
	  } else {
	    if (props.backgroundColor) {
	      backgroundColor = props.backgroundColor;
	    }
	    if (props.labelColor) {
	      labelColor = props.labelColor;
	    }
	  }

	  var buttonHeight = style && style.height || button.height;
	  var borderRadius = 2;

	  return {
	    root: {
	      display: 'inline-block',
	      transition: _transitions2.default.easeOut(),
	      minWidth: fullWidth ? '100%' : button.minWidth
	    },
	    button: {
	      position: 'relative',
	      height: buttonHeight,
	      lineHeight: buttonHeight + 'px',
	      width: '100%',
	      padding: 0,
	      borderRadius: borderRadius,
	      transition: _transitions2.default.easeOut(),
	      backgroundColor: backgroundColor,
	      // That's the default value for a button but not a link
	      textAlign: 'center'
	    },
	    label: {
	      position: 'relative',
	      opacity: 1,
	      fontSize: raisedButton.fontSize,
	      letterSpacing: 0,
	      textTransform: raisedButton.textTransform || button.textTransform || 'uppercase',
	      fontWeight: raisedButton.fontWeight,
	      margin: 0,
	      userSelect: 'none',
	      paddingLeft: icon && labelPosition !== 'before' ? 8 : baseTheme.spacing.desktopGutterLess,
	      paddingRight: icon && labelPosition === 'before' ? 8 : baseTheme.spacing.desktopGutterLess,
	      color: labelColor
	    },
	    icon: {
	      verticalAlign: 'middle',
	      marginLeft: label && labelPosition !== 'before' ? 12 : 0,
	      marginRight: label && labelPosition === 'before' ? 12 : 0
	    },
	    overlay: {
	      height: buttonHeight,
	      borderRadius: borderRadius,
	      backgroundColor: (state.keyboardFocused || state.hovered) && !disabled && (0, _colorManipulator.fade)(labelColor, amount),
	      transition: _transitions2.default.easeOut(),
	      top: 0
	    },
	    ripple: {
	      color: labelColor,
	      opacity: !(primary || secondary) ? 0.1 : 0.16
	    }
	  };
	}

	var RaisedButton = function (_Component) {
	  (0, _inherits3.default)(RaisedButton, _Component);

	  function RaisedButton() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, RaisedButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false,
	      keyboardFocused: false,
	      touched: false,
	      initialZDepth: 0,
	      zDepth: 0
	    }, _this.handleMouseDown = function (event) {
	      // only listen to left clicks
	      if (event.button === 0) {
	        _this.setState({
	          zDepth: _this.state.initialZDepth + 1
	        });
	      }
	      if (_this.props.onMouseDown) {
	        _this.props.onMouseDown(event);
	      }
	    }, _this.handleMouseUp = function (event) {
	      _this.setState({
	        zDepth: _this.state.initialZDepth
	      });
	      if (_this.props.onMouseUp) {
	        _this.props.onMouseUp(event);
	      }
	    }, _this.handleMouseLeave = function (event) {
	      if (!_this.state.keyboardFocused) {
	        _this.setState({
	          zDepth: _this.state.initialZDepth,
	          hovered: false
	        });
	      }
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(event);
	      }
	    }, _this.handleMouseEnter = function (event) {
	      if (!_this.state.keyboardFocused && !_this.state.touched) {
	        _this.setState({
	          hovered: true
	        });
	      }
	      if (_this.props.onMouseEnter) {
	        _this.props.onMouseEnter(event);
	      }
	    }, _this.handleTouchStart = function (event) {
	      _this.setState({
	        touched: true,
	        zDepth: _this.state.initialZDepth + 1
	      });

	      if (_this.props.onTouchStart) {
	        _this.props.onTouchStart(event);
	      }
	    }, _this.handleTouchEnd = function (event) {
	      _this.setState({
	        touched: true,
	        zDepth: _this.state.initialZDepth
	      });

	      if (_this.props.onTouchEnd) {
	        _this.props.onTouchEnd(event);
	      }
	    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
	      var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;

	      _this.setState({
	        zDepth: zDepth,
	        keyboardFocused: keyboardFocused
	      });
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(RaisedButton, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var zDepth = this.props.disabled ? 0 : 1;
	      this.setState({
	        zDepth: zDepth,
	        initialZDepth: zDepth
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var zDepth = nextProps.disabled ? 0 : 1;
	      var nextState = {
	        zDepth: zDepth,
	        initialZDepth: zDepth
	      };

	      if (nextProps.disabled) {
	        nextState.hovered = false;
	      }

	      this.setState(nextState);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          backgroundColor = _props.backgroundColor,
	          buttonStyle = _props.buttonStyle,
	          children = _props.children,
	          className = _props.className,
	          disabled = _props.disabled,
	          disabledBackgroundColor = _props.disabledBackgroundColor,
	          disabledLabelColor = _props.disabledLabelColor,
	          fullWidth = _props.fullWidth,
	          icon = _props.icon,
	          label = _props.label,
	          labelColor = _props.labelColor,
	          labelPosition = _props.labelPosition,
	          labelStyle = _props.labelStyle,
	          overlayStyle = _props.overlayStyle,
	          primary = _props.primary,
	          rippleStyle = _props.rippleStyle,
	          secondary = _props.secondary,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['backgroundColor', 'buttonStyle', 'children', 'className', 'disabled', 'disabledBackgroundColor', 'disabledLabelColor', 'fullWidth', 'icon', 'label', 'labelColor', 'labelPosition', 'labelStyle', 'overlayStyle', 'primary', 'rippleStyle', 'secondary', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);
	      var mergedRippleStyles = (0, _simpleAssign2.default)({}, styles.ripple, rippleStyle);

	      var buttonEventHandlers = disabled ? {} : {
	        onMouseDown: this.handleMouseDown,
	        onMouseUp: this.handleMouseUp,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseEnter: this.handleMouseEnter,
	        onTouchStart: this.handleTouchStart,
	        onTouchEnd: this.handleTouchEnd,
	        onKeyboardFocus: this.handleKeyboardFocus
	      };

	      var labelElement = label && _react2.default.createElement('span', { style: prepareStyles((0, _simpleAssign2.default)(styles.label, labelStyle)) }, label);

	      var iconCloned = icon && (0, _react.cloneElement)(icon, {
	        color: icon.props.color || styles.label.color,
	        style: (0, _simpleAssign2.default)(styles.icon, icon.props.style)
	      });

	      // Place label before or after children.
	      var childrenFragment = labelPosition === 'before' ? {
	        labelElement: labelElement,
	        iconCloned: iconCloned,
	        children: children
	      } : {
	        children: children,
	        iconCloned: iconCloned,
	        labelElement: labelElement
	      };

	      var enhancedButtonChildren = (0, _childUtils.createChildFragment)(childrenFragment);

	      return _react2.default.createElement(_Paper2.default, {
	        className: className,
	        style: (0, _simpleAssign2.default)(styles.root, style),
	        zDepth: this.state.zDepth
	      }, _react2.default.createElement(_EnhancedButton2.default, (0, _extends3.default)({}, other, buttonEventHandlers, {
	        ref: 'container',
	        disabled: disabled,
	        style: (0, _simpleAssign2.default)(styles.button, buttonStyle),
	        focusRippleColor: mergedRippleStyles.color,
	        touchRippleColor: mergedRippleStyles.color,
	        focusRippleOpacity: mergedRippleStyles.opacity,
	        touchRippleOpacity: mergedRippleStyles.opacity
	      }), _react2.default.createElement('div', {
	        ref: 'overlay',
	        style: prepareStyles((0, _simpleAssign2.default)(styles.overlay, overlayStyle))
	      }, enhancedButtonChildren)));
	    }
	  }]);
	  return RaisedButton;
	}(_react.Component);

	RaisedButton.muiName = 'RaisedButton';
	RaisedButton.defaultProps = {
	  disabled: false,
	  labelPosition: 'after',
	  fullWidth: false,
	  primary: false,
	  secondary: false
	};
	RaisedButton.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? RaisedButton.propTypes = {
	  /**
	   * Override the default background color for the button,
	   * but not the default disabled background color
	   * (use `disabledBackgroundColor` for this).
	   */
	  backgroundColor: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the button element.
	   */
	  buttonStyle: _react.PropTypes.object,
	  /**
	   * The content of the button.
	   * If a label is provided via the `label` prop, the text within the label
	   * will be displayed in addition to the content provided here.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The CSS class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * If true, the button will be disabled.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * Override the default background color for the button
	   * when it is disabled.
	   */
	  disabledBackgroundColor: _react.PropTypes.string,
	  /**
	   * The color of the button's label when the button is disabled.
	   */
	  disabledLabelColor: _react.PropTypes.string,
	  /**
	   * If true, the button will take up the full width of its container.
	   */
	  fullWidth: _react.PropTypes.bool,
	  /**
	   * The URL to link to when the button is clicked.
	   */
	  href: _react.PropTypes.string,
	  /**
	   * An icon to be displayed within the button.
	   */
	  icon: _react.PropTypes.node,
	  /**
	   * The label to be displayed within the button.
	   * If content is provided via the `children` prop, that content will be
	   * displayed in addition to the label provided here.
	   */
	  label: validateLabel,
	  /**
	   * The color of the button's label.
	   */
	  labelColor: _react.PropTypes.string,
	  /**
	   * The position of the button's label relative to the button's `children`.
	   */
	  labelPosition: _react.PropTypes.oneOf(['before', 'after']),
	  /**
	   * Override the inline-styles of the button's label element.
	   */
	  labelStyle: _react.PropTypes.object,
	  /** @ignore */
	  onMouseDown: _react.PropTypes.func,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /** @ignore */
	  onMouseUp: _react.PropTypes.func,
	  /** @ignore */
	  onTouchEnd: _react.PropTypes.func,
	  /** @ignore */
	  onTouchStart: _react.PropTypes.func,
	  /**
	   * Override the inline style of the button overlay.
	   */
	  overlayStyle: _react.PropTypes.object,
	  /**
	   * If true, the button will use the theme's primary color.
	   */
	  primary: _react.PropTypes.bool,
	  /**
	   * Override the inline style of the ripple element.
	   */
	  rippleStyle: _react.PropTypes.object,
	  /**
	   * If true, the button will use the theme's secondary color.
	   * If both `secondary` and `primary` are true, the button will use
	   * the theme's primary color.
	   */
	  secondary: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = RaisedButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var invariant = __webpack_require__(8);
	var defaultClickRejectionStrategy = __webpack_require__(426);

	var alreadyInjected = false;

	module.exports = function injectTapEventPlugin(strategyOverrides) {
	  strategyOverrides = strategyOverrides || {};
	  var shouldRejectClick = strategyOverrides.shouldRejectClick || defaultClickRejectionStrategy;

	  if (process.env.NODE_ENV !== 'production') {
	    invariant(!alreadyInjected, 'injectTapEventPlugin(): Can only be called once per application lifecycle.\n\n\
	It is recommended to call injectTapEventPlugin() just before you call \
	ReactDOM.render(). If you are using an external library which calls injectTapEventPlugin() \
	itself, please contact the maintainer as it shouldn\'t be called in library code and \
	should be injected by the application.');
	  }

	  alreadyInjected = true;

	  __webpack_require__(42).injection.injectEventPluginsByName({
	    'TapEventPlugin': __webpack_require__(427)(shouldRejectClick)
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 426 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (lastTouchEvent, clickTimestamp) {
	  if (lastTouchEvent && clickTimestamp - lastTouchEvent < 750) {
	    return true;
	  }
	};

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TapEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(355);
	var EventPluginUtils = __webpack_require__(44);
	var EventPropagators = __webpack_require__(41);
	var SyntheticUIEvent = __webpack_require__(75);
	var TouchEventUtils = __webpack_require__(428);
	var ViewportMetrics = __webpack_require__(76);

	var keyOf = __webpack_require__(429);
	var topLevelTypes = EventConstants.topLevelTypes;

	var isStartish = EventPluginUtils.isStartish;
	var isEndish = EventPluginUtils.isEndish;

	var isTouch = function isTouch(topLevelType) {
	  var touchTypes = ['topTouchCancel', 'topTouchEnd', 'topTouchStart', 'topTouchMove'];
	  return touchTypes.indexOf(topLevelType) >= 0;
	};

	/**
	 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
	 * in order to still be considered a 'tap' event.
	 */
	var tapMoveThreshold = 10;
	var ignoreMouseThreshold = 750;
	var startCoords = { x: null, y: null };
	var lastTouchEvent = null;

	var Axis = {
	  x: { page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft' },
	  y: { page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop' }
	};

	function getAxisCoordOfEvent(axis, nativeEvent) {
	  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
	  if (singleTouch) {
	    return singleTouch[axis.page];
	  }
	  return axis.page in nativeEvent ? nativeEvent[axis.page] : nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
	}

	function getDistance(coords, nativeEvent) {
	  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
	  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
	  return Math.pow(Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2), 0.5);
	}

	var touchEvents = ['topTouchStart', 'topTouchCancel', 'topTouchEnd', 'topTouchMove'];

	var dependencies = ['topMouseDown', 'topMouseMove', 'topMouseUp'].concat(touchEvents);

	var eventTypes = {
	  touchTap: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchTap: null }),
	      captured: keyOf({ onTouchTapCapture: null })
	    },
	    dependencies: dependencies
	  }
	};

	var now = function () {
	  if (Date.now) {
	    return Date.now;
	  } else {
	    // IE8 support: http://stackoverflow.com/questions/9430357/please-explain-why-and-how-new-date-works-as-workaround-for-date-now-in
	    return function () {
	      return +new Date();
	    };
	  }
	}();

	function createTapEventPlugin(shouldRejectClick) {
	  return {

	    tapMoveThreshold: tapMoveThreshold,

	    ignoreMouseThreshold: ignoreMouseThreshold,

	    eventTypes: eventTypes,

	    /**
	     * @param {string} topLevelType Record from `EventConstants`.
	     * @param {DOMEventTarget} targetInst The listening component root node.
	     * @param {object} nativeEvent Native browser event.
	     * @return {*} An accumulation of synthetic events.
	     * @see {EventPluginHub.extractEvents}
	     */
	    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {

	      if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
	        return null;
	      }

	      if (isTouch(topLevelType)) {
	        lastTouchEvent = now();
	      } else {
	        if (shouldRejectClick(lastTouchEvent, now())) {
	          return null;
	        }
	      }

	      var event = null;
	      var distance = getDistance(startCoords, nativeEvent);
	      if (isEndish(topLevelType) && distance < tapMoveThreshold) {
	        event = SyntheticUIEvent.getPooled(eventTypes.touchTap, targetInst, nativeEvent, nativeEventTarget);
	      }
	      if (isStartish(topLevelType)) {
	        startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
	        startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
	      } else if (isEndish(topLevelType)) {
	        startCoords.x = 0;
	        startCoords.y = 0;
	      }
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	      return event;
	    }

	  };
	}

	module.exports = createTapEventPlugin;

/***/ },
/* 428 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TouchEventUtils
	 */

	var TouchEventUtils = {
	  /**
	   * Utility function for common case of extracting out the primary touch from a
	   * touch event.
	   * - `touchEnd` events usually do not have the `touches` property.
	   *   http://stackoverflow.com/questions/3666929/
	   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
	   *
	   * @param {Event} nativeEvent Native event that may or may not be a touch.
	   * @return {TouchesObject?} an object with pageX and pageY or null.
	   */
	  extractSingleTouch: function extractSingleTouch(nativeEvent) {
	    var touches = nativeEvent.touches;
	    var changedTouches = nativeEvent.changedTouches;
	    var hasTouches = touches && touches.length > 0;
	    var hasChangedTouches = changedTouches && changedTouches.length > 0;

	    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
	  }
	};

	module.exports = TouchEventUtils;

/***/ },
/* 429 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */

	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var FileFolder = function FileFolder(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z' }));
	};
	FileFolder = (0, _pure2.default)(FileFolder);
	FileFolder.displayName = 'FileFolder';
	FileFolder.muiName = 'SvgIcon';

	exports.default = FileFolder;

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _RaisedButton = __webpack_require__(423);

	var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DrawerOpenRight = function (_React$Component) {
	  _inherits(DrawerOpenRight, _React$Component);

	  function DrawerOpenRight(props) {
	    _classCallCheck(this, DrawerOpenRight);

	    var _this = _possibleConstructorReturn(this, (DrawerOpenRight.__proto__ || Object.getPrototypeOf(DrawerOpenRight)).call(this, props));

	    _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    };

	    _this.state = { open: false };
	    return _this;
	  }

	  _createClass(DrawerOpenRight, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_RaisedButton2.default, {
	          label: 'Toggle Drawer',
	          onTouchTap: this.handleToggle
	        }),
	        _react2.default.createElement(
	          _Drawer2.default,
	          { width: 200, openSecondary: true, open: this.state.open },
	          _react2.default.createElement(_AppBar2.default, { title: 'AppBar' })
	        )
	      );
	    }
	  }]);

	  return DrawerOpenRight;
	}(_react2.default.Component);

	exports.default = DrawerOpenRight;

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _AppBarExample = __webpack_require__(433);

	var _AppBarExample2 = _interopRequireDefault(_AppBarExample);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Title = function Title() {
	  return _react2.default.createElement(
	    _MuiThemeProvider2.default,
	    { muiTheme: (0, _getMuiTheme2.default)() },
	    _react2.default.createElement(_AppBarExample2.default, null)
	  );
	};

	exports.default = Title;

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _IconMenu = __webpack_require__(434);

	var _IconMenu2 = _interopRequireDefault(_IconMenu);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _Toggle = __webpack_require__(436);

	var _Toggle2 = _interopRequireDefault(_Toggle);

	var _moreVert = __webpack_require__(439);

	var _moreVert2 = _interopRequireDefault(_moreVert);

	var _close = __webpack_require__(440);

	var _close2 = _interopRequireDefault(_close);

	var _City = __webpack_require__(441);

	var _City2 = _interopRequireDefault(_City);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _Settings = __webpack_require__(442);

	var _Settings2 = _interopRequireDefault(_Settings);

	var _Card = __webpack_require__(381);

	var _reactRouter = __webpack_require__(443);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function handleTouchTap() {
	  var date = new Date();
	  var year = date.getFullYear();
	  var month = date.getMonth() + 1;
	  var day = date.getDate();
	  var hour = date.getHours();
	  var minute = date.getMinutes();
	  var second = date.getSeconds();
	  alert(year + '年' + month + '月' + day + '日 ' + hour + ':' + minute + ':' + second);
	}

	var App = _react2.default.createClass({
	  displayName: 'App',
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      null,
	      _react2.default.createElement(
	        'h1',
	        null,
	        'Simple SPA'
	      ),
	      _react2.default.createElement(
	        'ul',
	        { className: 'header' },
	        _react2.default.createElement(
	          'li',
	          null,
	          'Home'
	        ),
	        _react2.default.createElement(
	          'li',
	          null,
	          'Stuff'
	        ),
	        _react2.default.createElement(
	          'li',
	          null,
	          'Contact'
	        )
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'content' },
	        this.props.children
	      )
	    );
	  }
	});

	var Logged = function Logged(props) {
	  return _react2.default.createElement(
	    _IconMenu2.default,
	    _extends({}, props, {
	      iconButtonElement: _react2.default.createElement(
	        _IconButton2.default,
	        null,
	        ' ',
	        _react2.default.createElement(_moreVert2.default, null),
	        ' '
	      ),
	      targetOrigin: { horizontal: 'right', vertical: 'top' },
	      anchorOrigin: { horizontal: 'right', vertical: 'top' }
	    }),
	    _react2.default.createElement(
	      'a',
	      { href: 'examples/a.html' },
	      ' ',
	      _react2.default.createElement(_MenuItem2.default, { primaryText: 'Setting' })
	    ),
	    _react2.default.createElement(
	      'a',
	      { href: 'examples/b.html' },
	      ' ',
	      _react2.default.createElement(_MenuItem2.default, { primaryText: 'Feedback' }),
	      ' '
	    )
	  );
	};

	Logged.muiName = 'IconMenu';

	var AppBarExample = function (_Component) {
	  _inherits(AppBarExample, _Component);

	  function AppBarExample() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, AppBarExample);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AppBarExample.__proto__ || Object.getPrototypeOf(AppBarExample)).call.apply(_ref, [this].concat(args))), _this), _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    }, _this.handleClose = function () {
	      return _this.setState({ open: false });
	    }, _this.state = {
	      logged: true
	    }, _this.handleChange = function (event, logged) {
	      _this.setState({ logged: logged });
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(AppBarExample, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _AppBar2.default,
	          {
	            title: 'City',
	            iconElementRight: this.state.logged ? _react2.default.createElement(Logged, null) : _react2.default.createElement(Login, null),
	            onLeftIconButtonTouchTap: this.handleToggle,
	            onRightIconButtonTouchTap: this.handleTouchTap,
	            zDepth: 2
	          },
	          _react2.default.createElement(
	            _Drawer2.default,
	            {
	              docked: false,
	              width: 300,
	              open: this.state.open,
	              onRequestChange: function onRequestChange(open) {
	                return _this2.setState({ open: open });
	              },
	              zDepth: 3

	            },
	            _react2.default.createElement(
	              _Card.Card,
	              { style: { marginTop: 30, margin: 20 }, zDepth: 2,
	                onTouchTap: this.handleClose
	              },
	              _react2.default.createElement(_Card.CardTitle, { title: 'BeiJing' }),
	              _react2.default.createElement(
	                _Card.CardText,
	                null,
	                'gfgfg'
	              )
	            ),
	            _react2.default.createElement(
	              _Card.Card,
	              { style: { margin: 20 }, zDepth: 2,
	                onTouchTap: this.handleClose },
	              _react2.default.createElement(_Card.CardTitle, { title: 'ShangHai' }),
	              _react2.default.createElement(
	                _Card.CardText,
	                null,
	                'gfgfg'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return AppBarExample;
	}(_react.Component);

	exports.default = AppBarExample;

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.MenuItem = exports.IconMenu = undefined;

	var _IconMenu2 = __webpack_require__(435);

	var _IconMenu3 = _interopRequireDefault(_IconMenu2);

	var _MenuItem2 = __webpack_require__(406);

	var _MenuItem3 = _interopRequireDefault(_MenuItem2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.IconMenu = _IconMenu3.default;
	exports.MenuItem = _MenuItem3.default;
	exports.default = _IconMenu3.default;

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _events = __webpack_require__(344);

	var _events2 = _interopRequireDefault(_events);

	var _propTypes = __webpack_require__(339);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Menu = __webpack_require__(420);

	var _Menu2 = _interopRequireDefault(_Menu);

	var _Popover = __webpack_require__(407);

	var _Popover2 = _interopRequireDefault(_Popover);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var IconMenu = function (_Component) {
	  (0, _inherits3.default)(IconMenu, _Component);

	  function IconMenu() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, IconMenu);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconMenu.__proto__ || (0, _getPrototypeOf2.default)(IconMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      menuInitiallyKeyboardFocused: false,
	      open: false
	    }, _this.handleItemTouchTap = function (event, child) {
	      if (_this.props.touchTapCloseDelay !== 0 && !child.props.hasOwnProperty('menuItems')) {
	        (function () {
	          var isKeyboard = _events2.default.isKeyboard(event);
	          _this.timerCloseId = setTimeout(function () {
	            _this.close(isKeyboard ? 'enter' : 'itemTap', isKeyboard);
	          }, _this.props.touchTapCloseDelay);
	        })();
	      }

	      _this.props.onItemTouchTap(event, child);
	    }, _this.handleRequestClose = function (reason) {
	      _this.close(reason);
	    }, _this.handleEscKeyDownMenu = function (event) {
	      _this.close('escape', event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(IconMenu, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.open != null) {
	        this.setState({
	          open: nextProps.open,
	          anchorEl: this.refs.iconMenuContainer
	        });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.timerCloseId);
	    }
	  }, {
	    key: 'isOpen',
	    value: function isOpen() {
	      return this.state.open;
	    }
	  }, {
	    key: 'close',
	    value: function close(reason, isKeyboard) {
	      var _this2 = this;

	      if (!this.state.open) {
	        return;
	      }

	      if (this.props.open !== null) {
	        this.props.onRequestChange(false, reason);
	      } else {
	        this.setState({ open: false }, function () {
	          // Set focus on the icon button when the menu close
	          if (isKeyboard) {
	            var iconButton = _this2.refs.iconButton;
	            _reactDom2.default.findDOMNode(iconButton).focus();
	            iconButton.setKeyboardFocus();
	          }
	        });
	      }
	    }
	  }, {
	    key: 'open',
	    value: function open(reason, event) {
	      if (this.props.open !== null) {
	        this.props.onRequestChange(true, reason);

	        return this.setState({
	          menuInitiallyKeyboardFocused: _events2.default.isKeyboard(event),
	          anchorEl: event.currentTarget
	        });
	      }

	      this.setState({
	        open: true,
	        menuInitiallyKeyboardFocused: _events2.default.isKeyboard(event),
	        anchorEl: event.currentTarget
	      });

	      event.preventDefault();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      var _props = this.props,
	          anchorOrigin = _props.anchorOrigin,
	          className = _props.className,
	          animated = _props.animated,
	          animation = _props.animation,
	          iconButtonElement = _props.iconButtonElement,
	          iconStyle = _props.iconStyle,
	          onItemTouchTap = _props.onItemTouchTap,
	          onKeyboardFocus = _props.onKeyboardFocus,
	          onMouseDown = _props.onMouseDown,
	          onMouseLeave = _props.onMouseLeave,
	          onMouseEnter = _props.onMouseEnter,
	          onMouseUp = _props.onMouseUp,
	          onRequestChange = _props.onRequestChange,
	          onTouchTap = _props.onTouchTap,
	          listStyle = _props.listStyle,
	          menuStyle = _props.menuStyle,
	          style = _props.style,
	          targetOrigin = _props.targetOrigin,
	          touchTapCloseDelay = _props.touchTapCloseDelay,
	          useLayerForClickAway = _props.useLayerForClickAway,
	          other = (0, _objectWithoutProperties3.default)(_props, ['anchorOrigin', 'className', 'animated', 'animation', 'iconButtonElement', 'iconStyle', 'onItemTouchTap', 'onKeyboardFocus', 'onMouseDown', 'onMouseLeave', 'onMouseEnter', 'onMouseUp', 'onRequestChange', 'onTouchTap', 'listStyle', 'menuStyle', 'style', 'targetOrigin', 'touchTapCloseDelay', 'useLayerForClickAway']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;
	      var _state = this.state,
	          open = _state.open,
	          anchorEl = _state.anchorEl;

	      var styles = {
	        root: {
	          display: 'inline-block',
	          position: 'relative'
	        },
	        menu: {
	          position: 'relative'
	        }
	      };

	      var mergedRootStyles = (0, _simpleAssign2.default)(styles.root, style);
	      var mergedMenuStyles = (0, _simpleAssign2.default)(styles.menu, menuStyle);

	      process.env.NODE_ENV !== "production" ? (0, _warning2.default)(iconButtonElement.type.muiName !== 'SvgIcon', 'Material-UI: You shoud not provide an <SvgIcon /> to the \'iconButtonElement\' property of <IconMenu />.\nYou should wrapped it with an <IconButton />.') : void 0;

	      var iconButton = _react2.default.cloneElement(iconButtonElement, {
	        onKeyboardFocus: onKeyboardFocus,
	        iconStyle: iconStyle ? (0, _simpleAssign2.default)({}, iconStyle, iconButtonElement.props.iconStyle) : iconButtonElement.props.iconStyle,
	        onTouchTap: function onTouchTap(event) {
	          _this3.open(_events2.default.isKeyboard(event) ? 'keyboard' : 'iconTap', event);
	          if (iconButtonElement.props.onTouchTap) {
	            iconButtonElement.props.onTouchTap(event);
	          }
	        },
	        ref: 'iconButton'
	      });

	      var menu = _react2.default.createElement(_Menu2.default, (0, _extends3.default)({}, other, {
	        initiallyKeyboardFocused: this.state.menuInitiallyKeyboardFocused,
	        onEscKeyDown: this.handleEscKeyDownMenu,
	        onItemTouchTap: this.handleItemTouchTap,
	        style: mergedMenuStyles,
	        listStyle: listStyle
	      }), this.props.children);

	      return _react2.default.createElement('div', {
	        ref: 'iconMenuContainer',
	        className: className,
	        onMouseDown: onMouseDown,
	        onMouseLeave: onMouseLeave,
	        onMouseEnter: onMouseEnter,
	        onMouseUp: onMouseUp,
	        onTouchTap: onTouchTap,
	        style: prepareStyles(mergedRootStyles)
	      }, iconButton, _react2.default.createElement(_Popover2.default, {
	        anchorOrigin: anchorOrigin,
	        targetOrigin: targetOrigin,
	        open: open,
	        anchorEl: anchorEl,
	        childContextTypes: this.constructor.childContextTypes,
	        useLayerForClickAway: useLayerForClickAway,
	        onRequestClose: this.handleRequestClose,
	        animated: animated,
	        animation: animation,
	        context: this.context
	      }, menu));
	    }
	  }]);
	  return IconMenu;
	}(_react.Component);

	IconMenu.muiName = 'IconMenu';
	IconMenu.defaultProps = {
	  anchorOrigin: {
	    vertical: 'top',
	    horizontal: 'left'
	  },
	  animated: true,
	  multiple: false,
	  open: null,
	  onItemTouchTap: function onItemTouchTap() {},
	  onKeyboardFocus: function onKeyboardFocus() {},
	  onMouseDown: function onMouseDown() {},
	  onMouseLeave: function onMouseLeave() {},
	  onMouseEnter: function onMouseEnter() {},
	  onMouseUp: function onMouseUp() {},
	  onRequestChange: function onRequestChange() {},
	  onTouchTap: function onTouchTap() {},
	  targetOrigin: {
	    vertical: 'top',
	    horizontal: 'left'
	  },
	  touchTapCloseDelay: 200,
	  useLayerForClickAway: false
	};
	IconMenu.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? IconMenu.propTypes = {
	  /**
	   * This is the point on the icon where the menu
	   * `targetOrigin` will attach.
	   * Options:
	   * vertical: [top, center, bottom]
	   * horizontal: [left, middle, right].
	   */
	  anchorOrigin: _propTypes2.default.origin,
	  /**
	   * If true, the popover will apply transitions when
	   * it gets added to the DOM.
	   */
	  animated: _react.PropTypes.bool,
	  /**
	   * Override the default animation component used.
	   */
	  animation: _react.PropTypes.func,
	  /**
	   * Should be used to pass `MenuItem` components.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The CSS class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * This is the `IconButton` to render. This button will open the menu.
	   */
	  iconButtonElement: _react.PropTypes.element.isRequired,
	  /**
	   * Override the inline-styles of the underlying icon element.
	   */
	  iconStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the underlying `List` element.
	   */
	  listStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the menu element.
	   */
	  menuStyle: _react.PropTypes.object,
	  /**
	   * If true, the value can an be array and allow the menu to be a multi-select.
	   */
	  multiple: _react.PropTypes.bool,
	  /**
	   * Callback function fired when a menu item is selected with a touch-tap.
	   *
	   * @param {object} event TouchTap event targeting the selected menu item element.
	   * @param {object} child The selected element.
	   */
	  onItemTouchTap: _react.PropTypes.func,
	  /**
	   * Callback function fired when the `IconButton` element is focused or blurred by the keyboard.
	   *
	   * @param {object} event `focus` or `blur` event targeting the `IconButton` element.
	   * @param {boolean} keyboardFocused If true, the `IconButton` element is focused.
	   */
	  onKeyboardFocus: _react.PropTypes.func,
	  /** @ignore */
	  onMouseDown: _react.PropTypes.func,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /** @ignore */
	  onMouseUp: _react.PropTypes.func,
	  /**
	   * Callback function fired when the `open` state of the menu is requested to be changed.
	   *
	   * @param {boolean} open If true, the menu was requested to be opened.
	   * @param {string} reason The reason for the open or close request. Possible values are
	   * 'keyboard' and 'iconTap' for open requests; 'enter', 'escape', 'itemTap', and 'clickAway'
	   * for close requests.
	   */
	  onRequestChange: _react.PropTypes.func,
	  /**
	   * Callback function fired when the `IconButton` element is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the `IconButton` element.
	   */
	  onTouchTap: _react.PropTypes.func,
	  /**
	   * If true, the `IconMenu` is opened.
	   */
	  open: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * This is the point on the menu which will stick to the menu
	   * origin.
	   * Options:
	   * vertical: [top, center, bottom]
	   * horizontal: [left, middle, right].
	   */
	  targetOrigin: _propTypes2.default.origin,
	  /**
	   * Sets the delay in milliseconds before closing the
	   * menu when an item is clicked.
	   * If set to 0 then the auto close functionality
	   * will be disabled.
	   */
	  touchTapCloseDelay: _react.PropTypes.number,
	  /**
	   * If true, the popover will render on top of an invisible
	   * layer, which will prevent clicks to the underlying elements.
	   */
	  useLayerForClickAway: _react.PropTypes.bool
	} : void 0;
	exports.default = IconMenu;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Toggle = __webpack_require__(437);

	var _Toggle2 = _interopRequireDefault(_Toggle);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Toggle2.default;

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _EnhancedSwitch = __webpack_require__(438);

	var _EnhancedSwitch2 = _interopRequireDefault(_EnhancedSwitch);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context, state) {
	  var disabled = props.disabled,
	      elementStyle = props.elementStyle,
	      trackSwitchedStyle = props.trackSwitchedStyle,
	      thumbSwitchedStyle = props.thumbSwitchedStyle,
	      trackStyle = props.trackStyle,
	      thumbStyle = props.thumbStyle,
	      iconStyle = props.iconStyle,
	      rippleStyle = props.rippleStyle,
	      labelStyle = props.labelStyle;
	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      toggle = _context$muiTheme.toggle;

	  var toggleSize = 20;
	  var toggleTrackWidth = 36;
	  var styles = {
	    icon: {
	      width: 36,
	      padding: '4px 0px 6px 2px'
	    },
	    ripple: {
	      top: -10,
	      left: -10,
	      color: state.switched ? toggle.thumbOnColor : baseTheme.palette.textColor
	    },
	    toggleElement: {
	      width: toggleTrackWidth
	    },
	    track: {
	      transition: _transitions2.default.easeOut(),
	      width: '100%',
	      height: 14,
	      borderRadius: 30,
	      backgroundColor: toggle.trackOffColor
	    },
	    thumb: {
	      transition: _transitions2.default.easeOut(),
	      position: 'absolute',
	      top: 1,
	      left: 0,
	      width: toggleSize,
	      height: toggleSize,
	      lineHeight: '24px',
	      borderRadius: '50%',
	      backgroundColor: toggle.thumbOffColor
	    },
	    trackWhenSwitched: {
	      backgroundColor: toggle.trackOnColor
	    },
	    thumbWhenSwitched: {
	      backgroundColor: toggle.thumbOnColor,
	      left: '100%'
	    },
	    trackWhenDisabled: {
	      backgroundColor: toggle.trackDisabledColor
	    },
	    thumbWhenDisabled: {
	      backgroundColor: toggle.thumbDisabledColor
	    },
	    label: {
	      color: disabled ? toggle.labelDisabledColor : toggle.labelColor,
	      width: 'calc(100% - ' + (toggleTrackWidth + 10) + 'px)'
	    }
	  };

	  (0, _simpleAssign2.default)(styles.track, trackStyle, state.switched && styles.trackWhenSwitched, state.switched && trackSwitchedStyle, disabled && styles.trackWhenDisabled);

	  (0, _simpleAssign2.default)(styles.thumb, thumbStyle, state.switched && styles.thumbWhenSwitched, state.switched && thumbSwitchedStyle, disabled && styles.thumbWhenDisabled);

	  if (state.switched) {
	    styles.thumb.marginLeft = 0 - styles.thumb.width;
	  }

	  (0, _simpleAssign2.default)(styles.icon, iconStyle);

	  (0, _simpleAssign2.default)(styles.ripple, rippleStyle);

	  (0, _simpleAssign2.default)(styles.label, labelStyle);

	  (0, _simpleAssign2.default)(styles.toggleElement, elementStyle);

	  return styles;
	}

	var Toggle = function (_Component) {
	  (0, _inherits3.default)(Toggle, _Component);

	  function Toggle() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Toggle);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Toggle.__proto__ || (0, _getPrototypeOf2.default)(Toggle)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      switched: false
	    }, _this.handleStateChange = function (newSwitched) {
	      _this.setState({
	        switched: newSwitched
	      });
	    }, _this.handleToggle = function (event, isInputChecked) {
	      if (_this.props.onToggle) {
	        _this.props.onToggle(event, isInputChecked);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Toggle, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          toggled = _props.toggled,
	          defaultToggled = _props.defaultToggled,
	          valueLink = _props.valueLink;

	      if (toggled || defaultToggled || valueLink && valueLink.value) {
	        this.setState({
	          switched: true
	        });
	      }
	    }
	  }, {
	    key: 'isToggled',
	    value: function isToggled() {
	      return this.refs.enhancedSwitch.isSwitched();
	    }
	  }, {
	    key: 'setToggled',
	    value: function setToggled(newToggledValue) {
	      this.refs.enhancedSwitch.setSwitched(newToggledValue);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          defaultToggled = _props2.defaultToggled,
	          elementStyle = _props2.elementStyle,
	          onToggle = _props2.onToggle,
	          trackSwitchedStyle = _props2.trackSwitchedStyle,
	          thumbSwitchedStyle = _props2.thumbSwitchedStyle,
	          toggled = _props2.toggled,
	          other = (0, _objectWithoutProperties3.default)(_props2, ['defaultToggled', 'elementStyle', 'onToggle', 'trackSwitchedStyle', 'thumbSwitchedStyle', 'toggled']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      var toggleElement = _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)({}, styles.toggleElement)) }, _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)({}, styles.track)) }), _react2.default.createElement(_Paper2.default, { style: styles.thumb, circle: true, zDepth: 1 }));

	      var enhancedSwitchProps = {
	        ref: 'enhancedSwitch',
	        inputType: 'checkbox',
	        switchElement: toggleElement,
	        rippleStyle: styles.ripple,
	        rippleColor: styles.ripple.color,
	        iconStyle: styles.icon,
	        trackStyle: styles.track,
	        thumbStyle: styles.thumb,
	        labelStyle: styles.label,
	        switched: this.state.switched,
	        onSwitch: this.handleToggle,
	        onParentShouldUpdate: this.handleStateChange,
	        labelPosition: this.props.labelPosition
	      };

	      if (this.props.hasOwnProperty('toggled')) {
	        enhancedSwitchProps.checked = toggled;
	      } else if (this.props.hasOwnProperty('defaultToggled')) {
	        enhancedSwitchProps.defaultChecked = defaultToggled;
	      }

	      return _react2.default.createElement(_EnhancedSwitch2.default, (0, _extends3.default)({}, other, enhancedSwitchProps));
	    }
	  }]);
	  return Toggle;
	}(_react.Component);

	Toggle.defaultProps = {
	  defaultToggled: false,
	  disabled: false,
	  labelPosition: 'left'
	};
	Toggle.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Toggle.propTypes = {
	  /**
	   * Determines whether the Toggle is initially turned on.
	   * **Warning:** This cannot be used in conjunction with `toggled`.
	   * Decide between using a controlled or uncontrolled input element and remove one of these props.
	   * More info: https://fb.me/react-controlled-components
	   */
	  defaultToggled: _react.PropTypes.bool,
	  /**
	   * Will disable the toggle if true.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * Overrides the inline-styles of the Toggle element.
	   */
	  elementStyle: _react.PropTypes.object,
	  /**
	   * Overrides the inline-styles of the Icon element.
	   */
	  iconStyle: _react.PropTypes.object,
	  /**
	   * Overrides the inline-styles of the input element.
	   */
	  inputStyle: _react.PropTypes.object,
	  /**
	   * Label for toggle.
	   */
	  label: _react.PropTypes.node,
	  /**
	   * Where the label will be placed next to the toggle.
	   */
	  labelPosition: _react.PropTypes.oneOf(['left', 'right']),
	  /**
	   * Overrides the inline-styles of the Toggle element label.
	   */
	  labelStyle: _react.PropTypes.object,
	  /**
	   * Callback function that is fired when the toggle switch is toggled.
	   */
	  onToggle: _react.PropTypes.func,
	  /**
	   * Override style of ripple.
	   */
	  rippleStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * Override style for thumb.
	   */
	  thumbStyle: _react.PropTypes.object,
	  /**
	  * Override the inline styles for thumb when the toggle switch is toggled on.
	  */
	  thumbSwitchedStyle: _react.PropTypes.object,
	  /**
	   * Toggled if set to true.
	   */
	  toggled: _react.PropTypes.bool,
	  /**
	   * Override style for track.
	   */
	  trackStyle: _react.PropTypes.object,
	  /**
	  * Override the inline styles for track when the toggle switch is toggled on.
	  */
	  trackSwitchedStyle: _react.PropTypes.object,
	  /**
	   * ValueLink prop for when using controlled toggle.
	   */
	  valueLink: _react.PropTypes.object
	} : void 0;
	exports.default = Toggle;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactEventListener = __webpack_require__(398);

	var _reactEventListener2 = _interopRequireDefault(_reactEventListener);

	var _keycode = __webpack_require__(345);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _FocusRipple = __webpack_require__(346);

	var _FocusRipple2 = _interopRequireDefault(_FocusRipple);

	var _TouchRipple = __webpack_require__(360);

	var _TouchRipple2 = _interopRequireDefault(_TouchRipple);

	var _Paper = __webpack_require__(379);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var baseTheme = context.muiTheme.baseTheme;

	  return {
	    root: {
	      cursor: props.disabled ? 'not-allowed' : 'pointer',
	      position: 'relative',
	      overflow: 'visible',
	      display: 'table',
	      height: 'auto',
	      width: '100%'
	    },
	    input: {
	      position: 'absolute',
	      cursor: 'inherit',
	      pointerEvents: 'all',
	      opacity: 0,
	      width: '100%',
	      height: '100%',
	      zIndex: 2,
	      left: 0,
	      boxSizing: 'border-box',
	      padding: 0,
	      margin: 0
	    },
	    controls: {
	      display: 'flex',
	      width: '100%',
	      height: '100%'
	    },
	    label: {
	      float: 'left',
	      position: 'relative',
	      display: 'block',
	      width: 'calc(100% - 60px)',
	      lineHeight: '24px',
	      color: baseTheme.palette.textColor,
	      fontFamily: baseTheme.fontFamily
	    },
	    wrap: {
	      transition: _transitions2.default.easeOut(),
	      float: 'left',
	      position: 'relative',
	      display: 'block',
	      flexShrink: 0,
	      width: 60 - baseTheme.spacing.desktopGutterLess,
	      marginRight: props.labelPosition === 'right' ? baseTheme.spacing.desktopGutterLess : 0,
	      marginLeft: props.labelPosition === 'left' ? baseTheme.spacing.desktopGutterLess : 0
	    },
	    ripple: {
	      color: props.rippleColor || baseTheme.palette.primary1Color,
	      height: '200%',
	      width: '200%',
	      top: -12,
	      left: -12
	    }
	  };
	}

	var EnhancedSwitch = function (_Component) {
	  (0, _inherits3.default)(EnhancedSwitch, _Component);

	  function EnhancedSwitch() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, EnhancedSwitch);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = EnhancedSwitch.__proto__ || (0, _getPrototypeOf2.default)(EnhancedSwitch)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isKeyboardFocused: false
	    }, _this.handleChange = function (event) {
	      _this.tabPressed = false;
	      _this.setState({
	        isKeyboardFocused: false
	      });

	      var isInputChecked = _this.refs.checkbox.checked;

	      if (!_this.props.hasOwnProperty('checked') && _this.props.onParentShouldUpdate) {
	        _this.props.onParentShouldUpdate(isInputChecked);
	      }

	      if (_this.props.onSwitch) {
	        _this.props.onSwitch(event, isInputChecked);
	      }
	    }, _this.handleKeyDown = function (event) {
	      var code = (0, _keycode2.default)(event);

	      if (code === 'tab') {
	        _this.tabPressed = true;
	      }
	      if (_this.state.isKeyboardFocused && code === 'space') {
	        _this.handleChange(event);
	      }
	    }, _this.handleKeyUp = function (event) {
	      if (_this.state.isKeyboardFocused && (0, _keycode2.default)(event) === 'space') {
	        _this.handleChange(event);
	      }
	    }, _this.handleMouseDown = function (event) {
	      // only listen to left clicks
	      if (event.button === 0) {
	        _this.refs.touchRipple.start(event);
	      }
	    }, _this.handleMouseUp = function () {
	      _this.refs.touchRipple.end();
	    }, _this.handleMouseLeave = function () {
	      _this.refs.touchRipple.end();
	    }, _this.handleTouchStart = function (event) {
	      _this.refs.touchRipple.start(event);
	    }, _this.handleTouchEnd = function () {
	      _this.refs.touchRipple.end();
	    }, _this.handleBlur = function (event) {
	      _this.setState({
	        isKeyboardFocused: false
	      });

	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    }, _this.handleFocus = function (event) {
	      // setTimeout is needed becuase the focus event fires first
	      // Wait so that we can capture if this was a keyboard focus
	      // or touch focus
	      setTimeout(function () {
	        if (_this.tabPressed) {
	          _this.setState({
	            isKeyboardFocused: true
	          });
	        }
	      }, 150);

	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(EnhancedSwitch, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var inputNode = this.refs.checkbox;
	      if ((!this.props.switched || inputNode.checked !== this.props.switched) && this.props.onParentShouldUpdate) {
	        this.props.onParentShouldUpdate(inputNode.checked);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var hasCheckedProp = nextProps.hasOwnProperty('checked');
	      var hasToggledProp = nextProps.hasOwnProperty('toggled');
	      var hasNewDefaultProp = nextProps.hasOwnProperty('defaultChecked') && nextProps.defaultChecked !== this.props.defaultChecked;

	      if (hasCheckedProp || hasToggledProp || hasNewDefaultProp) {
	        var switched = nextProps.checked || nextProps.toggled || nextProps.defaultChecked || false;

	        this.setState({
	          switched: switched
	        });

	        if (this.props.onParentShouldUpdate && switched !== this.props.switched) {
	          this.props.onParentShouldUpdate(switched);
	        }
	      }
	    }
	  }, {
	    key: 'isSwitched',
	    value: function isSwitched() {
	      return this.refs.checkbox.checked;
	    }

	    // no callback here because there is no event

	  }, {
	    key: 'setSwitched',
	    value: function setSwitched(newSwitchedValue) {
	      if (!this.props.hasOwnProperty('checked') || this.props.checked === false) {
	        if (this.props.onParentShouldUpdate) {
	          this.props.onParentShouldUpdate(newSwitchedValue);
	        }
	        this.refs.checkbox.checked = newSwitchedValue;
	      } else {
	        process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: Cannot call set method while checked is defined as a property.') : void 0;
	      }
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      return this.refs.checkbox.value;
	    }

	    // Checkbox inputs only use SPACE to change their state. Using ENTER will
	    // update the ui but not the input.


	    /**
	     * Because both the ripples and the checkbox input cannot share pointer
	     * events, the checkbox input takes control of pointer events and calls
	     * ripple animations manually.
	     */

	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          name = _props.name,
	          value = _props.value,
	          iconStyle = _props.iconStyle,
	          inputStyle = _props.inputStyle,
	          inputType = _props.inputType,
	          label = _props.label,
	          labelStyle = _props.labelStyle,
	          labelPosition = _props.labelPosition,
	          onSwitch = _props.onSwitch,
	          onBlur = _props.onBlur,
	          onFocus = _props.onFocus,
	          onMouseUp = _props.onMouseUp,
	          onMouseDown = _props.onMouseDown,
	          onMouseLeave = _props.onMouseLeave,
	          onTouchStart = _props.onTouchStart,
	          onTouchEnd = _props.onTouchEnd,
	          onParentShouldUpdate = _props.onParentShouldUpdate,
	          disabled = _props.disabled,
	          disableTouchRipple = _props.disableTouchRipple,
	          disableFocusRipple = _props.disableFocusRipple,
	          className = _props.className,
	          rippleColor = _props.rippleColor,
	          rippleStyle = _props.rippleStyle,
	          style = _props.style,
	          switched = _props.switched,
	          switchElement = _props.switchElement,
	          thumbStyle = _props.thumbStyle,
	          trackStyle = _props.trackStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['name', 'value', 'iconStyle', 'inputStyle', 'inputType', 'label', 'labelStyle', 'labelPosition', 'onSwitch', 'onBlur', 'onFocus', 'onMouseUp', 'onMouseDown', 'onMouseLeave', 'onTouchStart', 'onTouchEnd', 'onParentShouldUpdate', 'disabled', 'disableTouchRipple', 'disableFocusRipple', 'className', 'rippleColor', 'rippleStyle', 'style', 'switched', 'switchElement', 'thumbStyle', 'trackStyle']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var wrapStyles = (0, _simpleAssign2.default)(styles.wrap, iconStyle);
	      var mergedRippleStyle = (0, _simpleAssign2.default)(styles.ripple, rippleStyle);

	      if (thumbStyle) {
	        wrapStyles.marginLeft /= 2;
	        wrapStyles.marginRight /= 2;
	      }

	      var labelElement = label && _react2.default.createElement('label', { style: prepareStyles((0, _simpleAssign2.default)(styles.label, labelStyle)) }, label);

	      var showTouchRipple = !disabled && !disableTouchRipple;
	      var showFocusRipple = !disabled && !disableFocusRipple;

	      var touchRipple = _react2.default.createElement(_TouchRipple2.default, {
	        ref: 'touchRipple',
	        key: 'touchRipple',
	        style: mergedRippleStyle,
	        color: mergedRippleStyle.color,
	        muiTheme: this.context.muiTheme,
	        centerRipple: true
	      });

	      var focusRipple = _react2.default.createElement(_FocusRipple2.default, {
	        key: 'focusRipple',
	        innerStyle: mergedRippleStyle,
	        color: mergedRippleStyle.color,
	        muiTheme: this.context.muiTheme,
	        show: this.state.isKeyboardFocused
	      });

	      var ripples = [showTouchRipple ? touchRipple : null, showFocusRipple ? focusRipple : null];

	      var inputElement = _react2.default.createElement('input', (0, _extends3.default)({}, other, {
	        ref: 'checkbox',
	        type: inputType,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.input, inputStyle)),
	        name: name,
	        value: value,
	        disabled: disabled,
	        onBlur: this.handleBlur,
	        onFocus: this.handleFocus,
	        onChange: this.handleChange,
	        onMouseUp: showTouchRipple && this.handleMouseUp,
	        onMouseDown: showTouchRipple && this.handleMouseDown,
	        onMouseLeave: showTouchRipple && this.handleMouseLeave,
	        onTouchStart: showTouchRipple && this.handleTouchStart,
	        onTouchEnd: showTouchRipple && this.handleTouchEnd
	      }));

	      // If toggle component (indicated by whether the style includes thumb) manually lay out
	      // elements in order to nest ripple elements
	      var switchOrThumbElement = !thumbStyle ? _react2.default.createElement('div', { style: prepareStyles(wrapStyles) }, switchElement, ripples) : _react2.default.createElement('div', { style: prepareStyles(wrapStyles) }, _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)({}, trackStyle)) }), _react2.default.createElement(_Paper2.default, { style: thumbStyle, zDepth: 1, circle: true }, ' ', ripples, ' '));

	      var elementsInOrder = labelPosition === 'right' ? _react2.default.createElement('div', { style: styles.controls }, switchOrThumbElement, labelElement) : _react2.default.createElement('div', { style: styles.controls }, labelElement, switchOrThumbElement);

	      return _react2.default.createElement('div', { ref: 'root', className: className, style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }, _react2.default.createElement(_reactEventListener2.default, {
	        target: 'window',
	        onKeyDown: this.handleKeyDown,
	        onKeyUp: this.handleKeyUp
	      }), inputElement, elementsInOrder);
	    }
	  }]);
	  return EnhancedSwitch;
	}(_react.Component);

	EnhancedSwitch.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? EnhancedSwitch.propTypes = {
	  checked: _react.PropTypes.bool,
	  className: _react.PropTypes.string,
	  defaultChecked: _react.PropTypes.bool,
	  disableFocusRipple: _react.PropTypes.bool,
	  disableTouchRipple: _react.PropTypes.bool,
	  disabled: _react.PropTypes.bool,
	  iconStyle: _react.PropTypes.object,
	  inputStyle: _react.PropTypes.object,
	  inputType: _react.PropTypes.string.isRequired,
	  label: _react.PropTypes.node,
	  labelPosition: _react.PropTypes.oneOf(['left', 'right']),
	  labelStyle: _react.PropTypes.object,
	  name: _react.PropTypes.string,
	  onBlur: _react.PropTypes.func,
	  onFocus: _react.PropTypes.func,
	  onMouseDown: _react.PropTypes.func,
	  onMouseLeave: _react.PropTypes.func,
	  onMouseUp: _react.PropTypes.func,
	  onParentShouldUpdate: _react.PropTypes.func,
	  onSwitch: _react.PropTypes.func,
	  onTouchEnd: _react.PropTypes.func,
	  onTouchStart: _react.PropTypes.func,
	  rippleColor: _react.PropTypes.string,
	  rippleStyle: _react.PropTypes.object,
	  style: _react.PropTypes.object,
	  switchElement: _react.PropTypes.element.isRequired,
	  switched: _react.PropTypes.bool.isRequired,
	  thumbStyle: _react.PropTypes.object,
	  trackStyle: _react.PropTypes.object,
	  value: _react.PropTypes.any
	} : void 0;
	exports.default = EnhancedSwitch;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NavigationMoreVert = function NavigationMoreVert(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z' }));
	};
	NavigationMoreVert = (0, _pure2.default)(NavigationMoreVert);
	NavigationMoreVert.displayName = 'NavigationMoreVert';
	NavigationMoreVert.muiName = 'SvgIcon';

	exports.default = NavigationMoreVert;

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NavigationClose = function NavigationClose(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' }));
	};
	NavigationClose = (0, _pure2.default)(NavigationClose);
	NavigationClose.displayName = 'NavigationClose';
	NavigationClose.muiName = 'SvgIcon';

	exports.default = NavigationClose;

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _RaisedButton = __webpack_require__(423);

	var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var City = function (_React$Component) {
	  _inherits(City, _React$Component);

	  function City(props) {
	    _classCallCheck(this, City);

	    var _this = _possibleConstructorReturn(this, (City.__proto__ || Object.getPrototypeOf(City)).call(this, props));

	    _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    };

	    _this.handleClose = function () {
	      return _this.setState({ open: false });
	    };

	    _this.state = { open: false };
	    return _this;
	  }

	  _createClass(City, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_RaisedButton2.default, {
	          label: 'Open Drawer',
	          onTouchTap: this.handleToggle
	        }),
	        _react2.default.createElement(
	          _Drawer2.default,
	          {
	            docked: false,
	            width: 200,
	            open: this.state.open,
	            onRequestChange: function onRequestChange(open) {
	              return _this2.setState({ open: open });
	            }
	          },
	          _react2.default.createElement(
	            _MenuItem2.default,
	            { onTouchTap: this.handleClose },
	            'Menu Item'
	          ),
	          _react2.default.createElement(
	            _MenuItem2.default,
	            { onTouchTap: this.handleClose },
	            'Menu Item 2'
	          )
	        )
	      );
	    }
	  }]);

	  return City;
	}(_react2.default.Component);

	exports.default = City;

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _close = __webpack_require__(440);

	var _close2 = _interopRequireDefault(_close);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Settings = function (_React$Component) {
	  _inherits(Settings, _React$Component);

	  function Settings(props) {
	    _classCallCheck(this, Settings);

	    var _this = _possibleConstructorReturn(this, (Settings.__proto__ || Object.getPrototypeOf(Settings)).call(this, props));

	    _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    };

	    _this.handleClose = function () {
	      return _this.setState({ open: false });
	    };

	    _this.state = { open: false };
	    return _this;
	  }

	  _createClass(Settings, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_FlatButton2.default, {
	          label: 'Setting',
	          onTouchTap: this.handleToggle
	        }),
	        _react2.default.createElement(
	          _Drawer2.default,
	          { width: 380, openSecondary: true, open: this.state.open },
	          _react2.default.createElement(_AppBar2.default, {
	            title: 'Settings',

	            iconElementLeft: _react2.default.createElement(
	              _IconButton2.default,
	              { onTouchTap: this.handleClose },
	              _react2.default.createElement(_close2.default, null)
	            ) })
	        )
	      );
	    }
	  }]);

	  return Settings;
	}(_react2.default.Component);

	exports.default = Settings;

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.RouterContext = exports.createRoutes = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;

	var _RouteUtils = __webpack_require__(444);

	Object.defineProperty(exports, 'createRoutes', {
	  enumerable: true,
	  get: function get() {
	    return _RouteUtils.createRoutes;
	  }
	});

	var _PropTypes = __webpack_require__(445);

	Object.defineProperty(exports, 'locationShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.locationShape;
	  }
	});
	Object.defineProperty(exports, 'routerShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.routerShape;
	  }
	});

	var _PatternUtils = __webpack_require__(446);

	Object.defineProperty(exports, 'formatPattern', {
	  enumerable: true,
	  get: function get() {
	    return _PatternUtils.formatPattern;
	  }
	});

	var _Router2 = __webpack_require__(448);

	var _Router3 = _interopRequireDefault(_Router2);

	var _Link2 = __webpack_require__(463);

	var _Link3 = _interopRequireDefault(_Link2);

	var _IndexLink2 = __webpack_require__(464);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	var _withRouter2 = __webpack_require__(465);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	var _IndexRedirect2 = __webpack_require__(467);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	var _IndexRoute2 = __webpack_require__(469);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	var _Redirect2 = __webpack_require__(468);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(470);

	var _Route3 = _interopRequireDefault(_Route2);

	var _RouterContext2 = __webpack_require__(459);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	var _match2 = __webpack_require__(471);

	var _match3 = _interopRequireDefault(_match2);

	var _useRouterHistory2 = __webpack_require__(484);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	var _applyRouterMiddleware2 = __webpack_require__(485);

	var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

	var _browserHistory2 = __webpack_require__(486);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	var _hashHistory2 = __webpack_require__(494);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	var _createMemoryHistory2 = __webpack_require__(473);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.Router = _Router3.default; /* components */

	exports.Link = _Link3.default;
	exports.IndexLink = _IndexLink3.default;
	exports.withRouter = _withRouter3.default;

	/* components (configuration) */

	exports.IndexRedirect = _IndexRedirect3.default;
	exports.IndexRoute = _IndexRoute3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;

	/* utils */

	exports.RouterContext = _RouterContext3.default;
	exports.match = _match3.default;
	exports.useRouterHistory = _useRouterHistory3.default;
	exports.applyRouterMiddleware = _applyRouterMiddleware3.default;

	/* histories */

	exports.browserHistory = _browserHistory3.default;
	exports.hashHistory = _hashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function isValidChild(object) {
	  return object == null || _react2.default.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */
	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2.default.Children.forEach(children, function (element) {
	    if (_react2.default.isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */
	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationShape = exports.routerShape = undefined;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	var routerShape = exports.routerShape = shape({
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired,
	  setRouteLeaveHook: func.isRequired,
	  isActive: func.isRequired
	});

	var locationShape = exports.locationShape = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = void 0,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)|\\\(|\\\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '(.*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '(.*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    } else if (match[0] === '\\(') {
	      regexpSource += '\\(';
	    } else if (match[0] === '\\)') {
	      regexpSource += '\\)';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = Object.create(null);

	function compilePattern(pattern) {
	  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 *  The function calls callback(error, matched) when finished.
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */
	function matchPattern(pattern, pathname) {
	  // Ensure pattern starts with leading slash for consistency with pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }

	  var _compilePattern2 = compilePattern(pattern),
	      regexpSource = _compilePattern2.regexpSource,
	      paramNames = _compilePattern2.paramNames,
	      tokens = _compilePattern2.tokens;

	  if (pattern.charAt(pattern.length - 1) !== '/') {
	    regexpSource += '/?'; // Allow optional path separator at end.
	  }

	  // Special-case patterns like '*' for catch-all routes.
	  if (tokens[tokens.length - 1] === '*') {
	    regexpSource += '$';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
	  if (match == null) {
	    return null;
	  }

	  var matchedPath = match[0];
	  var remainingPathname = pathname.substr(matchedPath.length);

	  if (remainingPathname) {
	    // Require that the match ends at a path separator, if we didn't match
	    // the full path, so any remaining pathname is a new path segment.
	    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
	      return null;
	    }

	    // If there is a remaining pathname, treat the path separator as part of
	    // the remaining pathname for properly continuing the match.
	    remainingPathname = '/' + remainingPathname;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: match.slice(1).map(function (v) {
	      return v && decodeURIComponent(v);
	    })
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var match = matchPattern(pattern, pathname);
	  if (!match) {
	    return null;
	  }

	  var paramNames = match.paramNames,
	      paramValues = match.paramValues;

	  var params = {};

	  paramNames.forEach(function (paramName, index) {
	    params[paramName] = paramValues[index];
	  });

	  return params;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */
	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern),
	      tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0,
	      parenHistory = [];

	  var token = void 0,
	      paramName = void 0,
	      paramValue = void 0;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenHistory[parenCount] = '';
	      parenCount += 1;
	    } else if (token === ')') {
	      var parenText = parenHistory.pop();
	      parenCount -= 1;

	      if (parenCount) parenHistory[parenCount - 1] += parenText;else pathname += parenText;
	    } else if (token === '\\(') {
	      pathname += '(';
	    } else if (token === '\\)') {
	      pathname += ')';
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue == null) {
	        if (parenCount) {
	          parenHistory[parenCount - 1] = '';

	          var curTokenIdx = tokens.indexOf(token);
	          var tokensSubset = tokens.slice(curTokenIdx, tokens.length);
	          var nextParenIdx = -1;

	          for (var _i = 0; _i < tokensSubset.length; _i++) {
	            if (tokensSubset[_i] == ')') {
	              nextParenIdx = _i;
	              break;
	            }
	          }

	          !(nextParenIdx > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren at segment "%s"', pattern, tokensSubset.join('')) : (0, _invariant2.default)(false) : void 0;

	          // jump to ending paren
	          i = curTokenIdx + nextParenIdx - 1;
	        }
	      } else if (parenCount) parenHistory[parenCount - 1] += encodeURIComponent(paramValue);else pathname += encodeURIComponent(paramValue);
	    } else {
	      if (parenCount) parenHistory[parenCount - 1] += token;else pathname += token;
	    }
	  }

	  !(parenCount <= 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren', pattern) : (0, _invariant2.default)(false) : void 0;

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager2 = __webpack_require__(449);

	var _createTransitionManager3 = _interopRequireDefault(_createTransitionManager2);

	var _InternalPropTypes = __webpack_require__(458);

	var _RouterContext = __webpack_require__(459);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(444);

	var _RouterUtils = __webpack_require__(462);

	var _routerWarning = __webpack_require__(450);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	var _React$PropTypes = _react2.default.PropTypes,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */

	var Router = _react2.default.createClass({
	  displayName: 'Router',

	  propTypes: {
	    history: object,
	    children: _InternalPropTypes.routes,
	    routes: _InternalPropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2.default.createElement(_RouterContext2.default, props);
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },
	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },
	  createRouterObject: function createRouterObject(state) {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.router;
	    }

	    var history = this.props.history;

	    return (0, _RouterUtils.createRouterObject)(history, this.transitionManager, state);
	  },
	  createTransitionManager: function createTransitionManager() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.transitionManager;
	    }

	    var history = this.props.history;
	    var _props = this.props,
	        routes = _props.routes,
	        children = _props.children;

	    !history.getCurrentLocation ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v4.x or v2.x ' + 'and earlier. This version of React Router is only compatible with v3 ' + 'history objects. Please change to history v3.x.') : (0, _invariant2.default)(false) : void 0;

	    return (0, _createTransitionManager3.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
	  },
	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    this.transitionManager = this.createTransitionManager();
	    this.router = this.createRouterObject(this.state);

	    this._unlisten = this.transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        // Keep the identity of this.router because of a caveat in ContextUtils:
	        // they only work if the object identity is preserved.
	        (0, _RouterUtils.assignRouterState)(_this.router, state);
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });
	  },

	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;

	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },
	  render: function render() {
	    var _state = this.state,
	        location = _state.location,
	        routes = _state.routes,
	        params = _state.params,
	        components = _state.components;

	    var _props2 = this.props,
	        createElement = _props2.createElement,
	        render = _props2.render,
	        props = _objectWithoutProperties(_props2, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }
	});

	exports.default = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	exports.default = createTransitionManager;

	var _routerWarning = __webpack_require__(450);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _computeChangedRoutes2 = __webpack_require__(451);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(452);

	var _isActive2 = __webpack_require__(454);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(455);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(457);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location, indexOnly) {
	    location = history.createLocation(location);

	    return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
	  }

	  var partialNextState = void 0;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState),
	        leaveRoutes = _computeChangedRoutes.leaveRoutes,
	        changeRoutes = _computeChangedRoutes.changeRoutes,
	        enterRoutes = _computeChangedRoutes.enterRoutes;

	    (0, _TransitionUtils.runLeaveHooks)(leaveRoutes, state);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    // change and enter hooks are run in series
	    (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
	    });

	    function finishEnterHooks(error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      // TODO: Fetch components after state is updated.
	      (0, _getComponents2.default)(nextState, function (error, components) {
	        if (error) {
	          callback(error);
	        } else {
	          // TODO: Make match a pure function and have some other API
	          // for "match and update state".
	          callback(null, null, state = _extends({}, nextState, { components: components }));
	        }
	      });
	    }

	    function handleErrorOrRedirect(error, redirectInfo) {
	      if (error) callback(error);else callback(null, redirectInfo);
	    }
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = Object.create(null);

	  function getRouteHooksForRoutes(routes) {
	    return routes.map(function (route) {
	      return RouteHooks[getRouteID(route)];
	    }).filter(function (hook) {
	      return hook;
	    });
	  }

	  function transitionHook(location, callback) {
	    (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);

	      var result = void 0;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = void 0;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = void 0,
	      unlistenBeforeUnload = void 0;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and can return either a prompt message (string) to show the user,
	   * to make sure they want to leave the page; or `false`, to prevent the transition.
	   * Any other return value will have no effect.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);
	    var routeID = getRouteID(route, true);

	    RouteHooks[routeID] = hook;

	    if (thereWereNoRouteHooks) {
	      // setup transition & beforeunload hooks
	      unlistenBefore = history.listenBefore(transitionHook);

	      if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	    }

	    return function () {
	      removeListenBeforeHooksForRoute(route);
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    function historyListener(location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.replace(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
	          }
	        });
	      }
	    }

	    // TODO: Only use a single history listener. Otherwise we'll end up with
	    // multiple concurrent calls to match.

	    // Set up the history listener first in case the initial match redirects.
	    var unsubscribe = history.listen(historyListener);

	    if (state.location) {
	      // Picking up on a matchContext.
	      listener(null, state);
	    } else {
	      historyListener(history.getCurrentLocation());
	    }

	    return unsubscribe;
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = routerWarning;
	exports._resetWarned = _resetWarned;

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var warned = {};

	function routerWarning(falseToWarn, message) {
	  // Only issue deprecation warnings once.
	  if (message.indexOf('deprecated') !== -1) {
	    if (warned[message]) {
	      return;
	    }

	    warned[message] = true;
	  }

	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
	}

	function _resetWarned() {
	  warned = {};
	}

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(446);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = (0, _PatternUtils.getParamNames)(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = void 0,
	      changeRoutes = void 0,
	      enterRoutes = void 0;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = [];
	      changeRoutes = [];

	      nextRoutes.forEach(function (route) {
	        var isNew = prevRoutes.indexOf(route) === -1;
	        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

	        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    changeRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    changeRoutes: changeRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports.default = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runChangeHooks = runChangeHooks;
	exports.runLeaveHooks = runLeaveHooks;

	var _AsyncUtils = __webpack_require__(453);

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var PendingHooks = function PendingHooks() {
	  var _this = this;

	  _classCallCheck(this, PendingHooks);

	  this.hooks = [];

	  this.add = function (hook) {
	    return _this.hooks.push(hook);
	  };

	  this.remove = function (hook) {
	    return _this.hooks = _this.hooks.filter(function (h) {
	      return h !== hook;
	    });
	  };

	  this.has = function (hook) {
	    return _this.hooks.indexOf(hook) !== -1;
	  };

	  this.clear = function () {
	    return _this.hooks = [];
	  };
	};

	var enterHooks = new PendingHooks();
	var changeHooks = new PendingHooks();

	function createTransitionHook(hook, route, asyncArity, pendingHooks) {
	  var isSync = hook.length < asyncArity;

	  var transitionHook = function transitionHook() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    hook.apply(route, args);

	    if (isSync) {
	      var callback = args[args.length - 1];
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };

	  pendingHooks.add(transitionHook);

	  return transitionHook;
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3, enterHooks));
	    return hooks;
	  }, []);
	}

	function getChangeHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4, changeHooks));
	    return hooks;
	  }, []);
	}

	function runTransitionHooks(length, iter, callback) {
	  if (!length) {
	    callback();
	    return;
	  }

	  var redirectInfo = void 0;
	  function replace(location) {
	    redirectInfo = location;
	  }

	  (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
	    iter(index, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runEnterHooks(routes, nextState, callback) {
	  enterHooks.clear();
	  var hooks = getEnterHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (enterHooks.has(hooks[index])) {
	        next.apply(undefined, arguments);
	        enterHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runChangeHooks(routes, state, nextState, callback) {
	  changeHooks.clear();
	  var hooks = getChangeHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (changeHooks.has(hooks[index])) {
	        next.apply(undefined, arguments);
	        changeHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](state, nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */
	function runLeaveHooks(routes, prevState) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);
	  }
	}

/***/ },
/* 453 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(Array.prototype.slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	exports.default = isActive;

	var _PatternUtils = __webpack_require__(446);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!Object.prototype.hasOwnProperty.call(a, p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */
	function pathIsActive(pathname, currentPathname) {
	  // Normalize leading slash for consistency. Leading slash on pathname has
	  // already been normalized in isActive. See caveat there.
	  if (currentPathname.charAt(0) !== '/') {
	    currentPathname = '/' + currentPathname;
	  }

	  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
	  // `/foo` as active, but in this case, we would already have failed the
	  // match.
	  if (pathname.charAt(pathname.length - 1) !== '/') {
	    pathname += '/';
	  }
	  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
	    currentPathname += '/';
	  }

	  return currentPathname === pathname;
	}

	/**
	 * Returns true if the given pathname matches the active routes and params.
	 */
	function routeIsActive(pathname, routes, params) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  // for...of would work here but it's probably slower post-transpilation.
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    var route = routes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null && pattern) {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }

	      if (remainingPathname === '') {
	        // We have an exact match on the route. Just check that all the params
	        // match.
	        // FIXME: This doesn't work on repeated params.
	        return paramNames.every(function (paramName, index) {
	          return String(paramValues[index]) === String(params[paramName]);
	        });
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */
	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname,
	      query = _ref.query;

	  if (currentLocation == null) return false;

	  // TODO: This is a bit ugly. It keeps around support for treating pathnames
	  // without preceding slashes as absolute paths, but possibly also works
	  // around the same quirks with basenames as in matchRoutes.
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  if (!pathIsActive(pathname, currentLocation.pathname)) {
	    // The path check is necessary and sufficient for indexOnly, but otherwise
	    // we still need to check the routes.
	    if (indexOnly || !routeIsActive(pathname, routes, params)) {
	      return false;
	    }
	  }

	  return queryIsActive(query, currentLocation.query);
	}
	module.exports = exports['default'];

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(453);

	var _PromiseUtils = __webpack_require__(456);

	function getComponentsForRoute(nextState, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	    return;
	  }

	  var getComponent = route.getComponent || route.getComponents;
	  if (getComponent) {
	    var componentReturn = getComponent.call(route, nextState, callback);
	    if ((0, _PromiseUtils.isPromise)(componentReturn)) componentReturn.then(function (component) {
	      return callback(null, component);
	    }, callback);
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState, route, callback);
	  }, callback);
	}

	exports.default = getComponents;
	module.exports = exports['default'];

/***/ },
/* 456 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.isPromise = isPromise;
	function isPromise(obj) {
	  return obj && typeof obj.then === 'function';
	}

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	exports.default = matchRoutes;

	var _AsyncUtils = __webpack_require__(453);

	var _PromiseUtils = __webpack_require__(456);

	var _PatternUtils = __webpack_require__(446);

	var _routerWarning = __webpack_require__(450);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _RouteUtils = __webpack_require__(444);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getChildRoutes(route, location, paramNames, paramValues, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = void 0;

	  var partialNextState = {
	    location: location,
	    params: createParams(paramNames, paramValues)
	  };

	  var childRoutesReturn = route.getChildRoutes(partialNextState, function (error, childRoutes) {
	    childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  if ((0, _PromiseUtils.isPromise)(childRoutesReturn)) childRoutesReturn.then(function (childRoutes) {
	    return callback(null, (0, _RouteUtils.createRoutes)(childRoutes));
	  }, callback);

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, paramNames, paramValues, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    var partialNextState = {
	      location: location,
	      params: createParams(paramNames, paramValues)
	    };

	    var indexRoutesReturn = route.getIndexRoute(partialNextState, function (error, indexRoute) {
	      callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    });

	    if ((0, _PromiseUtils.isPromise)(indexRoutesReturn)) indexRoutesReturn.then(function (indexRoute) {
	      return callback(null, (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    }, callback);
	  } else if (route.childRoutes || route.getChildRoutes) {
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	        return;
	      }

	      var pathless = childRoutes.filter(function (childRoute) {
	        return !childRoute.path;
	      });

	      (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    };

	    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  // Only try to match the path if the route actually has a pattern, and if
	  // we're not just searching for potential nested absolute paths.
	  if (remainingPathname !== null && pattern) {
	    try {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }
	    } catch (error) {
	      callback(error);
	    }

	    // By assumption, pattern is non-empty here, which is the prerequisite for
	    // actually terminating a match.
	    if (remainingPathname === '') {
	      var _ret = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : void 0;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });

	        return {
	          v: void 0
	        };
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback, remainingPathname) {
	  var paramNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	  var paramValues = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

	  if (remainingPathname === undefined) {
	    // TODO: This is a little bit ugly, but it works around a quirk in history
	    // that strips the leading slash from pathnames when using basenames with
	    // trailing slashes.
	    if (location.pathname.charAt(0) !== '/') {
	      location = _extends({}, location, {
	        pathname: '/' + location.pathname
	      });
	    }
	    remainingPathname = location.pathname;
	  }

	  (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
	    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	      if (error || match) {
	        done(error, match);
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
	exports.falsy = falsy;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    arrayOf = _react.PropTypes.arrayOf,
	    oneOfType = _react.PropTypes.oneOfType,
	    element = _react.PropTypes.element,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = exports.history = shape({
	  listen: func.isRequired,
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired
	});

	var component = exports.component = oneOfType([func, string]);
	var components = exports.components = oneOfType([component, object]);
	var route = exports.route = oneOfType([object, element]);
	var routes = exports.routes = oneOfType([route, arrayOf(route)]);

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _getRouteParams = __webpack_require__(460);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _ContextUtils = __webpack_require__(461);

	var _RouteUtils = __webpack_require__(444);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var _React$PropTypes = _react2.default.PropTypes,
	    array = _React$PropTypes.array,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */

	var RouterContext = _react2.default.createClass({
	  displayName: 'RouterContext',

	  mixins: [(0, _ContextUtils.ContextProvider)('router')],

	  propTypes: {
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2.default.createElement
	    };
	  },

	  childContextTypes: {
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      router: this.props.router
	    };
	  },
	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },
	  render: function render() {
	    var _this = this;

	    var _props = this.props,
	        location = _props.location,
	        routes = _props.routes,
	        params = _props.params,
	        components = _props.components,
	        router = _props.router;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = (0, _getRouteParams2.default)(route, params);
	        var props = {
	          location: location,
	          params: params,
	          route: route,
	          router: router,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if ((0, _RouteUtils.isReactChildren)(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
	          }
	        }

	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (Object.prototype.hasOwnProperty.call(components, key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2.default.isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;

	    return element;
	  }
	});

	exports.default = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(446);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
	    if (Object.prototype.hasOwnProperty.call(params, p)) {
	      routeParams[p] = params[p];
	    }
	  });

	  return routeParams;
	}

	exports.default = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ContextProvider = ContextProvider;
	exports.ContextSubscriber = ContextSubscriber;

	var _react = __webpack_require__(1);

	// Works around issues with context updates failing to propagate.
	// Caveat: the context value is expected to never change its identity.
	// https://github.com/facebook/react/issues/2517
	// https://github.com/reactjs/react-router/issues/470

	var contextProviderShape = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  eventIndex: _react.PropTypes.number.isRequired
	});

	function makeContextName(name) {
	  return '@@contextSubscriber/' + name;
	}

	function ContextProvider(name) {
	  var _childContextTypes, _ref2;

	  var contextName = makeContextName(name);
	  var listenersKey = contextName + '/listeners';
	  var eventIndexKey = contextName + '/eventIndex';
	  var subscribeKey = contextName + '/subscribe';

	  return _ref2 = {
	    childContextTypes: (_childContextTypes = {}, _childContextTypes[contextName] = contextProviderShape.isRequired, _childContextTypes),

	    getChildContext: function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[contextName] = {
	        eventIndex: this[eventIndexKey],
	        subscribe: this[subscribeKey]
	      }, _ref;
	    },
	    componentWillMount: function componentWillMount() {
	      this[listenersKey] = [];
	      this[eventIndexKey] = 0;
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this[eventIndexKey]++;
	    },
	    componentDidUpdate: function componentDidUpdate() {
	      var _this = this;

	      this[listenersKey].forEach(function (listener) {
	        return listener(_this[eventIndexKey]);
	      });
	    }
	  }, _ref2[subscribeKey] = function (listener) {
	    var _this2 = this;

	    // No need to immediately call listener here.
	    this[listenersKey].push(listener);

	    return function () {
	      _this2[listenersKey] = _this2[listenersKey].filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }, _ref2;
	}

	function ContextSubscriber(name) {
	  var _contextTypes, _ref4;

	  var contextName = makeContextName(name);
	  var lastRenderedEventIndexKey = contextName + '/lastRenderedEventIndex';
	  var handleContextUpdateKey = contextName + '/handleContextUpdate';
	  var unsubscribeKey = contextName + '/unsubscribe';

	  return _ref4 = {
	    contextTypes: (_contextTypes = {}, _contextTypes[contextName] = contextProviderShape, _contextTypes),

	    getInitialState: function getInitialState() {
	      var _ref3;

	      if (!this.context[contextName]) {
	        return {};
	      }

	      return _ref3 = {}, _ref3[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _ref3;
	    },
	    componentDidMount: function componentDidMount() {
	      if (!this.context[contextName]) {
	        return;
	      }

	      this[unsubscribeKey] = this.context[contextName].subscribe(this[handleContextUpdateKey]);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      var _setState;

	      if (!this.context[contextName]) {
	        return;
	      }

	      this.setState((_setState = {}, _setState[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _setState));
	    },
	    componentWillUnmount: function componentWillUnmount() {
	      if (!this[unsubscribeKey]) {
	        return;
	      }

	      this[unsubscribeKey]();
	      this[unsubscribeKey] = null;
	    }
	  }, _ref4[handleContextUpdateKey] = function (eventIndex) {
	    if (eventIndex !== this.state[lastRenderedEventIndexKey]) {
	      var _setState2;

	      this.setState((_setState2 = {}, _setState2[lastRenderedEventIndexKey] = eventIndex, _setState2));
	    }
	  }, _ref4;
	}

/***/ },
/* 462 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	exports.createRouterObject = createRouterObject;
	exports.assignRouterState = assignRouterState;
	function createRouterObject(history, transitionManager, state) {
	  var router = _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });

	  return assignRouterState(router, state);
	}

	function assignRouterState(router, _ref) {
	  var location = _ref.location,
	      params = _ref.params,
	      routes = _ref.routes;

	  router.location = location;
	  router.params = params;
	  router.routes = routes;

	  return router;
	}

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PropTypes = __webpack_require__(445);

	var _ContextUtils = __webpack_require__(461);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	var _React$PropTypes = _react2.default.PropTypes,
	    bool = _React$PropTypes.bool,
	    object = _React$PropTypes.object,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func,
	    oneOfType = _React$PropTypes.oneOfType;

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
	  }return true;
	}

	function resolveToLocation(to, router) {
	  return typeof to === 'function' ? to(router.location) : to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2.default.createClass({
	  displayName: 'Link',

	  mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	  contextTypes: {
	    router: _PropTypes.routerShape
	  },

	  propTypes: {
	    to: oneOfType([string, object, func]),
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func,
	    target: string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      style: {}
	    };
	  },
	  handleClick: function handleClick(event) {
	    if (this.props.onClick) this.props.onClick(event);

	    if (event.defaultPrevented) return;

	    var router = this.context.router;

	    !router ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot navigate.') : (0, _invariant2.default)(false) : void 0;

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    // If target prop is set (e.g. to "_blank"), let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) return;

	    event.preventDefault();

	    router.push(resolveToLocation(this.props.to, router));
	  },
	  render: function render() {
	    var _props = this.props,
	        to = _props.to,
	        activeClassName = _props.activeClassName,
	        activeStyle = _props.activeStyle,
	        onlyActiveOnIndex = _props.onlyActiveOnIndex,
	        props = _objectWithoutProperties(_props, ['to', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    // Ignore if rendered outside the context of router to simplify unit testing.


	    var router = this.context.router;

	    if (router) {
	      // If user does not specify a `to` prop, return an empty anchor tag.
	      if (!to) {
	        return _react2.default.createElement('a', props);
	      }

	      var toLocation = resolveToLocation(to, router);
	      props.href = router.createHref(toLocation);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(toLocation, onlyActiveOnIndex)) {
	          if (activeClassName) {
	            if (props.className) {
	              props.className += ' ' + activeClassName;
	            } else {
	              props.className = activeClassName;
	            }
	          }

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }
	});

	exports.default = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(463);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2.default.createClass({
	  displayName: 'IndexLink',
	  render: function render() {
	    return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }
	});

	exports.default = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	exports.default = withRouter;

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _hoistNonReactStatics = __webpack_require__(466);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _ContextUtils = __webpack_require__(461);

	var _PropTypes = __webpack_require__(445);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function withRouter(WrappedComponent, options) {
	  var withRef = options && options.withRef;

	  var WithRouter = _react2.default.createClass({
	    displayName: 'WithRouter',

	    mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	    contextTypes: { router: _PropTypes.routerShape },
	    propTypes: { router: _PropTypes.routerShape },

	    getWrappedInstance: function getWrappedInstance() {
	      !withRef ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'To access the wrapped instance, you need to specify ' + '`{ withRef: true }` as the second argument of the withRouter() call.') : (0, _invariant2.default)(false) : void 0;

	      return this.wrappedInstance;
	    },
	    render: function render() {
	      var _this = this;

	      var router = this.props.router || this.context.router;
	      if (!router) {
	        return _react2.default.createElement(WrappedComponent, this.props);
	      }

	      var params = router.params,
	          location = router.location,
	          routes = router.routes;

	      var props = _extends({}, this.props, { router: router, params: params, location: location, routes: routes });

	      if (withRef) {
	        props.ref = function (c) {
	          _this.wrappedInstance = c;
	        };
	      }

	      return _react2.default.createElement(WrappedComponent, props);
	    }
	  });

	  WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
	  WithRouter.WrappedComponent = WrappedComponent;

	  return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 466 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') {
	        // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {}
	            }
	        }
	    }

	    return targetComponent;
	};

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(450);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(468);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _InternalPropTypes = __webpack_require__(458);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRedirect = _react2.default.createClass({
	  displayName: 'IndexRedirect',

	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(444);

	var _PatternUtils = __webpack_require__(446);

	var _InternalPropTypes = __webpack_require__(458);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	/* eslint-disable react/require-render-return */

	var Redirect = _react2.default.createClass({
	  displayName: 'Redirect',

	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = (0, _RouteUtils.createRouteFromReactElement)(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location,
	            params = nextState.params;

	        var pathname = void 0;
	        if (route.to.charAt(0) === '/') {
	          pathname = (0, _PatternUtils.formatPattern)(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = (0, _PatternUtils.formatPattern)(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },
	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }
	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(450);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(444);

	var _InternalPropTypes = __webpack_require__(458);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var func = _react2.default.PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRoute = _react2.default.createClass({
	  displayName: 'IndexRoute',

	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    path: _InternalPropTypes.falsy,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(444);

	var _InternalPropTypes = __webpack_require__(458);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	/* eslint-disable react/require-render-return */

	var Route = _react2.default.createClass({
	  displayName: 'Route',

	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _Actions = __webpack_require__(472);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(473);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(449);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(444);

	var _RouterUtils = __webpack_require__(462);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history,
	      routes = _ref.routes,
	      location = _ref.location,
	      options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;

	  history = history ? history : (0, _createMemoryHistory2.default)(options);
	  var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    location = history.getCurrentLocation();
	  }

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    var renderProps = void 0;

	    if (nextState) {
	      var router = (0, _RouterUtils.createRouterObject)(history, transitionManager, nextState);
	      renderProps = _extends({}, nextState, {
	        router: router,
	        matchContext: { transitionManager: transitionManager, router: router }
	      });
	    }

	    callback(error, redirectLocation && history.createLocation(redirectLocation, _Actions.REPLACE), renderProps);
	  });
	}

	exports.default = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 472 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	var PUSH = exports.PUSH = 'PUSH';

	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = exports.REPLACE = 'REPLACE';

	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = exports.POP = 'POP';

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = createMemoryHistory;

	var _useQueries = __webpack_require__(474);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(480);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	var _createMemoryHistory = __webpack_require__(481);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useQueries` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = (0, _createMemoryHistory2.default)(options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	  return history;
	}
	module.exports = exports['default'];

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _queryString = __webpack_require__(475);

	var _runTransitionHook = __webpack_require__(477);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _LocationUtils = __webpack_require__(478);

	var _PathUtils = __webpack_require__(479);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var defaultStringifyQuery = function defaultStringifyQuery(query) {
	  return (0, _queryString.stringify)(query).replace(/%20/g, '+');
	};

	var defaultParseQueryString = _queryString.parse;

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	var useQueries = function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;

	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    var decodeQuery = function decodeQuery(location) {
	      if (!location) return location;

	      if (location.query == null) location.query = parseQueryString(location.search.substring(1));

	      return location;
	    };

	    var encodeQuery = function encodeQuery(location, query) {
	      if (query == null) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var queryString = stringifyQuery(query);
	      var search = queryString ? '?' + queryString : '';

	      return _extends({}, object, {
	        search: search
	      });
	    };

	    // Override all read methods with query-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return decodeQuery(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, decodeQuery(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(decodeQuery(location));
	      });
	    };

	    // Override all write methods with query-aware versions.
	    var push = function push(location) {
	      return history.push(encodeQuery(location, location.query));
	    };

	    var replace = function replace(location) {
	      return history.replace(encodeQuery(location, location.query));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(encodeQuery(location, location.query));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(encodeQuery(location, location.query));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var newLocation = history.createLocation.apply(history, [encodeQuery(location, location.query)].concat(args));

	      if (location.query) newLocation.query = (0, _LocationUtils.createQuery)(location.query);

	      return decodeQuery(newLocation);
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useQueries;

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var strictUriEncode = __webpack_require__(476);
	var objectAssign = __webpack_require__(4);

	function encoderForArrayFormat(opts) {
		switch (opts.arrayFormat) {
			case 'index':
				return function (key, value, index) {
					return value === null ? [encode(key, opts), '[', index, ']'].join('') : [encode(key, opts), '[', encode(index, opts), ']=', encode(value, opts)].join('');
				};

			case 'bracket':
				return function (key, value) {
					return value === null ? encode(key, opts) : [encode(key, opts), '[]=', encode(value, opts)].join('');
				};

			default:
				return function (key, value) {
					return value === null ? encode(key, opts) : [encode(key, opts), '=', encode(value, opts)].join('');
				};
		}
	}

	function parserForArrayFormat(opts) {
		var result;

		switch (opts.arrayFormat) {
			case 'index':
				return function (key, value, accumulator) {
					result = /\[(\d*)\]$/.exec(key);

					key = key.replace(/\[\d*\]$/, '');

					if (!result) {
						accumulator[key] = value;
						return;
					}

					if (accumulator[key] === undefined) {
						accumulator[key] = {};
					}

					accumulator[key][result[1]] = value;
				};

			case 'bracket':
				return function (key, value, accumulator) {
					result = /(\[\])$/.exec(key);

					key = key.replace(/\[\]$/, '');

					if (!result || accumulator[key] === undefined) {
						accumulator[key] = value;
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};

			default:
				return function (key, value, accumulator) {
					if (accumulator[key] === undefined) {
						accumulator[key] = value;
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};
		}
	}

	function encode(value, opts) {
		if (opts.encode) {
			return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
		}

		return value;
	}

	function keysSorter(input) {
		if (Array.isArray(input)) {
			return input.sort();
		} else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
			return keysSorter(Object.keys(input)).sort(function (a, b) {
				return Number(a) - Number(b);
			}).map(function (key) {
				return input[key];
			});
		}

		return input;
	}

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str, opts) {
		opts = objectAssign({ arrayFormat: 'none' }, opts);

		var formatter = parserForArrayFormat(opts);

		// Create an object with no prototype
		// https://github.com/sindresorhus/query-string/issues/47
		var ret = Object.create(null);

		if (typeof str !== 'string') {
			return ret;
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return ret;
		}

		str.split('&').forEach(function (param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			formatter(decodeURIComponent(key), val, ret);
		});

		return Object.keys(ret).sort().reduce(function (result, key) {
			var val = ret[key];
			if (Boolean(val) && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && !Array.isArray(val)) {
				// Sort object keys, not values
				result[key] = keysSorter(val);
			} else {
				result[key] = val;
			}

			return result;
		}, Object.create(null));
	};

	exports.stringify = function (obj, opts) {
		var defaults = {
			encode: true,
			strict: true,
			arrayFormat: 'none'
		};

		opts = objectAssign(defaults, opts);

		var formatter = encoderForArrayFormat(opts);

		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return encode(key, opts);
			}

			if (Array.isArray(val)) {
				var result = [];

				val.slice().forEach(function (val2) {
					if (val2 === undefined) {
						return;
					}

					result.push(formatter(key, val2, result.length));
				});

				return result.join('&');
			}

			return encode(key, opts) + '=' + encode(val, opts);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};

/***/ },
/* 476 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var runTransitionHook = function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(result === undefined, 'You should not "return" in a transition hook with a callback argument; ' + 'call the callback instead') : void 0;
	  }
	};

	exports.default = runTransitionHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.__esModule = true;
	exports.locationsAreEqual = exports.statesAreEqual = exports.createLocation = exports.createQuery = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(479);

	var _Actions = __webpack_require__(472);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var createQuery = exports.createQuery = function createQuery(props) {
	  return _extends(Object.create(null), props);
	};

	var createLocation = exports.createLocation = function createLocation() {
	  var input = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var object = typeof input === 'string' ? (0, _PathUtils.parsePath)(input) : input;

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!object.path, 'Location descriptor objects should have a `pathname`, not a `path`.') : void 0;

	  var pathname = object.pathname || '/';
	  var search = object.search || '';
	  var hash = object.hash || '';
	  var state = object.state;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	};

	var isDate = function isDate(object) {
	  return Object.prototype.toString.call(object) === '[object Date]';
	};

	var statesAreEqual = exports.statesAreEqual = function statesAreEqual(a, b) {
	  if (a === b) return true;

	  var typeofA = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var typeofB = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (typeofA !== typeofB) return false;

	  !(typeofA !== 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store functions in location state') : (0, _invariant2.default)(false) : void 0;

	  // Not the same object, but same type.
	  if (typeofA === 'object') {
	    !!(isDate(a) && isDate(b)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store Date objects in location state') : (0, _invariant2.default)(false) : void 0;

	    if (!Array.isArray(a)) {
	      var keysofA = Object.keys(a);
	      var keysofB = Object.keys(b);
	      return keysofA.length === keysofB.length && keysofA.every(function (key) {
	        return statesAreEqual(a[key], b[key]);
	      });
	    }

	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return statesAreEqual(item, b[index]);
	    });
	  }

	  // All other serializable types (string, number, boolean)
	  // should be strict equal.
	  return false;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.key === b.key &&
	  // a.action === b.action && // Different action !== location change.
	  a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && statesAreEqual(a.state, b.state);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.getQueryStringValueFromPath = exports.stripQueryStringValueFromPath = exports.addQueryStringValueToPath = undefined;

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var addQueryStringValueToPath = exports.addQueryStringValueToPath = function addQueryStringValueToPath(path, key, value) {
	  var _parsePath = parsePath(path);

	  var pathname = _parsePath.pathname;
	  var search = _parsePath.search;
	  var hash = _parsePath.hash;

	  return createPath({
	    pathname: pathname,
	    search: search + (search.indexOf('?') === -1 ? '?' : '&') + key + '=' + value,
	    hash: hash
	  });
	};

	var stripQueryStringValueFromPath = exports.stripQueryStringValueFromPath = function stripQueryStringValueFromPath(path, key) {
	  var _parsePath2 = parsePath(path);

	  var pathname = _parsePath2.pathname;
	  var search = _parsePath2.search;
	  var hash = _parsePath2.hash;

	  return createPath({
	    pathname: pathname,
	    search: search.replace(new RegExp('([?&])' + key + '=[a-zA-Z0-9]+(&?)'), function (match, prefix, suffix) {
	      return prefix === '?' ? prefix : suffix;
	    }),
	    hash: hash
	  });
	};

	var getQueryStringValueFromPath = exports.getQueryStringValueFromPath = function getQueryStringValueFromPath(path, key) {
	  var _parsePath3 = parsePath(path);

	  var search = _parsePath3.search;

	  var match = search.match(new RegExp('[?&]' + key + '=([a-zA-Z0-9]+)'));
	  return match && match[1];
	};

	var extractPath = function extractPath(string) {
	  var match = string.match(/^(https?:)?\/\/[^\/]*/);
	  return match == null ? string : string.substring(match[0].length);
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(path === pathname, 'A path must be pathname + search + hash only, not a full URL like "%s"', path) : void 0;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  if (location == null || typeof location === 'string') return location;

	  var basename = location.basename;
	  var pathname = location.pathname;
	  var search = location.search;
	  var hash = location.hash;

	  var path = (basename || '') + pathname;

	  if (search && search !== '?') path += search;

	  if (hash) path += hash;

	  return path;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _runTransitionHook = __webpack_require__(477);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(479);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var useBasename = function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var basename = options.basename;

	    var addBasename = function addBasename(location) {
	      if (!location) return location;

	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    };

	    var prependBasename = function prependBasename(location) {
	      if (!basename) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var pname = object.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, object, {
	        pathname: pathname
	      });
	    };

	    // Override all read methods with basename-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return addBasename(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, addBasename(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(addBasename(location));
	      });
	    };

	    // Override all write methods with basename-aware versions.
	    var push = function push(location) {
	      return history.push(prependBasename(location));
	    };

	    var replace = function replace(location) {
	      return history.replace(prependBasename(location));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(prependBasename(location));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(prependBasename(location));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useBasename;

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(478);

	var _PathUtils = __webpack_require__(479);

	var _createHistory = __webpack_require__(482);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	var _Actions = __webpack_require__(472);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var createStateStorage = function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	};

	var createMemoryHistory = function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var getCurrentLocation = function getCurrentLocation() {
	    var entry = entries[current];
	    var path = (0, _PathUtils.createPath)(entry);

	    var key = void 0,
	        state = void 0;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    }

	    var init = (0, _PathUtils.parsePath)(path);

	    return (0, _LocationUtils.createLocation)(_extends({}, init, { state: state }), undefined, key);
	  };

	  var canGo = function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  };

	  var go = function go(n) {
	    if (!n) return;

	    if (!canGo(n)) {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Cannot go(%s) there is not enough history', n) : void 0;

	      return;
	    }

	    current += n;
	    var currentLocation = getCurrentLocation();

	    // Change action to POP
	    history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	  };

	  var pushLocation = function pushLocation(location) {
	    current += 1;

	    if (current < entries.length) entries.splice(current);

	    entries.push(location);

	    saveState(location.key, location.state);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    entries[current] = location;
	    saveState(location.key, location.state);
	  };

	  var history = (0, _createHistory2.default)(_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;

	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    return (0, _LocationUtils.createLocation)(entry);
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : (0, _invariant2.default)(false) : void 0;
	  }

	  var storage = createStateStorage(entries);

	  var saveState = function saveState(key, state) {
	    return storage[key] = state;
	  };

	  var readState = function readState(key) {
	    return storage[key];
	  };

	  return _extends({}, history, {
	    canGo: canGo
	  });
	};

	exports.default = createMemoryHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(483);

	var _PathUtils = __webpack_require__(479);

	var _runTransitionHook = __webpack_require__(477);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _Actions = __webpack_require__(472);

	var _LocationUtils = __webpack_require__(478);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var createHistory = function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var getUserConfirmation = options.getUserConfirmation;
	  var pushLocation = options.pushLocation;
	  var replaceLocation = options.replaceLocation;
	  var go = options.go;
	  var keyLength = options.keyLength;

	  var currentLocation = void 0;
	  var pendingLocation = void 0;
	  var beforeListeners = [];
	  var listeners = [];
	  var allKeys = [];

	  var getCurrentIndex = function getCurrentIndex() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) return allKeys.indexOf(pendingLocation.key);

	    if (currentLocation) return allKeys.indexOf(currentLocation.key);

	    return -1;
	  };

	  var updateLocation = function updateLocation(nextLocation) {
	    var currentIndex = getCurrentIndex();

	    currentLocation = nextLocation;

	    if (currentLocation.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, currentIndex + 1), [currentLocation.key]);
	    } else if (currentLocation.action === _Actions.REPLACE) {
	      allKeys[currentIndex] = currentLocation.key;
	    }

	    listeners.forEach(function (listener) {
	      return listener(currentLocation);
	    });
	  };

	  var listenBefore = function listenBefore(listener) {
	    beforeListeners.push(listener);

	    return function () {
	      return beforeListeners = beforeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var listen = function listen(listener) {
	    listeners.push(listener);

	    return function () {
	      return listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, callback) {
	    (0, _AsyncUtils.loopAsync)(beforeListeners.length, function (index, next, done) {
	      (0, _runTransitionHook2.default)(beforeListeners[index], location, function (result) {
	        return result != null ? done(result) : next();
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          return callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  };

	  var transitionTo = function transitionTo(nextLocation) {
	    if (currentLocation && (0, _LocationUtils.locationsAreEqual)(currentLocation, nextLocation) || pendingLocation && (0, _LocationUtils.locationsAreEqual)(pendingLocation, nextLocation)) return; // Nothing to do

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted during confirmation

	      pendingLocation = null;

	      if (ok) {
	        // Treat PUSH to same path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = (0, _PathUtils.createPath)(currentLocation);
	          var nextPath = (0, _PathUtils.createPath)(nextLocation);

	          if (nextPath === prevPath && (0, _LocationUtils.statesAreEqual)(currentLocation.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (nextLocation.action === _Actions.POP) {
	          updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.PUSH) {
	          if (pushLocation(nextLocation) !== false) updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.REPLACE) {
	          if (replaceLocation(nextLocation) !== false) updateLocation(nextLocation);
	        }
	      } else if (currentLocation && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(currentLocation.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL
	      }
	    });
	  };

	  var push = function push(input) {
	    return transitionTo(createLocation(input, _Actions.PUSH));
	  };

	  var replace = function replace(input) {
	    return transitionTo(createLocation(input, _Actions.REPLACE));
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength || 6);
	  };

	  var createHref = function createHref(location) {
	    return (0, _PathUtils.createPath)(location);
	  };

	  var createLocation = function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];
	    return (0, _LocationUtils.createLocation)(location, action, key);
	  };

	  return {
	    getCurrentLocation: getCurrentLocation,
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: _PathUtils.createPath,
	    createHref: createHref,
	    createLocation: createLocation
	  };
	};

	exports.default = createHistory;

/***/ },
/* 483 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var loopAsync = exports.loopAsync = function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var isSync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  var done = function done() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    isDone = true;

	    if (isSync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = args;
	      return;
	    }

	    callback.apply(undefined, args);
	  };

	  var next = function next() {
	    if (isDone) return;

	    hasNext = true;

	    if (isSync) return; // Iterate instead of recursing if possible.

	    isSync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work(currentTurn++, next, done);
	    }

	    isSync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(undefined, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  };

	  next();
	};

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = useRouterHistory;

	var _useQueries = __webpack_require__(474);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(480);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	    return history;
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(459);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(450);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = function () {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    middlewares.forEach(function (middleware, index) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(middleware.renderRouterContext || middleware.renderRouteComponent, 'The middleware specified at index ' + index + ' does not appear to be ' + 'a valid React Router middleware.') : void 0;
	    });
	  }

	  var withContext = middlewares.map(function (middleware) {
	    return middleware.renderRouterContext;
	  }).filter(Boolean);
	  var withComponent = middlewares.map(function (middleware) {
	    return middleware.renderRouteComponent;
	  }).filter(Boolean);

	  var makeCreateElement = function makeCreateElement() {
	    var baseCreateElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _react.createElement;
	    return function (Component, props) {
	      return withComponent.reduceRight(function (previous, renderRouteComponent) {
	        return renderRouteComponent(previous, props);
	      }, baseCreateElement(Component, props));
	    };
	  };

	  return function (renderProps) {
	    return withContext.reduceRight(function (previous, renderRouterContext) {
	      return renderRouterContext(previous, renderProps);
	    }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
	      createElement: makeCreateElement(renderProps.createElement)
	    })));
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createBrowserHistory = __webpack_require__(487);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	var _createRouterHistory = __webpack_require__(493);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(488);

	var _BrowserProtocol = __webpack_require__(489);

	var BrowserProtocol = _interopRequireWildcard(_BrowserProtocol);

	var _RefreshProtocol = __webpack_require__(492);

	var RefreshProtocol = _interopRequireWildcard(_RefreshProtocol);

	var _DOMUtils = __webpack_require__(490);

	var _createHistory = __webpack_require__(482);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve clean URLs. You can force this
	 * behavior using { forceRefresh: true } in options.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var useRefresh = options.forceRefresh || !(0, _DOMUtils.supportsHistory)();
	  var Protocol = useRefresh ? RefreshProtocol : BrowserProtocol;

	  var getUserConfirmation = Protocol.getUserConfirmation;
	  var getCurrentLocation = Protocol.getCurrentLocation;
	  var pushLocation = Protocol.pushLocation;
	  var replaceLocation = Protocol.replaceLocation;
	  var go = Protocol.go;

	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = BrowserProtocol.startListener(history.transitionTo);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen
	  });
	};

	exports.default = createBrowserHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 488 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.go = exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getUserConfirmation = exports.getCurrentLocation = undefined;

	var _LocationUtils = __webpack_require__(478);

	var _DOMUtils = __webpack_require__(490);

	var _DOMStateStorage = __webpack_require__(491);

	var _PathUtils = __webpack_require__(479);

	var _ExecutionEnvironment = __webpack_require__(488);

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var needsHashchangeListener = _ExecutionEnvironment.canUseDOM && !(0, _DOMUtils.supportsPopstateOnHashchange)();

	var _createLocation = function _createLocation(historyState) {
	  var key = historyState && historyState.key;

	  return (0, _LocationUtils.createLocation)({
	    pathname: window.location.pathname,
	    search: window.location.search,
	    hash: window.location.hash,
	    state: key ? (0, _DOMStateStorage.readState)(key) : undefined
	  }, undefined, key);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  var historyState = void 0;
	  try {
	    historyState = window.history.state || {};
	  } catch (error) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    historyState = {};
	  }

	  return _createLocation(historyState);
	};

	var getUserConfirmation = exports.getUserConfirmation = function getUserConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	var startListener = exports.startListener = function startListener(listener) {
	  var handlePopState = function handlePopState(event) {
	    if (event.state !== undefined) // Ignore extraneous popstate events in WebKit
	      listener(_createLocation(event.state));
	  };

	  (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	  var handleUnpoppedHashChange = function handleUnpoppedHashChange() {
	    return listener(getCurrentLocation());
	  };

	  if (needsHashchangeListener) {
	    (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	  }

	  return function () {
	    (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	    if (needsHashchangeListener) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	    }
	  };
	};

	var updateLocation = function updateLocation(location, updateState) {
	  var state = location.state;
	  var key = location.key;

	  if (state !== undefined) (0, _DOMStateStorage.saveState)(key, state);

	  updateState({ key: key }, (0, _PathUtils.createPath)(location));
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.pushState(state, null, path);
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.replaceState(state, null, path);
	  });
	};

	var go = exports.go = function go(n) {
	  if (n) window.history.go(n);
	};

/***/ },
/* 490 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopstateOnHashchange = exports.supportsPopstateOnHashchange = function supportsPopstateOnHashchange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.readState = exports.saveState = undefined;

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var QuotaExceededErrors = {
	  QuotaExceededError: true,
	  QUOTA_EXCEEDED_ERR: true
	};

	var SecurityErrors = {
	  SecurityError: true
	};

	var KeyPrefix = '@@History/';

	var createKey = function createKey(key) {
	  return KeyPrefix + key;
	};

	var saveState = exports.saveState = function saveState(key, state) {
	  if (!window.sessionStorage) {
	    // Session storage is not available or hidden.
	    // sessionStorage is undefined in Internet Explorer when served via file protocol.
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available') : void 0;

	    return;
	  }

	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available due to security settings') : void 0;

	      return;
	    }

	    if (QuotaExceededErrors[error.name] && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : void 0;

	      return;
	    }

	    throw error;
	  }
	};

	var readState = exports.readState = function readState(key) {
	  var json = void 0;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to read state; sessionStorage is not available due to security settings') : void 0;

	      return undefined;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return undefined;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(489);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _LocationUtils = __webpack_require__(478);

	var _PathUtils = __webpack_require__(479);

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  return (0, _LocationUtils.createLocation)(window.location);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  window.location.href = (0, _PathUtils.createPath)(location);
	  return false; // Don't update location
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  window.location.replace((0, _PathUtils.createPath)(location));
	  return false; // Don't update location
	};

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	exports.default = function (createHistory) {
	  var history = void 0;
	  if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
	  return history;
	};

	var _useRouterHistory = __webpack_require__(484);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	module.exports = exports['default'];

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createHashHistory = __webpack_require__(495);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _createRouterHistory = __webpack_require__(493);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(447);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(488);

	var _DOMUtils = __webpack_require__(490);

	var _HashProtocol = __webpack_require__(496);

	var HashProtocol = _interopRequireWildcard(_HashProtocol);

	var _createHistory = __webpack_require__(482);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var DefaultQueryKey = '_k';

	var addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!' + path;
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substring(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '/' ? path.substring(1) : path;
	    },
	    decodePath: addLeadingSlash
	  },
	  slash: {
	    encodePath: addLeadingSlash,
	    decodePath: addLeadingSlash
	  }
	};

	var createHashHistory = function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Hash history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var queryKey = options.queryKey;
	  var hashType = options.hashType;

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(queryKey !== false, 'Using { queryKey: false } no longer works. Instead, just don\'t ' + 'use location state if you don\'t want a key in your URL query string') : void 0;

	  if (typeof queryKey !== 'string') queryKey = DefaultQueryKey;

	  if (hashType == null) hashType = 'slash';

	  if (!(hashType in HashPathCoders)) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Invalid hash type: %s', hashType) : void 0;

	    hashType = 'slash';
	  }

	  var pathCoder = HashPathCoders[hashType];

	  var getUserConfirmation = HashProtocol.getUserConfirmation;

	  var getCurrentLocation = function getCurrentLocation() {
	    return HashProtocol.getCurrentLocation(pathCoder, queryKey);
	  };

	  var pushLocation = function pushLocation(location) {
	    return HashProtocol.pushLocation(location, pathCoder, queryKey);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    return HashProtocol.replaceLocation(location, pathCoder, queryKey);
	  };

	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: HashProtocol.go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = HashProtocol.startListener(history.transitionTo, pathCoder, queryKey);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  var goIsSupportedWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var go = function go(n) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;

	    history.go(n);
	  };

	  var createHref = function createHref(path) {
	    return '#' + pathCoder.encodePath(history.createHref(path));
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    go: go,
	    createHref: createHref
	  });
	};

	exports.default = createHashHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(489);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	var _LocationUtils = __webpack_require__(478);

	var _DOMUtils = __webpack_require__(490);

	var _DOMStateStorage = __webpack_require__(491);

	var _PathUtils = __webpack_require__(479);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var HashChangeEvent = 'hashchange';

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation(pathCoder, queryKey) {
	  var path = pathCoder.decodePath(getHashPath());
	  var key = (0, _PathUtils.getQueryStringValueFromPath)(path, queryKey);

	  var state = void 0;
	  if (key) {
	    path = (0, _PathUtils.stripQueryStringValueFromPath)(path, queryKey);
	    state = (0, _DOMStateStorage.readState)(key);
	  }

	  var init = (0, _PathUtils.parsePath)(path);
	  init.state = state;

	  return (0, _LocationUtils.createLocation)(init, undefined, key);
	};

	var prevLocation = void 0;

	var startListener = exports.startListener = function startListener(listener, pathCoder, queryKey) {
	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = pathCoder.encodePath(path);

	    if (path !== encodedPath) {
	      // Always be sure we have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var currentLocation = getCurrentLocation(pathCoder, queryKey);

	      if (prevLocation && currentLocation.key && prevLocation.key === currentLocation.key) return; // Ignore extraneous hashchange events

	      prevLocation = currentLocation;

	      listener(currentLocation);
	    }
	  };

	  // Ensure the hash is encoded properly.
	  var path = getHashPath();
	  var encodedPath = pathCoder.encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);

	  return function () {
	    return (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	  };
	};

	var updateLocation = function updateLocation(location, pathCoder, queryKey, updateHash) {
	  var state = location.state;
	  var key = location.key;

	  var path = pathCoder.encodePath((0, _PathUtils.createPath)(location));

	  if (state !== undefined) {
	    path = (0, _PathUtils.addQueryStringValueToPath)(path, queryKey, key);
	    (0, _DOMStateStorage.saveState)(key, state);
	  }

	  prevLocation = location;

	  updateHash(path);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) {
	      pushHashPath(path);
	    } else {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'You cannot PUSH the same path using hash history') : void 0;
	    }
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) replaceHashPath(path);
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _Card = __webpack_require__(381);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _Hours = __webpack_require__(498);

	var _Hours2 = _interopRequireDefault(_Hours);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Cardaa = function Cardaa() {
	  return _react2.default.createElement(
	    _MuiThemeProvider2.default,
	    { muiTheme: (0, _getMuiTheme2.default)() },
	    _react2.default.createElement(
	      _Card.Card,
	      null,
	      _react2.default.createElement(_Card.CardTitle, { title: '24Hours' }),
	      _react2.default.createElement(
	        _Card.CardText,
	        null,
	        _react2.default.createElement(_Hours2.default, null)
	      )
	    )
	  );
	};

	exports.default = Cardaa;

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echartsForReact = __webpack_require__(499);

	var _echartsForReact2 = _interopRequireDefault(_echartsForReact);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Hours = _react2.default.createClass({
	    displayName: 'Hours',

	    propTypes: {},
	    getOtion: function getOtion() {
	        var option = {

	            grid: {
	                left: '3%',
	                right: '4%',
	                bottom: '13%',
	                containLabel: true
	            },

	            xAxis: {
	                type: 'category',
	                boundaryGap: false,
	                data: ['14', '15', '16', '17', '18']
	            },
	            yAxis: {
	                type: 'value',
	                nameGap: '20'

	            },
	            series: [{

	                type: 'line',
	                stack: '总量',
	                data: [42, 42, 41, 40, 37]

	            }]
	        };
	        return option;
	    },
	    render: function render() {

	        return _react2.default.createElement(
	            'div',
	            { className: 'examples' },
	            _react2.default.createElement(
	                'div',
	                { className: 'parent' },
	                _react2.default.createElement(_echartsForReact2.default, {
	                    option: this.getOtion(),
	                    style: { height: '200px', width: '100%' },
	                    className: 'react_for_echarts' })
	            )
	        );
	    }
	});

	exports.default = Hours;

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _echarts = __webpack_require__(500);

	var _echarts2 = _interopRequireDefault(_echarts);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _elementResizeEvent = __webpack_require__(894);

	var _elementResizeEvent2 = _interopRequireDefault(_elementResizeEvent);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var ReactEcharts = _react2['default'].createClass({
	    displayName: 'ReactEcharts',

	    propTypes: {
	        option: _react2['default'].PropTypes.object.isRequired,
	        notMerge: _react2['default'].PropTypes.bool,
	        lazyUpdate: _react2['default'].PropTypes.bool,
	        style: _react2['default'].PropTypes.object,
	        className: _react2['default'].PropTypes.string,
	        theme: _react2['default'].PropTypes.string,
	        onChartReady: _react2['default'].PropTypes.func,
	        showLoading: _react2['default'].PropTypes.bool,
	        onEvents: _react2['default'].PropTypes.object
	    },
	    // first add
	    componentDidMount: function componentDidMount() {
	        var echartObj = this.renderEchartDom();
	        var onEvents = this.props.onEvents || {};

	        this.bindEvents(echartObj, onEvents);
	        // on chart ready
	        if (typeof this.props.onChartReady === 'function') this.props.onChartReady(echartObj);

	        // on resize
	        (0, _elementResizeEvent2['default'])(this.refs.echartsDom, function () {
	            echartObj.resize();
	        });
	    },

	    // update
	    componentDidUpdate: function componentDidUpdate() {
	        this.renderEchartDom();
	        this.bindEvents(this.getEchartsInstance(), this.props.onEvents || []);
	    },

	    // remove
	    componentWillUnmount: function componentWillUnmount() {
	        _echarts2['default'].dispose(this.refs.echartsDom);
	    },

	    //bind the events
	    bindEvents: function bindEvents(instance, events) {
	        var _loop = function _loop(eventName) {
	            // ignore the event config which not satisfy
	            if (typeof eventName === 'string' && typeof events[eventName] === 'function') {
	                // binding event
	                instance.off(eventName);
	                instance.on(eventName, function (param) {
	                    events[eventName](param, instance);
	                });
	            }
	        };

	        for (var eventName in events) {
	            _loop(eventName);
	        }
	    },

	    // render the dom
	    renderEchartDom: function renderEchartDom() {
	        // init the echart object
	        var echartObj = this.getEchartsInstance();
	        // set the echart option
	        echartObj.setOption(this.props.option, this.props.notMerge || false, this.props.lazyUpdate || false);
	        // set loading mask
	        if (this.props.showLoading) echartObj.showLoading();else echartObj.hideLoading();

	        return echartObj;
	    },
	    getEchartsInstance: function getEchartsInstance() {
	        // return the echart object
	        return _echarts2['default'].getInstanceByDom(this.refs.echartsDom) || _echarts2['default'].init(this.refs.echartsDom, this.props.theme);
	    },
	    render: function render() {
	        var style = this.props.style || {
	            height: '300px'
	        };
	        // for render
	        return _react2['default'].createElement('div', { ref: 'echartsDom',
	            className: this.props.className,
	            style: style });
	    }
	});
	module.exports = ReactEcharts;

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Export echarts as CommonJS module
	 */
	module.exports = __webpack_require__(501);

	// Import all charts and components
	__webpack_require__(600);
	__webpack_require__(634);
	__webpack_require__(641);
	__webpack_require__(650);
	__webpack_require__(654);

	__webpack_require__(664);
	__webpack_require__(685);
	__webpack_require__(697);
	__webpack_require__(718);
	__webpack_require__(722);
	__webpack_require__(726);
	__webpack_require__(741);
	__webpack_require__(747);
	__webpack_require__(754);
	__webpack_require__(760);
	__webpack_require__(764);
	__webpack_require__(773);
	__webpack_require__(777);
	__webpack_require__(780);

	__webpack_require__(791);
	__webpack_require__(613);
	__webpack_require__(792);
	__webpack_require__(798);
	__webpack_require__(802);
	__webpack_require__(813);
	__webpack_require__(727);
	__webpack_require__(781);
	__webpack_require__(816);

	__webpack_require__(827);

	__webpack_require__(828);
	__webpack_require__(842);

	__webpack_require__(857);
	__webpack_require__(863);
	__webpack_require__(866);

	__webpack_require__(869);
	__webpack_require__(878);

	__webpack_require__(890);

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// Enable DEV mode when using source code without build. which has no __DEV__ variable
	// In build process 'typeof __DEV__' will be replace with 'boolean'
	// So this code will be removed or disabled anyway after built.
	if (typeof __DEV__ === 'undefined') {
	    // In browser
	    if (typeof window !== 'undefined') {
	        window.__DEV__ = true;
	    }
	    // In node
	    else if (typeof global !== 'undefined') {
	            global.__DEV__ = true;
	        }
	}

	/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */

	/**
	 * @module echarts
	 */

	var env = __webpack_require__(502);

	var GlobalModel = __webpack_require__(503);
	var ExtensionAPI = __webpack_require__(525);
	var CoordinateSystemManager = __webpack_require__(526);
	var OptionManager = __webpack_require__(527);

	var ComponentModel = __webpack_require__(519);
	var SeriesModel = __webpack_require__(528);

	var ComponentView = __webpack_require__(529);
	var ChartView = __webpack_require__(542);
	var graphic = __webpack_require__(543);
	var modelUtil = __webpack_require__(505);
	var throttle = __webpack_require__(581);

	var zrender = __webpack_require__(582);
	var zrUtil = __webpack_require__(504);
	var colorTool = __webpack_require__(539);
	var Eventful = __webpack_require__(533);
	var timsort = __webpack_require__(586);

	var each = zrUtil.each;
	var parseClassType = ComponentModel.parseClassType;

	var PRIORITY_PROCESSOR_FILTER = 1000;
	var PRIORITY_PROCESSOR_STATISTIC = 5000;

	var PRIORITY_VISUAL_LAYOUT = 1000;
	var PRIORITY_VISUAL_GLOBAL = 2000;
	var PRIORITY_VISUAL_CHART = 3000;
	var PRIORITY_VISUAL_COMPONENT = 4000;
	// FIXME
	// necessary?
	var PRIORITY_VISUAL_BRUSH = 5000;

	// Main process have three entries: `setOption`, `dispatchAction` and `resize`,
	// where they must not be invoked nestedly, except the only case: invoke
	// dispatchAction with updateMethod "none" in main process.
	// This flag is used to carry out this rule.
	// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).
	var IN_MAIN_PROCESS = '__flagInMainProcess';
	var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';
	var OPTION_UPDATED = '__optionUpdated';
	var ACTION_REG = /^[a-zA-Z0-9_]+$/;

	function createRegisterEventWithLowercaseName(method) {
	    return function (eventName, handler, context) {
	        // Event name is all lowercase
	        eventName = eventName && eventName.toLowerCase();
	        Eventful.prototype[method].call(this, eventName, handler, context);
	    };
	}

	/**
	 * @module echarts~MessageCenter
	 */
	function MessageCenter() {
	    Eventful.call(this);
	}
	MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	zrUtil.mixin(MessageCenter, Eventful);

	/**
	 * @module echarts~ECharts
	 */
	function ECharts(dom, theme, opts) {
	    opts = opts || {};

	    // Get theme by name
	    if (typeof theme === 'string') {
	        theme = themeStorage[theme];
	    }

	    /**
	     * @type {string}
	     */
	    this.id;
	    /**
	     * Group id
	     * @type {string}
	     */
	    this.group;
	    /**
	     * @type {HTMLDomElement}
	     * @private
	     */
	    this._dom = dom;
	    /**
	     * @type {module:zrender/ZRender}
	     * @private
	     */
	    var zr = this._zr = zrender.init(dom, {
	        renderer: opts.renderer || 'canvas',
	        devicePixelRatio: opts.devicePixelRatio,
	        width: opts.width,
	        height: opts.height
	    });

	    /**
	     * Expect 60 pfs.
	     * @type {Function}
	     * @private
	     */
	    this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);

	    /**
	     * @type {Object}
	     * @private
	     */
	    this._theme = zrUtil.clone(theme);

	    /**
	     * @type {Array.<module:echarts/view/Chart>}
	     * @private
	     */
	    this._chartsViews = [];

	    /**
	     * @type {Object.<string, module:echarts/view/Chart>}
	     * @private
	     */
	    this._chartsMap = {};

	    /**
	     * @type {Array.<module:echarts/view/Component>}
	     * @private
	     */
	    this._componentsViews = [];

	    /**
	     * @type {Object.<string, module:echarts/view/Component>}
	     * @private
	     */
	    this._componentsMap = {};

	    /**
	     * @type {module:echarts/ExtensionAPI}
	     * @private
	     */
	    this._api = new ExtensionAPI(this);

	    /**
	     * @type {module:echarts/CoordinateSystem}
	     * @private
	     */
	    this._coordSysMgr = new CoordinateSystemManager();

	    Eventful.call(this);

	    /**
	     * @type {module:echarts~MessageCenter}
	     * @private
	     */
	    this._messageCenter = new MessageCenter();

	    // Init mouse events
	    this._initEvents();

	    // In case some people write `window.onresize = chart.resize`
	    this.resize = zrUtil.bind(this.resize, this);

	    // Can't dispatch action during rendering procedure
	    this._pendingActions = [];
	    // Sort on demand
	    function prioritySortFunc(a, b) {
	        return a.prio - b.prio;
	    }
	    timsort(visualFuncs, prioritySortFunc);
	    timsort(dataProcessorFuncs, prioritySortFunc);

	    zr.animation.on('frame', this._onframe, this);
	}

	var echartsProto = ECharts.prototype;

	echartsProto._onframe = function () {
	    // Lazy update
	    if (this[OPTION_UPDATED]) {
	        var silent = this[OPTION_UPDATED].silent;

	        this[IN_MAIN_PROCESS] = true;

	        updateMethods.prepareAndUpdate.call(this);

	        this[IN_MAIN_PROCESS] = false;

	        this[OPTION_UPDATED] = false;

	        flushPendingActions.call(this, silent);

	        triggerUpdatedEvent.call(this, silent);
	    }
	};
	/**
	 * @return {HTMLDomElement}
	 */
	echartsProto.getDom = function () {
	    return this._dom;
	};

	/**
	 * @return {module:zrender~ZRender}
	 */
	echartsProto.getZr = function () {
	    return this._zr;
	};

	/**
	 * Usage:
	 * chart.setOption(option, notMerge, lazyUpdate);
	 * chart.setOption(option, {
	 *     notMerge: ...,
	 *     lazyUpdate: ...,
	 *     silent: ...
	 * });
	 *
	 * @param {Object} option
	 * @param {Object|boolean} [opts] opts or notMerge.
	 * @param {boolean} [opts.notMerge=false]
	 * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
	 */
	echartsProto.setOption = function (option, notMerge, lazyUpdate) {
	    if (__DEV__) {
	        zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');
	    }

	    var silent;
	    if (zrUtil.isObject(notMerge)) {
	        lazyUpdate = notMerge.lazyUpdate;
	        silent = notMerge.silent;
	        notMerge = notMerge.notMerge;
	    }

	    this[IN_MAIN_PROCESS] = true;

	    if (!this._model || notMerge) {
	        var optionManager = new OptionManager(this._api);
	        var theme = this._theme;
	        var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);
	        ecModel.init(null, null, theme, optionManager);
	    }

	    // FIXME
	    // ugly
	    this.__lastOnlyGraphic = !!(option && option.graphic);
	    zrUtil.each(option, function (o, mainType) {
	        mainType !== 'graphic' && (this.__lastOnlyGraphic = false);
	    }, this);

	    this._model.setOption(option, optionPreprocessorFuncs);

	    if (lazyUpdate) {
	        this[OPTION_UPDATED] = { silent: silent };
	        this[IN_MAIN_PROCESS] = false;
	    } else {
	        updateMethods.prepareAndUpdate.call(this);
	        // Ensure zr refresh sychronously, and then pixel in canvas can be
	        // fetched after `setOption`.
	        this._zr.flush();

	        this[OPTION_UPDATED] = false;
	        this[IN_MAIN_PROCESS] = false;

	        flushPendingActions.call(this, silent);
	        triggerUpdatedEvent.call(this, silent);
	    }
	};

	/**
	 * @DEPRECATED
	 */
	echartsProto.setTheme = function () {
	    console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	};

	/**
	 * @return {module:echarts/model/Global}
	 */
	echartsProto.getModel = function () {
	    return this._model;
	};

	/**
	 * @return {Object}
	 */
	echartsProto.getOption = function () {
	    return this._model && this._model.getOption();
	};

	/**
	 * @return {number}
	 */
	echartsProto.getWidth = function () {
	    return this._zr.getWidth();
	};

	/**
	 * @return {number}
	 */
	echartsProto.getHeight = function () {
	    return this._zr.getHeight();
	};

	/**
	 * Get canvas which has all thing rendered
	 * @param {Object} opts
	 * @param {string} [opts.backgroundColor]
	 */
	echartsProto.getRenderedCanvas = function (opts) {
	    if (!env.canvasSupported) {
	        return;
	    }
	    opts = opts || {};
	    opts.pixelRatio = opts.pixelRatio || 1;
	    opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
	    var zr = this._zr;
	    var list = zr.storage.getDisplayList();
	    // Stop animations
	    zrUtil.each(list, function (el) {
	        el.stopAnimation(true);
	    });
	    return zr.painter.getRenderedCanvas(opts);
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 * @param {string} [opts.excludeComponents]
	 */
	echartsProto.getDataURL = function (opts) {
	    opts = opts || {};
	    var excludeComponents = opts.excludeComponents;
	    var ecModel = this._model;
	    var excludesComponentViews = [];
	    var self = this;

	    each(excludeComponents, function (componentType) {
	        ecModel.eachComponent({
	            mainType: componentType
	        }, function (component) {
	            var view = self._componentsMap[component.__viewId];
	            if (!view.group.ignore) {
	                excludesComponentViews.push(view);
	                view.group.ignore = true;
	            }
	        });
	    });

	    var url = this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));

	    each(excludesComponentViews, function (view) {
	        view.group.ignore = false;
	    });
	    return url;
	};

	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 */
	echartsProto.getConnectedDataURL = function (opts) {
	    if (!env.canvasSupported) {
	        return;
	    }
	    var groupId = this.group;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var MAX_NUMBER = Infinity;
	    if (connectedGroups[groupId]) {
	        var left = MAX_NUMBER;
	        var top = MAX_NUMBER;
	        var right = -MAX_NUMBER;
	        var bottom = -MAX_NUMBER;
	        var canvasList = [];
	        var dpr = opts && opts.pixelRatio || 1;

	        zrUtil.each(instances, function (chart, id) {
	            if (chart.group === groupId) {
	                var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));
	                var boundingRect = chart.getDom().getBoundingClientRect();
	                left = mathMin(boundingRect.left, left);
	                top = mathMin(boundingRect.top, top);
	                right = mathMax(boundingRect.right, right);
	                bottom = mathMax(boundingRect.bottom, bottom);
	                canvasList.push({
	                    dom: canvas,
	                    left: boundingRect.left,
	                    top: boundingRect.top
	                });
	            }
	        });

	        left *= dpr;
	        top *= dpr;
	        right *= dpr;
	        bottom *= dpr;
	        var width = right - left;
	        var height = bottom - top;
	        var targetCanvas = zrUtil.createCanvas();
	        targetCanvas.width = width;
	        targetCanvas.height = height;
	        var zr = zrender.init(targetCanvas);

	        each(canvasList, function (item) {
	            var img = new graphic.Image({
	                style: {
	                    x: item.left * dpr - left,
	                    y: item.top * dpr - top,
	                    image: item.dom
	                }
	            });
	            zr.add(img);
	        });
	        zr.refreshImmediately();

	        return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	    } else {
	        return this.getDataURL(opts);
	    }
	};

	/**
	 * Convert from logical coordinate system to pixel coordinate system.
	 * See CoordinateSystem#convertToPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId, geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName,
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */
	echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');

	/**
	 * Convert from pixel coordinate system to logical coordinate system.
	 * See CoordinateSystem#convertFromPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */
	echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');

	function doConvertPixel(methodName, finder, value) {
	    var ecModel = this._model;
	    var coordSysList = this._coordSysMgr.getCoordinateSystems();
	    var result;

	    finder = modelUtil.parseFinder(ecModel, finder);

	    for (var i = 0; i < coordSysList.length; i++) {
	        var coordSys = coordSysList[i];
	        if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {
	            return result;
	        }
	    }

	    if (__DEV__) {
	        console.warn('No coordinate system that supports ' + methodName + ' found by the given finder.');
	    }
	}

	/**
	 * Is the specified coordinate systems or components contain the given pixel point.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {boolean} result
	 */
	echartsProto.containPixel = function (finder, value) {
	    var ecModel = this._model;
	    var result;

	    finder = modelUtil.parseFinder(ecModel, finder);

	    zrUtil.each(finder, function (models, key) {
	        key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {
	            var coordSys = model.coordinateSystem;
	            if (coordSys && coordSys.containPoint) {
	                result |= !!coordSys.containPoint(value);
	            } else if (key === 'seriesModels') {
	                var view = this._chartsMap[model.__viewId];
	                if (view && view.containPoint) {
	                    result |= view.containPoint(value, model);
	                } else {
	                    if (__DEV__) {
	                        console.warn(key + ': ' + (view ? 'The found component do not support containPoint.' : 'No view mapping to the found component.'));
	                    }
	                }
	            } else {
	                if (__DEV__) {
	                    console.warn(key + ': containPoint is not supported');
	                }
	            }
	        }, this);
	    }, this);

	    return !!result;
	};

	/**
	 * Get visual from series or data.
	 * @param {string|Object} finder
	 *        If string, e.g., 'series', means {seriesIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            dataIndex / dataIndexInside
	 *        }
	 *        If dataIndex is not specified, series visual will be fetched,
	 *        but not data item visual.
	 *        If all of seriesIndex, seriesId, seriesName are not specified,
	 *        visual will be fetched from first series.
	 * @param {string} visualType 'color', 'symbol', 'symbolSize'
	 */
	echartsProto.getVisual = function (finder, visualType) {
	    var ecModel = this._model;

	    finder = modelUtil.parseFinder(ecModel, finder, { defaultMainType: 'series' });

	    var seriesModel = finder.seriesModel;

	    if (__DEV__) {
	        if (!seriesModel) {
	            console.warn('There is no specified seires model');
	        }
	    }

	    var data = seriesModel.getData();

	    var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;

	    return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);
	};

	var updateMethods = {

	    /**
	     * @param {Object} payload
	     * @private
	     */
	    update: function update(payload) {
	        // console.time && console.time('update');

	        var ecModel = this._model;
	        var api = this._api;
	        var coordSysMgr = this._coordSysMgr;
	        var zr = this._zr;
	        // update before setOption
	        if (!ecModel) {
	            return;
	        }

	        // Fixme First time update ?
	        ecModel.restoreData();

	        // TODO
	        // Save total ecModel here for undo/redo (after restoring data and before processing data).
	        // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.

	        // Create new coordinate system each update
	        // In LineView may save the old coordinate system and use it to get the orignal point
	        coordSysMgr.create(this._model, this._api);

	        processData.call(this, ecModel, api);

	        stackSeriesData.call(this, ecModel);

	        coordSysMgr.update(ecModel, api);

	        doVisualEncoding.call(this, ecModel, payload);

	        doRender.call(this, ecModel, payload);

	        // Set background
	        var backgroundColor = ecModel.get('backgroundColor') || 'transparent';

	        var painter = zr.painter;
	        // TODO all use clearColor ?
	        if (painter.isSingleCanvas && painter.isSingleCanvas()) {
	            zr.configLayer(0, {
	                clearColor: backgroundColor
	            });
	        } else {
	            // In IE8
	            if (!env.canvasSupported) {
	                var colorArr = colorTool.parse(backgroundColor);
	                backgroundColor = colorTool.stringify(colorArr, 'rgb');
	                if (colorArr[3] === 0) {
	                    backgroundColor = 'transparent';
	                }
	            }
	            if (backgroundColor.colorStops || backgroundColor.image) {
	                // Gradient background
	                // FIXME Fixed layer？
	                zr.configLayer(0, {
	                    clearColor: backgroundColor
	                });
	                this[HAS_GRADIENT_OR_PATTERN_BG] = true;

	                this._dom.style.background = 'transparent';
	            } else {
	                if (this[HAS_GRADIENT_OR_PATTERN_BG]) {
	                    zr.configLayer(0, {
	                        clearColor: null
	                    });
	                }
	                this[HAS_GRADIENT_OR_PATTERN_BG] = false;

	                this._dom.style.background = backgroundColor;
	            }
	        }

	        // console.time && console.timeEnd('update');
	    },

	    /**
	     * @param {Object} payload
	     * @private
	     */
	    updateView: function updateView(payload) {
	        var ecModel = this._model;

	        // update before setOption
	        if (!ecModel) {
	            return;
	        }

	        ecModel.eachSeries(function (seriesModel) {
	            seriesModel.getData().clearAllVisual();
	        });

	        doVisualEncoding.call(this, ecModel, payload);

	        invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
	    },

	    /**
	     * @param {Object} payload
	     * @private
	     */
	    updateVisual: function updateVisual(payload) {
	        var ecModel = this._model;

	        // update before setOption
	        if (!ecModel) {
	            return;
	        }

	        ecModel.eachSeries(function (seriesModel) {
	            seriesModel.getData().clearAllVisual();
	        });

	        doVisualEncoding.call(this, ecModel, payload, true);

	        invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
	    },

	    /**
	     * @param {Object} payload
	     * @private
	     */
	    updateLayout: function updateLayout(payload) {
	        var ecModel = this._model;

	        // update before setOption
	        if (!ecModel) {
	            return;
	        }

	        doLayout.call(this, ecModel, payload);

	        invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
	    },

	    /**
	     * @param {Object} payload
	     * @private
	     */
	    prepareAndUpdate: function prepareAndUpdate(payload) {
	        var ecModel = this._model;

	        prepareView.call(this, 'component', ecModel);

	        prepareView.call(this, 'chart', ecModel);

	        // FIXME
	        // ugly
	        if (this.__lastOnlyGraphic) {
	            each(this._componentsViews, function (componentView) {
	                var componentModel = componentView.__model;
	                if (componentModel && componentModel.mainType === 'graphic') {
	                    componentView.render(componentModel, ecModel, this._api, payload);
	                    updateZ(componentModel, componentView);
	                }
	            }, this);
	            this.__lastOnlyGraphic = false;
	        } else {
	            updateMethods.update.call(this, payload);
	        }
	    }
	};

	/**
	 * @private
	 */
	function updateDirectly(ecIns, method, payload, mainType, subType) {
	    var ecModel = ecIns._model;
	    var query = {};
	    query[mainType + 'Id'] = payload[mainType + 'Id'];
	    query[mainType + 'Index'] = payload[mainType + 'Index'];
	    query[mainType + 'Name'] = payload[mainType + 'Name'];

	    var condition = { mainType: mainType, query: query };
	    subType && (condition.subType = subType); // subType may be '' by parseClassType;

	    // If dispatchAction before setOption, do nothing.
	    ecModel && ecModel.eachComponent(condition, function (model, index) {
	        var view = ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId];
	        if (view && view.__alive) {
	            view[method](model, ecModel, ecIns._api, payload);
	        }
	    }, ecIns);
	}

	/**
	 * Resize the chart
	 * @param {Object} opts
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @param {boolean} [opts.silent=false]
	 */
	echartsProto.resize = function (opts) {
	    if (__DEV__) {
	        zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');
	    }

	    this[IN_MAIN_PROCESS] = true;

	    this._zr.resize(opts);

	    var optionChanged = this._model && this._model.resetOption('media');
	    var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';

	    updateMethods[updateMethod].call(this);

	    // Resize loading effect
	    this._loadingFX && this._loadingFX.resize();

	    this[IN_MAIN_PROCESS] = false;

	    var silent = opts && opts.silent;

	    flushPendingActions.call(this, silent);

	    triggerUpdatedEvent.call(this, silent);
	};

	/**
	 * Show loading effect
	 * @param  {string} [name='default']
	 * @param  {Object} [cfg]
	 */
	echartsProto.showLoading = function (name, cfg) {
	    if (zrUtil.isObject(name)) {
	        cfg = name;
	        name = '';
	    }
	    name = name || 'default';

	    this.hideLoading();
	    if (!loadingEffects[name]) {
	        if (__DEV__) {
	            console.warn('Loading effects ' + name + ' not exists.');
	        }
	        return;
	    }
	    var el = loadingEffects[name](this._api, cfg);
	    var zr = this._zr;
	    this._loadingFX = el;

	    zr.add(el);
	};

	/**
	 * Hide loading effect
	 */
	echartsProto.hideLoading = function () {
	    this._loadingFX && this._zr.remove(this._loadingFX);
	    this._loadingFX = null;
	};

	/**
	 * @param {Object} eventObj
	 * @return {Object}
	 */
	echartsProto.makeActionFromEvent = function (eventObj) {
	    var payload = zrUtil.extend({}, eventObj);
	    payload.type = eventActionMap[eventObj.type];
	    return payload;
	};

	/**
	 * @pubilc
	 * @param {Object} payload
	 * @param {string} [payload.type] Action type
	 * @param {Object|boolean} [opt] If pass boolean, means opt.silent
	 * @param {boolean} [opt.silent=false] Whether trigger events.
	 * @param {boolean} [opt.flush=undefined]
	 *                  true: Flush immediately, and then pixel in canvas can be fetched
	 *                      immediately. Caution: it might affect performance.
	 *                  false: Not not flush.
	 *                  undefined: Auto decide whether perform flush.
	 */
	echartsProto.dispatchAction = function (payload, opt) {
	    if (!zrUtil.isObject(opt)) {
	        opt = { silent: !!opt };
	    }

	    if (!actions[payload.type]) {
	        return;
	    }

	    // if (__DEV__) {
	    //     zrUtil.assert(
	    //         !this[IN_MAIN_PROCESS],
	    //         '`dispatchAction` should not be called during main process.'
	    //         + 'unless updateMathod is "none".'
	    //     );
	    // }

	    // May dispatchAction in rendering procedure
	    if (this[IN_MAIN_PROCESS]) {
	        this._pendingActions.push(payload);
	        return;
	    }

	    doDispatchAction.call(this, payload, opt.silent);

	    if (opt.flush) {
	        this._zr.flush(true);
	    } else if (opt.flush !== false && env.browser.weChat) {
	        // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
	        // hang when sliding page (on touch event), which cause that zr does not
	        // refresh util user interaction finished, which is not expected.
	        // But `dispatchAction` may be called too frequently when pan on touch
	        // screen, which impacts performance if do not throttle them.
	        this._throttledZrFlush();
	    }

	    flushPendingActions.call(this, opt.silent);

	    triggerUpdatedEvent.call(this, opt.silent);
	};

	function doDispatchAction(payload, silent) {
	    var payloadType = payload.type;
	    var actionWrap = actions[payloadType];
	    var actionInfo = actionWrap.actionInfo;

	    var cptType = (actionInfo.update || 'update').split(':');
	    var updateMethod = cptType.pop();
	    cptType = cptType[0] && parseClassType(cptType[0]);

	    this[IN_MAIN_PROCESS] = true;

	    var payloads = [payload];
	    var batched = false;
	    // Batch action
	    if (payload.batch) {
	        batched = true;
	        payloads = zrUtil.map(payload.batch, function (item) {
	            item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	            item.batch = null;
	            return item;
	        });
	    }

	    var eventObjBatch = [];
	    var eventObj;
	    var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';

	    for (var i = 0; i < payloads.length; i++) {
	        var batchItem = payloads[i];
	        // Action can specify the event by return it.
	        eventObj = actionWrap.action(batchItem, this._model);
	        // Emit event outside
	        eventObj = eventObj || zrUtil.extend({}, batchItem);
	        // Convert type to eventType
	        eventObj.type = actionInfo.event || eventObj.type;
	        eventObjBatch.push(eventObj);

	        // light update does not perform data process, layout and visual.
	        if (isHighDown) {
	            // method, payload, mainType, subType
	            updateDirectly(this, updateMethod, batchItem, 'series');
	        } else if (cptType) {
	            updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
	        }
	    }

	    if (updateMethod !== 'none' && !isHighDown && !cptType) {
	        // Still dirty
	        if (this[OPTION_UPDATED]) {
	            // FIXME Pass payload ?
	            updateMethods.prepareAndUpdate.call(this, payload);
	            this[OPTION_UPDATED] = false;
	        } else {
	            updateMethods[updateMethod].call(this, payload);
	        }
	    }

	    // Follow the rule of action batch
	    if (batched) {
	        eventObj = {
	            type: actionInfo.event || payloadType,
	            batch: eventObjBatch
	        };
	    } else {
	        eventObj = eventObjBatch[0];
	    }

	    this[IN_MAIN_PROCESS] = false;

	    !silent && this._messageCenter.trigger(eventObj.type, eventObj);
	}

	function flushPendingActions(silent) {
	    var pendingActions = this._pendingActions;
	    while (pendingActions.length) {
	        var payload = pendingActions.shift();
	        doDispatchAction.call(this, payload, silent);
	    }
	}

	function triggerUpdatedEvent(silent) {
	    !silent && this.trigger('updated');
	}

	/**
	 * Register event
	 * @method
	 */
	echartsProto.on = createRegisterEventWithLowercaseName('on');
	echartsProto.off = createRegisterEventWithLowercaseName('off');
	echartsProto.one = createRegisterEventWithLowercaseName('one');

	/**
	 * @param {string} methodName
	 * @private
	 */
	function invokeUpdateMethod(methodName, ecModel, payload) {
	    var api = this._api;

	    // Update all components
	    each(this._componentsViews, function (component) {
	        var componentModel = component.__model;
	        component[methodName](componentModel, ecModel, api, payload);

	        updateZ(componentModel, component);
	    }, this);

	    // Upate all charts
	    ecModel.eachSeries(function (seriesModel, idx) {
	        var chart = this._chartsMap[seriesModel.__viewId];
	        chart[methodName](seriesModel, ecModel, api, payload);

	        updateZ(seriesModel, chart);

	        updateProgressiveAndBlend(seriesModel, chart);
	    }, this);

	    // If use hover layer
	    updateHoverLayerStatus(this._zr, ecModel);
	}

	/**
	 * Prepare view instances of charts and components
	 * @param  {module:echarts/model/Global} ecModel
	 * @private
	 */
	function prepareView(type, ecModel) {
	    var isComponent = type === 'component';
	    var viewList = isComponent ? this._componentsViews : this._chartsViews;
	    var viewMap = isComponent ? this._componentsMap : this._chartsMap;
	    var zr = this._zr;

	    for (var i = 0; i < viewList.length; i++) {
	        viewList[i].__alive = false;
	    }

	    ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
	        if (isComponent) {
	            if (componentType === 'series') {
	                return;
	            }
	        } else {
	            model = componentType;
	        }

	        // Consider: id same and type changed.
	        var viewId = model.id + '_' + model.type;
	        var view = viewMap[viewId];
	        if (!view) {
	            var classType = parseClassType(model.type);
	            var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);
	            if (Clazz) {
	                view = new Clazz();
	                view.init(ecModel, this._api);
	                viewMap[viewId] = view;
	                viewList.push(view);
	                zr.add(view.group);
	            } else {
	                // Error
	                return;
	            }
	        }

	        model.__viewId = viewId;
	        view.__alive = true;
	        view.__id = viewId;
	        view.__model = model;
	    }, this);

	    for (var i = 0; i < viewList.length;) {
	        var view = viewList[i];
	        if (!view.__alive) {
	            zr.remove(view.group);
	            view.dispose(ecModel, this._api);
	            viewList.splice(i, 1);
	            delete viewMap[view.__id];
	        } else {
	            i++;
	        }
	    }
	}

	/**
	 * Processor data in each series
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @private
	 */
	function processData(ecModel, api) {
	    each(dataProcessorFuncs, function (process) {
	        process.func(ecModel, api);
	    });
	}

	/**
	 * @private
	 */
	function stackSeriesData(ecModel) {
	    var stackedDataMap = {};
	    ecModel.eachSeries(function (series) {
	        var stack = series.get('stack');
	        var data = series.getData();
	        if (stack && data.type === 'list') {
	            var previousStack = stackedDataMap[stack];
	            if (previousStack) {
	                data.stackedOn = previousStack;
	            }
	            stackedDataMap[stack] = data;
	        }
	    });
	}

	/**
	 * Layout before each chart render there series, special visual encoding stage
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @private
	 */
	function doLayout(ecModel, payload) {
	    var api = this._api;
	    each(visualFuncs, function (visual) {
	        if (visual.isLayout) {
	            visual.func(ecModel, api, payload);
	        }
	    });
	}

	/**
	 * Encode visual infomation from data after data processing
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @param {object} layout
	 * @param {boolean} [excludesLayout]
	 * @private
	 */
	function doVisualEncoding(ecModel, payload, excludesLayout) {
	    var api = this._api;
	    ecModel.clearColorPalette();
	    ecModel.eachSeries(function (seriesModel) {
	        seriesModel.clearColorPalette();
	    });
	    each(visualFuncs, function (visual) {
	        (!excludesLayout || !visual.isLayout) && visual.func(ecModel, api, payload);
	    });
	}

	/**
	 * Render each chart and component
	 * @private
	 */
	function doRender(ecModel, payload) {
	    var api = this._api;
	    // Render all components
	    each(this._componentsViews, function (componentView) {
	        var componentModel = componentView.__model;
	        componentView.render(componentModel, ecModel, api, payload);

	        updateZ(componentModel, componentView);
	    }, this);

	    each(this._chartsViews, function (chart) {
	        chart.__alive = false;
	    }, this);

	    // Render all charts
	    ecModel.eachSeries(function (seriesModel, idx) {
	        var chartView = this._chartsMap[seriesModel.__viewId];
	        chartView.__alive = true;
	        chartView.render(seriesModel, ecModel, api, payload);

	        chartView.group.silent = !!seriesModel.get('silent');

	        updateZ(seriesModel, chartView);

	        updateProgressiveAndBlend(seriesModel, chartView);
	    }, this);

	    // If use hover layer
	    updateHoverLayerStatus(this._zr, ecModel);

	    // Remove groups of unrendered charts
	    each(this._chartsViews, function (chart) {
	        if (!chart.__alive) {
	            chart.remove(ecModel, api);
	        }
	    }, this);
	}

	var MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];
	/**
	 * @private
	 */
	echartsProto._initEvents = function () {
	    each(MOUSE_EVENT_NAMES, function (eveName) {
	        this._zr.on(eveName, function (e) {
	            var ecModel = this.getModel();
	            var el = e.target;
	            var params;

	            // no e.target when 'globalout'.
	            if (eveName === 'globalout') {
	                params = {};
	            } else if (el && el.dataIndex != null) {
	                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};
	            }
	            // If element has custom eventData of components
	            else if (el && el.eventData) {
	                    params = zrUtil.extend({}, el.eventData);
	                }

	            if (params) {
	                params.event = e;
	                params.type = eveName;
	                this.trigger(eveName, params);
	            }
	        }, this);
	    }, this);

	    each(eventActionMap, function (actionType, eventType) {
	        this._messageCenter.on(eventType, function (event) {
	            this.trigger(eventType, event);
	        }, this);
	    }, this);
	};

	/**
	 * @return {boolean}
	 */
	echartsProto.isDisposed = function () {
	    return this._disposed;
	};

	/**
	 * Clear
	 */
	echartsProto.clear = function () {
	    this.setOption({ series: [] }, true);
	};
	/**
	 * Dispose instance
	 */
	echartsProto.dispose = function () {
	    if (this._disposed) {
	        if (__DEV__) {
	            console.warn('Instance ' + this.id + ' has been disposed');
	        }
	        return;
	    }
	    this._disposed = true;

	    var api = this._api;
	    var ecModel = this._model;

	    each(this._componentsViews, function (component) {
	        component.dispose(ecModel, api);
	    });
	    each(this._chartsViews, function (chart) {
	        chart.dispose(ecModel, api);
	    });

	    // Dispose after all views disposed
	    this._zr.dispose();

	    delete instances[this.id];
	};

	zrUtil.mixin(ECharts, Eventful);

	function updateHoverLayerStatus(zr, ecModel) {
	    var storage = zr.storage;
	    var elCount = 0;
	    storage.traverse(function (el) {
	        if (!el.isGroup) {
	            elCount++;
	        }
	    });
	    if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {
	        storage.traverse(function (el) {
	            if (!el.isGroup) {
	                el.useHoverLayer = true;
	            }
	        });
	    }
	}
	/**
	 * Update chart progressive and blend.
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */
	function updateProgressiveAndBlend(seriesModel, chartView) {
	    // Progressive configuration
	    var elCount = 0;
	    chartView.group.traverse(function (el) {
	        if (el.type !== 'group' && !el.ignore) {
	            elCount++;
	        }
	    });
	    var frameDrawNum = +seriesModel.get('progressive');
	    var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;
	    if (needProgressive) {
	        chartView.group.traverse(function (el) {
	            // FIXME marker and other components
	            if (!el.isGroup) {
	                el.progressive = needProgressive ? Math.floor(elCount++ / frameDrawNum) : -1;
	                if (needProgressive) {
	                    el.stopAnimation(true);
	                }
	            }
	        });
	    }

	    // Blend configration
	    var blendMode = seriesModel.get('blendMode') || null;
	    if (__DEV__) {
	        if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {
	            console.warn('Only canvas support blendMode');
	        }
	    }
	    chartView.group.traverse(function (el) {
	        // FIXME marker and other components
	        if (!el.isGroup) {
	            el.setStyle('blend', blendMode);
	        }
	    });
	}
	/**
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */
	function updateZ(model, view) {
	    var z = model.get('z');
	    var zlevel = model.get('zlevel');
	    // Set z and zlevel
	    view.group.traverse(function (el) {
	        if (el.type !== 'group') {
	            z != null && (el.z = z);
	            zlevel != null && (el.zlevel = zlevel);
	        }
	    });
	}
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */
	var actions = [];

	/**
	 * Map eventType to actionType
	 * @type {Object}
	 */
	var eventActionMap = {};

	/**
	 * Data processor functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */
	var dataProcessorFuncs = [];

	/**
	 * @type {Array.<Function>}
	 * @inner
	 */
	var optionPreprocessorFuncs = [];

	/**
	 * Visual encoding functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */
	var visualFuncs = [];
	/**
	 * Theme storage
	 * @type {Object.<key, Object>}
	 */
	var themeStorage = {};
	/**
	 * Loading effects
	 */
	var loadingEffects = {};

	var instances = {};
	var connectedGroups = {};

	var idBase = new Date() - 0;
	var groupIdBase = new Date() - 0;
	var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	/**
	 * @alias module:echarts
	 */
	var echarts = {
	    /**
	     * @type {number}
	     */
	    version: '3.4.0',
	    dependencies: {
	        zrender: '3.3.0'
	    }
	};

	function enableConnect(chart) {

	    var STATUS_PENDING = 0;
	    var STATUS_UPDATING = 1;
	    var STATUS_UPDATED = 2;
	    var STATUS_KEY = '__connectUpdateStatus';
	    function updateConnectedChartsStatus(charts, status) {
	        for (var i = 0; i < charts.length; i++) {
	            var otherChart = charts[i];
	            otherChart[STATUS_KEY] = status;
	        }
	    }
	    zrUtil.each(eventActionMap, function (actionType, eventType) {
	        chart._messageCenter.on(eventType, function (event) {
	            if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	                var action = chart.makeActionFromEvent(event);
	                var otherCharts = [];

	                zrUtil.each(instances, function (otherChart) {
	                    if (otherChart !== chart && otherChart.group === chart.group) {
	                        otherCharts.push(otherChart);
	                    }
	                });

	                updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	                each(otherCharts, function (otherChart) {
	                    if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	                        otherChart.dispatchAction(action);
	                    }
	                });
	                updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	            }
	        });
	    });
	}
	/**
	 * @param {HTMLDomElement} dom
	 * @param {Object} [theme]
	 * @param {Object} opts
	 * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
	 * @param {string} [opts.renderer] Currently only 'canvas' is supported.
	 * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
	 *                              Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
	 *                               Can be 'auto' (the same as null/undefined)
	 */
	echarts.init = function (dom, theme, opts) {
	    if (__DEV__) {
	        // Check version
	        if (zrender.version.replace('.', '') - 0 < echarts.dependencies.zrender.replace('.', '') - 0) {
	            throw new Error('ZRender ' + zrender.version + ' is too old for ECharts ' + echarts.version + '. Current version need ZRender ' + echarts.dependencies.zrender + '+');
	        }
	        if (!dom) {
	            throw new Error('Initialize failed: invalid dom.');
	        }
	        if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {
	            console.warn('Can\'t get dom width or height');
	        }
	    }

	    var chart = new ECharts(dom, theme, opts);
	    chart.id = 'ec_' + idBase++;
	    instances[chart.id] = chart;

	    dom.setAttribute && dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);

	    enableConnect(chart);

	    return chart;
	};

	/**
	 * @return {string|Array.<module:echarts~ECharts>} groupId
	 */
	echarts.connect = function (groupId) {
	    // Is array of charts
	    if (zrUtil.isArray(groupId)) {
	        var charts = groupId;
	        groupId = null;
	        // If any chart has group
	        zrUtil.each(charts, function (chart) {
	            if (chart.group != null) {
	                groupId = chart.group;
	            }
	        });
	        groupId = groupId || 'g_' + groupIdBase++;
	        zrUtil.each(charts, function (chart) {
	            chart.group = groupId;
	        });
	    }
	    connectedGroups[groupId] = true;
	    return groupId;
	};

	/**
	 * @return {string} groupId
	 */
	echarts.disConnect = function (groupId) {
	    connectedGroups[groupId] = false;
	};

	/**
	 * Dispose a chart instance
	 * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	 */
	echarts.dispose = function (chart) {
	    if (zrUtil.isDom(chart)) {
	        chart = echarts.getInstanceByDom(chart);
	    } else if (typeof chart === 'string') {
	        chart = instances[chart];
	    }
	    if (chart instanceof ECharts && !chart.isDisposed()) {
	        chart.dispose();
	    }
	};

	/**
	 * @param  {HTMLDomElement} dom
	 * @return {echarts~ECharts}
	 */
	echarts.getInstanceByDom = function (dom) {
	    var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	    return instances[key];
	};
	/**
	 * @param {string} key
	 * @return {echarts~ECharts}
	 */
	echarts.getInstanceById = function (key) {
	    return instances[key];
	};

	/**
	 * Register theme
	 */
	echarts.registerTheme = function (name, theme) {
	    themeStorage[name] = theme;
	};

	/**
	 * Register option preprocessor
	 * @param {Function} preprocessorFunc
	 */
	echarts.registerPreprocessor = function (preprocessorFunc) {
	    optionPreprocessorFuncs.push(preprocessorFunc);
	};

	/**
	 * @param {number} [priority=1000]
	 * @param {Function} processorFunc
	 */
	echarts.registerProcessor = function (priority, processorFunc) {
	    if (typeof priority === 'function') {
	        processorFunc = priority;
	        priority = PRIORITY_PROCESSOR_FILTER;
	    }
	    if (__DEV__) {
	        if (isNaN(priority)) {
	            throw new Error('Unkown processor priority');
	        }
	    }
	    dataProcessorFuncs.push({
	        prio: priority,
	        func: processorFunc
	    });
	};

	/**
	 * Usage:
	 * registerAction('someAction', 'someEvent', function () { ... });
	 * registerAction('someAction', function () { ... });
	 * registerAction(
	 *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	 *     function () { ... }
	 * );
	 *
	 * @param {(string|Object)} actionInfo
	 * @param {string} actionInfo.type
	 * @param {string} [actionInfo.event]
	 * @param {string} [actionInfo.update]
	 * @param {string} [eventName]
	 * @param {Function} action
	 */
	echarts.registerAction = function (actionInfo, eventName, action) {
	    if (typeof eventName === 'function') {
	        action = eventName;
	        eventName = '';
	    }
	    var actionType = zrUtil.isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {
	        event: eventName
	    }][0];

	    // Event name is all lowercase
	    actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	    eventName = actionInfo.event;

	    // Validate action type and event name.
	    zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));

	    if (!actions[actionType]) {
	        actions[actionType] = { action: action, actionInfo: actionInfo };
	    }
	    eventActionMap[eventName] = actionType;
	};

	/**
	 * @param {string} type
	 * @param {*} CoordinateSystem
	 */
	echarts.registerCoordinateSystem = function (type, CoordinateSystem) {
	    CoordinateSystemManager.register(type, CoordinateSystem);
	};

	/**
	 * Layout is a special stage of visual encoding
	 * Most visual encoding like color are common for different chart
	 * But each chart has it's own layout algorithm
	 *
	 * @param {number} [priority=1000]
	 * @param {Function} layoutFunc
	 */
	echarts.registerLayout = function (priority, layoutFunc) {
	    if (typeof priority === 'function') {
	        layoutFunc = priority;
	        priority = PRIORITY_VISUAL_LAYOUT;
	    }
	    if (__DEV__) {
	        if (isNaN(priority)) {
	            throw new Error('Unkown layout priority');
	        }
	    }
	    visualFuncs.push({
	        prio: priority,
	        func: layoutFunc,
	        isLayout: true
	    });
	};

	/**
	 * @param {number} [priority=3000]
	 * @param {Function} visualFunc
	 */
	echarts.registerVisual = function (priority, visualFunc) {
	    if (typeof priority === 'function') {
	        visualFunc = priority;
	        priority = PRIORITY_VISUAL_CHART;
	    }
	    if (__DEV__) {
	        if (isNaN(priority)) {
	            throw new Error('Unkown visual priority');
	        }
	    }
	    visualFuncs.push({
	        prio: priority,
	        func: visualFunc
	    });
	};

	/**
	 * @param {string} name
	 */
	echarts.registerLoading = function (name, loadingFx) {
	    loadingEffects[name] = loadingFx;
	};

	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	echarts.extendComponentModel = function (opts /*, superClass*/) {
	    // var Clazz = ComponentModel;
	    // if (superClass) {
	    //     var classType = parseClassType(superClass);
	    //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	    // }
	    return ComponentModel.extend(opts);
	};

	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	echarts.extendComponentView = function (opts /*, superClass*/) {
	    // var Clazz = ComponentView;
	    // if (superClass) {
	    //     var classType = parseClassType(superClass);
	    //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
	    // }
	    return ComponentView.extend(opts);
	};

	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	echarts.extendSeriesModel = function (opts /*, superClass*/) {
	    // var Clazz = SeriesModel;
	    // if (superClass) {
	    //     superClass = 'series.' + superClass.replace('series.', '');
	    //     var classType = parseClassType(superClass);
	    //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	    // }
	    return SeriesModel.extend(opts);
	};

	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	echarts.extendChartView = function (opts /*, superClass*/) {
	    // var Clazz = ChartView;
	    // if (superClass) {
	    //     superClass = superClass.replace('series.', '');
	    //     var classType = parseClassType(superClass);
	    //     Clazz = ChartView.getClass(classType.main, true);
	    // }
	    return ChartView.extend(opts);
	};

	/**
	 * ZRender need a canvas context to do measureText.
	 * But in node environment canvas may be created by node-canvas.
	 * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	 *
	 * Be careful of using it in the browser.
	 *
	 * @param {Function} creator
	 * @example
	 *     var Canvas = require('canvas');
	 *     var echarts = require('echarts');
	 *     echarts.setCanvasCreator(function () {
	 *         // Small size is enough.
	 *         return new Canvas(32, 32);
	 *     });
	 */
	echarts.setCanvasCreator = function (creator) {
	    zrUtil.createCanvas = creator;
	};

	echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(594));
	echarts.registerPreprocessor(__webpack_require__(595));
	echarts.registerLoading('default', __webpack_require__(597));

	// Default action
	echarts.registerAction({
	    type: 'highlight',
	    event: 'highlight',
	    update: 'highlight'
	}, zrUtil.noop);
	echarts.registerAction({
	    type: 'downplay',
	    event: 'downplay',
	    update: 'downplay'
	}, zrUtil.noop);

	// --------
	// Exports
	// --------
	//
	echarts.List = __webpack_require__(598);
	echarts.Model = __webpack_require__(512);

	echarts.graphic = __webpack_require__(543);
	echarts.number = __webpack_require__(507);
	echarts.format = __webpack_require__(506);
	echarts.throttle = throttle.throttle;
	echarts.matrix = __webpack_require__(511);
	echarts.vector = __webpack_require__(510);
	echarts.color = __webpack_require__(539);

	echarts.util = {};
	each(['map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter', 'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction', 'extend', 'defaults', 'clone'], function (name) {
	    echarts.util[name] = zrUtil[name];
	});

	// PRIORITY
	echarts.PRIORITY = {
	    PROCESSOR: {
	        FILTER: PRIORITY_PROCESSOR_FILTER,
	        STATISTIC: PRIORITY_PROCESSOR_STATISTIC
	    },
	    VISUAL: {
	        LAYOUT: PRIORITY_VISUAL_LAYOUT,
	        GLOBAL: PRIORITY_VISUAL_GLOBAL,
	        CHART: PRIORITY_VISUAL_CHART,
	        COMPONENT: PRIORITY_VISUAL_COMPONENT,
	        BRUSH: PRIORITY_VISUAL_BRUSH
	    }
	};

	module.exports = echarts;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 502 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */

	var env = {};
	if (typeof navigator === 'undefined') {
	    // In node
	    env = {
	        browser: {},
	        os: {},
	        node: true,
	        // Assume canvas is supported
	        canvasSupported: true
	    };
	} else {
	    env = detect(navigator.userAgent);
	}

	module.exports = env;

	// Zepto.js
	// (c) 2010-2013 Thomas Fuchs
	// Zepto.js may be freely distributed under the MIT license.

	function detect(ua) {
	    var os = {};
	    var browser = {};
	    // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	    // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	    // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	    // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	    // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	    // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	    // var touchpad = webos && ua.match(/TouchPad/);
	    // var kindle = ua.match(/Kindle\/([\d.]+)/);
	    // var silk = ua.match(/Silk\/([\d._]+)/);
	    // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	    // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	    // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	    // var playbook = ua.match(/PlayBook/);
	    // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	    var firefox = ua.match(/Firefox\/([\d.]+)/);
	    // var safari = webkit && ua.match(/Mobile\//) && !chrome;
	    // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	    var ie = ua.match(/MSIE\s([\d.]+)/)
	    // IE 11 Trident/7.0; rv:11.0
	    || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	    var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

	    var weChat = /micromessenger/i.test(ua);

	    // Todo: clean this up with a better OS/browser seperation:
	    // - discern (more) between multiple browsers on android
	    // - decide if kindle fire in silk mode is android or not
	    // - Firefox on Android doesn't specify the Android version
	    // - possibly devide in os, device and browser hashes

	    // if (browser.webkit = !!webkit) browser.version = webkit[1];

	    // if (android) os.android = true, os.version = android[2];
	    // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	    // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	    // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	    // if (webos) os.webos = true, os.version = webos[2];
	    // if (touchpad) os.touchpad = true;
	    // if (blackberry) os.blackberry = true, os.version = blackberry[2];
	    // if (bb10) os.bb10 = true, os.version = bb10[2];
	    // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	    // if (playbook) browser.playbook = true;
	    // if (kindle) os.kindle = true, os.version = kindle[1];
	    // if (silk) browser.silk = true, browser.version = silk[1];
	    // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	    // if (chrome) browser.chrome = true, browser.version = chrome[1];
	    if (firefox) {
	        browser.firefox = true;
	        browser.version = firefox[1];
	    }
	    // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	    // if (webview) browser.webview = true;

	    if (ie) {
	        browser.ie = true;
	        browser.version = ie[1];
	    }

	    if (edge) {
	        browser.edge = true;
	        browser.version = edge[1];
	    }

	    // It is difficult to detect WeChat in Win Phone precisely, because ua can
	    // not be set on win phone. So we do not consider Win Phone.
	    if (weChat) {
	        browser.weChat = true;
	    }

	    // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	    //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	    // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
	    //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	    //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));

	    return {
	        browser: browser,
	        os: os,
	        node: false,
	        // 原生canvas支持，改极端点了
	        // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	        canvasSupported: document.createElement('canvas').getContext ? true : false,
	        // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>
	        // works on most browsers
	        // IE10/11 does not support touch event, and MS Edge supports them but not by
	        // default, so we dont check navigator.maxTouchPoints for them here.
	        touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	        // <http://caniuse.com/#search=pointer%20event>.
	        pointerEventsSupported: 'onpointerdown' in window
	        // Firefox supports pointer but not by default, only MS browsers are reliable on pointer
	        // events currently. So we dont use that on other browsers unless tested sufficiently.
	        // Although IE 10 supports pointer event, it use old style and is different from the
	        // standard. So we exclude that. (IE 10 is hardly used on touch device)
	        && (browser.edge || browser.ie && browser.version >= 11)
	    };
	}

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 */

	/**
	 * Caution: If the mechanism should be changed some day, these cases
	 * should be considered:
	 *
	 * (1) In `merge option` mode, if using the same option to call `setOption`
	 * many times, the result should be the same (try our best to ensure that).
	 * (2) In `merge option` mode, if a component has no id/name specified, it
	 * will be merged by index, and the result sequence of the components is
	 * consistent to the original sequence.
	 * (3) `reset` feature (in toolbox). Find detailed info in comments about
	 * `mergeOption` in module:echarts/model/OptionManager.
	 */

	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);
	var Model = __webpack_require__(512);
	var each = zrUtil.each;
	var filter = zrUtil.filter;
	var map = zrUtil.map;
	var isArray = zrUtil.isArray;
	var indexOf = zrUtil.indexOf;
	var isObject = zrUtil.isObject;

	var ComponentModel = __webpack_require__(519);

	var globalDefault = __webpack_require__(523);

	var OPTION_INNER_KEY = '\0_ec_inner';

	/**
	 * @alias module:echarts/model/Global
	 *
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {Object} theme
	 */
	var GlobalModel = Model.extend({

	    constructor: GlobalModel,

	    init: function init(option, parentModel, theme, optionManager) {
	        theme = theme || {};

	        this.option = null; // Mark as not initialized.

	        /**
	         * @type {module:echarts/model/Model}
	         * @private
	         */
	        this._theme = new Model(theme);

	        /**
	         * @type {module:echarts/model/OptionManager}
	         */
	        this._optionManager = optionManager;
	    },

	    setOption: function setOption(option, optionPreprocessorFuncs) {
	        zrUtil.assert(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');

	        this._optionManager.setOption(option, optionPreprocessorFuncs);

	        this.resetOption();
	    },

	    /**
	     * @param {string} type null/undefined: reset all.
	     *                      'recreate': force recreate all.
	     *                      'timeline': only reset timeline option
	     *                      'media': only reset media query option
	     * @return {boolean} Whether option changed.
	     */
	    resetOption: function resetOption(type) {
	        var optionChanged = false;
	        var optionManager = this._optionManager;

	        if (!type || type === 'recreate') {
	            var baseOption = optionManager.mountOption(type === 'recreate');

	            if (!this.option || type === 'recreate') {
	                initBase.call(this, baseOption);
	            } else {
	                this.restoreData();
	                this.mergeOption(baseOption);
	            }
	            optionChanged = true;
	        }

	        if (type === 'timeline' || type === 'media') {
	            this.restoreData();
	        }

	        if (!type || type === 'recreate' || type === 'timeline') {
	            var timelineOption = optionManager.getTimelineOption(this);
	            timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	        }

	        if (!type || type === 'recreate' || type === 'media') {
	            var mediaOptions = optionManager.getMediaOption(this, this._api);
	            if (mediaOptions.length) {
	                each(mediaOptions, function (mediaOption) {
	                    this.mergeOption(mediaOption, optionChanged = true);
	                }, this);
	            }
	        }

	        return optionChanged;
	    },

	    /**
	     * @protected
	     */
	    mergeOption: function mergeOption(newOption) {
	        var option = this.option;
	        var componentsMap = this._componentsMap;
	        var newCptTypes = [];

	        // 如果不存在对应的 component model 则直接 merge
	        each(newOption, function (componentOption, mainType) {
	            if (componentOption == null) {
	                return;
	            }

	            if (!ComponentModel.hasClass(mainType)) {
	                option[mainType] = option[mainType] == null ? zrUtil.clone(componentOption) : zrUtil.merge(option[mainType], componentOption, true);
	            } else {
	                newCptTypes.push(mainType);
	            }
	        });

	        // FIXME OPTION 同步是否要改回原来的
	        ComponentModel.topologicalTravel(newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);

	        this._seriesIndices = this._seriesIndices || [];

	        function visitComponent(mainType, dependencies) {
	            var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);

	            var mapResult = modelUtil.mappingToExists(componentsMap[mainType], newCptOptionList);

	            modelUtil.makeIdAndName(mapResult);

	            // Set mainType and complete subType.
	            each(mapResult, function (item, index) {
	                var opt = item.option;
	                if (isObject(opt)) {
	                    item.keyInfo.mainType = mainType;
	                    item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
	                }
	            });

	            var dependentModels = getComponentsByTypes(componentsMap, dependencies);

	            option[mainType] = [];
	            componentsMap[mainType] = [];

	            each(mapResult, function (resultItem, index) {
	                var componentModel = resultItem.exist;
	                var newCptOption = resultItem.option;

	                zrUtil.assert(isObject(newCptOption) || componentModel, 'Empty component definition');

	                // Consider where is no new option and should be merged using {},
	                // see removeEdgeAndAdd in topologicalTravel and
	                // ComponentModel.getAllClassMainTypes.
	                if (!newCptOption) {
	                    componentModel.mergeOption({}, this);
	                    componentModel.optionUpdated({}, false);
	                } else {
	                    var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, true);

	                    if (componentModel && componentModel instanceof ComponentModelClass) {
	                        componentModel.name = resultItem.keyInfo.name;
	                        componentModel.mergeOption(newCptOption, this);
	                        componentModel.optionUpdated(newCptOption, false);
	                    } else {
	                        // PENDING Global as parent ?
	                        var extraOpt = zrUtil.extend({
	                            dependentModels: dependentModels,
	                            componentIndex: index
	                        }, resultItem.keyInfo);
	                        componentModel = new ComponentModelClass(newCptOption, this, this, extraOpt);
	                        zrUtil.extend(componentModel, extraOpt);
	                        componentModel.init(newCptOption, this, this, extraOpt);
	                        // Call optionUpdated after init.
	                        // newCptOption has been used as componentModel.option
	                        // and may be merged with theme and default, so pass null
	                        // to avoid confusion.
	                        componentModel.optionUpdated(null, true);
	                    }
	                }

	                componentsMap[mainType][index] = componentModel;
	                option[mainType][index] = componentModel.option;
	            }, this);

	            // Backup series for filtering.
	            if (mainType === 'series') {
	                this._seriesIndices = createSeriesIndices(componentsMap.series);
	            }
	        }
	    },

	    /**
	     * Get option for output (cloned option and inner info removed)
	     * @public
	     * @return {Object}
	     */
	    getOption: function getOption() {
	        var option = zrUtil.clone(this.option);

	        each(option, function (opts, mainType) {
	            if (ComponentModel.hasClass(mainType)) {
	                var opts = modelUtil.normalizeToArray(opts);
	                for (var i = opts.length - 1; i >= 0; i--) {
	                    // Remove options with inner id.
	                    if (modelUtil.isIdInner(opts[i])) {
	                        opts.splice(i, 1);
	                    }
	                }
	                option[mainType] = opts;
	            }
	        });

	        delete option[OPTION_INNER_KEY];

	        return option;
	    },

	    /**
	     * @return {module:echarts/model/Model}
	     */
	    getTheme: function getTheme() {
	        return this._theme;
	    },

	    /**
	     * @param {string} mainType
	     * @param {number} [idx=0]
	     * @return {module:echarts/model/Component}
	     */
	    getComponent: function getComponent(mainType, idx) {
	        var list = this._componentsMap[mainType];
	        if (list) {
	            return list[idx || 0];
	        }
	    },

	    /**
	     * If none of index and id and name used, return all components with mainType.
	     * @param {Object} condition
	     * @param {string} condition.mainType
	     * @param {string} [condition.subType] If ignore, only query by mainType
	     * @param {number|Array.<number>} [condition.index] Either input index or id or name.
	     * @param {string|Array.<string>} [condition.id] Either input index or id or name.
	     * @param {string|Array.<string>} [condition.name] Either input index or id or name.
	     * @return {Array.<module:echarts/model/Component>}
	     */
	    queryComponents: function queryComponents(condition) {
	        var mainType = condition.mainType;
	        if (!mainType) {
	            return [];
	        }

	        var index = condition.index;
	        var id = condition.id;
	        var name = condition.name;

	        var cpts = this._componentsMap[mainType];

	        if (!cpts || !cpts.length) {
	            return [];
	        }

	        var result;

	        if (index != null) {
	            if (!isArray(index)) {
	                index = [index];
	            }
	            result = filter(map(index, function (idx) {
	                return cpts[idx];
	            }), function (val) {
	                return !!val;
	            });
	        } else if (id != null) {
	            var isIdArray = isArray(id);
	            result = filter(cpts, function (cpt) {
	                return isIdArray && indexOf(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
	            });
	        } else if (name != null) {
	            var isNameArray = isArray(name);
	            result = filter(cpts, function (cpt) {
	                return isNameArray && indexOf(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
	            });
	        } else {
	            // Return all components with mainType
	            result = cpts;
	        }

	        return filterBySubType(result, condition);
	    },

	    /**
	     * The interface is different from queryComponents,
	     * which is convenient for inner usage.
	     *
	     * @usage
	     * var result = findComponents(
	     *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
	     * );
	     * var result = findComponents(
	     *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
	     * );
	     * var result = findComponents(
	     *     {mainType: 'series'},
	     *     function (model, index) {...}
	     * );
	     * // result like [component0, componnet1, ...]
	     *
	     * @param {Object} condition
	     * @param {string} condition.mainType Mandatory.
	     * @param {string} [condition.subType] Optional.
	     * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	     *        where xxx is mainType.
	     *        If query attribute is null/undefined or has no index/id/name,
	     *        do not filtering by query conditions, which is convenient for
	     *        no-payload situations or when target of action is global.
	     * @param {Function} [condition.filter] parameter: component, return boolean.
	     * @return {Array.<module:echarts/model/Component>}
	     */
	    findComponents: function findComponents(condition) {
	        var query = condition.query;
	        var mainType = condition.mainType;

	        var queryCond = getQueryCond(query);
	        var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap[mainType];

	        return doFilter(filterBySubType(result, condition));

	        function getQueryCond(q) {
	            var indexAttr = mainType + 'Index';
	            var idAttr = mainType + 'Id';
	            var nameAttr = mainType + 'Name';
	            return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
	                mainType: mainType,
	                // subType will be filtered finally.
	                index: q[indexAttr],
	                id: q[idAttr],
	                name: q[nameAttr]
	            } : null;
	        }

	        function doFilter(res) {
	            return condition.filter ? filter(res, condition.filter) : res;
	        }
	    },

	    /**
	     * @usage
	     * eachComponent('legend', function (legendModel, index) {
	     *     ...
	     * });
	     * eachComponent(function (componentType, model, index) {
	     *     // componentType does not include subType
	     *     // (componentType is 'xxx' but not 'xxx.aa')
	     * });
	     * eachComponent(
	     *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	     *     function (model, index) {...}
	     * );
	     * eachComponent(
	     *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	     *     function (model, index) {...}
	     * );
	     *
	     * @param {string|Object=} mainType When mainType is object, the definition
	     *                                  is the same as the method 'findComponents'.
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachComponent: function eachComponent(mainType, cb, context) {
	        var componentsMap = this._componentsMap;

	        if (typeof mainType === 'function') {
	            context = cb;
	            cb = mainType;
	            each(componentsMap, function (components, componentType) {
	                each(components, function (component, index) {
	                    cb.call(context, componentType, component, index);
	                });
	            });
	        } else if (zrUtil.isString(mainType)) {
	            each(componentsMap[mainType], cb, context);
	        } else if (isObject(mainType)) {
	            var queryResult = this.findComponents(mainType);
	            each(queryResult, cb, context);
	        }
	    },

	    /**
	     * @param {string} name
	     * @return {Array.<module:echarts/model/Series>}
	     */
	    getSeriesByName: function getSeriesByName(name) {
	        var series = this._componentsMap.series;
	        return filter(series, function (oneSeries) {
	            return oneSeries.name === name;
	        });
	    },

	    /**
	     * @param {number} seriesIndex
	     * @return {module:echarts/model/Series}
	     */
	    getSeriesByIndex: function getSeriesByIndex(seriesIndex) {
	        return this._componentsMap.series[seriesIndex];
	    },

	    /**
	     * @param {string} subType
	     * @return {Array.<module:echarts/model/Series>}
	     */
	    getSeriesByType: function getSeriesByType(subType) {
	        var series = this._componentsMap.series;
	        return filter(series, function (oneSeries) {
	            return oneSeries.subType === subType;
	        });
	    },

	    /**
	     * @return {Array.<module:echarts/model/Series>}
	     */
	    getSeries: function getSeries() {
	        return this._componentsMap.series.slice();
	    },

	    /**
	     * After filtering, series may be different
	     * frome raw series.
	     *
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachSeries: function eachSeries(cb, context) {
	        assertSeriesInitialized(this);
	        each(this._seriesIndices, function (rawSeriesIndex) {
	            var series = this._componentsMap.series[rawSeriesIndex];
	            cb.call(context, series, rawSeriesIndex);
	        }, this);
	    },

	    /**
	     * Iterate raw series before filtered.
	     *
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachRawSeries: function eachRawSeries(cb, context) {
	        each(this._componentsMap.series, cb, context);
	    },

	    /**
	     * After filtering, series may be different.
	     * frome raw series.
	     *
	     * @parma {string} subType
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachSeriesByType: function eachSeriesByType(subType, cb, context) {
	        assertSeriesInitialized(this);
	        each(this._seriesIndices, function (rawSeriesIndex) {
	            var series = this._componentsMap.series[rawSeriesIndex];
	            if (series.subType === subType) {
	                cb.call(context, series, rawSeriesIndex);
	            }
	        }, this);
	    },

	    /**
	     * Iterate raw series before filtered of given type.
	     *
	     * @parma {string} subType
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachRawSeriesByType: function eachRawSeriesByType(subType, cb, context) {
	        return each(this.getSeriesByType(subType), cb, context);
	    },

	    /**
	     * @param {module:echarts/model/Series} seriesModel
	     */
	    isSeriesFiltered: function isSeriesFiltered(seriesModel) {
	        assertSeriesInitialized(this);
	        return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
	    },

	    /**
	     * @param {Function} cb
	     * @param {*} context
	     */
	    filterSeries: function filterSeries(cb, context) {
	        assertSeriesInitialized(this);
	        var filteredSeries = filter(this._componentsMap.series, cb, context);
	        this._seriesIndices = createSeriesIndices(filteredSeries);
	    },

	    restoreData: function restoreData() {
	        var componentsMap = this._componentsMap;

	        this._seriesIndices = createSeriesIndices(componentsMap.series);

	        var componentTypes = [];
	        each(componentsMap, function (components, componentType) {
	            componentTypes.push(componentType);
	        });

	        ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType, dependencies) {
	            each(componentsMap[componentType], function (component) {
	                component.restoreData();
	            });
	        });
	    }

	});

	/**
	 * @inner
	 */
	function mergeTheme(option, theme) {
	    zrUtil.each(theme, function (themeItem, name) {
	        // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	        if (!ComponentModel.hasClass(name)) {
	            if ((typeof themeItem === 'undefined' ? 'undefined' : _typeof(themeItem)) === 'object') {
	                option[name] = !option[name] ? zrUtil.clone(themeItem) : zrUtil.merge(option[name], themeItem, false);
	            } else {
	                if (option[name] == null) {
	                    option[name] = themeItem;
	                }
	            }
	        }
	    });
	}

	function initBase(baseOption) {
	    baseOption = baseOption;

	    // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	    // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
	    this.option = {};
	    this.option[OPTION_INNER_KEY] = 1;

	    /**
	     * @type {Object.<string, Array.<module:echarts/model/Model>>}
	     * @private
	     */
	    this._componentsMap = {};

	    /**
	     * Mapping between filtered series list and raw series list.
	     * key: filtered series indices, value: raw series indices.
	     * @type {Array.<nubmer>}
	     * @private
	     */
	    this._seriesIndices = null;

	    mergeTheme(baseOption, this._theme.option);

	    // TODO Needs clone when merging to the unexisted property
	    zrUtil.merge(baseOption, globalDefault, false);

	    this.mergeOption(baseOption);
	}

	/**
	 * @inner
	 * @param {Array.<string>|string} types model types
	 * @return {Object} key: {string} type, value: {Array.<Object>} models
	 */
	function getComponentsByTypes(componentsMap, types) {
	    if (!zrUtil.isArray(types)) {
	        types = types ? [types] : [];
	    }

	    var ret = {};
	    each(types, function (type) {
	        ret[type] = (componentsMap[type] || []).slice();
	    });

	    return ret;
	}

	/**
	 * @inner
	 */
	function determineSubType(mainType, newCptOption, existComponent) {
	    var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType
	    // Use determineSubType only when there is no existComponent.
	    : ComponentModel.determineSubType(mainType, newCptOption);

	    // tooltip, markline, markpoint may always has no subType
	    return subType;
	}

	/**
	 * @inner
	 */
	function createSeriesIndices(seriesModels) {
	    return map(seriesModels, function (series) {
	        return series.componentIndex;
	    }) || [];
	}

	/**
	 * @inner
	 */
	function filterBySubType(components, condition) {
	    // Using hasOwnProperty for restrict. Consider
	    // subType is undefined in user payload.
	    return condition.hasOwnProperty('subType') ? filter(components, function (cpt) {
	        return cpt.subType === condition.subType;
	    }) : components;
	}

	/**
	 * @inner
	 */
	function assertSeriesInitialized(ecModel) {
	    // Components that use _seriesIndices should depends on series component,
	    // which make sure that their initialization is after series.
	    if (__DEV__) {
	        if (!ecModel._seriesIndices) {
	            throw new Error('Series has not been initialized yet.');
	        }
	    }
	}

	zrUtil.mixin(GlobalModel, __webpack_require__(524));

	module.exports = GlobalModel;

/***/ },
/* 504 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * @module zrender/core/util
	 */

	// 用于处理merge时无法遍历Date等对象的问题
	var BUILTIN_OBJECT = {
	    '[object Function]': 1,
	    '[object RegExp]': 1,
	    '[object Date]': 1,
	    '[object Error]': 1,
	    '[object CanvasGradient]': 1,
	    '[object CanvasPattern]': 1,
	    // For node-canvas
	    '[object Image]': 1,
	    '[object Canvas]': 1
	};

	var TYPED_ARRAY = {
	    '[object Int8Array]': 1,
	    '[object Uint8Array]': 1,
	    '[object Uint8ClampedArray]': 1,
	    '[object Int16Array]': 1,
	    '[object Uint16Array]': 1,
	    '[object Int32Array]': 1,
	    '[object Uint32Array]': 1,
	    '[object Float32Array]': 1,
	    '[object Float64Array]': 1
	};

	var objToString = Object.prototype.toString;

	var arrayProto = Array.prototype;
	var nativeForEach = arrayProto.forEach;
	var nativeFilter = arrayProto.filter;
	var nativeSlice = arrayProto.slice;
	var nativeMap = arrayProto.map;
	var nativeReduce = arrayProto.reduce;

	/**
	 * Those data types can be cloned:
	 *     Plain object, Array, TypedArray, number, string, null, undefined.
	 * Those data types will be assgined using the orginal data:
	 *     BUILTIN_OBJECT
	 * Instance of user defined class will be cloned to a plain object, without
	 * properties in prototype.
	 * Other data types is not supported (not sure what will happen).
	 *
	 * Caution: do not support clone Date, for performance consideration.
	 * (There might be a large number of date in `series.data`).
	 * So date should not be modified in and out of echarts.
	 *
	 * @param {*} source
	 * @return {*} new
	 */
	function clone(source) {
	    if (source == null || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) != 'object') {
	        return source;
	    }

	    var result = source;
	    var typeStr = objToString.call(source);

	    if (typeStr === '[object Array]') {
	        result = [];
	        for (var i = 0, len = source.length; i < len; i++) {
	            result[i] = clone(source[i]);
	        }
	    } else if (TYPED_ARRAY[typeStr]) {
	        result = source.constructor.from(source);
	    } else if (!BUILTIN_OBJECT[typeStr] && !isDom(source)) {
	        result = {};
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                result[key] = clone(source[key]);
	            }
	        }
	    }

	    return result;
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overwrite=false]
	 */
	function merge(target, source, overwrite) {
	    // We should escapse that source is string
	    // and enter for ... in ...
	    if (!isObject(source) || !isObject(target)) {
	        return overwrite ? clone(source) : target;
	    }

	    for (var key in source) {
	        if (source.hasOwnProperty(key)) {
	            var targetProp = target[key];
	            var sourceProp = source[key];

	            if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuildInObject(sourceProp) && !isBuildInObject(targetProp)) {
	                // 如果需要递归覆盖，就递归调用merge
	                merge(targetProp, sourceProp, overwrite);
	            } else if (overwrite || !(key in target)) {
	                // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                // NOTE，在 target[key] 不存在的时候也是直接覆盖
	                target[key] = clone(source[key], true);
	            }
	        }
	    }

	    return target;
	}

	/**
	 * @param {Array} targetAndSources The first item is target, and the rests are source.
	 * @param {boolean} [overwrite=false]
	 * @return {*} target
	 */
	function mergeAll(targetAndSources, overwrite) {
	    var result = targetAndSources[0];
	    for (var i = 1, len = targetAndSources.length; i < len; i++) {
	        result = merge(result, targetAndSources[i], overwrite);
	    }
	    return result;
	}

	/**
	 * @param {*} target
	 * @param {*} source
	 * @memberOf module:zrender/core/util
	 */
	function extend(target, source) {
	    for (var key in source) {
	        if (source.hasOwnProperty(key)) {
	            target[key] = source[key];
	        }
	    }
	    return target;
	}

	/**
	 * @param {*} target
	 * @param {*} source
	 * @param {boolen} [overlay=false]
	 * @memberOf module:zrender/core/util
	 */
	function defaults(target, source, overlay) {
	    for (var key in source) {
	        if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
	            target[key] = source[key];
	        }
	    }
	    return target;
	}

	function createCanvas() {
	    return document.createElement('canvas');
	}
	// FIXME
	var _ctx;
	function getContext() {
	    if (!_ctx) {
	        // Use util.createCanvas instead of createCanvas
	        // because createCanvas may be overwritten in different environment
	        _ctx = util.createCanvas().getContext('2d');
	    }
	    return _ctx;
	}

	/**
	 * 查询数组中元素的index
	 * @memberOf module:zrender/core/util
	 */
	function indexOf(array, value) {
	    if (array) {
	        if (array.indexOf) {
	            return array.indexOf(value);
	        }
	        for (var i = 0, len = array.length; i < len; i++) {
	            if (array[i] === value) {
	                return i;
	            }
	        }
	    }
	    return -1;
	}

	/**
	 * 构造类继承关系
	 *
	 * @memberOf module:zrender/core/util
	 * @param {Function} clazz 源类
	 * @param {Function} baseClazz 基类
	 */
	function inherits(clazz, baseClazz) {
	    var clazzPrototype = clazz.prototype;
	    function F() {}
	    F.prototype = baseClazz.prototype;
	    clazz.prototype = new F();

	    for (var prop in clazzPrototype) {
	        clazz.prototype[prop] = clazzPrototype[prop];
	    }
	    clazz.prototype.constructor = clazz;
	    clazz.superClass = baseClazz;
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {Object|Function} target
	 * @param {Object|Function} sorce
	 * @param {boolean} overlay
	 */
	function mixin(target, source, overlay) {
	    target = 'prototype' in target ? target.prototype : target;
	    source = 'prototype' in source ? source.prototype : source;

	    defaults(target, source, overlay);
	}

	/**
	 * @param {Array|TypedArray} data
	 */
	function isArrayLike(data) {
	    if (!data) {
	        return;
	    }
	    if (typeof data == 'string') {
	        return false;
	    }
	    return typeof data.length == 'number';
	}

	/**
	 * 数组或对象遍历
	 * @memberOf module:zrender/core/util
	 * @param {Object|Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 */
	function each(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.forEach && obj.forEach === nativeForEach) {
	        obj.forEach(cb, context);
	    } else if (obj.length === +obj.length) {
	        for (var i = 0, len = obj.length; i < len; i++) {
	            cb.call(context, obj[i], i, obj);
	        }
	    } else {
	        for (var key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                cb.call(context, obj[key], key, obj);
	            }
	        }
	    }
	}

	/**
	 * 数组映射
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	function map(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.map && obj.map === nativeMap) {
	        return obj.map(cb, context);
	    } else {
	        var result = [];
	        for (var i = 0, len = obj.length; i < len; i++) {
	            result.push(cb.call(context, obj[i], i, obj));
	        }
	        return result;
	    }
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {Object} [memo]
	 * @param {*} [context]
	 * @return {Array}
	 */
	function reduce(obj, cb, memo, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.reduce && obj.reduce === nativeReduce) {
	        return obj.reduce(cb, memo, context);
	    } else {
	        for (var i = 0, len = obj.length; i < len; i++) {
	            memo = cb.call(context, memo, obj[i], i, obj);
	        }
	        return memo;
	    }
	}

	/**
	 * 数组过滤
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	function filter(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.filter && obj.filter === nativeFilter) {
	        return obj.filter(cb, context);
	    } else {
	        var result = [];
	        for (var i = 0, len = obj.length; i < len; i++) {
	            if (cb.call(context, obj[i], i, obj)) {
	                result.push(obj[i]);
	            }
	        }
	        return result;
	    }
	}

	/**
	 * 数组项查找
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	function find(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    for (var i = 0, len = obj.length; i < len; i++) {
	        if (cb.call(context, obj[i], i, obj)) {
	            return obj[i];
	        }
	    }
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @param {*} context
	 * @return {Function}
	 */
	function bind(func, context) {
	    var args = nativeSlice.call(arguments, 2);
	    return function () {
	        return func.apply(context, args.concat(nativeSlice.call(arguments)));
	    };
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @return {Function}
	 */
	function curry(func) {
	    var args = nativeSlice.call(arguments, 1);
	    return function () {
	        return func.apply(this, args.concat(nativeSlice.call(arguments)));
	    };
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isArray(value) {
	    return objToString.call(value) === '[object Array]';
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isFunction(value) {
	    return typeof value === 'function';
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isString(value) {
	    return objToString.call(value) === '[object String]';
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isObject(value) {
	    // Avoid a V8 JIT bug in Chrome 19-20.
	    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	    return type === 'function' || !!value && type == 'object';
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isBuildInObject(value) {
	    return !!BUILTIN_OBJECT[objToString.call(value)];
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isDom(value) {
	    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.nodeType === 'number' && _typeof(value.ownerDocument) === 'object';
	}

	/**
	 * Whether is exactly NaN. Notice isNaN('a') returns true.
	 * @param {*} value
	 * @return {boolean}
	 */
	function eqNaN(value) {
	    return value !== value;
	}

	/**
	 * If value1 is not null, then return value1, otherwise judget rest of values.
	 * @memberOf module:zrender/core/util
	 * @return {*} Final value
	 */
	function retrieve(values) {
	    for (var i = 0, len = arguments.length; i < len; i++) {
	        if (arguments[i] != null) {
	            return arguments[i];
	        }
	    }
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} arr
	 * @param {number} startIndex
	 * @param {number} endIndex
	 * @return {Array}
	 */
	function slice() {
	    return Function.call.apply(nativeSlice, arguments);
	}

	/**
	 * @memberOf module:zrender/core/util
	 * @param {boolean} condition
	 * @param {string} message
	 */
	function assert(condition, message) {
	    if (!condition) {
	        throw new Error(message);
	    }
	}

	var util = {
	    inherits: inherits,
	    mixin: mixin,
	    clone: clone,
	    merge: merge,
	    mergeAll: mergeAll,
	    extend: extend,
	    defaults: defaults,
	    getContext: getContext,
	    createCanvas: createCanvas,
	    indexOf: indexOf,
	    slice: slice,
	    find: find,
	    isArrayLike: isArrayLike,
	    each: each,
	    map: map,
	    reduce: reduce,
	    filter: filter,
	    bind: bind,
	    curry: curry,
	    isArray: isArray,
	    isString: isString,
	    isObject: isObject,
	    isFunction: isFunction,
	    isBuildInObject: isBuildInObject,
	    isDom: isDom,
	    eqNaN: eqNaN,
	    retrieve: retrieve,
	    assert: assert,
	    noop: function noop() {}
	};
	module.exports = util;

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var formatUtil = __webpack_require__(506);
	var nubmerUtil = __webpack_require__(507);
	var Model = __webpack_require__(512);
	var zrUtil = __webpack_require__(504);
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;

	var modelUtil = {};

	/**
	 * If value is not array, then translate it to array.
	 * @param  {*} value
	 * @return {Array} [value] or value
	 */
	modelUtil.normalizeToArray = function (value) {
	    return value instanceof Array ? value : value == null ? [] : [value];
	};

	/**
	 * Sync default option between normal and emphasis like `position` and `show`
	 * In case some one will write code like
	 *     label: {
	 *         normal: {
	 *             show: false,
	 *             position: 'outside',
	 *             textStyle: {
	 *                 fontSize: 18
	 *             }
	 *         },
	 *         emphasis: {
	 *             show: true
	 *         }
	 *     }
	 * @param {Object} opt
	 * @param {Array.<string>} subOpts
	 */
	modelUtil.defaultEmphasis = function (opt, subOpts) {
	    if (opt) {
	        var emphasisOpt = opt.emphasis = opt.emphasis || {};
	        var normalOpt = opt.normal = opt.normal || {};

	        // Default emphasis option from normal
	        each(subOpts, function (subOptName) {
	            var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);
	            if (val != null) {
	                emphasisOpt[subOptName] = val;
	            }
	        });
	    }
	};

	modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];

	/**
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method retieves value from data.
	 * @param {string|number|Date|Array|Object} dataItem
	 * @return {number|string|Date|Array.<number|string|Date>}
	 */
	modelUtil.getDataItemValue = function (dataItem) {
	    // Performance sensitive.
	    return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
	};

	/**
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method determine if dataItem has extra option besides value
	 * @param {string|number|Date|Array|Object} dataItem
	 */
	modelUtil.isDataItemOption = function (dataItem) {
	    return isObject(dataItem) && !(dataItem instanceof Array);
	    // // markLine data can be array
	    // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
	};

	/**
	 * This helper method convert value in data.
	 * @param {string|number|Date} value
	 * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	 */
	modelUtil.converDataValue = function (value, dimInfo) {
	    // Performance sensitive.
	    var dimType = dimInfo && dimInfo.type;
	    if (dimType === 'ordinal') {
	        return value;
	    }

	    if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {
	        value = +nubmerUtil.parseDate(value);
	    }

	    // dimType defaults 'number'.
	    // If dimType is not ordinal and value is null or undefined or NaN or '-',
	    // parse to NaN.
	    return value == null || value === '' ? NaN : +value; // If string (like '-'), using '+' parse to NaN
	};

	/**
	 * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
	 * @param {module:echarts/data/List} data
	 * @param {Object} opt
	 * @param {string} [opt.seriesIndex]
	 * @param {Object} [opt.name]
	 * @param {Object} [opt.mainType]
	 * @param {Object} [opt.subType]
	 */
	modelUtil.createDataFormatModel = function (data, opt) {
	    var model = new Model();
	    zrUtil.mixin(model, modelUtil.dataFormatMixin);
	    model.seriesIndex = opt.seriesIndex;
	    model.name = opt.name || '';
	    model.mainType = opt.mainType;
	    model.subType = opt.subType;

	    model.getData = function () {
	        return data;
	    };
	    return model;
	};

	// PENDING A little ugly
	modelUtil.dataFormatMixin = {
	    /**
	     * Get params for formatter
	     * @param {number} dataIndex
	     * @param {string} [dataType]
	     * @return {Object}
	     */
	    getDataParams: function getDataParams(dataIndex, dataType) {
	        var data = this.getData(dataType);

	        var seriesIndex = this.seriesIndex;
	        var seriesName = this.name;

	        var rawValue = this.getRawValue(dataIndex, dataType);
	        var rawDataIndex = data.getRawIndex(dataIndex);
	        var name = data.getName(dataIndex, true);
	        var itemOpt = data.getRawDataItem(dataIndex);

	        return {
	            componentType: this.mainType,
	            componentSubType: this.subType,
	            seriesType: this.mainType === 'series' ? this.subType : null,
	            seriesIndex: seriesIndex,
	            seriesName: seriesName,
	            name: name,
	            dataIndex: rawDataIndex,
	            data: itemOpt,
	            dataType: dataType,
	            value: rawValue,
	            color: data.getItemVisual(dataIndex, 'color'),

	            // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	            $vars: ['seriesName', 'name', 'value']
	        };
	    },

	    /**
	     * Format label
	     * @param {number} dataIndex
	     * @param {string} [status='normal'] 'normal' or 'emphasis'
	     * @param {string} [dataType]
	     * @param {number} [dimIndex]
	     * @return {string}
	     */
	    getFormattedLabel: function getFormattedLabel(dataIndex, status, dataType, dimIndex) {
	        status = status || 'normal';
	        var data = this.getData(dataType);
	        var itemModel = data.getItemModel(dataIndex);

	        var params = this.getDataParams(dataIndex, dataType);
	        if (dimIndex != null && params.value instanceof Array) {
	            params.value = params.value[dimIndex];
	        }

	        var formatter = itemModel.get(['label', status, 'formatter']);

	        if (typeof formatter === 'function') {
	            params.status = status;
	            return formatter(params);
	        } else if (typeof formatter === 'string') {
	            return formatUtil.formatTpl(formatter, params);
	        }
	    },

	    /**
	     * Get raw value in option
	     * @param {number} idx
	     * @param {string} [dataType]
	     * @return {Object}
	     */
	    getRawValue: function getRawValue(idx, dataType) {
	        var data = this.getData(dataType);
	        var dataItem = data.getRawDataItem(idx);
	        if (dataItem != null) {
	            return isObject(dataItem) && !(dataItem instanceof Array) ? dataItem.value : dataItem;
	        }
	    },

	    /**
	     * Should be implemented.
	     * @param {number} dataIndex
	     * @param {boolean} [multipleSeries=false]
	     * @param {number} [dataType]
	     * @return {string} tooltip string
	     */
	    formatTooltip: zrUtil.noop
	};

	/**
	 * Mapping to exists for merge.
	 *
	 * @public
	 * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	 * @param {Object|Array.<Object>} newCptOptions
	 * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          index of which is the same as exists.
	 */
	modelUtil.mappingToExists = function (exists, newCptOptions) {
	    // Mapping by the order by original option (but not order of
	    // new option) in merge mode. Because we should ensure
	    // some specified index (like xAxisIndex) is consistent with
	    // original option, which is easy to understand, espatially in
	    // media query. And in most case, merge option is used to
	    // update partial option but not be expected to change order.
	    newCptOptions = (newCptOptions || []).slice();

	    var result = zrUtil.map(exists || [], function (obj, index) {
	        return { exist: obj };
	    });

	    // Mapping by id or name if specified.
	    each(newCptOptions, function (cptOption, index) {
	        if (!isObject(cptOption)) {
	            return;
	        }

	        // id has highest priority.
	        for (var i = 0; i < result.length; i++) {
	            if (!result[i].option // Consider name: two map to one.
	            && cptOption.id != null && result[i].exist.id === cptOption.id + '') {
	                result[i].option = cptOption;
	                newCptOptions[index] = null;
	                return;
	            }
	        }

	        for (var i = 0; i < result.length; i++) {
	            var exist = result[i].exist;
	            if (!result[i].option // Consider name: two map to one.
	            // Can not match when both ids exist but different.
	            && (exist.id == null || cptOption.id == null) && cptOption.name != null && !modelUtil.isIdInner(cptOption) && !modelUtil.isIdInner(exist) && exist.name === cptOption.name + '') {
	                result[i].option = cptOption;
	                newCptOptions[index] = null;
	                return;
	            }
	        }
	    });

	    // Otherwise mapping by index.
	    each(newCptOptions, function (cptOption, index) {
	        if (!isObject(cptOption)) {
	            return;
	        }

	        var i = 0;
	        for (; i < result.length; i++) {
	            var exist = result[i].exist;
	            if (!result[i].option
	            // Existing model that already has id should be able to
	            // mapped to (because after mapping performed model may
	            // be assigned with a id, whish should not affect next
	            // mapping), except those has inner id.
	            && !modelUtil.isIdInner(exist)
	            // Caution:
	            // Do not overwrite id. But name can be overwritten,
	            // because axis use name as 'show label text'.
	            // 'exist' always has id and name and we dont
	            // need to check it.
	            && cptOption.id == null) {
	                result[i].option = cptOption;
	                break;
	            }
	        }

	        if (i >= result.length) {
	            result.push({ option: cptOption });
	        }
	    });

	    return result;
	};

	/**
	 * Make id and name for mapping result (result of mappingToExists)
	 * into `keyInfo` field.
	 *
	 * @public
	 * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          which order is the same as exists.
	 * @return {Array.<Object>} The input.
	 */
	modelUtil.makeIdAndName = function (mapResult) {
	    // We use this id to hash component models and view instances
	    // in echarts. id can be specified by user, or auto generated.

	    // The id generation rule ensures new view instance are able
	    // to mapped to old instance when setOption are called in
	    // no-merge mode. So we generate model id by name and plus
	    // type in view id.

	    // name can be duplicated among components, which is convenient
	    // to specify multi components (like series) by one name.

	    // Ensure that each id is distinct.
	    var idMap = {};

	    each(mapResult, function (item, index) {
	        var existCpt = item.exist;
	        existCpt && (idMap[existCpt.id] = item);
	    });

	    each(mapResult, function (item, index) {
	        var opt = item.option;

	        zrUtil.assert(!opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item, 'id duplicates: ' + (opt && opt.id));

	        opt && opt.id != null && (idMap[opt.id] = item);
	        !item.keyInfo && (item.keyInfo = {});
	    });

	    // Make name and id.
	    each(mapResult, function (item, index) {
	        var existCpt = item.exist;
	        var opt = item.option;
	        var keyInfo = item.keyInfo;

	        if (!isObject(opt)) {
	            return;
	        }

	        // name can be overwitten. Consider case: axis.name = '20km'.
	        // But id generated by name will not be changed, which affect
	        // only in that case: setOption with 'not merge mode' and view
	        // instance will be recreated, which can be accepted.
	        keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name : '\0-';

	        if (existCpt) {
	            keyInfo.id = existCpt.id;
	        } else if (opt.id != null) {
	            keyInfo.id = opt.id + '';
	        } else {
	            // Consider this situatoin:
	            //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	            //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	            // Series with the same name between optionA and optionB
	            // should be mapped.
	            var idNum = 0;
	            do {
	                keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	            } while (idMap[keyInfo.id]);
	        }

	        idMap[keyInfo.id] = item;
	    });
	};

	/**
	 * @public
	 * @param {Object} cptOption
	 * @return {boolean}
	 */
	modelUtil.isIdInner = function (cptOption) {
	    return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	};

	/**
	 * A helper for removing duplicate items between batchA and batchB,
	 * and in themselves, and categorize by series.
	 *
	 * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
	 */
	modelUtil.compressBatches = function (batchA, batchB) {
	    var mapA = {};
	    var mapB = {};

	    makeMap(batchA || [], mapA);
	    makeMap(batchB || [], mapB, mapA);

	    return [mapToArray(mapA), mapToArray(mapB)];

	    function makeMap(sourceBatch, map, otherMap) {
	        for (var i = 0, len = sourceBatch.length; i < len; i++) {
	            var seriesId = sourceBatch[i].seriesId;
	            var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);
	            var otherDataIndices = otherMap && otherMap[seriesId];

	            for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
	                var dataIndex = dataIndices[j];

	                if (otherDataIndices && otherDataIndices[dataIndex]) {
	                    otherDataIndices[dataIndex] = null;
	                } else {
	                    (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
	                }
	            }
	        }
	    }

	    function mapToArray(map, isData) {
	        var result = [];
	        for (var i in map) {
	            if (map.hasOwnProperty(i) && map[i] != null) {
	                if (isData) {
	                    result.push(+i);
	                } else {
	                    var dataIndices = mapToArray(map[i], true);
	                    dataIndices.length && result.push({ seriesId: i, dataIndex: dataIndices });
	                }
	            }
	        }
	        return result;
	    }
	};

	/**
	 * @param {module:echarts/data/List} data
	 * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
	 *                         each of which can be Array or primary type.
	 * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
	 */
	modelUtil.queryDataIndex = function (data, payload) {
	    if (payload.dataIndexInside != null) {
	        return payload.dataIndexInside;
	    } else if (payload.dataIndex != null) {
	        return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {
	            return data.indexOfRawIndex(value);
	        }) : data.indexOfRawIndex(payload.dataIndex);
	    } else if (payload.name != null) {
	        return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {
	            return data.indexOfName(value);
	        }) : data.indexOfName(payload.name);
	    }
	};

	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex, seriesId, seriesName,
	 *            geoIndex, geoId, goeName,
	 *            bmapIndex, bmapId, bmapName,
	 *            xAxisIndex, xAxisId, xAxisName,
	 *            yAxisIndex, yAxisId, yAxisName,
	 *            gridIndex, gridId, gridName,
	 *            ... (can be extended)
	 *        }
	 *        Each properties can be number|string|Array.<number>|Array.<string>
	 *        For example, a finder could be
	 *        {
	 *            seriesIndex: 3,
	 *            geoId: ['aa', 'cc'],
	 *            gridName: ['xx', 'rr']
	 *        }
	 * @param {Object} [opt]
	 * @param {string} [opt.defaultMainType]
	 * @return {Object} result like:
	 *        {
	 *            seriesModels: [seriesModel1, seriesModel2],
	 *            seriesModel: seriesModel1, // The first model
	 *            geoModels: [geoModel1, geoModel2],
	 *            geoModel: geoModel1, // The first model
	 *            ...
	 *        }
	 */
	modelUtil.parseFinder = function (ecModel, finder, opt) {
	    if (zrUtil.isString(finder)) {
	        var obj = {};
	        obj[finder + 'Index'] = 0;
	        finder = obj;
	    }

	    var defaultMainType = opt && opt.defaultMainType;
	    if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {
	        finder[defaultMainType + 'Index'] = 0;
	    }

	    var result = {};

	    each(finder, function (value, key) {
	        var value = finder[key];

	        // Exclude 'dataIndex' and other illgal keys.
	        if (key === 'dataIndex' || key === 'dataIndexInside') {
	            result[key] = value;
	            return;
	        }

	        var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
	        var mainType = parsedKey[1];
	        var queryType = parsedKey[2];

	        if (!mainType || !queryType) {
	            return;
	        }

	        var queryParam = { mainType: mainType };
	        queryParam[queryType.toLowerCase()] = value;
	        var models = ecModel.queryComponents(queryParam);
	        result[mainType + 'Models'] = models;
	        result[mainType + 'Model'] = models[0];
	    });

	    return result;
	};

	function has(obj, prop) {
	    return obj && obj.hasOwnProperty(prop);
	}

	module.exports = modelUtil;

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var textContain = __webpack_require__(508);

	var formatUtil = {};
	/**
	 * 每三位默认加,格式化
	 * @type {string|number} x
	 */
	formatUtil.addCommas = function (x) {
	    if (isNaN(x)) {
	        return '-';
	    }
	    x = (x + '').split('.');
	    return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
	};

	/**
	 * @param {string} str
	 * @param {boolean} [upperCaseFirst=false]
	 * @return {string} str
	 */
	formatUtil.toCamelCase = function (str, upperCaseFirst) {
	    str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {
	        return group1.toUpperCase();
	    });

	    if (upperCaseFirst && str) {
	        str = str.charAt(0).toUpperCase() + str.slice(1);
	    }

	    return str;
	};

	/**
	 * Normalize css liked array configuration
	 * e.g.
	 *  3 => [3, 3, 3, 3]
	 *  [4, 2] => [4, 2, 4, 2]
	 *  [4, 3, 2] => [4, 3, 2, 3]
	 * @param {number|Array.<number>} val
	 */
	formatUtil.normalizeCssArray = function (val) {
	    var len = val.length;
	    if (typeof val === 'number') {
	        return [val, val, val, val];
	    } else if (len === 2) {
	        // vertical | horizontal
	        return [val[0], val[1], val[0], val[1]];
	    } else if (len === 3) {
	        // top | horizontal | bottom
	        return [val[0], val[1], val[2], val[1]];
	    }
	    return val;
	};

	var encodeHTML = formatUtil.encodeHTML = function (source) {
	    return String(source).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
	};

	var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

	var wrapVar = function wrapVar(varName, seriesIdx) {
	    return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	};

	/**
	 * Template formatter
	 * @param {string} tpl
	 * @param {Array.<Object>|Object} paramsList
	 * @param {boolean} [encode=false]
	 * @return {string}
	 */
	formatUtil.formatTpl = function (tpl, paramsList, encode) {
	    if (!zrUtil.isArray(paramsList)) {
	        paramsList = [paramsList];
	    }
	    var seriesLen = paramsList.length;
	    if (!seriesLen) {
	        return '';
	    }

	    var $vars = paramsList[0].$vars || [];
	    for (var i = 0; i < $vars.length; i++) {
	        var alias = TPL_VAR_ALIAS[i];
	        var val = wrapVar(alias, 0);
	        tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);
	    }
	    for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	        for (var k = 0; k < $vars.length; k++) {
	            var val = paramsList[seriesIdx][$vars[k]];
	            tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
	        }
	    }

	    return tpl;
	};

	/**
	 * @param {string} str
	 * @return {string}
	 * @inner
	 */
	var s2d = function s2d(str) {
	    return str < 10 ? '0' + str : str;
	};

	/**
	 * ISO Date format
	 * @param {string} tpl
	 * @param {number} value
	 * @inner
	 */
	formatUtil.formatTime = function (tpl, value) {
	    if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
	        tpl = 'MM-dd\nyyyy';
	    }

	    var date = numberUtil.parseDate(value);
	    var y = date.getFullYear();
	    var M = date.getMonth() + 1;
	    var d = date.getDate();
	    var h = date.getHours();
	    var m = date.getMinutes();
	    var s = date.getSeconds();

	    tpl = tpl.replace('MM', s2d(M)).toLowerCase().replace('yyyy', y).replace('yy', y % 100).replace('dd', s2d(d)).replace('d', d).replace('hh', s2d(h)).replace('h', h).replace('mm', s2d(m)).replace('m', m).replace('ss', s2d(s)).replace('s', s);

	    return tpl;
	};

	/**
	 * Capital first
	 * @param {string} str
	 * @return {string}
	 */
	formatUtil.capitalFirst = function (str) {
	    return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	};

	formatUtil.truncateText = textContain.truncateText;

	module.exports = formatUtil;

/***/ },
/* 507 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * 数值处理模块
	 * @module echarts/util/number
	 */

	var number = {};

	var RADIAN_EPSILON = 1e-4;

	function _trim(str) {
	    return str.replace(/^\s+/, '').replace(/\s+$/, '');
	}

	/**
	 * Linear mapping a value from domain to range
	 * @memberOf module:echarts/util/number
	 * @param  {(number|Array.<number>)} val
	 * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	 * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	 * @param  {boolean} clamp
	 * @return {(number|Array.<number>}
	 */
	number.linearMap = function (val, domain, range, clamp) {
	    var subDomain = domain[1] - domain[0];
	    var subRange = range[1] - range[0];

	    if (subDomain === 0) {
	        return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
	    }

	    // Avoid accuracy problem in edge, such as
	    // 146.39 - 62.83 === 83.55999999999999.
	    // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	    // It is a little verbose for efficiency considering this method
	    // is a hotspot.
	    if (clamp) {
	        if (subDomain > 0) {
	            if (val <= domain[0]) {
	                return range[0];
	            } else if (val >= domain[1]) {
	                return range[1];
	            }
	        } else {
	            if (val >= domain[0]) {
	                return range[0];
	            } else if (val <= domain[1]) {
	                return range[1];
	            }
	        }
	    } else {
	        if (val === domain[0]) {
	            return range[0];
	        }
	        if (val === domain[1]) {
	            return range[1];
	        }
	    }

	    return (val - domain[0]) / subDomain * subRange + range[0];
	};

	/**
	 * Convert a percent string to absolute number.
	 * Returns NaN if percent is not a valid string or number
	 * @memberOf module:echarts/util/number
	 * @param {string|number} percent
	 * @param {number} all
	 * @return {number}
	 */
	number.parsePercent = function (percent, all) {
	    switch (percent) {
	        case 'center':
	        case 'middle':
	            percent = '50%';
	            break;
	        case 'left':
	        case 'top':
	            percent = '0%';
	            break;
	        case 'right':
	        case 'bottom':
	            percent = '100%';
	            break;
	    }
	    if (typeof percent === 'string') {
	        if (_trim(percent).match(/%$/)) {
	            return parseFloat(percent) / 100 * all;
	        }

	        return parseFloat(percent);
	    }

	    return percent == null ? NaN : +percent;
	};

	/**
	 * Fix rounding error of float numbers
	 * @param {number} x
	 * @return {number}
	 */
	number.round = function (x, precision) {
	    if (precision == null) {
	        precision = 10;
	    }
	    // Avoid range error
	    precision = Math.min(Math.max(0, precision), 20);
	    return +(+x).toFixed(precision);
	};

	number.asc = function (arr) {
	    arr.sort(function (a, b) {
	        return a - b;
	    });
	    return arr;
	};

	/**
	 * Get precision
	 * @param {number} val
	 */
	number.getPrecision = function (val) {
	    val = +val;
	    if (isNaN(val)) {
	        return 0;
	    }
	    // It is much faster than methods converting number to string as follows
	    //      var tmp = val.toString();
	    //      return tmp.length - 1 - tmp.indexOf('.');
	    // especially when precision is low
	    var e = 1;
	    var count = 0;
	    while (Math.round(val * e) / e !== val) {
	        e *= 10;
	        count++;
	    }
	    return count;
	};

	number.getPrecisionSafe = function (val) {
	    var str = val.toString();
	    var dotIndex = str.indexOf('.');
	    if (dotIndex < 0) {
	        return 0;
	    }
	    return str.length - 1 - dotIndex;
	};

	/**
	 * Minimal dicernible data precisioin according to a single pixel.
	 * @param {Array.<number>} dataExtent
	 * @param {Array.<number>} pixelExtent
	 * @return {number} precision
	 */
	number.getPixelPrecision = function (dataExtent, pixelExtent) {
	    var log = Math.log;
	    var LN10 = Math.LN10;
	    var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	    var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
	    // toFixed() digits argument must be between 0 and 20.
	    var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
	    return !isFinite(precision) ? 20 : precision;
	};

	// Number.MAX_SAFE_INTEGER, ie do not support.
	number.MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * To 0 - 2 * PI, considering negative radian.
	 * @param {number} radian
	 * @return {number}
	 */
	number.remRadian = function (radian) {
	    var pi2 = Math.PI * 2;
	    return (radian % pi2 + pi2) % pi2;
	};

	/**
	 * @param {type} radian
	 * @return {boolean}
	 */
	number.isRadianAroundZero = function (val) {
	    return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	};

	/**
	 * @param {string|Date|number} value
	 * @return {Date} date
	 */
	number.parseDate = function (value) {
	    if (value instanceof Date) {
	        return value;
	    } else if (typeof value === 'string') {
	        // Treat as ISO format. See issue #3623
	        var ret = new Date(value);
	        if (isNaN(+ret)) {
	            // FIXME new Date('1970-01-01') is UTC, new Date('1970/01/01') is local
	            ret = new Date(new Date(value.replace(/-/g, '/')) - new Date('1970/01/01'));
	        }
	        return ret;
	    }

	    return new Date(Math.round(value));
	};

	/**
	 * Quantity of a number. e.g. 0.1, 1, 10, 100
	 * @param  {number} val
	 * @return {number}
	 */
	number.quantity = function (val) {
	    return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));
	};

	// "Nice Numbers for Graph Labels" of Graphic Gems
	/**
	 * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
	 * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	 * @param  {number} val
	 * @param  {boolean} round
	 * @return {number}
	 */
	number.nice = function (val, round) {
	    var exp10 = number.quantity(val);
	    var f = val / exp10; // between 1 and 10
	    var nf;
	    if (round) {
	        if (f < 1.5) {
	            nf = 1;
	        } else if (f < 2.5) {
	            nf = 2;
	        } else if (f < 4) {
	            nf = 3;
	        } else if (f < 7) {
	            nf = 5;
	        } else {
	            nf = 10;
	        }
	    } else {
	        if (f < 1) {
	            nf = 1;
	        } else if (f < 2) {
	            nf = 2;
	        } else if (f < 3) {
	            nf = 3;
	        } else if (f < 5) {
	            nf = 5;
	        } else {
	            nf = 10;
	        }
	    }
	    return nf * exp10;
	};

	/**
	 * Order intervals asc, and split them when overlap.
	 * expect(numberUtil.reformIntervals([
	 *     {interval: [18, 62], close: [1, 1]},
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [1, 1]},
	 *     {interval: [62, 150], close: [1, 1]},
	 *     {interval: [106, 150], close: [1, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ])).toEqual([
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [0, 1]},
	 *     {interval: [18, 62], close: [0, 1]},
	 *     {interval: [62, 150], close: [0, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ]);
	 * @param {Array.<Object>} list, where `close` mean open or close
	 *        of the interval, and Infinity can be used.
	 * @return {Array.<Object>} The origin list, which has been reformed.
	 */
	number.reformIntervals = function (list) {
	    list.sort(function (a, b) {
	        return littleThan(a, b, 0) ? -1 : 1;
	    });

	    var curr = -Infinity;
	    var currClose = 1;
	    for (var i = 0; i < list.length;) {
	        var interval = list[i].interval;
	        var close = list[i].close;

	        for (var lg = 0; lg < 2; lg++) {
	            if (interval[lg] <= curr) {
	                interval[lg] = curr;
	                close[lg] = !lg ? 1 - currClose : 1;
	            }
	            curr = interval[lg];
	            currClose = close[lg];
	        }

	        if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
	            list.splice(i, 1);
	        } else {
	            i++;
	        }
	    }

	    return list;

	    function littleThan(a, b, lg) {
	        return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
	    }
	};

	/**
	 * parseFloat NaNs numeric-cast false positives (null|true|false|"")
	 * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	 * subtraction forces infinities to NaN
	 * @param {*} v
	 * @return {boolean}
	 */
	number.isNumeric = function (v) {
	    return v - parseFloat(v) >= 0;
	};

	module.exports = number;

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var textWidthCache = {};
	var textWidthCacheCounter = 0;
	var TEXT_CACHE_MAX = 5000;

	var util = __webpack_require__(504);
	var BoundingRect = __webpack_require__(509);
	var retrieve = util.retrieve;

	function getTextWidth(text, textFont) {
	    var key = text + ':' + textFont;
	    if (textWidthCache[key]) {
	        return textWidthCache[key];
	    }

	    var textLines = (text + '').split('\n');
	    var width = 0;

	    for (var i = 0, l = textLines.length; i < l; i++) {
	        // measureText 可以被覆盖以兼容不支持 Canvas 的环境
	        width = Math.max(textContain.measureText(textLines[i], textFont).width, width);
	    }

	    if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	        textWidthCacheCounter = 0;
	        textWidthCache = {};
	    }
	    textWidthCacheCounter++;
	    textWidthCache[key] = width;

	    return width;
	}

	function getTextRect(text, textFont, textAlign, textBaseline) {
	    var textLineLen = ((text || '') + '').split('\n').length;

	    var width = getTextWidth(text, textFont);
	    // FIXME 高度计算比较粗暴
	    var lineHeight = getTextWidth('国', textFont);
	    var height = textLineLen * lineHeight;

	    var rect = new BoundingRect(0, 0, width, height);
	    // Text has a special line height property
	    rect.lineHeight = lineHeight;

	    switch (textBaseline) {
	        case 'bottom':
	        case 'alphabetic':
	            rect.y -= lineHeight;
	            break;
	        case 'middle':
	            rect.y -= lineHeight / 2;
	            break;
	        // case 'hanging':
	        // case 'top':
	    }

	    // FIXME Right to left language
	    switch (textAlign) {
	        case 'end':
	        case 'right':
	            rect.x -= rect.width;
	            break;
	        case 'center':
	            rect.x -= rect.width / 2;
	            break;
	        // case 'start':
	        // case 'left':
	    }

	    return rect;
	}

	function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {

	    var x = rect.x;
	    var y = rect.y;

	    var height = rect.height;
	    var width = rect.width;

	    var textHeight = textRect.height;

	    var halfHeight = height / 2 - textHeight / 2;

	    var textAlign = 'left';

	    switch (textPosition) {
	        case 'left':
	            x -= distance;
	            y += halfHeight;
	            textAlign = 'right';
	            break;
	        case 'right':
	            x += distance + width;
	            y += halfHeight;
	            textAlign = 'left';
	            break;
	        case 'top':
	            x += width / 2;
	            y -= distance + textHeight;
	            textAlign = 'center';
	            break;
	        case 'bottom':
	            x += width / 2;
	            y += height + distance;
	            textAlign = 'center';
	            break;
	        case 'inside':
	            x += width / 2;
	            y += halfHeight;
	            textAlign = 'center';
	            break;
	        case 'insideLeft':
	            x += distance;
	            y += halfHeight;
	            textAlign = 'left';
	            break;
	        case 'insideRight':
	            x += width - distance;
	            y += halfHeight;
	            textAlign = 'right';
	            break;
	        case 'insideTop':
	            x += width / 2;
	            y += distance;
	            textAlign = 'center';
	            break;
	        case 'insideBottom':
	            x += width / 2;
	            y += height - textHeight - distance;
	            textAlign = 'center';
	            break;
	        case 'insideTopLeft':
	            x += distance;
	            y += distance;
	            textAlign = 'left';
	            break;
	        case 'insideTopRight':
	            x += width - distance;
	            y += distance;
	            textAlign = 'right';
	            break;
	        case 'insideBottomLeft':
	            x += distance;
	            y += height - textHeight - distance;
	            break;
	        case 'insideBottomRight':
	            x += width - distance;
	            y += height - textHeight - distance;
	            textAlign = 'right';
	            break;
	    }

	    return {
	        x: x,
	        y: y,
	        textAlign: textAlign,
	        textBaseline: 'top'
	    };
	}

	/**
	 * Show ellipsis if overflow.
	 *
	 * @param  {string} text
	 * @param  {string} containerWidth
	 * @param  {string} textFont
	 * @param  {number} [ellipsis='...']
	 * @param  {Object} [options]
	 * @param  {number} [options.maxIterations=3]
	 * @param  {number} [options.minChar=0] If truncate result are less
	 *                  then minChar, ellipsis will not show, which is
	 *                  better for user hint in some cases.
	 * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	 * @return {string}
	 */
	function truncateText(text, containerWidth, textFont, ellipsis, options) {
	    if (!containerWidth) {
	        return '';
	    }

	    options = options || {};

	    ellipsis = retrieve(ellipsis, '...');
	    var maxIterations = retrieve(options.maxIterations, 2);
	    var minChar = retrieve(options.minChar, 0);
	    // FIXME
	    // Other languages?
	    var cnCharWidth = getTextWidth('国', textFont);
	    // FIXME
	    // Consider proportional font?
	    var ascCharWidth = getTextWidth('a', textFont);
	    var placeholder = retrieve(options.placeholder, '');

	    // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	    // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.
	    var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.
	    for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	        contentWidth -= ascCharWidth;
	    }

	    var ellipsisWidth = getTextWidth(ellipsis);
	    if (ellipsisWidth > contentWidth) {
	        ellipsis = '';
	        ellipsisWidth = 0;
	    }

	    contentWidth = containerWidth - ellipsisWidth;

	    var textLines = (text + '').split('\n');

	    for (var i = 0, len = textLines.length; i < len; i++) {
	        var textLine = textLines[i];
	        var lineWidth = getTextWidth(textLine, textFont);

	        if (lineWidth <= containerWidth) {
	            continue;
	        }

	        for (var j = 0;; j++) {
	            if (lineWidth <= contentWidth || j >= maxIterations) {
	                textLine += ellipsis;
	                break;
	            }

	            var subLength = j === 0 ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;

	            textLine = textLine.substr(0, subLength);
	            lineWidth = getTextWidth(textLine, textFont);
	        }

	        if (textLine === '') {
	            textLine = placeholder;
	        }

	        textLines[i] = textLine;
	    }

	    return textLines.join('\n');
	}

	function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	    var width = 0;
	    var i = 0;
	    for (var len = text.length; i < len && width < contentWidth; i++) {
	        var charCode = text.charCodeAt(i);
	        width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
	    }
	    return i;
	}

	var textContain = {

	    getWidth: getTextWidth,

	    getBoundingRect: getTextRect,

	    adjustTextPositionOnRect: adjustTextPositionOnRect,

	    truncateText: truncateText,

	    measureText: function measureText(text, textFont) {
	        var ctx = util.getContext();
	        ctx.font = textFont || '12px sans-serif';
	        return ctx.measureText(text);
	    }
	};

	module.exports = textContain;

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/core/BoundingRect
	 */

	var vec2 = __webpack_require__(510);
	var matrix = __webpack_require__(511);

	var v2ApplyTransform = vec2.applyTransform;
	var mathMin = Math.min;
	var mathMax = Math.max;
	/**
	 * @alias module:echarts/core/BoundingRect
	 */
	function BoundingRect(x, y, width, height) {

	    if (width < 0) {
	        x = x + width;
	        width = -width;
	    }
	    if (height < 0) {
	        y = y + height;
	        height = -height;
	    }

	    /**
	     * @type {number}
	     */
	    this.x = x;
	    /**
	     * @type {number}
	     */
	    this.y = y;
	    /**
	     * @type {number}
	     */
	    this.width = width;
	    /**
	     * @type {number}
	     */
	    this.height = height;
	}

	BoundingRect.prototype = {

	    constructor: BoundingRect,

	    /**
	     * @param {module:echarts/core/BoundingRect} other
	     */
	    union: function union(other) {
	        var x = mathMin(other.x, this.x);
	        var y = mathMin(other.y, this.y);

	        this.width = mathMax(other.x + other.width, this.x + this.width) - x;
	        this.height = mathMax(other.y + other.height, this.y + this.height) - y;
	        this.x = x;
	        this.y = y;
	    },

	    /**
	     * @param {Array.<number>} m
	     * @methods
	     */
	    applyTransform: function () {
	        var lt = [];
	        var rb = [];
	        var lb = [];
	        var rt = [];
	        return function (m) {
	            // In case usage like this
	            // el.getBoundingRect().applyTransform(el.transform)
	            // And element has no transform
	            if (!m) {
	                return;
	            }
	            lt[0] = lb[0] = this.x;
	            lt[1] = rt[1] = this.y;
	            rb[0] = rt[0] = this.x + this.width;
	            rb[1] = lb[1] = this.y + this.height;

	            v2ApplyTransform(lt, lt, m);
	            v2ApplyTransform(rb, rb, m);
	            v2ApplyTransform(lb, lb, m);
	            v2ApplyTransform(rt, rt, m);

	            this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
	            this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
	            var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
	            var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
	            this.width = maxX - this.x;
	            this.height = maxY - this.y;
	        };
	    }(),

	    /**
	     * Calculate matrix of transforming from self to target rect
	     * @param  {module:zrender/core/BoundingRect} b
	     * @return {Array.<number>}
	     */
	    calculateTransform: function calculateTransform(b) {
	        var a = this;
	        var sx = b.width / a.width;
	        var sy = b.height / a.height;

	        var m = matrix.create();

	        // 矩阵右乘
	        matrix.translate(m, m, [-a.x, -a.y]);
	        matrix.scale(m, m, [sx, sy]);
	        matrix.translate(m, m, [b.x, b.y]);

	        return m;
	    },

	    /**
	     * @param {(module:echarts/core/BoundingRect|Object)} b
	     * @return {boolean}
	     */
	    intersect: function intersect(b) {
	        if (!b) {
	            return false;
	        }

	        if (!(b instanceof BoundingRect)) {
	            // Normalize negative width/height.
	            b = BoundingRect.create(b);
	        }

	        var a = this;
	        var ax0 = a.x;
	        var ax1 = a.x + a.width;
	        var ay0 = a.y;
	        var ay1 = a.y + a.height;

	        var bx0 = b.x;
	        var bx1 = b.x + b.width;
	        var by0 = b.y;
	        var by1 = b.y + b.height;

	        return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	    },

	    contain: function contain(x, y) {
	        var rect = this;
	        return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
	    },

	    /**
	     * @return {module:echarts/core/BoundingRect}
	     */
	    clone: function clone() {
	        return new BoundingRect(this.x, this.y, this.width, this.height);
	    },

	    /**
	     * Copy from another rect
	     */
	    copy: function copy(other) {
	        this.x = other.x;
	        this.y = other.y;
	        this.width = other.width;
	        this.height = other.height;
	    },

	    plain: function plain() {
	        return {
	            x: this.x,
	            y: this.y,
	            width: this.width,
	            height: this.height
	        };
	    }
	};

	/**
	 * @param {Object|module:zrender/core/BoundingRect} rect
	 * @param {number} rect.x
	 * @param {number} rect.y
	 * @param {number} rect.width
	 * @param {number} rect.height
	 * @return {module:zrender/core/BoundingRect}
	 */
	BoundingRect.create = function (rect) {
	    return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
	};

	module.exports = BoundingRect;

/***/ },
/* 510 */
/***/ function(module, exports) {

	'use strict';

	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;

	/**
	 * @typedef {Float32Array|Array.<number>} Vector2
	 */
	/**
	 * 二维向量类
	 * @exports zrender/tool/vector
	 */
	var vector = {
	    /**
	     * 创建一个向量
	     * @param {number} [x=0]
	     * @param {number} [y=0]
	     * @return {Vector2}
	     */
	    create: function create(x, y) {
	        var out = new ArrayCtor(2);
	        if (x == null) {
	            x = 0;
	        }
	        if (y == null) {
	            y = 0;
	        }
	        out[0] = x;
	        out[1] = y;
	        return out;
	    },

	    /**
	     * 复制向量数据
	     * @param {Vector2} out
	     * @param {Vector2} v
	     * @return {Vector2}
	     */
	    copy: function copy(out, v) {
	        out[0] = v[0];
	        out[1] = v[1];
	        return out;
	    },

	    /**
	     * 克隆一个向量
	     * @param {Vector2} v
	     * @return {Vector2}
	     */
	    clone: function clone(v) {
	        var out = new ArrayCtor(2);
	        out[0] = v[0];
	        out[1] = v[1];
	        return out;
	    },

	    /**
	     * 设置向量的两个项
	     * @param {Vector2} out
	     * @param {number} a
	     * @param {number} b
	     * @return {Vector2} 结果
	     */
	    set: function set(out, a, b) {
	        out[0] = a;
	        out[1] = b;
	        return out;
	    },

	    /**
	     * 向量相加
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    add: function add(out, v1, v2) {
	        out[0] = v1[0] + v2[0];
	        out[1] = v1[1] + v2[1];
	        return out;
	    },

	    /**
	     * 向量缩放后相加
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @param {number} a
	     */
	    scaleAndAdd: function scaleAndAdd(out, v1, v2, a) {
	        out[0] = v1[0] + v2[0] * a;
	        out[1] = v1[1] + v2[1] * a;
	        return out;
	    },

	    /**
	     * 向量相减
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    sub: function sub(out, v1, v2) {
	        out[0] = v1[0] - v2[0];
	        out[1] = v1[1] - v2[1];
	        return out;
	    },

	    /**
	     * 向量长度
	     * @param {Vector2} v
	     * @return {number}
	     */
	    len: function len(v) {
	        return Math.sqrt(this.lenSquare(v));
	    },

	    /**
	     * 向量长度平方
	     * @param {Vector2} v
	     * @return {number}
	     */
	    lenSquare: function lenSquare(v) {
	        return v[0] * v[0] + v[1] * v[1];
	    },

	    /**
	     * 向量乘法
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    mul: function mul(out, v1, v2) {
	        out[0] = v1[0] * v2[0];
	        out[1] = v1[1] * v2[1];
	        return out;
	    },

	    /**
	     * 向量除法
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    div: function div(out, v1, v2) {
	        out[0] = v1[0] / v2[0];
	        out[1] = v1[1] / v2[1];
	        return out;
	    },

	    /**
	     * 向量点乘
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @return {number}
	     */
	    dot: function dot(v1, v2) {
	        return v1[0] * v2[0] + v1[1] * v2[1];
	    },

	    /**
	     * 向量缩放
	     * @param {Vector2} out
	     * @param {Vector2} v
	     * @param {number} s
	     */
	    scale: function scale(out, v, s) {
	        out[0] = v[0] * s;
	        out[1] = v[1] * s;
	        return out;
	    },

	    /**
	     * 向量归一化
	     * @param {Vector2} out
	     * @param {Vector2} v
	     */
	    normalize: function normalize(out, v) {
	        var d = vector.len(v);
	        if (d === 0) {
	            out[0] = 0;
	            out[1] = 0;
	        } else {
	            out[0] = v[0] / d;
	            out[1] = v[1] / d;
	        }
	        return out;
	    },

	    /**
	     * 计算向量间距离
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @return {number}
	     */
	    distance: function distance(v1, v2) {
	        return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
	    },

	    /**
	     * 向量距离平方
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @return {number}
	     */
	    distanceSquare: function distanceSquare(v1, v2) {
	        return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	    },

	    /**
	     * 求负向量
	     * @param {Vector2} out
	     * @param {Vector2} v
	     */
	    negate: function negate(out, v) {
	        out[0] = -v[0];
	        out[1] = -v[1];
	        return out;
	    },

	    /**
	     * 插值两个点
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @param {number} t
	     */
	    lerp: function lerp(out, v1, v2, t) {
	        out[0] = v1[0] + t * (v2[0] - v1[0]);
	        out[1] = v1[1] + t * (v2[1] - v1[1]);
	        return out;
	    },

	    /**
	     * 矩阵左乘向量
	     * @param {Vector2} out
	     * @param {Vector2} v
	     * @param {Vector2} m
	     */
	    applyTransform: function applyTransform(out, v, m) {
	        var x = v[0];
	        var y = v[1];
	        out[0] = m[0] * x + m[2] * y + m[4];
	        out[1] = m[1] * x + m[3] * y + m[5];
	        return out;
	    },
	    /**
	     * 求两个向量最小值
	     * @param  {Vector2} out
	     * @param  {Vector2} v1
	     * @param  {Vector2} v2
	     */
	    min: function min(out, v1, v2) {
	        out[0] = Math.min(v1[0], v2[0]);
	        out[1] = Math.min(v1[1], v2[1]);
	        return out;
	    },
	    /**
	     * 求两个向量最大值
	     * @param  {Vector2} out
	     * @param  {Vector2} v1
	     * @param  {Vector2} v2
	     */
	    max: function max(out, v1, v2) {
	        out[0] = Math.max(v1[0], v2[0]);
	        out[1] = Math.max(v1[1], v2[1]);
	        return out;
	    }
	};

	vector.length = vector.len;
	vector.lengthSquare = vector.lenSquare;
	vector.dist = vector.distance;
	vector.distSquare = vector.distanceSquare;

	module.exports = vector;

/***/ },
/* 511 */
/***/ function(module, exports) {

	'use strict';

	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * 3x2矩阵操作类
	 * @exports zrender/tool/matrix
	 */
	var matrix = {
	    /**
	     * 创建一个单位矩阵
	     * @return {Float32Array|Array.<number>}
	     */
	    create: function create() {
	        var out = new ArrayCtor(6);
	        matrix.identity(out);

	        return out;
	    },
	    /**
	     * 设置矩阵为单位矩阵
	     * @param {Float32Array|Array.<number>} out
	     */
	    identity: function identity(out) {
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 1;
	        out[4] = 0;
	        out[5] = 0;
	        return out;
	    },
	    /**
	     * 复制矩阵
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} m
	     */
	    copy: function copy(out, m) {
	        out[0] = m[0];
	        out[1] = m[1];
	        out[2] = m[2];
	        out[3] = m[3];
	        out[4] = m[4];
	        out[5] = m[5];
	        return out;
	    },
	    /**
	     * 矩阵相乘
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} m1
	     * @param {Float32Array|Array.<number>} m2
	     */
	    mul: function mul(out, m1, m2) {
	        // Consider matrix.mul(m, m2, m);
	        // where out is the same as m2.
	        // So use temp variable to escape error.
	        var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	        var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	        var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	        var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	        var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	        var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	        out[0] = out0;
	        out[1] = out1;
	        out[2] = out2;
	        out[3] = out3;
	        out[4] = out4;
	        out[5] = out5;
	        return out;
	    },
	    /**
	     * 平移变换
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     * @param {Float32Array|Array.<number>} v
	     */
	    translate: function translate(out, a, v) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[3];
	        out[4] = a[4] + v[0];
	        out[5] = a[5] + v[1];
	        return out;
	    },
	    /**
	     * 旋转变换
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     * @param {number} rad
	     */
	    rotate: function rotate(out, a, rad) {
	        var aa = a[0];
	        var ac = a[2];
	        var atx = a[4];
	        var ab = a[1];
	        var ad = a[3];
	        var aty = a[5];
	        var st = Math.sin(rad);
	        var ct = Math.cos(rad);

	        out[0] = aa * ct + ab * st;
	        out[1] = -aa * st + ab * ct;
	        out[2] = ac * ct + ad * st;
	        out[3] = -ac * st + ct * ad;
	        out[4] = ct * atx + st * aty;
	        out[5] = ct * aty - st * atx;
	        return out;
	    },
	    /**
	     * 缩放变换
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     * @param {Float32Array|Array.<number>} v
	     */
	    scale: function scale(out, a, v) {
	        var vx = v[0];
	        var vy = v[1];
	        out[0] = a[0] * vx;
	        out[1] = a[1] * vy;
	        out[2] = a[2] * vx;
	        out[3] = a[3] * vy;
	        out[4] = a[4] * vx;
	        out[5] = a[5] * vy;
	        return out;
	    },
	    /**
	     * 求逆矩阵
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     */
	    invert: function invert(out, a) {

	        var aa = a[0];
	        var ac = a[2];
	        var atx = a[4];
	        var ab = a[1];
	        var ad = a[3];
	        var aty = a[5];

	        var det = aa * ad - ab * ac;
	        if (!det) {
	            return null;
	        }
	        det = 1.0 / det;

	        out[0] = ad * det;
	        out[1] = -ab * det;
	        out[2] = -ac * det;
	        out[3] = aa * det;
	        out[4] = (ac * aty - ad * atx) * det;
	        out[5] = (ab * atx - aa * aty) * det;
	        return out;
	    }
	};

	module.exports = matrix;

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * @module echarts/model/Model
	 */

	var zrUtil = __webpack_require__(504);
	var clazzUtil = __webpack_require__(513);
	var env = __webpack_require__(502);

	/**
	 * @alias module:echarts/model/Model
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} [parentModel]
	 * @param {module:echarts/model/Global} [ecModel]
	 */
	function Model(option, parentModel, ecModel) {
	    /**
	     * @type {module:echarts/model/Model}
	     * @readOnly
	     */
	    this.parentModel = parentModel;

	    /**
	     * @type {module:echarts/model/Global}
	     * @readOnly
	     */
	    this.ecModel = ecModel;

	    /**
	     * @type {Object}
	     * @protected
	     */
	    this.option = option;

	    // Simple optimization
	    // if (this.init) {
	    //     if (arguments.length <= 4) {
	    //         this.init(option, parentModel, ecModel, extraOpt);
	    //     }
	    //     else {
	    //         this.init.apply(this, arguments);
	    //     }
	    // }
	}

	Model.prototype = {

	    constructor: Model,

	    /**
	     * Model 的初始化函数
	     * @param {Object} option
	     */
	    init: null,

	    /**
	     * 从新的 Option merge
	     */
	    mergeOption: function mergeOption(option) {
	        zrUtil.merge(this.option, option, true);
	    },

	    /**
	     * @param {string|Array.<string>} path
	     * @param {boolean} [ignoreParent=false]
	     * @return {*}
	     */
	    get: function get(path, ignoreParent) {
	        if (path == null) {
	            return this.option;
	        }

	        return doGet(this.option, this.parsePath(path), !ignoreParent && getParent(this, path));
	    },

	    /**
	     * @param {string} key
	     * @param {boolean} [ignoreParent=false]
	     * @return {*}
	     */
	    getShallow: function getShallow(key, ignoreParent) {
	        var option = this.option;

	        var val = option == null ? option : option[key];
	        var parentModel = !ignoreParent && getParent(this, key);
	        if (val == null && parentModel) {
	            val = parentModel.getShallow(key);
	        }
	        return val;
	    },

	    /**
	     * @param {string|Array.<string>} path
	     * @param {module:echarts/model/Model} [parentModel]
	     * @return {module:echarts/model/Model}
	     */
	    getModel: function getModel(path, parentModel) {
	        var obj = path == null ? this.option : doGet(this.option, path = this.parsePath(path));

	        var thisParentModel;
	        parentModel = parentModel || (thisParentModel = getParent(this, path)) && thisParentModel.getModel(path);

	        return new Model(obj, parentModel, this.ecModel);
	    },

	    /**
	     * If model has option
	     */
	    isEmpty: function isEmpty() {
	        return this.option == null;
	    },

	    restoreData: function restoreData() {},

	    // Pending
	    clone: function clone() {
	        var Ctor = this.constructor;
	        return new Ctor(zrUtil.clone(this.option));
	    },

	    setReadOnly: function setReadOnly(properties) {
	        clazzUtil.setReadOnly(this, properties);
	    },

	    // If path is null/undefined, return null/undefined.
	    parsePath: function parsePath(path) {
	        if (typeof path === 'string') {
	            path = path.split('.');
	        }
	        return path;
	    },

	    /**
	     * @param {Function} getParentMethod
	     *        param {Array.<string>|string} path
	     *        return {module:echarts/model/Model}
	     */
	    customizeGetParent: function customizeGetParent(getParentMethod) {
	        clazzUtil.set(this, 'getParent', getParentMethod);
	    },

	    isAnimationEnabled: function isAnimationEnabled() {
	        if (!env.node) {
	            if (this.option.animation != null) {
	                return !!this.option.animation;
	            } else if (this.parentModel) {
	                return this.parentModel.isAnimationEnabled();
	            }
	        }
	    }
	};

	function doGet(obj, pathArr, parentModel) {
	    for (var i = 0; i < pathArr.length; i++) {
	        // Ignore empty
	        if (!pathArr[i]) {
	            continue;
	        }
	        // obj could be number/string/... (like 0)
	        obj = obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[pathArr[i]] : null;
	        if (obj == null) {
	            break;
	        }
	    }
	    if (obj == null && parentModel) {
	        obj = parentModel.get(pathArr);
	    }
	    return obj;
	}

	function getParent(model, path) {
	    var getParentMethod = clazzUtil.get(model, 'getParent');
	    return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
	}

	// Enable Model.extend.
	clazzUtil.enableClassExtend(Model);

	var mixin = zrUtil.mixin;
	mixin(Model, __webpack_require__(514));
	mixin(Model, __webpack_require__(516));
	mixin(Model, __webpack_require__(517));
	mixin(Model, __webpack_require__(518));

	module.exports = Model;

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var clazz = {};

	var TYPE_DELIMITER = '.';
	var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	var MEMBER_PRIFIX = '\0ec_\0';

	/**
	 * Hide private class member.
	 * The same behavior as `host[name] = value;` (can be right-value)
	 * @public
	 */
	clazz.set = function (host, name, value) {
	    return host[MEMBER_PRIFIX + name] = value;
	};

	/**
	 * Hide private class member.
	 * The same behavior as `host[name];`
	 * @public
	 */
	clazz.get = function (host, name) {
	    return host[MEMBER_PRIFIX + name];
	};

	/**
	 * For hidden private class member.
	 * The same behavior as `host.hasOwnProperty(name);`
	 * @public
	 */
	clazz.hasOwn = function (host, name) {
	    return host.hasOwnProperty(MEMBER_PRIFIX + name);
	};

	/**
	 * @public
	 */
	var parseClassType = clazz.parseClassType = function (componentType) {
	    var ret = { main: '', sub: '' };
	    if (componentType) {
	        componentType = componentType.split(TYPE_DELIMITER);
	        ret.main = componentType[0] || '';
	        ret.sub = componentType[1] || '';
	    }
	    return ret;
	};

	/**
	 * @public
	 */
	function checkClassType(componentType) {
	    zrUtil.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
	}

	/**
	 * @public
	 */
	clazz.enableClassExtend = function (RootClass, mandatoryMethods) {

	    RootClass.$constructor = RootClass;
	    RootClass.extend = function (proto) {

	        if (__DEV__) {
	            zrUtil.each(mandatoryMethods, function (method) {
	                if (!proto[method]) {
	                    console.warn('Method `' + method + '` should be implemented' + (proto.type ? ' in ' + proto.type : '') + '.');
	                }
	            });
	        }

	        var superClass = this;
	        var ExtendedClass = function ExtendedClass() {
	            if (!proto.$constructor) {
	                superClass.apply(this, arguments);
	            } else {
	                proto.$constructor.apply(this, arguments);
	            }
	        };

	        zrUtil.extend(ExtendedClass.prototype, proto);

	        ExtendedClass.extend = this.extend;
	        ExtendedClass.superCall = superCall;
	        ExtendedClass.superApply = superApply;
	        zrUtil.inherits(ExtendedClass, this);
	        ExtendedClass.superClass = superClass;

	        return ExtendedClass;
	    };
	};

	// superCall should have class info, which can not be fetch from 'this'.
	// Consider this case:
	// class A has method f,
	// class B inherits class A, overrides method f, f call superApply('f'),
	// class C inherits class B, do not overrides method f,
	// then when method of class C is called, dead loop occured.
	function superCall(context, methodName) {
	    var args = zrUtil.slice(arguments, 2);
	    return this.superClass.prototype[methodName].apply(context, args);
	}

	function superApply(context, methodName, args) {
	    return this.superClass.prototype[methodName].apply(context, args);
	}

	/**
	 * @param {Object} entity
	 * @param {Object} options
	 * @param {boolean} [options.registerWhenExtend]
	 * @public
	 */
	clazz.enableClassManagement = function (entity, options) {
	    options = options || {};

	    /**
	     * Component model classes
	     * key: componentType,
	     * value:
	     *     componentClass, when componentType is 'xxx'
	     *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	     * @type {Object}
	     */
	    var storage = {};

	    entity.registerClass = function (Clazz, componentType) {
	        if (componentType) {
	            checkClassType(componentType);
	            componentType = parseClassType(componentType);

	            if (!componentType.sub) {
	                if (__DEV__) {
	                    if (storage[componentType.main]) {
	                        console.warn(componentType.main + ' exists.');
	                    }
	                }
	                storage[componentType.main] = Clazz;
	            } else if (componentType.sub !== IS_CONTAINER) {
	                var container = makeContainer(componentType);
	                container[componentType.sub] = Clazz;
	            }
	        }
	        return Clazz;
	    };

	    entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
	        var Clazz = storage[componentMainType];

	        if (Clazz && Clazz[IS_CONTAINER]) {
	            Clazz = subType ? Clazz[subType] : null;
	        }

	        if (throwWhenNotFound && !Clazz) {
	            throw new Error(!subType ? componentMainType + '.' + 'type should be specified.' : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.');
	        }

	        return Clazz;
	    };

	    entity.getClassesByMainType = function (componentType) {
	        componentType = parseClassType(componentType);

	        var result = [];
	        var obj = storage[componentType.main];

	        if (obj && obj[IS_CONTAINER]) {
	            zrUtil.each(obj, function (o, type) {
	                type !== IS_CONTAINER && result.push(o);
	            });
	        } else {
	            result.push(obj);
	        }

	        return result;
	    };

	    entity.hasClass = function (componentType) {
	        // Just consider componentType.main.
	        componentType = parseClassType(componentType);
	        return !!storage[componentType.main];
	    };

	    /**
	     * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	     */
	    entity.getAllClassMainTypes = function () {
	        var types = [];
	        zrUtil.each(storage, function (obj, type) {
	            types.push(type);
	        });
	        return types;
	    };

	    /**
	     * If a main type is container and has sub types
	     * @param  {string}  mainType
	     * @return {boolean}
	     */
	    entity.hasSubTypes = function (componentType) {
	        componentType = parseClassType(componentType);
	        var obj = storage[componentType.main];
	        return obj && obj[IS_CONTAINER];
	    };

	    entity.parseClassType = parseClassType;

	    function makeContainer(componentType) {
	        var container = storage[componentType.main];
	        if (!container || !container[IS_CONTAINER]) {
	            container = storage[componentType.main] = {};
	            container[IS_CONTAINER] = true;
	        }
	        return container;
	    }

	    if (options.registerWhenExtend) {
	        var originalExtend = entity.extend;
	        if (originalExtend) {
	            entity.extend = function (proto) {
	                var ExtendedClass = originalExtend.call(this, proto);
	                return entity.registerClass(ExtendedClass, proto.type);
	            };
	        }
	    }

	    return entity;
	};

	/**
	 * @param {string|Array.<string>} properties
	 */
	clazz.setReadOnly = function (obj, properties) {
	    // FIXME It seems broken in IE8 simulation of IE11
	    // if (!zrUtil.isArray(properties)) {
	    //     properties = properties != null ? [properties] : [];
	    // }
	    // zrUtil.each(properties, function (prop) {
	    //     var value = obj[prop];

	    //     Object.defineProperty
	    //         && Object.defineProperty(obj, prop, {
	    //             value: value, writable: false
	    //         });
	    //     zrUtil.isArray(obj[prop])
	    //         && Object.freeze
	    //         && Object.freeze(obj[prop]);
	    // });
	};

	module.exports = clazz;

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _getLineStyle = __webpack_require__(515)([['lineWidth', 'width'], ['stroke', 'color'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	module.exports = {
	    getLineStyle: function getLineStyle(excludes) {
	        var style = _getLineStyle.call(this, excludes);
	        var lineDash = this.getLineDash(style.lineWidth);
	        lineDash && (style.lineDash = lineDash);
	        return style;
	    },

	    getLineDash: function getLineDash(lineWidth) {
	        if (lineWidth == null) {
	            lineWidth = 1;
	        }
	        var lineType = this.get('type');
	        var dotSize = Math.max(lineWidth, 2);
	        var dashSize = lineWidth * 4;
	        return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize];
	    }
	};

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO Parse shadow style
	// TODO Only shallow path support

	var zrUtil = __webpack_require__(504);

	module.exports = function (properties) {
	    // Normalize
	    for (var i = 0; i < properties.length; i++) {
	        if (!properties[i][1]) {
	            properties[i][1] = properties[i][0];
	        }
	    }
	    return function (excludes) {
	        var style = {};
	        for (var i = 0; i < properties.length; i++) {
	            var propName = properties[i][1];
	            if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {
	                continue;
	            }
	            var val = this.getShallow(propName);
	            if (val != null) {
	                style[properties[i][0]] = val;
	            }
	        }
	        return style;
	    };
	};

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    getAreaStyle: __webpack_require__(515)([['fill', 'color'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['opacity'], ['shadowColor']])
	};

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var textContain = __webpack_require__(508);

	function getShallow(model, path) {
	    return model && model.getShallow(path);
	}

	module.exports = {
	    /**
	     * Get color property or get color from option.textStyle.color
	     * @return {string}
	     */
	    getTextColor: function getTextColor() {
	        var ecModel = this.ecModel;
	        return this.getShallow('color') || ecModel && ecModel.get('textStyle.color');
	    },

	    /**
	     * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	     * @return {string}
	     */
	    getFont: function getFont() {
	        var ecModel = this.ecModel;
	        var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
	        return [
	        // FIXME in node-canvas fontWeight is before fontStyle
	        this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'), this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'), (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px', this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'].join(' ');
	    },

	    getTextRect: function getTextRect(text) {
	        return textContain.getBoundingRect(text, this.getFont(), this.getShallow('align'), this.getShallow('baseline'));
	    },

	    truncateText: function truncateText(text, containerWidth, ellipsis, options) {
	        return textContain.truncateText(text, containerWidth, this.getFont(), ellipsis, options);
	    }
	};

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _getItemStyle = __webpack_require__(515)([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor'], ['textPosition'], ['textAlign']]);
	module.exports = {
	    getItemStyle: function getItemStyle(excludes) {
	        var style = _getItemStyle.call(this, excludes);
	        var lineDash = this.getBorderLineDash();
	        lineDash && (style.lineDash = lineDash);
	        return style;
	    },

	    getBorderLineDash: function getBorderLineDash() {
	        var lineType = this.get('borderType');
	        return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [5, 5] : [1, 1];
	    }
	};

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */

	var Model = __webpack_require__(512);
	var zrUtil = __webpack_require__(504);
	var arrayPush = Array.prototype.push;
	var componentUtil = __webpack_require__(520);
	var clazzUtil = __webpack_require__(513);
	var layout = __webpack_require__(521);

	/**
	 * @alias module:echarts/model/Component
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {module:echarts/model/Model} ecModel
	 */
	var ComponentModel = Model.extend({

	    type: 'component',

	    /**
	     * @readOnly
	     * @type {string}
	     */
	    id: '',

	    /**
	     * @readOnly
	     */
	    name: '',

	    /**
	     * @readOnly
	     * @type {string}
	     */
	    mainType: '',

	    /**
	     * @readOnly
	     * @type {string}
	     */
	    subType: '',

	    /**
	     * @readOnly
	     * @type {number}
	     */
	    componentIndex: 0,

	    /**
	     * @type {Object}
	     * @protected
	     */
	    defaultOption: null,

	    /**
	     * @type {module:echarts/model/Global}
	     * @readOnly
	     */
	    ecModel: null,

	    /**
	     * key: componentType
	     * value:  Component model list, can not be null.
	     * @type {Object.<string, Array.<module:echarts/model/Model>>}
	     * @readOnly
	     */
	    dependentModels: [],

	    /**
	     * @type {string}
	     * @readOnly
	     */
	    uid: null,

	    /**
	     * Support merge layout params.
	     * Only support 'box' now (left/right/top/bottom/width/height).
	     * @type {string|Object} Object can be {ignoreSize: true}
	     * @readOnly
	     */
	    layoutMode: null,

	    $constructor: function $constructor(option, parentModel, ecModel, extraOpt) {
	        Model.call(this, option, parentModel, ecModel, extraOpt);

	        this.uid = componentUtil.getUID('componentModel');
	    },

	    init: function init(option, parentModel, ecModel, extraOpt) {
	        this.mergeDefaultAndTheme(option, ecModel);
	    },

	    mergeDefaultAndTheme: function mergeDefaultAndTheme(option, ecModel) {
	        var layoutMode = this.layoutMode;
	        var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};

	        var themeModel = ecModel.getTheme();
	        zrUtil.merge(option, themeModel.get(this.mainType));
	        zrUtil.merge(option, this.getDefaultOption());

	        if (layoutMode) {
	            layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	        }
	    },

	    mergeOption: function mergeOption(option, extraOpt) {
	        zrUtil.merge(this.option, option, true);

	        var layoutMode = this.layoutMode;
	        if (layoutMode) {
	            layout.mergeLayoutParam(this.option, option, layoutMode);
	        }
	    },

	    // Hooker after init or mergeOption
	    optionUpdated: function optionUpdated(newCptOption, isInit) {},

	    getDefaultOption: function getDefaultOption() {
	        if (!clazzUtil.hasOwn(this, '__defaultOption')) {
	            var optList = [];
	            var Class = this.constructor;
	            while (Class) {
	                var opt = Class.prototype.defaultOption;
	                opt && optList.push(opt);
	                Class = Class.superClass;
	            }

	            var defaultOption = {};
	            for (var i = optList.length - 1; i >= 0; i--) {
	                defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	            }
	            clazzUtil.set(this, '__defaultOption', defaultOption);
	        }
	        return clazzUtil.get(this, '__defaultOption');
	    },

	    getReferringComponents: function getReferringComponents(mainType) {
	        return this.ecModel.queryComponents({
	            mainType: mainType,
	            index: this.get(mainType + 'Index', true),
	            id: this.get(mainType + 'Id', true)
	        });
	    }

	});

	// Reset ComponentModel.extend, add preConstruct.
	// clazzUtil.enableClassExtend(
	//     ComponentModel,
	//     function (option, parentModel, ecModel, extraOpt) {
	//         // Set dependentModels, componentIndex, name, id, mainType, subType.
	//         zrUtil.extend(this, extraOpt);

	//         this.uid = componentUtil.getUID('componentModel');

	//         // this.setReadOnly([
	//         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	//         //     'dependentModels', 'componentIndex'
	//         // ]);
	//     }
	// );

	// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	clazzUtil.enableClassManagement(ComponentModel, { registerWhenExtend: true });
	componentUtil.enableSubTypeDefaulter(ComponentModel);

	// Add capability of ComponentModel.topologicalTravel.
	componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);

	function getDependencies(componentType) {
	    var deps = [];
	    zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	        arrayPush.apply(deps, Clazz.prototype.dependencies || []);
	    });
	    // Ensure main type
	    return zrUtil.map(deps, function (type) {
	        return clazzUtil.parseClassType(type).main;
	    });
	}

	zrUtil.mixin(ComponentModel, __webpack_require__(522));

	module.exports = ComponentModel;

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var clazz = __webpack_require__(513);

	var parseClassType = clazz.parseClassType;

	var base = 0;

	var componentUtil = {};

	var DELIMITER = '_';

	/**
	 * @public
	 * @param {string} type
	 * @return {string}
	 */
	componentUtil.getUID = function (type) {
	    // Considering the case of crossing js context,
	    // use Math.random to make id as unique as possible.
	    return [type || '', base++, Math.random()].join(DELIMITER);
	};

	/**
	 * @inner
	 */
	componentUtil.enableSubTypeDefaulter = function (entity) {

	    var subTypeDefaulters = {};

	    entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	        componentType = parseClassType(componentType);
	        subTypeDefaulters[componentType.main] = defaulter;
	    };

	    entity.determineSubType = function (componentType, option) {
	        var type = option.type;
	        if (!type) {
	            var componentTypeMain = parseClassType(componentType).main;
	            if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	                type = subTypeDefaulters[componentTypeMain](option);
	            }
	        }
	        return type;
	    };

	    return entity;
	};

	/**
	 * Topological travel on Activity Network (Activity On Vertices).
	 * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	 *
	 * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	 *
	 * If there is circle dependencey, Error will be thrown.
	 *
	 */
	componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {

	    /**
	     * @public
	     * @param {Array.<string>} targetNameList Target Component type list.
	     *                                           Can be ['aa', 'bb', 'aa.xx']
	     * @param {Array.<string>} fullNameList By which we can build dependency graph.
	     * @param {Function} callback Params: componentType, dependencies.
	     * @param {Object} context Scope of callback.
	     */
	    entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	        if (!targetNameList.length) {
	            return;
	        }

	        var result = makeDepndencyGraph(fullNameList);
	        var graph = result.graph;
	        var stack = result.noEntryList;

	        var targetNameSet = {};
	        zrUtil.each(targetNameList, function (name) {
	            targetNameSet[name] = true;
	        });

	        while (stack.length) {
	            var currComponentType = stack.pop();
	            var currVertex = graph[currComponentType];
	            var isInTargetNameSet = !!targetNameSet[currComponentType];
	            if (isInTargetNameSet) {
	                callback.call(context, currComponentType, currVertex.originalDeps.slice());
	                delete targetNameSet[currComponentType];
	            }
	            zrUtil.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
	        }

	        zrUtil.each(targetNameSet, function () {
	            throw new Error('Circle dependency may exists');
	        });

	        function removeEdge(succComponentType) {
	            graph[succComponentType].entryCount--;
	            if (graph[succComponentType].entryCount === 0) {
	                stack.push(succComponentType);
	            }
	        }

	        // Consider this case: legend depends on series, and we call
	        // chart.setOption({series: [...]}), where only series is in option.
	        // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	        // not be called, but only sereis.mergeOption is called. Thus legend
	        // have no chance to update its local record about series (like which
	        // name of series is available in legend).
	        function removeEdgeAndAdd(succComponentType) {
	            targetNameSet[succComponentType] = true;
	            removeEdge(succComponentType);
	        }
	    };

	    /**
	     * DepndencyGraph: {Object}
	     * key: conponentType,
	     * value: {
	     *     successor: [conponentTypes...],
	     *     originalDeps: [conponentTypes...],
	     *     entryCount: {number}
	     * }
	     */
	    function makeDepndencyGraph(fullNameList) {
	        var graph = {};
	        var noEntryList = [];

	        zrUtil.each(fullNameList, function (name) {

	            var thisItem = createDependencyGraphItem(graph, name);
	            var originalDeps = thisItem.originalDeps = dependencyGetter(name);

	            var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	            thisItem.entryCount = availableDeps.length;
	            if (thisItem.entryCount === 0) {
	                noEntryList.push(name);
	            }

	            zrUtil.each(availableDeps, function (dependentName) {
	                if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	                    thisItem.predecessor.push(dependentName);
	                }
	                var thatItem = createDependencyGraphItem(graph, dependentName);
	                if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	                    thatItem.successor.push(name);
	                }
	            });
	        });

	        return { graph: graph, noEntryList: noEntryList };
	    }

	    function createDependencyGraphItem(graph, name) {
	        if (!graph[name]) {
	            graph[name] = { predecessor: [], successor: [] };
	        }
	        return graph[name];
	    }

	    function getAvailableDependencies(originalDeps, fullNameList) {
	        var availableDeps = [];
	        zrUtil.each(originalDeps, function (dep) {
	            zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	        });
	        return availableDeps;
	    }
	};

	module.exports = componentUtil;

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Layout helpers for each component positioning


	var zrUtil = __webpack_require__(504);
	var BoundingRect = __webpack_require__(509);
	var numberUtil = __webpack_require__(507);
	var formatUtil = __webpack_require__(506);
	var parsePercent = numberUtil.parsePercent;
	var each = zrUtil.each;

	var layout = {};

	var LOCATION_PARAMS = layout.LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];

	function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	    var x = 0;
	    var y = 0;
	    if (maxWidth == null) {
	        maxWidth = Infinity;
	    }
	    if (maxHeight == null) {
	        maxHeight = Infinity;
	    }
	    var currentLineMaxSize = 0;
	    group.eachChild(function (child, idx) {
	        var position = child.position;
	        var rect = child.getBoundingRect();
	        var nextChild = group.childAt(idx + 1);
	        var nextChildRect = nextChild && nextChild.getBoundingRect();
	        var nextX;
	        var nextY;
	        if (orient === 'horizontal') {
	            var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
	            nextX = x + moveX;
	            // Wrap when width exceeds maxWidth or meet a `newline` group
	            if (nextX > maxWidth || child.newline) {
	                x = 0;
	                nextX = moveX;
	                y += currentLineMaxSize + gap;
	                currentLineMaxSize = rect.height;
	            } else {
	                currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	            }
	        } else {
	            var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
	            nextY = y + moveY;
	            // Wrap when width exceeds maxHeight or meet a `newline` group
	            if (nextY > maxHeight || child.newline) {
	                x += currentLineMaxSize + gap;
	                y = 0;
	                nextY = moveY;
	                currentLineMaxSize = rect.width;
	            } else {
	                currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	            }
	        }

	        if (child.newline) {
	            return;
	        }

	        position[0] = x;
	        position[1] = y;

	        orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
	    });
	}

	/**
	 * VBox or HBox layouting
	 * @param {string} orient
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	layout.box = boxLayout;

	/**
	 * VBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	layout.vbox = zrUtil.curry(boxLayout, 'vertical');

	/**
	 * HBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	layout.hbox = zrUtil.curry(boxLayout, 'horizontal');

	/**
	 * If x or x2 is not specified or 'center' 'left' 'right',
	 * the width would be as long as possible.
	 * If y or y2 is not specified or 'middle' 'top' 'bottom',
	 * the height would be as long as possible.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.x]
	 * @param {number|string} [positionInfo.y]
	 * @param {number|string} [positionInfo.x2]
	 * @param {number|string} [positionInfo.y2]
	 * @param {Object} containerRect
	 * @param {string|number} margin
	 * @return {Object} {width, height}
	 */
	layout.getAvailableSize = function (positionInfo, containerRect, margin) {
	    var containerWidth = containerRect.width;
	    var containerHeight = containerRect.height;

	    var x = parsePercent(positionInfo.x, containerWidth);
	    var y = parsePercent(positionInfo.y, containerHeight);
	    var x2 = parsePercent(positionInfo.x2, containerWidth);
	    var y2 = parsePercent(positionInfo.y2, containerHeight);

	    (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	    (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	    (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	    (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);

	    margin = formatUtil.normalizeCssArray(margin || 0);

	    return {
	        width: Math.max(x2 - x - margin[1] - margin[3], 0),
	        height: Math.max(y2 - y - margin[0] - margin[2], 0)
	    };
	};

	/**
	 * Parse position info.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width]
	 * @param {number|string} [positionInfo.height]
	 * @param {number|string} [positionInfo.aspect] Aspect is width / height
	 * @param {Object} containerRect
	 * @param {string|number} [margin]
	 *
	 * @return {module:zrender/core/BoundingRect}
	 */
	layout.getLayoutRect = function (positionInfo, containerRect, margin) {
	    margin = formatUtil.normalizeCssArray(margin || 0);

	    var containerWidth = containerRect.width;
	    var containerHeight = containerRect.height;

	    var left = parsePercent(positionInfo.left, containerWidth);
	    var top = parsePercent(positionInfo.top, containerHeight);
	    var right = parsePercent(positionInfo.right, containerWidth);
	    var bottom = parsePercent(positionInfo.bottom, containerHeight);
	    var width = parsePercent(positionInfo.width, containerWidth);
	    var height = parsePercent(positionInfo.height, containerHeight);

	    var verticalMargin = margin[2] + margin[0];
	    var horizontalMargin = margin[1] + margin[3];
	    var aspect = positionInfo.aspect;

	    // If width is not specified, calculate width from left and right
	    if (isNaN(width)) {
	        width = containerWidth - right - horizontalMargin - left;
	    }
	    if (isNaN(height)) {
	        height = containerHeight - bottom - verticalMargin - top;
	    }

	    // If width and height are not given
	    // 1. Graph should not exceeds the container
	    // 2. Aspect must be keeped
	    // 3. Graph should take the space as more as possible
	    if (isNaN(width) && isNaN(height)) {
	        if (aspect > containerWidth / containerHeight) {
	            width = containerWidth * 0.8;
	        } else {
	            height = containerHeight * 0.8;
	        }
	    }

	    if (aspect != null) {
	        // Calculate width or height with given aspect
	        if (isNaN(width)) {
	            width = aspect * height;
	        }
	        if (isNaN(height)) {
	            height = width / aspect;
	        }
	    }

	    // If left is not specified, calculate left from right and width
	    if (isNaN(left)) {
	        left = containerWidth - right - width - horizontalMargin;
	    }
	    if (isNaN(top)) {
	        top = containerHeight - bottom - height - verticalMargin;
	    }

	    // Align left and top
	    switch (positionInfo.left || positionInfo.right) {
	        case 'center':
	            left = containerWidth / 2 - width / 2 - margin[3];
	            break;
	        case 'right':
	            left = containerWidth - width - horizontalMargin;
	            break;
	    }
	    switch (positionInfo.top || positionInfo.bottom) {
	        case 'middle':
	        case 'center':
	            top = containerHeight / 2 - height / 2 - margin[0];
	            break;
	        case 'bottom':
	            top = containerHeight - height - verticalMargin;
	            break;
	    }
	    // If something is wrong and left, top, width, height are calculated as NaN
	    left = left || 0;
	    top = top || 0;
	    if (isNaN(width)) {
	        // Width may be NaN if only one value is given except width
	        width = containerWidth - left - (right || 0);
	    }
	    if (isNaN(height)) {
	        // Height may be NaN if only one value is given except height
	        height = containerHeight - top - (bottom || 0);
	    }

	    var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	    rect.margin = margin;
	    return rect;
	};

	/**
	 * Position a zr element in viewport
	 *  Group position is specified by either
	 *  {left, top}, {right, bottom}
	 *  If all properties exists, right and bottom will be igonred.
	 *
	 * Logic:
	 *     1. Scale (against origin point in parent coord)
	 *     2. Rotate (against origin point in parent coord)
	 *     3. Traslate (with el.position by this method)
	 * So this method only fixes the last step 'Traslate', which does not affect
	 * scaling and rotating.
	 *
	 * If be called repeatly with the same input el, the same result will be gotten.
	 *
	 * @param {module:zrender/Element} el Should have `getBoundingRect` method.
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {Object} containerRect
	 * @param {string|number} margin
	 * @param {Object} [opt]
	 * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
	 * @param {Array.<number>} [opt.boundingMode='all']
	 *        Specify how to calculate boundingRect when locating.
	 *        'all': Position the boundingRect that is transformed and uioned
	 *               both itself and its descendants.
	 *               This mode simplies confine the elements in the bounding
	 *               of their container (e.g., using 'right: 0').
	 *        'raw': Position the boundingRect that is not transformed and only itself.
	 *               This mode is useful when you want a element can overflow its
	 *               container. (Consider a rotated circle needs to be located in a corner.)
	 *               In this mode positionInfo.width/height can only be number.
	 */
	layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {
	    var h = !opt || !opt.hv || opt.hv[0];
	    var v = !opt || !opt.hv || opt.hv[1];
	    var boundingMode = opt && opt.boundingMode || 'all';

	    if (!h && !v) {
	        return;
	    }

	    var rect;
	    if (boundingMode === 'raw') {
	        rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
	    } else {
	        rect = el.getBoundingRect();
	        if (el.needLocalTransform()) {
	            var transform = el.getLocalTransform();
	            // Notice: raw rect may be inner object of el,
	            // which should not be modified.
	            rect = rect.clone();
	            rect.applyTransform(transform);
	        }
	    }

	    positionInfo = layout.getLayoutRect(zrUtil.defaults({ width: rect.width, height: rect.height }, positionInfo), containerRect, margin);

	    // Because 'tranlate' is the last step in transform
	    // (see zrender/core/Transformable#getLocalTransfrom),
	    // we can just only modify el.position to get final result.
	    var elPos = el.position;
	    var dx = h ? positionInfo.x - rect.x : 0;
	    var dy = v ? positionInfo.y - rect.y : 0;

	    el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
	};

	/**
	 * Consider Case:
	 * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	 * through setOption or media query, using normal zrUtil.merge will cause
	 * {right: 0} does not take effect.
	 *
	 * @example
	 * ComponentModel.extend({
	 *     init: function () {
	 *         ...
	 *         var inputPositionParams = layout.getLayoutParams(option);
	 *         this.mergeOption(inputPositionParams);
	 *     },
	 *     mergeOption: function (newOption) {
	 *         newOption && zrUtil.merge(thisOption, newOption, true);
	 *         layout.mergeLayoutParam(thisOption, newOption);
	 *     }
	 * });
	 *
	 * @param {Object} targetOption
	 * @param {Object} newOption
	 * @param {Object|string} [opt]
	 * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.
	 */
	layout.mergeLayoutParam = function (targetOption, newOption, opt) {
	    !zrUtil.isObject(opt) && (opt = {});
	    var hNames = ['width', 'left', 'right']; // Order by priority.
	    var vNames = ['height', 'top', 'bottom']; // Order by priority.
	    var hResult = merge(hNames);
	    var vResult = merge(vNames);

	    copy(hNames, targetOption, hResult);
	    copy(vNames, targetOption, vResult);

	    function merge(names) {
	        var newParams = {};
	        var newValueCount = 0;
	        var merged = {};
	        var mergedValueCount = 0;
	        var enoughParamNumber = opt.ignoreSize ? 1 : 2;

	        each(names, function (name) {
	            merged[name] = targetOption[name];
	        });
	        each(names, function (name) {
	            // Consider case: newOption.width is null, which is
	            // set by user for removing width setting.
	            hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	            hasValue(newParams, name) && newValueCount++;
	            hasValue(merged, name) && mergedValueCount++;
	        });

	        // Case: newOption: {width: ..., right: ...},
	        // or targetOption: {right: ...} and newOption: {width: ...},
	        // There is no conflict when merged only has params count
	        // little than enoughParamNumber.
	        if (mergedValueCount === enoughParamNumber || !newValueCount) {
	            return merged;
	        }
	        // Case: newOption: {width: ..., right: ...},
	        // Than we can make sure user only want those two, and ignore
	        // all origin params in targetOption.
	        else if (newValueCount >= enoughParamNumber) {
	                return newParams;
	            } else {
	                // Chose another param from targetOption by priority.
	                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.
	                for (var i = 0; i < names.length; i++) {
	                    var name = names[i];
	                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	                        newParams[name] = targetOption[name];
	                        break;
	                    }
	                }
	                return newParams;
	            }
	    }

	    function hasProp(obj, name) {
	        return obj.hasOwnProperty(name);
	    }

	    function hasValue(obj, name) {
	        return obj[name] != null && obj[name] !== 'auto';
	    }

	    function copy(names, target, source) {
	        each(names, function (name) {
	            target[name] = source[name];
	        });
	    }
	};

	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */
	layout.getLayoutParams = function (source) {
	    return layout.copyLayoutParams({}, source);
	};

	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */
	layout.copyLayoutParams = function (target, source) {
	    source && target && each(LOCATION_PARAMS, function (name) {
	        source.hasOwnProperty(name) && (target[name] = source[name]);
	    });
	    return target;
	};

	module.exports = layout;

/***/ },
/* 522 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	    getBoxLayoutParams: function getBoxLayoutParams() {
	        return {
	            left: this.get('left'),
	            top: this.get('top'),
	            right: this.get('right'),
	            bottom: this.get('bottom'),
	            width: this.get('width'),
	            height: this.get('height')
	        };
	    }
	};

/***/ },
/* 523 */
/***/ function(module, exports) {

	'use strict';

	var platform = '';
	// Navigator not exists in node
	if (typeof navigator !== 'undefined') {
	    platform = navigator.platform || '';
	}
	module.exports = {
	    // 全图默认背景
	    // backgroundColor: 'rgba(0,0,0,0)',

	    // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	    // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	    // 浅色
	    // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	    // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	    // 深色
	    color: ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'],

	    // 默认需要 Grid 配置项
	    // grid: {},
	    // 主题，主题
	    textStyle: {
	        // color: '#000',
	        // decoration: 'none',
	        // PENDING
	        fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	        // fontFamily: 'Arial, Verdana, sans-serif',
	        fontSize: 12,
	        fontStyle: 'normal',
	        fontWeight: 'normal'
	    },

	    // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
	    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	    // Default is source-over
	    blendMode: null,

	    animation: true,
	    animationDuration: 1000,
	    animationDurationUpdate: 300,
	    animationEasing: 'exponentialOut',
	    animationEasingUpdate: 'cubicOut',

	    animationThreshold: 2000,
	    // Configuration for progressive/incremental rendering
	    progressiveThreshold: 3000,
	    progressive: 400,

	    // Threshold of if use single hover layer to optimize.
	    // It is recommended that `hoverLayerThreshold` is equivalent to or less than
	    // `progressiveThreshold`, otherwise hover will cause restart of progressive,
	    // which is unexpected.
	    // see example <echarts/test/heatmap-large.html>.
	    hoverLayerThreshold: 3000
	};

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var classUtil = __webpack_require__(513);
	var set = classUtil.set;
	var get = classUtil.get;

	module.exports = {
	    clearColorPalette: function clearColorPalette() {
	        set(this, 'colorIdx', 0);
	        set(this, 'colorNameMap', {});
	    },

	    getColorFromPalette: function getColorFromPalette(name, scope) {
	        scope = scope || this;
	        var colorIdx = get(scope, 'colorIdx') || 0;
	        var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});
	        if (colorNameMap[name]) {
	            return colorNameMap[name];
	        }
	        var colorPalette = this.get('color', true) || [];
	        if (!colorPalette.length) {
	            return;
	        }

	        var color = colorPalette[colorIdx];
	        if (name) {
	            colorNameMap[name] = color;
	        }
	        set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);

	        return color;
	    }
	};

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var echartsAPIList = ['getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed', 'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'];

	function ExtensionAPI(chartInstance) {
	    zrUtil.each(echartsAPIList, function (name) {
	        this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	    }, this);
	}

	module.exports = ExtensionAPI;

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	/**
	 * Interface of Coordinate System Class
	 *
	 * create:
	 *     @param {module:echarts/model/Global} ecModel
	 *     @param {module:echarts/ExtensionAPI} api
	 *     @return {Object} coordinate system instance
	 *
	 * update:
	 *     @param {module:echarts/model/Global} ecModel
	 *     @param {module:echarts/ExtensionAPI} api
	 *
	 * convertToPixel:
	 * convertFromPixel:
	 *     These two methods is also responsible for determine whether this
	 *     coodinate system is applicable to the given `finder`.
	 *     Each coordinate system will be tried, util one returns none
	 *     null/undefined value.
	 *     @param {module:echarts/model/Global} ecModel
	 *     @param {Object} finder
	 *     @param {Array|number} value
	 *     @return {Array|number} convert result.
	 *
	 * containPoint:
	 *     @param {Array.<number>} point In pixel coordinate system.
	 *     @return {boolean}
	 */

	var coordinateSystemCreators = {};

	function CoordinateSystemManager() {

	    this._coordinateSystems = [];
	}

	CoordinateSystemManager.prototype = {

	    constructor: CoordinateSystemManager,

	    create: function create(ecModel, api) {
	        var coordinateSystems = [];
	        zrUtil.each(coordinateSystemCreators, function (creater, type) {
	            var list = creater.create(ecModel, api);
	            coordinateSystems = coordinateSystems.concat(list || []);
	        });

	        this._coordinateSystems = coordinateSystems;
	    },

	    update: function update(ecModel, api) {
	        zrUtil.each(this._coordinateSystems, function (coordSys) {
	            // FIXME MUST have
	            coordSys.update && coordSys.update(ecModel, api);
	        });
	    },

	    getCoordinateSystems: function getCoordinateSystems() {
	        return this._coordinateSystems.slice();
	    }
	};

	CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	    coordinateSystemCreators[type] = coordinateSystemCreator;
	};

	CoordinateSystemManager.get = function (type) {
	    return coordinateSystemCreators[type];
	};

	module.exports = CoordinateSystemManager;

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */

	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);
	var ComponentModel = __webpack_require__(519);
	var each = zrUtil.each;
	var clone = zrUtil.clone;
	var map = zrUtil.map;
	var merge = zrUtil.merge;

	var QUERY_REG = /^(min|max)?(.+)$/;

	/**
	 * TERM EXPLANATIONS:
	 *
	 * [option]:
	 *
	 *     An object that contains definitions of components. For example:
	 *     var option = {
	 *         title: {...},
	 *         legend: {...},
	 *         visualMap: {...},
	 *         series: [
	 *             {data: [...]},
	 *             {data: [...]},
	 *             ...
	 *         ]
	 *     };
	 *
	 * [rawOption]:
	 *
	 *     An object input to echarts.setOption. 'rawOption' may be an
	 *     'option', or may be an object contains multi-options. For example:
	 *     var option = {
	 *         baseOption: {
	 *             title: {...},
	 *             legend: {...},
	 *             series: [
	 *                 {data: [...]},
	 *                 {data: [...]},
	 *                 ...
	 *             ]
	 *         },
	 *         timeline: {...},
	 *         options: [
	 *             {title: {...}, series: {data: [...]}},
	 *             {title: {...}, series: {data: [...]}},
	 *             ...
	 *         ],
	 *         media: [
	 *             {
	 *                 query: {maxWidth: 320},
	 *                 option: {series: {x: 20}, visualMap: {show: false}}
	 *             },
	 *             {
	 *                 query: {minWidth: 320, maxWidth: 720},
	 *                 option: {series: {x: 500}, visualMap: {show: true}}
	 *             },
	 *             {
	 *                 option: {series: {x: 1200}, visualMap: {show: true}}
	 *             }
	 *         ]
	 *     };
	 *
	 * @alias module:echarts/model/OptionManager
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function OptionManager(api) {

	    /**
	     * @private
	     * @type {module:echarts/ExtensionAPI}
	     */
	    this._api = api;

	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._timelineOptions = [];

	    /**
	     * @private
	     * @type {Array.<Object>}
	     */
	    this._mediaList = [];

	    /**
	     * @private
	     * @type {Object}
	     */
	    this._mediaDefault;

	    /**
	     * -1, means default.
	     * empty means no media.
	     * @private
	     * @type {Array.<number>}
	     */
	    this._currentMediaIndices = [];

	    /**
	     * @private
	     * @type {Object}
	     */
	    this._optionBackup;

	    /**
	     * @private
	     * @type {Object}
	     */
	    this._newBaseOption;
	}

	// timeline.notMerge is not supported in ec3. Firstly there is rearly
	// case that notMerge is needed. Secondly supporting 'notMerge' requires
	// rawOption cloned and backuped when timeline changed, which does no
	// good to performance. What's more, that both timeline and setOption
	// method supply 'notMerge' brings complex and some problems.
	// Consider this case:
	// (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	// (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);

	OptionManager.prototype = {

	    constructor: OptionManager,

	    /**
	     * @public
	     * @param {Object} rawOption Raw option.
	     * @param {module:echarts/model/Global} ecModel
	     * @param {Array.<Function>} optionPreprocessorFuncs
	     * @return {Object} Init option
	     */
	    setOption: function setOption(rawOption, optionPreprocessorFuncs) {
	        rawOption = clone(rawOption, true);

	        // FIXME
	        // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

	        var oldOptionBackup = this._optionBackup;
	        var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);
	        this._newBaseOption = newParsedOption.baseOption;

	        // For setOption at second time (using merge mode);
	        if (oldOptionBackup) {
	            // Only baseOption can be merged.
	            mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);

	            // For simplicity, timeline options and media options do not support merge,
	            // that is, if you `setOption` twice and both has timeline options, the latter
	            // timeline opitons will not be merged to the formers, but just substitude them.
	            if (newParsedOption.timelineOptions.length) {
	                oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
	            }
	            if (newParsedOption.mediaList.length) {
	                oldOptionBackup.mediaList = newParsedOption.mediaList;
	            }
	            if (newParsedOption.mediaDefault) {
	                oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
	            }
	        } else {
	            this._optionBackup = newParsedOption;
	        }
	    },

	    /**
	     * @param {boolean} isRecreate
	     * @return {Object}
	     */
	    mountOption: function mountOption(isRecreate) {
	        var optionBackup = this._optionBackup;

	        // TODO
	        // 如果没有reset功能则不clone。

	        this._timelineOptions = map(optionBackup.timelineOptions, clone);
	        this._mediaList = map(optionBackup.mediaList, clone);
	        this._mediaDefault = clone(optionBackup.mediaDefault);
	        this._currentMediaIndices = [];

	        return clone(isRecreate
	        // this._optionBackup.baseOption, which is created at the first `setOption`
	        // called, and is merged into every new option by inner method `mergeOption`
	        // each time `setOption` called, can be only used in `isRecreate`, because
	        // its reliability is under suspicion. In other cases option merge is
	        // performed by `model.mergeOption`.
	        ? optionBackup.baseOption : this._newBaseOption);
	    },

	    /**
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Object}
	     */
	    getTimelineOption: function getTimelineOption(ecModel) {
	        var option;
	        var timelineOptions = this._timelineOptions;

	        if (timelineOptions.length) {
	            // getTimelineOption can only be called after ecModel inited,
	            // so we can get currentIndex from timelineModel.
	            var timelineModel = ecModel.getComponent('timeline');
	            if (timelineModel) {
	                option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);
	            }
	        }

	        return option;
	    },

	    /**
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Array.<Object>}
	     */
	    getMediaOption: function getMediaOption(ecModel) {
	        var ecWidth = this._api.getWidth();
	        var ecHeight = this._api.getHeight();
	        var mediaList = this._mediaList;
	        var mediaDefault = this._mediaDefault;
	        var indices = [];
	        var result = [];

	        // No media defined.
	        if (!mediaList.length && !mediaDefault) {
	            return result;
	        }

	        // Multi media may be applied, the latter defined media has higher priority.
	        for (var i = 0, len = mediaList.length; i < len; i++) {
	            if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	                indices.push(i);
	            }
	        }

	        // FIXME
	        // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
	        if (!indices.length && mediaDefault) {
	            indices = [-1];
	        }

	        if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	            result = map(indices, function (index) {
	                return clone(index === -1 ? mediaDefault.option : mediaList[index].option);
	            });
	        }
	        // Otherwise return nothing.

	        this._currentMediaIndices = indices;

	        return result;
	    }
	};

	function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
	    var timelineOptions = [];
	    var mediaList = [];
	    var mediaDefault;
	    var baseOption;

	    // Compatible with ec2.
	    var timelineOpt = rawOption.timeline;

	    if (rawOption.baseOption) {
	        baseOption = rawOption.baseOption;
	    }

	    // For timeline
	    if (timelineOpt || rawOption.options) {
	        baseOption = baseOption || {};
	        timelineOptions = (rawOption.options || []).slice();
	    }

	    // For media query
	    if (rawOption.media) {
	        baseOption = baseOption || {};
	        var media = rawOption.media;
	        each(media, function (singleMedia) {
	            if (singleMedia && singleMedia.option) {
	                if (singleMedia.query) {
	                    mediaList.push(singleMedia);
	                } else if (!mediaDefault) {
	                    // Use the first media default.
	                    mediaDefault = singleMedia;
	                }
	            }
	        });
	    }

	    // For normal option
	    if (!baseOption) {
	        baseOption = rawOption;
	    }

	    // Set timelineOpt to baseOption in ec3,
	    // which is convenient for merge option.
	    if (!baseOption.timeline) {
	        baseOption.timeline = timelineOpt;
	    }

	    // Preprocess.
	    each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {
	        return media.option;
	    })), function (option) {
	        each(optionPreprocessorFuncs, function (preProcess) {
	            preProcess(option, isNew);
	        });
	    });

	    return {
	        baseOption: baseOption,
	        timelineOptions: timelineOptions,
	        mediaDefault: mediaDefault,
	        mediaList: mediaList
	    };
	}

	/**
	 * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	 * Support: width, height, aspectRatio
	 * Can use max or min as prefix.
	 */
	function applyMediaQuery(query, ecWidth, ecHeight) {
	    var realMap = {
	        width: ecWidth,
	        height: ecHeight,
	        aspectratio: ecWidth / ecHeight // lowser case for convenientce.
	    };

	    var applicatable = true;

	    zrUtil.each(query, function (value, attr) {
	        var matched = attr.match(QUERY_REG);

	        if (!matched || !matched[1] || !matched[2]) {
	            return;
	        }

	        var operator = matched[1];
	        var realAttr = matched[2].toLowerCase();

	        if (!compare(realMap[realAttr], value, operator)) {
	            applicatable = false;
	        }
	    });

	    return applicatable;
	}

	function compare(real, expect, operator) {
	    if (operator === 'min') {
	        return real >= expect;
	    } else if (operator === 'max') {
	        return real <= expect;
	    } else {
	        // Equals
	        return real === expect;
	    }
	}

	function indicesEquals(indices1, indices2) {
	    // indices is always order by asc and has only finite number.
	    return indices1.join(',') === indices2.join(',');
	}

	/**
	 * Consider case:
	 * `chart.setOption(opt1);`
	 * Then user do some interaction like dataZoom, dataView changing.
	 * `chart.setOption(opt2);`
	 * Then user press 'reset button' in toolbox.
	 *
	 * After doing that all of the interaction effects should be reset, the
	 * chart should be the same as the result of invoke
	 * `chart.setOption(opt1); chart.setOption(opt2);`.
	 *
	 * Although it is not able ensure that
	 * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	 * `chart.setOption(merge(opt1, opt2));` exactly,
	 * this might be the only simple way to implement that feature.
	 *
	 * MEMO: We've considered some other approaches:
	 * 1. Each model handle its self restoration but not uniform treatment.
	 *     (Too complex in logic and error-prone)
	 * 2. Use a shadow ecModel. (Performace expensive)
	 */
	function mergeOption(oldOption, newOption) {
	    newOption = newOption || {};

	    each(newOption, function (newCptOpt, mainType) {
	        if (newCptOpt == null) {
	            return;
	        }

	        var oldCptOpt = oldOption[mainType];

	        if (!ComponentModel.hasClass(mainType)) {
	            oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	        } else {
	            newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	            oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);

	            var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);

	            oldOption[mainType] = map(mapResult, function (item) {
	                return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;
	            });
	        }
	    });
	}

	module.exports = OptionManager;

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var formatUtil = __webpack_require__(506);
	var classUtil = __webpack_require__(513);
	var modelUtil = __webpack_require__(505);
	var ComponentModel = __webpack_require__(519);
	var colorPaletteMixin = __webpack_require__(524);
	var env = __webpack_require__(502);
	var layout = __webpack_require__(521);

	var set = classUtil.set;
	var get = classUtil.get;
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;

	var SeriesModel = ComponentModel.extend({

	    type: 'series.__base__',

	    /**
	     * @readOnly
	     */
	    seriesIndex: 0,

	    // coodinateSystem will be injected in the echarts/CoordinateSystem
	    coordinateSystem: null,

	    /**
	     * @type {Object}
	     * @protected
	     */
	    defaultOption: null,

	    /**
	     * Data provided for legend
	     * @type {Function}
	     */
	    // PENDING
	    legendDataProvider: null,

	    /**
	     * Access path of color for visual
	     */
	    visualColorAccessPath: 'itemStyle.normal.color',

	    /**
	     * Support merge layout params.
	     * Only support 'box' now (left/right/top/bottom/width/height).
	     * @type {string|Object} Object can be {ignoreSize: true}
	     * @readOnly
	     */
	    layoutMode: null,

	    init: function init(option, parentModel, ecModel, extraOpt) {

	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.seriesIndex = this.componentIndex;

	        this.mergeDefaultAndTheme(option, ecModel);

	        /**
	         * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	         * @private
	         */
	        set(this, 'dataBeforeProcessed', this.getInitialData(option, ecModel));

	        // If we reverse the order (make data firstly, and then make
	        // dataBeforeProcessed by cloneShallow), cloneShallow will
	        // cause data.graph.data !== data when using
	        // module:echarts/data/Graph or module:echarts/data/Tree.
	        // See module:echarts/data/helper/linkList
	        this.restoreData();
	    },

	    /**
	     * Util for merge default and theme to option
	     * @param  {Object} option
	     * @param  {module:echarts/model/Global} ecModel
	     */
	    mergeDefaultAndTheme: function mergeDefaultAndTheme(option, ecModel) {
	        var layoutMode = this.layoutMode;
	        var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};

	        zrUtil.merge(option, ecModel.getTheme().get(this.subType));
	        zrUtil.merge(option, this.getDefaultOption());

	        // Default label emphasis `position` and `show`
	        // FIXME Set label in mergeOption
	        modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);

	        this.fillDataTextStyle(option.data);

	        if (layoutMode) {
	            layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	        }
	    },

	    mergeOption: function mergeOption(newSeriesOption, ecModel) {
	        newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	        this.fillDataTextStyle(newSeriesOption.data);

	        var layoutMode = this.layoutMode;
	        if (layoutMode) {
	            layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);
	        }

	        var data = this.getInitialData(newSeriesOption, ecModel);
	        // TODO Merge data?
	        if (data) {
	            set(this, 'data', data);
	            set(this, 'dataBeforeProcessed', data.cloneShallow());
	        }
	    },

	    fillDataTextStyle: function fillDataTextStyle(data) {
	        // Default data label emphasis `position` and `show`
	        // FIXME Tree structure data ?
	        // FIXME Performance ?
	        if (data) {
	            for (var i = 0; i < data.length; i++) {
	                if (data[i] && data[i].label) {
	                    modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);
	                }
	            }
	        }
	    },

	    /**
	     * Init a data structure from data related option in series
	     * Must be overwritten
	     */
	    getInitialData: function getInitialData() {},

	    /**
	     * @param {string} [dataType]
	     * @return {module:echarts/data/List}
	     */
	    getData: function getData(dataType) {
	        var data = get(this, 'data');
	        return dataType == null ? data : data.getLinkedData(dataType);
	    },

	    /**
	     * @param {module:echarts/data/List} data
	     */
	    setData: function setData(data) {
	        set(this, 'data', data);
	    },

	    /**
	     * Get data before processed
	     * @return {module:echarts/data/List}
	     */
	    getRawData: function getRawData() {
	        return get(this, 'dataBeforeProcessed');
	    },

	    /**
	     * Coord dimension to data dimension.
	     *
	     * By default the result is the same as dimensions of series data.
	     * But in some series data dimensions are different from coord dimensions (i.e.
	     * candlestick and boxplot). Override this method to handle those cases.
	     *
	     * Coord dimension to data dimension can be one-to-many
	     *
	     * @param {string} coordDim
	     * @return {Array.<string>} dimensions on the axis.
	     */
	    coordDimToDataDim: function coordDimToDataDim(coordDim) {
	        return [coordDim];
	    },

	    /**
	     * Convert data dimension to coord dimension.
	     *
	     * @param {string|number} dataDim
	     * @return {string}
	     */
	    dataDimToCoordDim: function dataDimToCoordDim(dataDim) {
	        return dataDim;
	    },

	    /**
	     * Get base axis if has coordinate system and has axis.
	     * By default use coordSys.getBaseAxis();
	     * Can be overrided for some chart.
	     * @return {type} description
	     */
	    getBaseAxis: function getBaseAxis() {
	        var coordSys = this.coordinateSystem;
	        return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	    },

	    // FIXME
	    /**
	     * Default tooltip formatter
	     *
	     * @param {number} dataIndex
	     * @param {boolean} [multipleSeries=false]
	     * @param {number} [dataType]
	     */
	    formatTooltip: function formatTooltip(dataIndex, multipleSeries, dataType) {
	        function formatArrayValue(value) {
	            var result = [];

	            zrUtil.each(value, function (val, idx) {
	                var dimInfo = data.getDimensionInfo(idx);
	                var dimType = dimInfo && dimInfo.type;
	                var valStr;

	                if (dimType === 'ordinal') {
	                    valStr = val + '';
	                } else if (dimType === 'time') {
	                    valStr = multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val);
	                } else {
	                    valStr = addCommas(val);
	                }

	                valStr && result.push(valStr);
	            });

	            return result.join(', ');
	        }

	        var data = get(this, 'data');

	        var value = this.getRawValue(dataIndex);
	        var formattedValue = encodeHTML(zrUtil.isArray(value) ? formatArrayValue(value) : addCommas(value));
	        var name = data.getName(dataIndex);

	        var color = data.getItemVisual(dataIndex, 'color');
	        if (zrUtil.isObject(color) && color.colorStops) {
	            color = (color.colorStops[0] || {}).color;
	        }
	        color = color || 'transparent';

	        var colorEl = '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:9px;height:9px;background-color:' + encodeHTML(color) + '"></span>';

	        var seriesName = this.name;
	        // FIXME
	        if (seriesName === '\0-') {
	            // Not show '-'
	            seriesName = '';
	        }
	        return !multipleSeries ? (seriesName && encodeHTML(seriesName) + '<br />') + colorEl + (name ? encodeHTML(name) + ' : ' + formattedValue : formattedValue) : colorEl + encodeHTML(this.name) + ' : ' + formattedValue;
	    },

	    /**
	     * @return {boolean}
	     */
	    isAnimationEnabled: function isAnimationEnabled() {
	        if (env.node) {
	            return false;
	        }

	        var animationEnabled = this.getShallow('animation');
	        if (animationEnabled) {
	            if (this.getData().count() > this.getShallow('animationThreshold')) {
	                animationEnabled = false;
	            }
	        }
	        return animationEnabled;
	    },

	    restoreData: function restoreData() {
	        set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());
	    },

	    getColorFromPalette: function getColorFromPalette(name, scope) {
	        var ecModel = this.ecModel;
	        // PENDING
	        var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);
	        if (!color) {
	            color = ecModel.getColorFromPalette(name, scope);
	        }
	        return color;
	    },

	    /**
	     * Get data indices for show tooltip content. See tooltip.
	     * @abstract
	     * @param {Array.<string>|string} dim
	     * @param {Array.<number>} value
	     * @param {module:echarts/coord/single/SingleAxis} baseAxis
	     * @return {Array.<number>} data indices.
	     */
	    getAxisTooltipDataIndex: null,

	    /**
	     * See tooltip.
	     * @abstract
	     * @param {number} dataIndex
	     * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
	     */
	    getTooltipPosition: null
	});

	zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);
	zrUtil.mixin(SeriesModel, colorPaletteMixin);

	module.exports = SeriesModel;

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Group = __webpack_require__(530);
	var componentUtil = __webpack_require__(520);
	var clazzUtil = __webpack_require__(513);

	var Component = function Component() {
	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = new Group();

	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.uid = componentUtil.getUID('viewComponent');
	};

	Component.prototype = {

	    constructor: Component,

	    init: function init(ecModel, api) {},

	    render: function render(componentModel, ecModel, api, payload) {},

	    dispose: function dispose() {}

	};

	var componentProto = Component.prototype;
	componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	    // Do nothing;
	};
	// Enable Component.extend.
	clazzUtil.enableClassExtend(Component);

	// Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	clazzUtil.enableClassManagement(Component, { registerWhenExtend: true });

	module.exports = Component;

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/lib/container/Group');
	 *     var Circle = require('zrender/lib/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */

	var zrUtil = __webpack_require__(504);
	var Element = __webpack_require__(531);
	var BoundingRect = __webpack_require__(509);

	/**
	 * @alias module:zrender/graphic/Group
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @extends module:zrender/mixin/Eventful
	 */
	var Group = function Group(opts) {

	    opts = opts || {};

	    Element.call(this, opts);

	    for (var key in opts) {
	        if (opts.hasOwnProperty(key)) {
	            this[key] = opts[key];
	        }
	    }

	    this._children = [];

	    this.__storage = null;

	    this.__dirty = true;
	};

	Group.prototype = {

	    constructor: Group,

	    isGroup: true,

	    /**
	     * @type {string}
	     */
	    type: 'group',

	    /**
	     * 所有子孙元素是否响应鼠标事件
	     * @name module:/zrender/container/Group#silent
	     * @type {boolean}
	     * @default false
	     */
	    silent: false,

	    /**
	     * @return {Array.<module:zrender/Element>}
	     */
	    children: function children() {
	        return this._children.slice();
	    },

	    /**
	     * 获取指定 index 的儿子节点
	     * @param  {number} idx
	     * @return {module:zrender/Element}
	     */
	    childAt: function childAt(idx) {
	        return this._children[idx];
	    },

	    /**
	     * 获取指定名字的儿子节点
	     * @param  {string} name
	     * @return {module:zrender/Element}
	     */
	    childOfName: function childOfName(name) {
	        var children = this._children;
	        for (var i = 0; i < children.length; i++) {
	            if (children[i].name === name) {
	                return children[i];
	            }
	        }
	    },

	    /**
	     * @return {number}
	     */
	    childCount: function childCount() {
	        return this._children.length;
	    },

	    /**
	     * 添加子节点到最后
	     * @param {module:zrender/Element} child
	     */
	    add: function add(child) {
	        if (child && child !== this && child.parent !== this) {

	            this._children.push(child);

	            this._doAdd(child);
	        }

	        return this;
	    },

	    /**
	     * 添加子节点在 nextSibling 之前
	     * @param {module:zrender/Element} child
	     * @param {module:zrender/Element} nextSibling
	     */
	    addBefore: function addBefore(child, nextSibling) {
	        if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {

	            var children = this._children;
	            var idx = children.indexOf(nextSibling);

	            if (idx >= 0) {
	                children.splice(idx, 0, child);
	                this._doAdd(child);
	            }
	        }

	        return this;
	    },

	    _doAdd: function _doAdd(child) {
	        if (child.parent) {
	            child.parent.remove(child);
	        }

	        child.parent = this;

	        var storage = this.__storage;
	        var zr = this.__zr;
	        if (storage && storage !== child.__storage) {

	            storage.addToMap(child);

	            if (child instanceof Group) {
	                child.addChildrenToStorage(storage);
	            }
	        }

	        zr && zr.refresh();
	    },

	    /**
	     * 移除子节点
	     * @param {module:zrender/Element} child
	     */
	    remove: function remove(child) {
	        var zr = this.__zr;
	        var storage = this.__storage;
	        var children = this._children;

	        var idx = zrUtil.indexOf(children, child);
	        if (idx < 0) {
	            return this;
	        }
	        children.splice(idx, 1);

	        child.parent = null;

	        if (storage) {

	            storage.delFromMap(child.id);

	            if (child instanceof Group) {
	                child.delChildrenFromStorage(storage);
	            }
	        }

	        zr && zr.refresh();

	        return this;
	    },

	    /**
	     * 移除所有子节点
	     */
	    removeAll: function removeAll() {
	        var children = this._children;
	        var storage = this.__storage;
	        var child;
	        var i;
	        for (i = 0; i < children.length; i++) {
	            child = children[i];
	            if (storage) {
	                storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	            child.parent = null;
	        }
	        children.length = 0;

	        return this;
	    },

	    /**
	     * 遍历所有子节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    eachChild: function eachChild(cb, context) {
	        var children = this._children;
	        for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            cb.call(context, child, i);
	        }
	        return this;
	    },

	    /**
	     * 深度优先遍历所有子孙节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    traverse: function traverse(cb, context) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            cb.call(context, child);

	            if (child.type === 'group') {
	                child.traverse(cb, context);
	            }
	        }
	        return this;
	    },

	    addChildrenToStorage: function addChildrenToStorage(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.addToMap(child);
	            if (child instanceof Group) {
	                child.addChildrenToStorage(storage);
	            }
	        }
	    },

	    delChildrenFromStorage: function delChildrenFromStorage(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.delFromMap(child.id);
	            if (child instanceof Group) {
	                child.delChildrenFromStorage(storage);
	            }
	        }
	    },

	    dirty: function dirty() {
	        this.__dirty = true;
	        this.__zr && this.__zr.refresh();
	        return this;
	    },

	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getBoundingRect: function getBoundingRect(includeChildren) {
	        // TODO Caching
	        var rect = null;
	        var tmpRect = new BoundingRect(0, 0, 0, 0);
	        var children = includeChildren || this._children;
	        var tmpMat = [];

	        for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            if (child.ignore || child.invisible) {
	                continue;
	            }

	            var childRect = child.getBoundingRect();
	            var transform = child.getLocalTransform(tmpMat);
	            // TODO
	            // The boundingRect cacluated by transforming original
	            // rect may be bigger than the actual bundingRect when rotation
	            // is used. (Consider a circle rotated aginst its center, where
	            // the actual boundingRect should be the same as that not be
	            // rotated.) But we can not find better approach to calculate
	            // actual boundingRect yet, considering performance.
	            if (transform) {
	                tmpRect.copy(childRect);
	                tmpRect.applyTransform(transform);
	                rect = rect || tmpRect.clone();
	                rect.union(tmpRect);
	            } else {
	                rect = rect || childRect.clone();
	                rect.union(childRect);
	            }
	        }
	        return rect || tmpRect;
	    }
	};

	zrUtil.inherits(Group, Element);

	module.exports = Group;

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/Element
	 */

	var guid = __webpack_require__(532);
	var Eventful = __webpack_require__(533);
	var Transformable = __webpack_require__(534);
	var Animatable = __webpack_require__(535);
	var zrUtil = __webpack_require__(504);

	/**
	 * @alias module:zrender/Element
	 * @constructor
	 * @extends {module:zrender/mixin/Animatable}
	 * @extends {module:zrender/mixin/Transformable}
	 * @extends {module:zrender/mixin/Eventful}
	 */
	var Element = function Element(opts) {

	    Transformable.call(this, opts);
	    Eventful.call(this, opts);
	    Animatable.call(this, opts);

	    /**
	     * 画布元素ID
	     * @type {string}
	     */
	    this.id = opts.id || guid();
	};

	Element.prototype = {

	    /**
	     * 元素类型
	     * Element type
	     * @type {string}
	     */
	    type: 'element',

	    /**
	     * 元素名字
	     * Element name
	     * @type {string}
	     */
	    name: '',

	    /**
	     * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	     * ZRender instance will be assigned when element is associated with zrender
	     * @name module:/zrender/Element#__zr
	     * @type {module:zrender/ZRender}
	     */
	    __zr: null,

	    /**
	     * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	     * If ignore drawing and events of the element object
	     * @name module:/zrender/Element#ignore
	     * @type {boolean}
	     * @default false
	     */
	    ignore: false,

	    /**
	     * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	     * 该路径会继承被裁减对象的变换
	     * @type {module:zrender/graphic/Path}
	     * @see http://www.w3.org/TR/2dcontext/#clipping-region
	     * @readOnly
	     */
	    clipPath: null,

	    /**
	     * Drift element
	     * @param  {number} dx dx on the global space
	     * @param  {number} dy dy on the global space
	     */
	    drift: function drift(dx, dy) {
	        switch (this.draggable) {
	            case 'horizontal':
	                dy = 0;
	                break;
	            case 'vertical':
	                dx = 0;
	                break;
	        }

	        var m = this.transform;
	        if (!m) {
	            m = this.transform = [1, 0, 0, 1, 0, 0];
	        }
	        m[4] += dx;
	        m[5] += dy;

	        this.decomposeTransform();
	        this.dirty(false);
	    },

	    /**
	     * Hook before update
	     */
	    beforeUpdate: function beforeUpdate() {},
	    /**
	     * Hook after update
	     */
	    afterUpdate: function afterUpdate() {},
	    /**
	     * Update each frame
	     */
	    update: function update() {
	        this.updateTransform();
	    },

	    /**
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    traverse: function traverse(cb, context) {},

	    /**
	     * @protected
	     */
	    attrKV: function attrKV(key, value) {
	        if (key === 'position' || key === 'scale' || key === 'origin') {
	            // Copy the array
	            if (value) {
	                var target = this[key];
	                if (!target) {
	                    target = this[key] = [];
	                }
	                target[0] = value[0];
	                target[1] = value[1];
	            }
	        } else {
	            this[key] = value;
	        }
	    },

	    /**
	     * Hide the element
	     */
	    hide: function hide() {
	        this.ignore = true;
	        this.__zr && this.__zr.refresh();
	    },

	    /**
	     * Show the element
	     */
	    show: function show() {
	        this.ignore = false;
	        this.__zr && this.__zr.refresh();
	    },

	    /**
	     * @param {string|Object} key
	     * @param {*} value
	     */
	    attr: function attr(key, value) {
	        if (typeof key === 'string') {
	            this.attrKV(key, value);
	        } else if (zrUtil.isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.attrKV(name, key[name]);
	                }
	            }
	        }

	        this.dirty(false);

	        return this;
	    },

	    /**
	     * @param {module:zrender/graphic/Path} clipPath
	     */
	    setClipPath: function setClipPath(clipPath) {
	        var zr = this.__zr;
	        if (zr) {
	            clipPath.addSelfToZr(zr);
	        }

	        // Remove previous clip path
	        if (this.clipPath && this.clipPath !== clipPath) {
	            this.removeClipPath();
	        }

	        this.clipPath = clipPath;
	        clipPath.__zr = zr;
	        clipPath.__clipTarget = this;

	        this.dirty(false);
	    },

	    /**
	     */
	    removeClipPath: function removeClipPath() {
	        var clipPath = this.clipPath;
	        if (clipPath) {
	            if (clipPath.__zr) {
	                clipPath.removeSelfFromZr(clipPath.__zr);
	            }

	            clipPath.__zr = null;
	            clipPath.__clipTarget = null;
	            this.clipPath = null;

	            this.dirty(false);
	        }
	    },

	    /**
	     * Add self from zrender instance.
	     * Not recursively because it will be invoked when element added to storage.
	     * @param {module:zrender/ZRender} zr
	     */
	    addSelfToZr: function addSelfToZr(zr) {
	        this.__zr = zr;
	        // 添加动画
	        var animators = this.animators;
	        if (animators) {
	            for (var i = 0; i < animators.length; i++) {
	                zr.animation.addAnimator(animators[i]);
	            }
	        }

	        if (this.clipPath) {
	            this.clipPath.addSelfToZr(zr);
	        }
	    },

	    /**
	     * Remove self from zrender instance.
	     * Not recursively because it will be invoked when element added to storage.
	     * @param {module:zrender/ZRender} zr
	     */
	    removeSelfFromZr: function removeSelfFromZr(zr) {
	        this.__zr = null;
	        // 移除动画
	        var animators = this.animators;
	        if (animators) {
	            for (var i = 0; i < animators.length; i++) {
	                zr.animation.removeAnimator(animators[i]);
	            }
	        }

	        if (this.clipPath) {
	            this.clipPath.removeSelfFromZr(zr);
	        }
	    }
	};

	zrUtil.mixin(Element, Animatable);
	zrUtil.mixin(Element, Transformable);
	zrUtil.mixin(Element, Eventful);

	module.exports = Element;

/***/ },
/* 532 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */

	var idStart = 0x0907;

	module.exports = function () {
	    return idStart++;
	};

/***/ },
/* 533 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */

	var arrySlice = Array.prototype.slice;

	/**
	 * 事件分发器
	 * @alias module:zrender/mixin/Eventful
	 * @constructor
	 */
	var Eventful = function Eventful() {
	    this._$handlers = {};
	};

	Eventful.prototype = {

	    constructor: Eventful,

	    /**
	     * 单次触发绑定，trigger后销毁
	     *
	     * @param {string} event 事件名
	     * @param {Function} handler 响应函数
	     * @param {Object} context
	     */
	    one: function one(event, handler, context) {
	        var _h = this._$handlers;

	        if (!handler || !event) {
	            return this;
	        }

	        if (!_h[event]) {
	            _h[event] = [];
	        }

	        for (var i = 0; i < _h[event].length; i++) {
	            if (_h[event][i].h === handler) {
	                return this;
	            }
	        }

	        _h[event].push({
	            h: handler,
	            one: true,
	            ctx: context || this
	        });

	        return this;
	    },

	    /**
	     * 绑定事件
	     * @param {string} event 事件名
	     * @param {Function} handler 事件处理函数
	     * @param {Object} [context]
	     */
	    on: function on(event, handler, context) {
	        var _h = this._$handlers;

	        if (!handler || !event) {
	            return this;
	        }

	        if (!_h[event]) {
	            _h[event] = [];
	        }

	        for (var i = 0; i < _h[event].length; i++) {
	            if (_h[event][i].h === handler) {
	                return this;
	            }
	        }

	        _h[event].push({
	            h: handler,
	            one: false,
	            ctx: context || this
	        });

	        return this;
	    },

	    /**
	     * 是否绑定了事件
	     * @param  {string}  event
	     * @return {boolean}
	     */
	    isSilent: function isSilent(event) {
	        var _h = this._$handlers;
	        return _h[event] && _h[event].length;
	    },

	    /**
	     * 解绑事件
	     * @param {string} event 事件名
	     * @param {Function} [handler] 事件处理函数
	     */
	    off: function off(event, handler) {
	        var _h = this._$handlers;

	        if (!event) {
	            this._$handlers = {};
	            return this;
	        }

	        if (handler) {
	            if (_h[event]) {
	                var newList = [];
	                for (var i = 0, l = _h[event].length; i < l; i++) {
	                    if (_h[event][i]['h'] != handler) {
	                        newList.push(_h[event][i]);
	                    }
	                }
	                _h[event] = newList;
	            }

	            if (_h[event] && _h[event].length === 0) {
	                delete _h[event];
	            }
	        } else {
	            delete _h[event];
	        }

	        return this;
	    },

	    /**
	     * 事件分发
	     *
	     * @param {string} type 事件类型
	     */
	    trigger: function trigger(type) {
	        if (this._$handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;

	            if (argLen > 3) {
	                args = arrySlice.call(args, 1);
	            }

	            var _h = this._$handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(_h[i]['ctx']);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(_h[i]['ctx'], args);
	                        break;
	                }

	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                } else {
	                    i++;
	                }
	            }
	        }

	        return this;
	    },

	    /**
	     * 带有context的事件分发, 最后一个参数是事件回调的context
	     * @param {string} type 事件类型
	     */
	    triggerWithContext: function triggerWithContext(type) {
	        if (this._$handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;

	            if (argLen > 4) {
	                args = arrySlice.call(args, 1, args.length - 1);
	            }
	            var ctx = args[args.length - 1];

	            var _h = this._$handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(ctx);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(ctx, args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(ctx, args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(ctx, args);
	                        break;
	                }

	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                } else {
	                    i++;
	                }
	            }
	        }

	        return this;
	    }
	};

	// 对象可以通过 onxxxx 绑定事件
	/**
	 * @event module:zrender/mixin/Eventful#onclick
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmouseover
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmouseout
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmousemove
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmousewheel
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmousedown
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmouseup
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondrag
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragstart
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragend
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragenter
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragleave
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragover
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondrop
	 * @type {Function}
	 * @default null
	 */

	module.exports = Eventful;

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */

	var matrix = __webpack_require__(511);
	var vector = __webpack_require__(510);
	var mIdentity = matrix.identity;

	var EPSILON = 5e-5;

	function isNotAroundZero(val) {
	    return val > EPSILON || val < -EPSILON;
	}

	/**
	 * @alias module:zrender/mixin/Transformable
	 * @constructor
	 */
	var Transformable = function Transformable(opts) {
	    opts = opts || {};
	    // If there are no given position, rotation, scale
	    if (!opts.position) {
	        /**
	         * 平移
	         * @type {Array.<number>}
	         * @default [0, 0]
	         */
	        this.position = [0, 0];
	    }
	    if (opts.rotation == null) {
	        /**
	         * 旋转
	         * @type {Array.<number>}
	         * @default 0
	         */
	        this.rotation = 0;
	    }
	    if (!opts.scale) {
	        /**
	         * 缩放
	         * @type {Array.<number>}
	         * @default [1, 1]
	         */
	        this.scale = [1, 1];
	    }
	    /**
	     * 旋转和缩放的原点
	     * @type {Array.<number>}
	     * @default null
	     */
	    this.origin = this.origin || null;
	};

	var transformableProto = Transformable.prototype;
	transformableProto.transform = null;

	/**
	 * 判断是否需要有坐标变换
	 * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	 */
	transformableProto.needLocalTransform = function () {
	    return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
	};

	transformableProto.updateTransform = function () {
	    var parent = this.parent;
	    var parentHasTransform = parent && parent.transform;
	    var needLocalTransform = this.needLocalTransform();

	    var m = this.transform;
	    if (!(needLocalTransform || parentHasTransform)) {
	        m && mIdentity(m);
	        return;
	    }

	    m = m || matrix.create();

	    if (needLocalTransform) {
	        this.getLocalTransform(m);
	    } else {
	        mIdentity(m);
	    }

	    // 应用父节点变换
	    if (parentHasTransform) {
	        if (needLocalTransform) {
	            matrix.mul(m, parent.transform, m);
	        } else {
	            matrix.copy(m, parent.transform);
	        }
	    }
	    // 保存这个变换矩阵
	    this.transform = m;

	    this.invTransform = this.invTransform || matrix.create();
	    matrix.invert(this.invTransform, m);
	};

	transformableProto.getLocalTransform = function (m) {
	    m = m || [];
	    mIdentity(m);

	    var origin = this.origin;

	    var scale = this.scale;
	    var rotation = this.rotation;
	    var position = this.position;
	    if (origin) {
	        // Translate to origin
	        m[4] -= origin[0];
	        m[5] -= origin[1];
	    }
	    matrix.scale(m, m, scale);
	    if (rotation) {
	        matrix.rotate(m, m, rotation);
	    }
	    if (origin) {
	        // Translate back from origin
	        m[4] += origin[0];
	        m[5] += origin[1];
	    }

	    m[4] += position[0];
	    m[5] += position[1];

	    return m;
	};
	/**
	 * 将自己的transform应用到context上
	 * @param {Context2D} ctx
	 */
	transformableProto.setTransform = function (ctx) {
	    var m = this.transform;
	    var dpr = ctx.dpr || 1;
	    if (m) {
	        ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
	    } else {
	        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	    }
	};

	transformableProto.restoreTransform = function (ctx) {
	    var m = this.transform;
	    var dpr = ctx.dpr || 1;
	    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	};

	var tmpTransform = [];

	/**
	 * 分解`transform`矩阵到`position`, `rotation`, `scale`
	 */
	transformableProto.decomposeTransform = function () {
	    if (!this.transform) {
	        return;
	    }
	    var parent = this.parent;
	    var m = this.transform;
	    if (parent && parent.transform) {
	        // Get local transform and decompose them to position, scale, rotation
	        matrix.mul(tmpTransform, parent.invTransform, m);
	        m = tmpTransform;
	    }
	    var sx = m[0] * m[0] + m[1] * m[1];
	    var sy = m[2] * m[2] + m[3] * m[3];
	    var position = this.position;
	    var scale = this.scale;
	    if (isNotAroundZero(sx - 1)) {
	        sx = Math.sqrt(sx);
	    }
	    if (isNotAroundZero(sy - 1)) {
	        sy = Math.sqrt(sy);
	    }
	    if (m[0] < 0) {
	        sx = -sx;
	    }
	    if (m[3] < 0) {
	        sy = -sy;
	    }
	    position[0] = m[4];
	    position[1] = m[5];
	    scale[0] = sx;
	    scale[1] = sy;
	    this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	};

	/**
	 * Get global scale
	 * @return {Array.<number>}
	 */
	transformableProto.getGlobalScale = function () {
	    var m = this.transform;
	    if (!m) {
	        return [1, 1];
	    }
	    var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
	    var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
	    if (m[0] < 0) {
	        sx = -sx;
	    }
	    if (m[3] < 0) {
	        sy = -sy;
	    }
	    return [sx, sy];
	};
	/**
	 * 变换坐标位置到 shape 的局部坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */
	transformableProto.transformCoordToLocal = function (x, y) {
	    var v2 = [x, y];
	    var invTransform = this.invTransform;
	    if (invTransform) {
	        vector.applyTransform(v2, v2, invTransform);
	    }
	    return v2;
	};

	/**
	 * 变换局部坐标位置到全局坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */
	transformableProto.transformCoordToGlobal = function (x, y) {
	    var v2 = [x, y];
	    var transform = this.transform;
	    if (transform) {
	        vector.applyTransform(v2, v2, transform);
	    }
	    return v2;
	};

	module.exports = Transformable;

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/mixin/Animatable
	 */

	var Animator = __webpack_require__(536);
	var util = __webpack_require__(504);
	var isString = util.isString;
	var isFunction = util.isFunction;
	var isObject = util.isObject;
	var log = __webpack_require__(540);

	/**
	 * @alias modue:zrender/mixin/Animatable
	 * @constructor
	 */
	var Animatable = function Animatable() {

	    /**
	     * @type {Array.<module:zrender/animation/Animator>}
	     * @readOnly
	     */
	    this.animators = [];
	};

	Animatable.prototype = {

	    constructor: Animatable,

	    /**
	     * 动画
	     *
	     * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
	     * @param {boolean} [loop] 动画是否循环
	     * @return {module:zrender/animation/Animator}
	     * @example:
	     *     el.animate('style', false)
	     *         .when(1000, {x: 10} )
	     *         .done(function(){ // Animation done })
	     *         .start()
	     */
	    animate: function animate(path, loop) {
	        var target;
	        var animatingShape = false;
	        var el = this;
	        var zr = this.__zr;
	        if (path) {
	            var pathSplitted = path.split('.');
	            var prop = el;
	            // If animating shape
	            animatingShape = pathSplitted[0] === 'shape';
	            for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                if (!prop) {
	                    continue;
	                }
	                prop = prop[pathSplitted[i]];
	            }
	            if (prop) {
	                target = prop;
	            }
	        } else {
	            target = el;
	        }

	        if (!target) {
	            log('Property "' + path + '" is not existed in element ' + el.id);
	            return;
	        }

	        var animators = el.animators;

	        var animator = new Animator(target, loop);

	        animator.during(function (target) {
	            el.dirty(animatingShape);
	        }).done(function () {
	            // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	            animators.splice(util.indexOf(animators, animator), 1);
	        });

	        animators.push(animator);

	        // If animate after added to the zrender
	        if (zr) {
	            zr.animation.addAnimator(animator);
	        }

	        return animator;
	    },

	    /**
	     * 停止动画
	     * @param {boolean} forwardToLast If move to last frame before stop
	     */
	    stopAnimation: function stopAnimation(forwardToLast) {
	        var animators = this.animators;
	        var len = animators.length;
	        for (var i = 0; i < len; i++) {
	            animators[i].stop(forwardToLast);
	        }
	        animators.length = 0;

	        return this;
	    },

	    /**
	     * @param {Object} target
	     * @param {number} [time=500] Time in ms
	     * @param {string} [easing='linear']
	     * @param {number} [delay=0]
	     * @param {Function} [callback]
	     *
	     * @example
	     *  // Animate position
	     *  el.animateTo({
	     *      position: [10, 10]
	     *  }, function () { // done })
	     *
	     *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	     *  el.animateTo({
	     *      shape: {
	     *          width: 500
	     *      },
	     *      style: {
	     *          fill: 'red'
	     *      }
	     *      position: [10, 10]
	     *  }, 100, 100, 'cubicOut', function () { // done })
	     */
	    // TODO Return animation key
	    animateTo: function animateTo(target, time, delay, easing, callback) {
	        // animateTo(target, time, easing, callback);
	        if (isString(delay)) {
	            callback = easing;
	            easing = delay;
	            delay = 0;
	        }
	        // animateTo(target, time, delay, callback);
	        else if (isFunction(easing)) {
	                callback = easing;
	                easing = 'linear';
	                delay = 0;
	            }
	            // animateTo(target, time, callback);
	            else if (isFunction(delay)) {
	                    callback = delay;
	                    delay = 0;
	                }
	                // animateTo(target, callback)
	                else if (isFunction(time)) {
	                        callback = time;
	                        time = 500;
	                    }
	                    // animateTo(target)
	                    else if (!time) {
	                            time = 500;
	                        }
	        // Stop all previous animations
	        this.stopAnimation();
	        this._animateToShallow('', this, target, time, delay, easing, callback);

	        // Animators may be removed immediately after start
	        // if there is nothing to animate
	        var animators = this.animators.slice();
	        var count = animators.length;
	        function done() {
	            count--;
	            if (!count) {
	                callback && callback();
	            }
	        }

	        // No animators. This should be checked before animators[i].start(),
	        // because 'done' may be executed immediately if no need to animate.
	        if (!count) {
	            callback && callback();
	        }
	        // Start after all animators created
	        // Incase any animator is done immediately when all animation properties are not changed
	        for (var i = 0; i < animators.length; i++) {
	            animators[i].done(done).start(easing);
	        }
	    },

	    /**
	     * @private
	     * @param {string} path=''
	     * @param {Object} source=this
	     * @param {Object} target
	     * @param {number} [time=500]
	     * @param {number} [delay=0]
	     *
	     * @example
	     *  // Animate position
	     *  el._animateToShallow({
	     *      position: [10, 10]
	     *  })
	     *
	     *  // Animate shape, style and position in 100ms, delayed 100ms
	     *  el._animateToShallow({
	     *      shape: {
	     *          width: 500
	     *      },
	     *      style: {
	     *          fill: 'red'
	     *      }
	     *      position: [10, 10]
	     *  }, 100, 100)
	     */
	    _animateToShallow: function _animateToShallow(path, source, target, time, delay) {
	        var objShallow = {};
	        var propertyCount = 0;
	        for (var name in target) {
	            if (!target.hasOwnProperty(name)) {
	                continue;
	            }

	            if (source[name] != null) {
	                if (isObject(target[name]) && !util.isArrayLike(target[name])) {
	                    this._animateToShallow(path ? path + '.' + name : name, source[name], target[name], time, delay);
	                } else {
	                    objShallow[name] = target[name];
	                    propertyCount++;
	                }
	            } else if (target[name] != null) {
	                // Attr directly if not has property
	                // FIXME, if some property not needed for element ?
	                if (!path) {
	                    this.attr(name, target[name]);
	                } else {
	                    // Shape or style
	                    var props = {};
	                    props[path] = {};
	                    props[path][name] = target[name];
	                    this.attr(props);
	                }
	            }
	        }

	        if (propertyCount > 0) {
	            this.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
	        }

	        return this;
	    }
	};

	module.exports = Animatable;

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/animation/Animator
	 */

	var Clip = __webpack_require__(537);
	var color = __webpack_require__(539);
	var util = __webpack_require__(504);
	var isArrayLike = util.isArrayLike;

	var arraySlice = Array.prototype.slice;

	function defaultGetter(target, key) {
	    return target[key];
	}

	function defaultSetter(target, key, value) {
	    target[key] = value;
	}

	/**
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} percent
	 * @return {number}
	 */
	function interpolateNumber(p0, p1, percent) {
	    return (p1 - p0) * percent + p0;
	}

	/**
	 * @param  {string} p0
	 * @param  {string} p1
	 * @param  {number} percent
	 * @return {string}
	 */
	function interpolateString(p0, p1, percent) {
	    return percent > 0.5 ? p1 : p0;
	}

	/**
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {number} percent
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */
	function interpolateArray(p0, p1, percent, out, arrDim) {
	    var len = p0.length;
	    if (arrDim == 1) {
	        for (var i = 0; i < len; i++) {
	            out[i] = interpolateNumber(p0[i], p1[i], percent);
	        }
	    } else {
	        var len2 = p0[0].length;
	        for (var i = 0; i < len; i++) {
	            for (var j = 0; j < len2; j++) {
	                out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
	            }
	        }
	    }
	}

	// arr0 is source array, arr1 is target array.
	// Do some preprocess to avoid error happened when interpolating from arr0 to arr1
	function fillArr(arr0, arr1, arrDim) {
	    var arr0Len = arr0.length;
	    var arr1Len = arr1.length;
	    if (arr0Len !== arr1Len) {
	        // FIXME Not work for TypedArray
	        var isPreviousLarger = arr0Len > arr1Len;
	        if (isPreviousLarger) {
	            // Cut the previous
	            arr0.length = arr1Len;
	        } else {
	            // Fill the previous
	            for (var i = arr0Len; i < arr1Len; i++) {
	                arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
	            }
	        }
	    }
	    // Handling NaN value
	    var len2 = arr0[0] && arr0[0].length;
	    for (var i = 0; i < arr0.length; i++) {
	        if (arrDim === 1) {
	            if (isNaN(arr0[i])) {
	                arr0[i] = arr1[i];
	            }
	        } else {
	            for (var j = 0; j < len2; j++) {
	                if (isNaN(arr0[i][j])) {
	                    arr0[i][j] = arr1[i][j];
	                }
	            }
	        }
	    }
	}

	/**
	 * @param  {Array} arr0
	 * @param  {Array} arr1
	 * @param  {number} arrDim
	 * @return {boolean}
	 */
	function isArraySame(arr0, arr1, arrDim) {
	    if (arr0 === arr1) {
	        return true;
	    }
	    var len = arr0.length;
	    if (len !== arr1.length) {
	        return false;
	    }
	    if (arrDim === 1) {
	        for (var i = 0; i < len; i++) {
	            if (arr0[i] !== arr1[i]) {
	                return false;
	            }
	        }
	    } else {
	        var len2 = arr0[0].length;
	        for (var i = 0; i < len; i++) {
	            for (var j = 0; j < len2; j++) {
	                if (arr0[i][j] !== arr1[i][j]) {
	                    return false;
	                }
	            }
	        }
	    }
	    return true;
	}

	/**
	 * Catmull Rom interpolate array
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {Array} p2
	 * @param  {Array} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */
	function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
	    var len = p0.length;
	    if (arrDim == 1) {
	        for (var i = 0; i < len; i++) {
	            out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
	        }
	    } else {
	        var len2 = p0[0].length;
	        for (var i = 0; i < len; i++) {
	            for (var j = 0; j < len2; j++) {
	                out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
	            }
	        }
	    }
	}

	/**
	 * Catmull Rom interpolate number
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @return {number}
	 */
	function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	    var v0 = (p2 - p0) * 0.5;
	    var v1 = (p3 - p1) * 0.5;
	    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}

	function cloneValue(value) {
	    if (isArrayLike(value)) {
	        var len = value.length;
	        if (isArrayLike(value[0])) {
	            var ret = [];
	            for (var i = 0; i < len; i++) {
	                ret.push(arraySlice.call(value[i]));
	            }
	            return ret;
	        }

	        return arraySlice.call(value);
	    }

	    return value;
	}

	function rgba2String(rgba) {
	    rgba[0] = Math.floor(rgba[0]);
	    rgba[1] = Math.floor(rgba[1]);
	    rgba[2] = Math.floor(rgba[2]);

	    return 'rgba(' + rgba.join(',') + ')';
	}

	function createTrackClip(animator, easing, oneTrackDone, keyframes, propName) {
	    var getter = animator._getter;
	    var setter = animator._setter;
	    var useSpline = easing === 'spline';

	    var trackLen = keyframes.length;
	    if (!trackLen) {
	        return;
	    }
	    // Guess data type
	    var firstVal = keyframes[0].value;
	    var isValueArray = isArrayLike(firstVal);
	    var isValueColor = false;
	    var isValueString = false;

	    // For vertices morphing
	    var arrDim = isValueArray && isArrayLike(firstVal[0]) ? 2 : 1;
	    var trackMaxTime;
	    // Sort keyframe as ascending
	    keyframes.sort(function (a, b) {
	        return a.time - b.time;
	    });

	    trackMaxTime = keyframes[trackLen - 1].time;
	    // Percents of each keyframe
	    var kfPercents = [];
	    // Value of each keyframe
	    var kfValues = [];
	    var prevValue = keyframes[0].value;
	    var isAllValueEqual = true;
	    for (var i = 0; i < trackLen; i++) {
	        kfPercents.push(keyframes[i].time / trackMaxTime);
	        // Assume value is a color when it is a string
	        var value = keyframes[i].value;

	        // Check if value is equal, deep check if value is array
	        if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
	            isAllValueEqual = false;
	        }
	        prevValue = value;

	        // Try converting a string to a color array
	        if (typeof value == 'string') {
	            var colorArray = color.parse(value);
	            if (colorArray) {
	                value = colorArray;
	                isValueColor = true;
	            } else {
	                isValueString = true;
	            }
	        }
	        kfValues.push(value);
	    }
	    if (isAllValueEqual) {
	        return;
	    }

	    var lastValue = kfValues[trackLen - 1];
	    // Polyfill array and NaN value
	    for (var i = 0; i < trackLen - 1; i++) {
	        if (isValueArray) {
	            fillArr(kfValues[i], lastValue, arrDim);
	        } else {
	            if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	                kfValues[i] = lastValue;
	            }
	        }
	    }
	    isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);

	    // Cache the key of last frame to speed up when
	    // animation playback is sequency
	    var lastFrame = 0;
	    var lastFramePercent = 0;
	    var start;
	    var w;
	    var p0;
	    var p1;
	    var p2;
	    var p3;

	    if (isValueColor) {
	        var rgba = [0, 0, 0, 0];
	    }

	    var onframe = function onframe(target, percent) {
	        // Find the range keyframes
	        // kf1-----kf2---------current--------kf3
	        // find kf2 and kf3 and do interpolation
	        var frame;
	        // In the easing function like elasticOut, percent may less than 0
	        if (percent < 0) {
	            frame = 0;
	        } else if (percent < lastFramePercent) {
	            // Start from next key
	            // PENDING start from lastFrame ?
	            start = Math.min(lastFrame + 1, trackLen - 1);
	            for (frame = start; frame >= 0; frame--) {
	                if (kfPercents[frame] <= percent) {
	                    break;
	                }
	            }
	            // PENDING really need to do this ?
	            frame = Math.min(frame, trackLen - 2);
	        } else {
	            for (frame = lastFrame; frame < trackLen; frame++) {
	                if (kfPercents[frame] > percent) {
	                    break;
	                }
	            }
	            frame = Math.min(frame - 1, trackLen - 2);
	        }
	        lastFrame = frame;
	        lastFramePercent = percent;

	        var range = kfPercents[frame + 1] - kfPercents[frame];
	        if (range === 0) {
	            return;
	        } else {
	            w = (percent - kfPercents[frame]) / range;
	        }
	        if (useSpline) {
	            p1 = kfValues[frame];
	            p0 = kfValues[frame === 0 ? frame : frame - 1];
	            p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	            p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	            if (isValueArray) {
	                catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
	            } else {
	                var value;
	                if (isValueColor) {
	                    value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
	                    value = rgba2String(rgba);
	                } else if (isValueString) {
	                    // String is step(0.5)
	                    return interpolateString(p1, p2, w);
	                } else {
	                    value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
	                }
	                setter(target, propName, value);
	            }
	        } else {
	            if (isValueArray) {
	                interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
	            } else {
	                var value;
	                if (isValueColor) {
	                    interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
	                    value = rgba2String(rgba);
	                } else if (isValueString) {
	                    // String is step(0.5)
	                    return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	                } else {
	                    value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	                }
	                setter(target, propName, value);
	            }
	        }
	    };

	    var clip = new Clip({
	        target: animator._target,
	        life: trackMaxTime,
	        loop: animator._loop,
	        delay: animator._delay,
	        onframe: onframe,
	        ondestroy: oneTrackDone
	    });

	    if (easing && easing !== 'spline') {
	        clip.easing = easing;
	    }

	    return clip;
	}

	/**
	 * @alias module:zrender/animation/Animator
	 * @constructor
	 * @param {Object} target
	 * @param {boolean} loop
	 * @param {Function} getter
	 * @param {Function} setter
	 */
	var Animator = function Animator(target, loop, getter, setter) {
	    this._tracks = {};
	    this._target = target;

	    this._loop = loop || false;

	    this._getter = getter || defaultGetter;
	    this._setter = setter || defaultSetter;

	    this._clipCount = 0;

	    this._delay = 0;

	    this._doneList = [];

	    this._onframeList = [];

	    this._clipList = [];
	};

	Animator.prototype = {
	    /**
	     * 设置动画关键帧
	     * @param  {number} time 关键帧时间，单位是ms
	     * @param  {Object} props 关键帧的属性值，key-value表示
	     * @return {module:zrender/animation/Animator}
	     */
	    when: function when(time /* ms */, props) {
	        var tracks = this._tracks;
	        for (var propName in props) {
	            if (!props.hasOwnProperty(propName)) {
	                continue;
	            }

	            if (!tracks[propName]) {
	                tracks[propName] = [];
	                // Invalid value
	                var value = this._getter(this._target, propName);
	                if (value == null) {
	                    // zrLog('Invalid property ' + propName);
	                    continue;
	                }
	                // If time is 0
	                //  Then props is given initialize value
	                // Else
	                //  Initialize value from current prop value
	                if (time !== 0) {
	                    tracks[propName].push({
	                        time: 0,
	                        value: cloneValue(value)
	                    });
	                }
	            }
	            tracks[propName].push({
	                time: time,
	                value: props[propName]
	            });
	        }
	        return this;
	    },
	    /**
	     * 添加动画每一帧的回调函数
	     * @param  {Function} callback
	     * @return {module:zrender/animation/Animator}
	     */
	    during: function during(callback) {
	        this._onframeList.push(callback);
	        return this;
	    },

	    _doneCallback: function _doneCallback() {
	        // Clear all tracks
	        this._tracks = {};
	        // Clear all clips
	        this._clipList.length = 0;

	        var doneList = this._doneList;
	        var len = doneList.length;
	        for (var i = 0; i < len; i++) {
	            doneList[i].call(this);
	        }
	    },
	    /**
	     * 开始执行动画
	     * @param  {string|Function} easing
	     *         动画缓动函数，详见{@link module:zrender/animation/easing}
	     * @return {module:zrender/animation/Animator}
	     */
	    start: function start(easing) {

	        var self = this;
	        var clipCount = 0;

	        var oneTrackDone = function oneTrackDone() {
	            clipCount--;
	            if (!clipCount) {
	                self._doneCallback();
	            }
	        };

	        var lastClip;
	        for (var propName in this._tracks) {
	            if (!this._tracks.hasOwnProperty(propName)) {
	                continue;
	            }
	            var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName);
	            if (clip) {
	                this._clipList.push(clip);
	                clipCount++;

	                // If start after added to animation
	                if (this.animation) {
	                    this.animation.addClip(clip);
	                }

	                lastClip = clip;
	            }
	        }

	        // Add during callback on the last clip
	        if (lastClip) {
	            var oldOnFrame = lastClip.onframe;
	            lastClip.onframe = function (target, percent) {
	                oldOnFrame(target, percent);

	                for (var i = 0; i < self._onframeList.length; i++) {
	                    self._onframeList[i](target, percent);
	                }
	            };
	        }

	        if (!clipCount) {
	            this._doneCallback();
	        }
	        return this;
	    },
	    /**
	     * 停止动画
	     * @param {boolean} forwardToLast If move to last frame before stop
	     */
	    stop: function stop(forwardToLast) {
	        var clipList = this._clipList;
	        var animation = this.animation;
	        for (var i = 0; i < clipList.length; i++) {
	            var clip = clipList[i];
	            if (forwardToLast) {
	                // Move to last frame before stop
	                clip.onframe(this._target, 1);
	            }
	            animation && animation.removeClip(clip);
	        }
	        clipList.length = 0;
	    },
	    /**
	     * 设置动画延迟开始的时间
	     * @param  {number} time 单位ms
	     * @return {module:zrender/animation/Animator}
	     */
	    delay: function delay(time) {
	        this._delay = time;
	        return this;
	    },
	    /**
	     * 添加动画结束的回调
	     * @param  {Function} cb
	     * @return {module:zrender/animation/Animator}
	     */
	    done: function done(cb) {
	        if (cb) {
	            this._doneList.push(cb);
	        }
	        return this;
	    },

	    /**
	     * @return {Array.<module:zrender/animation/Clip>}
	     */
	    getClips: function getClips() {
	        return this._clipList;
	    }
	};

	module.exports = Animator;

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */

	var easingFuncs = __webpack_require__(538);

	function Clip(options) {

	    this._target = options.target;

	    // 生命周期
	    this._life = options.life || 1000;
	    // 延时
	    this._delay = options.delay || 0;
	    // 开始时间
	    // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	    this._initialized = false;

	    // 是否循环
	    this.loop = options.loop == null ? false : options.loop;

	    this.gap = options.gap || 0;

	    this.easing = options.easing || 'Linear';

	    this.onframe = options.onframe;
	    this.ondestroy = options.ondestroy;
	    this.onrestart = options.onrestart;
	}

	Clip.prototype = {

	    constructor: Clip,

	    step: function step(globalTime) {
	        // Set startTime on first step, or _startTime may has milleseconds different between clips
	        // PENDING
	        if (!this._initialized) {
	            this._startTime = globalTime + this._delay;
	            this._initialized = true;
	        }

	        var percent = (globalTime - this._startTime) / this._life;

	        // 还没开始
	        if (percent < 0) {
	            return;
	        }

	        percent = Math.min(percent, 1);

	        var easing = this.easing;
	        var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	        var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;

	        this.fire('frame', schedule);

	        // 结束
	        if (percent == 1) {
	            if (this.loop) {
	                this.restart(globalTime);
	                // 重新开始周期
	                // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                return 'restart';
	            }

	            // 动画完成将这个控制器标识为待删除
	            // 在Animation.update中进行批量删除
	            this._needsRemove = true;
	            return 'destroy';
	        }

	        return null;
	    },

	    restart: function restart(globalTime) {
	        var remainder = (globalTime - this._startTime) % this._life;
	        this._startTime = globalTime - remainder + this.gap;

	        this._needsRemove = false;
	    },

	    fire: function fire(eventType, arg) {
	        eventType = 'on' + eventType;
	        if (this[eventType]) {
	            this[eventType](this._target, arg);
	        }
	    }
	};

	module.exports = Clip;

/***/ },
/* 538 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */

	var easing = {
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    linear: function linear(k) {
	        return k;
	    },

	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quadraticIn: function quadraticIn(k) {
	        return k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quadraticOut: function quadraticOut(k) {
	        return k * (2 - k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quadraticInOut: function quadraticInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k;
	        }
	        return -0.5 * (--k * (k - 2) - 1);
	    },

	    // 三次方的缓动（t^3）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    cubicIn: function cubicIn(k) {
	        return k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    cubicOut: function cubicOut(k) {
	        return --k * k * k + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    cubicInOut: function cubicInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k * k;
	        }
	        return 0.5 * ((k -= 2) * k * k + 2);
	    },

	    // 四次方的缓动（t^4）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quarticIn: function quarticIn(k) {
	        return k * k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quarticOut: function quarticOut(k) {
	        return 1 - --k * k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quarticInOut: function quarticInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k * k * k;
	        }
	        return -0.5 * ((k -= 2) * k * k * k - 2);
	    },

	    // 五次方的缓动（t^5）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quinticIn: function quinticIn(k) {
	        return k * k * k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quinticOut: function quinticOut(k) {
	        return --k * k * k * k * k + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quinticInOut: function quinticInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k * k * k * k;
	        }
	        return 0.5 * ((k -= 2) * k * k * k * k + 2);
	    },

	    // 正弦曲线的缓动（sin(t)）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    sinusoidalIn: function sinusoidalIn(k) {
	        return 1 - Math.cos(k * Math.PI / 2);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    sinusoidalOut: function sinusoidalOut(k) {
	        return Math.sin(k * Math.PI / 2);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    sinusoidalInOut: function sinusoidalInOut(k) {
	        return 0.5 * (1 - Math.cos(Math.PI * k));
	    },

	    // 指数曲线的缓动（2^t）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    exponentialIn: function exponentialIn(k) {
	        return k === 0 ? 0 : Math.pow(1024, k - 1);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    exponentialOut: function exponentialOut(k) {
	        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    exponentialInOut: function exponentialInOut(k) {
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if ((k *= 2) < 1) {
	            return 0.5 * Math.pow(1024, k - 1);
	        }
	        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	    },

	    // 圆形曲线的缓动（sqrt(1-t^2)）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    circularIn: function circularIn(k) {
	        return 1 - Math.sqrt(1 - k * k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    circularOut: function circularOut(k) {
	        return Math.sqrt(1 - --k * k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    circularInOut: function circularInOut(k) {
	        if ((k *= 2) < 1) {
	            return -0.5 * (Math.sqrt(1 - k * k) - 1);
	        }
	        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	    },

	    // 创建类似于弹簧在停止前来回振荡的动画
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    elasticIn: function elasticIn(k) {
	        var s;
	        var a = 0.1;
	        var p = 0.4;
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if (!a || a < 1) {
	            a = 1;s = p / 4;
	        } else {
	            s = p * Math.asin(1 / a) / (2 * Math.PI);
	        }
	        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    elasticOut: function elasticOut(k) {
	        var s;
	        var a = 0.1;
	        var p = 0.4;
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if (!a || a < 1) {
	            a = 1;s = p / 4;
	        } else {
	            s = p * Math.asin(1 / a) / (2 * Math.PI);
	        }
	        return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    elasticInOut: function elasticInOut(k) {
	        var s;
	        var a = 0.1;
	        var p = 0.4;
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if (!a || a < 1) {
	            a = 1;s = p / 4;
	        } else {
	            s = p * Math.asin(1 / a) / (2 * Math.PI);
	        }
	        if ((k *= 2) < 1) {
	            return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	        }
	        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	    },

	    // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    backIn: function backIn(k) {
	        var s = 1.70158;
	        return k * k * ((s + 1) * k - s);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    backOut: function backOut(k) {
	        var s = 1.70158;
	        return --k * k * ((s + 1) * k + s) + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    backInOut: function backInOut(k) {
	        var s = 1.70158 * 1.525;
	        if ((k *= 2) < 1) {
	            return 0.5 * (k * k * ((s + 1) * k - s));
	        }
	        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	    },

	    // 创建弹跳效果
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    bounceIn: function bounceIn(k) {
	        return 1 - easing.bounceOut(1 - k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    bounceOut: function bounceOut(k) {
	        if (k < 1 / 2.75) {
	            return 7.5625 * k * k;
	        } else if (k < 2 / 2.75) {
	            return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	        } else if (k < 2.5 / 2.75) {
	            return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	        } else {
	            return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	        }
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    bounceInOut: function bounceInOut(k) {
	        if (k < 0.5) {
	            return easing.bounceIn(k * 2) * 0.5;
	        }
	        return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	    }
	};

	module.exports = easing;

/***/ },
/* 539 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * @module zrender/tool/color
	 */

	var kCSSColorTable = {
	    'transparent': [0, 0, 0, 0], 'aliceblue': [240, 248, 255, 1],
	    'antiquewhite': [250, 235, 215, 1], 'aqua': [0, 255, 255, 1],
	    'aquamarine': [127, 255, 212, 1], 'azure': [240, 255, 255, 1],
	    'beige': [245, 245, 220, 1], 'bisque': [255, 228, 196, 1],
	    'black': [0, 0, 0, 1], 'blanchedalmond': [255, 235, 205, 1],
	    'blue': [0, 0, 255, 1], 'blueviolet': [138, 43, 226, 1],
	    'brown': [165, 42, 42, 1], 'burlywood': [222, 184, 135, 1],
	    'cadetblue': [95, 158, 160, 1], 'chartreuse': [127, 255, 0, 1],
	    'chocolate': [210, 105, 30, 1], 'coral': [255, 127, 80, 1],
	    'cornflowerblue': [100, 149, 237, 1], 'cornsilk': [255, 248, 220, 1],
	    'crimson': [220, 20, 60, 1], 'cyan': [0, 255, 255, 1],
	    'darkblue': [0, 0, 139, 1], 'darkcyan': [0, 139, 139, 1],
	    'darkgoldenrod': [184, 134, 11, 1], 'darkgray': [169, 169, 169, 1],
	    'darkgreen': [0, 100, 0, 1], 'darkgrey': [169, 169, 169, 1],
	    'darkkhaki': [189, 183, 107, 1], 'darkmagenta': [139, 0, 139, 1],
	    'darkolivegreen': [85, 107, 47, 1], 'darkorange': [255, 140, 0, 1],
	    'darkorchid': [153, 50, 204, 1], 'darkred': [139, 0, 0, 1],
	    'darksalmon': [233, 150, 122, 1], 'darkseagreen': [143, 188, 143, 1],
	    'darkslateblue': [72, 61, 139, 1], 'darkslategray': [47, 79, 79, 1],
	    'darkslategrey': [47, 79, 79, 1], 'darkturquoise': [0, 206, 209, 1],
	    'darkviolet': [148, 0, 211, 1], 'deeppink': [255, 20, 147, 1],
	    'deepskyblue': [0, 191, 255, 1], 'dimgray': [105, 105, 105, 1],
	    'dimgrey': [105, 105, 105, 1], 'dodgerblue': [30, 144, 255, 1],
	    'firebrick': [178, 34, 34, 1], 'floralwhite': [255, 250, 240, 1],
	    'forestgreen': [34, 139, 34, 1], 'fuchsia': [255, 0, 255, 1],
	    'gainsboro': [220, 220, 220, 1], 'ghostwhite': [248, 248, 255, 1],
	    'gold': [255, 215, 0, 1], 'goldenrod': [218, 165, 32, 1],
	    'gray': [128, 128, 128, 1], 'green': [0, 128, 0, 1],
	    'greenyellow': [173, 255, 47, 1], 'grey': [128, 128, 128, 1],
	    'honeydew': [240, 255, 240, 1], 'hotpink': [255, 105, 180, 1],
	    'indianred': [205, 92, 92, 1], 'indigo': [75, 0, 130, 1],
	    'ivory': [255, 255, 240, 1], 'khaki': [240, 230, 140, 1],
	    'lavender': [230, 230, 250, 1], 'lavenderblush': [255, 240, 245, 1],
	    'lawngreen': [124, 252, 0, 1], 'lemonchiffon': [255, 250, 205, 1],
	    'lightblue': [173, 216, 230, 1], 'lightcoral': [240, 128, 128, 1],
	    'lightcyan': [224, 255, 255, 1], 'lightgoldenrodyellow': [250, 250, 210, 1],
	    'lightgray': [211, 211, 211, 1], 'lightgreen': [144, 238, 144, 1],
	    'lightgrey': [211, 211, 211, 1], 'lightpink': [255, 182, 193, 1],
	    'lightsalmon': [255, 160, 122, 1], 'lightseagreen': [32, 178, 170, 1],
	    'lightskyblue': [135, 206, 250, 1], 'lightslategray': [119, 136, 153, 1],
	    'lightslategrey': [119, 136, 153, 1], 'lightsteelblue': [176, 196, 222, 1],
	    'lightyellow': [255, 255, 224, 1], 'lime': [0, 255, 0, 1],
	    'limegreen': [50, 205, 50, 1], 'linen': [250, 240, 230, 1],
	    'magenta': [255, 0, 255, 1], 'maroon': [128, 0, 0, 1],
	    'mediumaquamarine': [102, 205, 170, 1], 'mediumblue': [0, 0, 205, 1],
	    'mediumorchid': [186, 85, 211, 1], 'mediumpurple': [147, 112, 219, 1],
	    'mediumseagreen': [60, 179, 113, 1], 'mediumslateblue': [123, 104, 238, 1],
	    'mediumspringgreen': [0, 250, 154, 1], 'mediumturquoise': [72, 209, 204, 1],
	    'mediumvioletred': [199, 21, 133, 1], 'midnightblue': [25, 25, 112, 1],
	    'mintcream': [245, 255, 250, 1], 'mistyrose': [255, 228, 225, 1],
	    'moccasin': [255, 228, 181, 1], 'navajowhite': [255, 222, 173, 1],
	    'navy': [0, 0, 128, 1], 'oldlace': [253, 245, 230, 1],
	    'olive': [128, 128, 0, 1], 'olivedrab': [107, 142, 35, 1],
	    'orange': [255, 165, 0, 1], 'orangered': [255, 69, 0, 1],
	    'orchid': [218, 112, 214, 1], 'palegoldenrod': [238, 232, 170, 1],
	    'palegreen': [152, 251, 152, 1], 'paleturquoise': [175, 238, 238, 1],
	    'palevioletred': [219, 112, 147, 1], 'papayawhip': [255, 239, 213, 1],
	    'peachpuff': [255, 218, 185, 1], 'peru': [205, 133, 63, 1],
	    'pink': [255, 192, 203, 1], 'plum': [221, 160, 221, 1],
	    'powderblue': [176, 224, 230, 1], 'purple': [128, 0, 128, 1],
	    'red': [255, 0, 0, 1], 'rosybrown': [188, 143, 143, 1],
	    'royalblue': [65, 105, 225, 1], 'saddlebrown': [139, 69, 19, 1],
	    'salmon': [250, 128, 114, 1], 'sandybrown': [244, 164, 96, 1],
	    'seagreen': [46, 139, 87, 1], 'seashell': [255, 245, 238, 1],
	    'sienna': [160, 82, 45, 1], 'silver': [192, 192, 192, 1],
	    'skyblue': [135, 206, 235, 1], 'slateblue': [106, 90, 205, 1],
	    'slategray': [112, 128, 144, 1], 'slategrey': [112, 128, 144, 1],
	    'snow': [255, 250, 250, 1], 'springgreen': [0, 255, 127, 1],
	    'steelblue': [70, 130, 180, 1], 'tan': [210, 180, 140, 1],
	    'teal': [0, 128, 128, 1], 'thistle': [216, 191, 216, 1],
	    'tomato': [255, 99, 71, 1], 'turquoise': [64, 224, 208, 1],
	    'violet': [238, 130, 238, 1], 'wheat': [245, 222, 179, 1],
	    'white': [255, 255, 255, 1], 'whitesmoke': [245, 245, 245, 1],
	    'yellow': [255, 255, 0, 1], 'yellowgreen': [154, 205, 50, 1]
	};

	function clampCssByte(i) {
	    // Clamp to integer 0 .. 255.
	    i = Math.round(i); // Seems to be what Chrome does (vs truncation).
	    return i < 0 ? 0 : i > 255 ? 255 : i;
	}

	function clampCssAngle(i) {
	    // Clamp to integer 0 .. 360.
	    i = Math.round(i); // Seems to be what Chrome does (vs truncation).
	    return i < 0 ? 0 : i > 360 ? 360 : i;
	}

	function clampCssFloat(f) {
	    // Clamp to float 0.0 .. 1.0.
	    return f < 0 ? 0 : f > 1 ? 1 : f;
	}

	function parseCssInt(str) {
	    // int or percentage.
	    if (str.length && str.charAt(str.length - 1) === '%') {
	        return clampCssByte(parseFloat(str) / 100 * 255);
	    }
	    return clampCssByte(parseInt(str, 10));
	}

	function parseCssFloat(str) {
	    // float or percentage.
	    if (str.length && str.charAt(str.length - 1) === '%') {
	        return clampCssFloat(parseFloat(str) / 100);
	    }
	    return clampCssFloat(parseFloat(str));
	}

	function cssHueToRgb(m1, m2, h) {
	    if (h < 0) {
	        h += 1;
	    } else if (h > 1) {
	        h -= 1;
	    }

	    if (h * 6 < 1) {
	        return m1 + (m2 - m1) * h * 6;
	    }
	    if (h * 2 < 1) {
	        return m2;
	    }
	    if (h * 3 < 2) {
	        return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	    }
	    return m1;
	}

	function lerp(a, b, p) {
	    return a + (b - a) * p;
	}

	/**
	 * @param {string} colorStr
	 * @return {Array.<number>}
	 * @memberOf module:zrender/util/color
	 */
	function parse(colorStr) {
	    if (!colorStr) {
	        return;
	    }
	    // colorStr may be not string
	    colorStr = colorStr + '';
	    // Remove all whitespace, not compliant, but should just be more accepting.
	    var str = colorStr.replace(/ /g, '').toLowerCase();

	    // Color keywords (and transparent) lookup.
	    if (str in kCSSColorTable) {
	        return kCSSColorTable[str].slice(); // dup.
	    }

	    // #abc and #abc123 syntax.
	    if (str.charAt(0) === '#') {
	        if (str.length === 4) {
	            var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
	            if (!(iv >= 0 && iv <= 0xfff)) {
	                return; // Covers NaN.
	            }
	            return [(iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1];
	        } else if (str.length === 7) {
	            var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
	            if (!(iv >= 0 && iv <= 0xffffff)) {
	                return; // Covers NaN.
	            }
	            return [(iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1];
	        }

	        return;
	    }
	    var op = str.indexOf('('),
	        ep = str.indexOf(')');
	    if (op !== -1 && ep + 1 === str.length) {
	        var fname = str.substr(0, op);
	        var params = str.substr(op + 1, ep - (op + 1)).split(',');
	        var alpha = 1; // To allow case fallthrough.
	        switch (fname) {
	            case 'rgba':
	                if (params.length !== 4) {
	                    return;
	                }
	                alpha = parseCssFloat(params.pop()); // jshint ignore:line
	            // Fall through.
	            case 'rgb':
	                if (params.length !== 3) {
	                    return;
	                }
	                return [parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha];
	            case 'hsla':
	                if (params.length !== 4) {
	                    return;
	                }
	                params[3] = parseCssFloat(params[3]);
	                return hsla2rgba(params);
	            case 'hsl':
	                if (params.length !== 3) {
	                    return;
	                }
	                return hsla2rgba(params);
	            default:
	                return;
	        }
	    }

	    return;
	}

	/**
	 * @param {Array.<number>} hsla
	 * @return {Array.<number>} rgba
	 */
	function hsla2rgba(hsla) {
	    var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
	    // NOTE(deanm): According to the CSS spec s/l should only be
	    // percentages, but we don't bother and let float or percentage.
	    var s = parseCssFloat(hsla[1]);
	    var l = parseCssFloat(hsla[2]);
	    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	    var m1 = l * 2 - m2;

	    var rgba = [clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)];

	    if (hsla.length === 4) {
	        rgba[3] = hsla[3];
	    }

	    return rgba;
	}

	/**
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} hsla
	 */
	function rgba2hsla(rgba) {
	    if (!rgba) {
	        return;
	    }

	    // RGB from 0 to 255
	    var R = rgba[0] / 255;
	    var G = rgba[1] / 255;
	    var B = rgba[2] / 255;

	    var vMin = Math.min(R, G, B); // Min. value of RGB
	    var vMax = Math.max(R, G, B); // Max. value of RGB
	    var delta = vMax - vMin; // Delta RGB value

	    var L = (vMax + vMin) / 2;
	    var H;
	    var S;
	    // HSL results from 0 to 1
	    if (delta === 0) {
	        H = 0;
	        S = 0;
	    } else {
	        if (L < 0.5) {
	            S = delta / (vMax + vMin);
	        } else {
	            S = delta / (2 - vMax - vMin);
	        }

	        var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
	        var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
	        var deltaB = ((vMax - B) / 6 + delta / 2) / delta;

	        if (R === vMax) {
	            H = deltaB - deltaG;
	        } else if (G === vMax) {
	            H = 1 / 3 + deltaR - deltaB;
	        } else if (B === vMax) {
	            H = 2 / 3 + deltaG - deltaR;
	        }

	        if (H < 0) {
	            H += 1;
	        }

	        if (H > 1) {
	            H -= 1;
	        }
	    }

	    var hsla = [H * 360, S, L];

	    if (rgba[3] != null) {
	        hsla.push(rgba[3]);
	    }

	    return hsla;
	}

	/**
	 * @param {string} color
	 * @param {number} level
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */
	function lift(color, level) {
	    var colorArr = parse(color);
	    if (colorArr) {
	        for (var i = 0; i < 3; i++) {
	            if (level < 0) {
	                colorArr[i] = colorArr[i] * (1 - level) | 0;
	            } else {
	                colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
	            }
	        }
	        return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	    }
	}

	/**
	 * @param {string} color
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */
	function toHex(color, level) {
	    var colorArr = parse(color);
	    if (colorArr) {
	        return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
	    }
	}

	/**
	 * Map value to color. Faster than mapToColor methods because color is represented by rgba array
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<Array.<number>>} colors List of rgba color array
	 * @param {Array.<number>} [out] Mapped gba color array
	 * @return {Array.<number>}
	 */
	function fastMapToColor(normalizedValue, colors, out) {
	    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	        return;
	    }
	    out = out || [0, 0, 0, 0];
	    var value = normalizedValue * (colors.length - 1);
	    var leftIndex = Math.floor(value);
	    var rightIndex = Math.ceil(value);
	    var leftColor = colors[leftIndex];
	    var rightColor = colors[rightIndex];
	    var dv = value - leftIndex;
	    out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
	    out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
	    out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
	    out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
	    return out;
	}
	/**
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<string>} colors Color list.
	 * @param {boolean=} fullOutput Default false.
	 * @return {(string|Object)} Result color. If fullOutput,
	 *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	 * @memberOf module:zrender/util/color
	 */
	function mapToColor(normalizedValue, colors, fullOutput) {
	    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	        return;
	    }

	    var value = normalizedValue * (colors.length - 1);
	    var leftIndex = Math.floor(value);
	    var rightIndex = Math.ceil(value);
	    var leftColor = parse(colors[leftIndex]);
	    var rightColor = parse(colors[rightIndex]);
	    var dv = value - leftIndex;

	    var color = stringify([clampCssByte(lerp(leftColor[0], rightColor[0], dv)), clampCssByte(lerp(leftColor[1], rightColor[1], dv)), clampCssByte(lerp(leftColor[2], rightColor[2], dv)), clampCssFloat(lerp(leftColor[3], rightColor[3], dv))], 'rgba');

	    return fullOutput ? {
	        color: color,
	        leftIndex: leftIndex,
	        rightIndex: rightIndex,
	        value: value
	    } : color;
	}

	/**
	 * @param {string} color
	 * @param {number=} h 0 ~ 360, ignore when null.
	 * @param {number=} s 0 ~ 1, ignore when null.
	 * @param {number=} l 0 ~ 1, ignore when null.
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */
	function modifyHSL(color, h, s, l) {
	    color = parse(color);

	    if (color) {
	        color = rgba2hsla(color);
	        h != null && (color[0] = clampCssAngle(h));
	        s != null && (color[1] = parseCssFloat(s));
	        l != null && (color[2] = parseCssFloat(l));

	        return stringify(hsla2rgba(color), 'rgba');
	    }
	}

	/**
	 * @param {string} color
	 * @param {number=} alpha 0 ~ 1
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */
	function modifyAlpha(color, alpha) {
	    color = parse(color);

	    if (color && alpha != null) {
	        color[3] = clampCssFloat(alpha);
	        return stringify(color, 'rgba');
	    }
	}

	/**
	 * @param {Array.<string>} colors Color list.
	 * @param {string} type 'rgba', 'hsva', ...
	 * @return {string} Result color.
	 */
	function stringify(arrColor, type) {
	    var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
	    if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	        colorStr += ',' + arrColor[3];
	    }
	    return type + '(' + colorStr + ')';
	}

	module.exports = {
	    parse: parse,
	    lift: lift,
	    toHex: toHex,
	    fastMapToColor: fastMapToColor,
	    mapToColor: mapToColor,
	    modifyHSL: modifyHSL,
	    modifyAlpha: modifyAlpha,
	    stringify: stringify
	};

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var config = __webpack_require__(541);

	/**
	 * @exports zrender/tool/log
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	module.exports = function () {
	    if (config.debugMode === 0) {
	        return;
	    } else if (config.debugMode == 1) {
	        for (var k in arguments) {
	            throw new Error(arguments[k]);
	        }
	    } else if (config.debugMode > 1) {
	        for (var k in arguments) {
	            console.log(arguments[k]);
	        }
	    }
	};

	/* for debug
	return function(mes) {
	    document.getElementById('wrong-message').innerHTML =
	        mes + ' ' + (new Date() - 0)
	        + '<br/>'
	        + document.getElementById('wrong-message').innerHTML;
	};
	*/

/***/ },
/* 541 */
/***/ function(module, exports) {

	'use strict';

	var dpr = 1;
	// If in browser environment
	if (typeof window !== 'undefined') {
	    dpr = Math.max(window.devicePixelRatio || 1, 1);
	}
	/**
	 * config默认配置项
	 * @exports zrender/config
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	var config = {
	    /**
	     * debug日志选项：catchBrushException为true下有效
	     * 0 : 不生成debug数据，发布用
	     * 1 : 异常抛出，调试用
	     * 2 : 控制台输出，调试用
	     */
	    debugMode: 0,

	    // retina 屏幕优化
	    devicePixelRatio: dpr
	};
	module.exports = config;

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Group = __webpack_require__(530);
	var componentUtil = __webpack_require__(520);
	var clazzUtil = __webpack_require__(513);
	var modelUtil = __webpack_require__(505);
	var zrUtil = __webpack_require__(504);

	function Chart() {

	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = new Group();

	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.uid = componentUtil.getUID('viewChart');
	}

	Chart.prototype = {

	    type: 'chart',

	    /**
	     * Init the chart
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    init: function init(ecModel, api) {},

	    /**
	     * Render the chart
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     * @param  {Object} payload
	     */
	    render: function render(seriesModel, ecModel, api, payload) {},

	    /**
	     * Highlight series or specified data item
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     * @param  {Object} payload
	     */
	    highlight: function highlight(seriesModel, ecModel, api, payload) {
	        toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	    },

	    /**
	     * Downplay series or specified data item
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     * @param  {Object} payload
	     */
	    downplay: function downplay(seriesModel, ecModel, api, payload) {
	        toggleHighlight(seriesModel.getData(), payload, 'normal');
	    },

	    /**
	     * Remove self
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    remove: function remove(ecModel, api) {
	        this.group.removeAll();
	    },

	    /**
	     * Dispose self
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    dispose: function dispose() {}

	    /**
	     * The view contains the given point.
	     * @interface
	     * @param {Array.<number>} point
	     * @return {boolean}
	     */
	    // containPoint: function () {}

	};

	var chartProto = Chart.prototype;
	chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	    this.render(seriesModel, ecModel, api, payload);
	};

	/**
	 * Set state of single element
	 * @param  {module:zrender/Element} el
	 * @param  {string} state
	 */
	function elSetState(el, state) {
	    if (el) {
	        el.trigger(state);
	        if (el.type === 'group') {
	            for (var i = 0; i < el.childCount(); i++) {
	                elSetState(el.childAt(i), state);
	            }
	        }
	    }
	}
	/**
	 * @param  {module:echarts/data/List} data
	 * @param  {Object} payload
	 * @param  {string} state 'normal'|'emphasis'
	 * @inner
	 */
	function toggleHighlight(data, payload, state) {
	    var dataIndex = modelUtil.queryDataIndex(data, payload);

	    if (dataIndex != null) {
	        zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {
	            elSetState(data.getItemGraphicEl(dataIdx), state);
	        });
	    } else {
	        data.eachItemGraphicEl(function (el) {
	            elSetState(el, state);
	        });
	    }
	}

	// Enable Chart.extend.
	clazzUtil.enableClassExtend(Chart, ['dispose']);

	// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	clazzUtil.enableClassManagement(Chart, { registerWhenExtend: true });

	module.exports = Chart;

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var pathTool = __webpack_require__(544);
	var round = Math.round;
	var Path = __webpack_require__(545);
	var colorTool = __webpack_require__(539);
	var matrix = __webpack_require__(511);
	var vector = __webpack_require__(510);

	var graphic = {};

	graphic.Group = __webpack_require__(530);

	graphic.Image = __webpack_require__(561);

	graphic.Text = __webpack_require__(563);

	graphic.Circle = __webpack_require__(564);

	graphic.Sector = __webpack_require__(565);

	graphic.Ring = __webpack_require__(566);

	graphic.Polygon = __webpack_require__(567);

	graphic.Polyline = __webpack_require__(571);

	graphic.Rect = __webpack_require__(572);

	graphic.Line = __webpack_require__(574);

	graphic.BezierCurve = __webpack_require__(575);

	graphic.Arc = __webpack_require__(576);

	graphic.CompoundPath = __webpack_require__(577);

	graphic.LinearGradient = __webpack_require__(578);

	graphic.RadialGradient = __webpack_require__(580);

	graphic.BoundingRect = __webpack_require__(509);

	/**
	 * Extend shape with parameters
	 */
	graphic.extendShape = function (opts) {
	    return Path.extend(opts);
	};

	/**
	 * Extend path
	 */
	graphic.extendPath = function (pathData, opts) {
	    return pathTool.extendFromString(pathData, opts);
	};

	/**
	 * Create a path element from path data string
	 * @param {string} pathData
	 * @param {Object} opts
	 * @param {module:zrender/core/BoundingRect} rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */
	graphic.makePath = function (pathData, opts, rect, layout) {
	    var path = pathTool.createFromString(pathData, opts);
	    var boundingRect = path.getBoundingRect();
	    if (rect) {
	        var aspect = boundingRect.width / boundingRect.height;

	        if (layout === 'center') {
	            // Set rect to center, keep width / height ratio.
	            var width = rect.height * aspect;
	            var height;
	            if (width <= rect.width) {
	                height = rect.height;
	            } else {
	                width = rect.width;
	                height = width / aspect;
	            }
	            var cx = rect.x + rect.width / 2;
	            var cy = rect.y + rect.height / 2;

	            rect.x = cx - width / 2;
	            rect.y = cy - height / 2;
	            rect.width = width;
	            rect.height = height;
	        }

	        graphic.resizePath(path, rect);
	    }
	    return path;
	};

	graphic.mergePath = pathTool.mergePath,

	/**
	 * Resize a path to fit the rect
	 * @param {module:zrender/graphic/Path} path
	 * @param {Object} rect
	 */
	graphic.resizePath = function (path, rect) {
	    if (!path.applyTransform) {
	        return;
	    }

	    var pathRect = path.getBoundingRect();

	    var m = pathRect.calculateTransform(rect);

	    path.applyTransform(m);
	};

	/**
	 * Sub pixel optimize line for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x1]
	 * @param {number} [param.shape.y1]
	 * @param {number} [param.shape.x2]
	 * @param {number} [param.shape.y2]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */
	graphic.subPixelOptimizeLine = function (param) {
	    var subPixelOptimize = graphic.subPixelOptimize;
	    var shape = param.shape;
	    var lineWidth = param.style.lineWidth;

	    if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	        shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	    }
	    if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	        shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	    }
	    return param;
	};

	/**
	 * Sub pixel optimize rect for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x]
	 * @param {number} [param.shape.y]
	 * @param {number} [param.shape.width]
	 * @param {number} [param.shape.height]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */
	graphic.subPixelOptimizeRect = function (param) {
	    var subPixelOptimize = graphic.subPixelOptimize;
	    var shape = param.shape;
	    var lineWidth = param.style.lineWidth;
	    var originX = shape.x;
	    var originY = shape.y;
	    var originWidth = shape.width;
	    var originHeight = shape.height;
	    shape.x = subPixelOptimize(shape.x, lineWidth, true);
	    shape.y = subPixelOptimize(shape.y, lineWidth, true);
	    shape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x, originWidth === 0 ? 0 : 1);
	    shape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y, originHeight === 0 ? 0 : 1);
	    return param;
	};

	/**
	 * Sub pixel optimize for canvas
	 *
	 * @param {number} position Coordinate, such as x, y
	 * @param {number} lineWidth Should be nonnegative integer.
	 * @param {boolean=} positiveOrNegative Default false (negative).
	 * @return {number} Optimized position.
	 */
	graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {
	    // Assure that (position + lineWidth / 2) is near integer edge,
	    // otherwise line will be fuzzy in canvas.
	    var doubledPosition = round(position * 2);
	    return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	};

	function hasFillOrStroke(fillOrStroke) {
	    return fillOrStroke != null && fillOrStroke != 'none';
	}

	function liftColor(color) {
	    return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;
	}

	/**
	 * @private
	 */
	function cacheElementStl(el) {
	    if (el.__hoverStlDirty) {
	        var stroke = el.style.stroke;
	        var fill = el.style.fill;

	        // Create hoverStyle on mouseover
	        var hoverStyle = el.__hoverStl;
	        hoverStyle.fill = hoverStyle.fill || (hasFillOrStroke(fill) ? liftColor(fill) : null);
	        hoverStyle.stroke = hoverStyle.stroke || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);

	        var normalStyle = {};
	        for (var name in hoverStyle) {
	            if (hoverStyle.hasOwnProperty(name)) {
	                normalStyle[name] = el.style[name];
	            }
	        }

	        el.__normalStl = normalStyle;

	        el.__hoverStlDirty = false;
	    }
	}

	/**
	 * @private
	 */
	function doSingleEnterHover(el) {
	    if (el.__isHover) {
	        return;
	    }

	    cacheElementStl(el);

	    if (el.useHoverLayer) {
	        el.__zr && el.__zr.addHover(el, el.__hoverStl);
	    } else {
	        el.setStyle(el.__hoverStl);
	        el.z2 += 1;
	    }

	    el.__isHover = true;
	}

	/**
	 * @inner
	 */
	function doSingleLeaveHover(el) {
	    if (!el.__isHover) {
	        return;
	    }

	    var normalStl = el.__normalStl;
	    if (el.useHoverLayer) {
	        el.__zr && el.__zr.removeHover(el);
	    } else {
	        normalStl && el.setStyle(normalStl);
	        el.z2 -= 1;
	    }

	    el.__isHover = false;
	}

	/**
	 * @inner
	 */
	function doEnterHover(el) {
	    el.type === 'group' ? el.traverse(function (child) {
	        if (child.type !== 'group') {
	            doSingleEnterHover(child);
	        }
	    }) : doSingleEnterHover(el);
	}

	function doLeaveHover(el) {
	    el.type === 'group' ? el.traverse(function (child) {
	        if (child.type !== 'group') {
	            doSingleLeaveHover(child);
	        }
	    }) : doSingleLeaveHover(el);
	}

	/**
	 * @inner
	 */
	function setElementHoverStl(el, hoverStl) {
	    // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	    // Often used when item group has a label element and it's hoverStyle is different
	    el.__hoverStl = el.hoverStyle || hoverStl || {};
	    el.__hoverStlDirty = true;

	    if (el.__isHover) {
	        cacheElementStl(el);
	    }
	}

	/**
	 * @inner
	 */
	function onElementMouseOver(e) {
	    if (this.__hoverSilentOnTouch && e.zrByTouch) {
	        return;
	    }

	    // Only if element is not in emphasis status
	    !this.__isEmphasis && doEnterHover(this);
	}

	/**
	 * @inner
	 */
	function onElementMouseOut(e) {
	    if (this.__hoverSilentOnTouch && e.zrByTouch) {
	        return;
	    }

	    // Only if element is not in emphasis status
	    !this.__isEmphasis && doLeaveHover(this);
	}

	/**
	 * @inner
	 */
	function enterEmphasis() {
	    this.__isEmphasis = true;
	    doEnterHover(this);
	}

	/**
	 * @inner
	 */
	function leaveEmphasis() {
	    this.__isEmphasis = false;
	    doLeaveHover(this);
	}

	/**
	 * Set hover style of element
	 * @param {module:zrender/Element} el
	 * @param {Object} [hoverStyle]
	 * @param {Object} [opt]
	 * @param {boolean} [opt.hoverSilentOnTouch=false]
	 *        In touch device, mouseover event will be trigger on touchstart event
	 *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
	 *        conviniently use hoverStyle when tap on touch screen without additional
	 *        code for compatibility.
	 *        But if the chart/component has select feature, which usually also use
	 *        hoverStyle, there might be conflict between 'select-highlight' and
	 *        'hover-highlight' especially when roam is enabled (see geo for example).
	 *        In this case, hoverSilentOnTouch should be used to disable hover-highlight
	 *        on touch device.
	 */
	graphic.setHoverStyle = function (el, hoverStyle, opt) {
	    el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;

	    el.type === 'group' ? el.traverse(function (child) {
	        if (child.type !== 'group') {
	            setElementHoverStl(child, hoverStyle);
	        }
	    }) : setElementHoverStl(el, hoverStyle);

	    // Duplicated function will be auto-ignored, see Eventful.js.
	    el.on('mouseover', onElementMouseOver).on('mouseout', onElementMouseOut);

	    // Emphasis, normal can be triggered manually
	    el.on('emphasis', enterEmphasis).on('normal', leaveEmphasis);
	};

	/**
	 * Set text option in the style
	 * @param {Object} textStyle
	 * @param {module:echarts/model/Model} labelModel
	 * @param {string} color
	 */
	graphic.setText = function (textStyle, labelModel, color) {
	    var labelPosition = labelModel.getShallow('position') || 'inside';
	    var labelOffset = labelModel.getShallow('offset');
	    var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;
	    var textStyleModel = labelModel.getModel('textStyle');
	    zrUtil.extend(textStyle, {
	        textDistance: labelModel.getShallow('distance') || 5,
	        textFont: textStyleModel.getFont(),
	        textPosition: labelPosition,
	        textOffset: labelOffset,
	        textFill: textStyleModel.getTextColor() || labelColor
	    });
	};

	function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
	    if (typeof dataIndex === 'function') {
	        cb = dataIndex;
	        dataIndex = null;
	    }
	    // Do not check 'animation' property directly here. Consider this case:
	    // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
	    // but its parent model (`seriesModel`) does.
	    var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();

	    if (animationEnabled) {
	        var postfix = isUpdate ? 'Update' : '';
	        var duration = animatableModel.getShallow('animationDuration' + postfix);
	        var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
	        var animationDelay = animatableModel.getShallow('animationDelay' + postfix);
	        if (typeof animationDelay === 'function') {
	            animationDelay = animationDelay(dataIndex, animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
	        }
	        if (typeof duration === 'function') {
	            duration = duration(dataIndex);
	        }

	        duration > 0 ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb) : (el.attr(props), cb && cb());
	    } else {
	        el.attr(props);
	        cb && cb();
	    }
	}

	/**
	 * Update graphic element properties with or without animation according to the configuration in series
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} [cb]
	 * @example
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
	 *     // Or
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, function () { console.log('Animation done!'); });
	 */
	graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {
	    animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
	};

	/**
	 * Init graphic element properties with or without animation according to the configuration in series
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} cb
	 */
	graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {
	    animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
	};

	/**
	 * Get transform matrix of target (param target),
	 * in coordinate of its ancestor (param ancestor)
	 *
	 * @param {module:zrender/mixin/Transformable} target
	 * @param {module:zrender/mixin/Transformable} [ancestor]
	 */
	graphic.getTransform = function (target, ancestor) {
	    var mat = matrix.identity([]);

	    while (target && target !== ancestor) {
	        matrix.mul(mat, target.getLocalTransform(), mat);
	        target = target.parent;
	    }

	    return mat;
	};

	/**
	 * Apply transform to an vertex.
	 * @param {Array.<number>} vertex [x, y]
	 * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {Array.<number>} [x, y]
	 */
	graphic.applyTransform = function (vertex, transform, invert) {
	    if (invert) {
	        transform = matrix.invert([], transform);
	    }
	    return vector.applyTransform([], vertex, transform);
	};

	/**
	 * @param {string} direction 'left' 'right' 'top' 'bottom'
	 * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	 */
	graphic.transformDirection = function (direction, transform, invert) {

	    // Pick a base, ensure that transform result will not be (0, 0).
	    var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
	    var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);

	    var vertex = [direction === 'left' ? -hBase : direction === 'right' ? hBase : 0, direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0];

	    vertex = graphic.applyTransform(vertex, transform, invert);

	    return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
	};

	/**
	 * Apply group transition animation from g1 to g2
	 */
	graphic.groupTransition = function (g1, g2, animatableModel, cb) {
	    if (!g1 || !g2) {
	        return;
	    }

	    function getElMap(g) {
	        var elMap = {};
	        g.traverse(function (el) {
	            if (!el.isGroup && el.anid) {
	                elMap[el.anid] = el;
	            }
	        });
	        return elMap;
	    }
	    function getAnimatableProps(el) {
	        var obj = {
	            position: vector.clone(el.position),
	            rotation: el.rotation
	        };
	        if (el.shape) {
	            obj.shape = zrUtil.extend({}, el.shape);
	        }
	        return obj;
	    }
	    var elMap1 = getElMap(g1);

	    g2.traverse(function (el) {
	        if (!el.isGroup && el.anid) {
	            var oldEl = elMap1[el.anid];
	            if (oldEl) {
	                var newProp = getAnimatableProps(el);
	                el.attr(getAnimatableProps(oldEl));
	                graphic.updateProps(el, newProp, animatableModel, el.dataIndex);
	            }
	            // else {
	            //     if (el.previousProps) {
	            //         graphic.updateProps
	            //     }
	            // }
	        }
	    });
	};

	module.exports = graphic;

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Path = __webpack_require__(545);
	var PathProxy = __webpack_require__(549);
	var transformPath = __webpack_require__(560);
	var matrix = __webpack_require__(511);

	// command chars
	var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];

	var mathSqrt = Math.sqrt;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI = Math.PI;

	var vMag = function vMag(v) {
	    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	};
	var vRatio = function vRatio(u, v) {
	    return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	};
	var vAngle = function vAngle(u, v) {
	    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	};

	function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	    var psi = psiDeg * (PI / 180.0);
	    var xp = mathCos(psi) * (x1 - x2) / 2.0 + mathSin(psi) * (y1 - y2) / 2.0;
	    var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0 + mathCos(psi) * (y1 - y2) / 2.0;

	    var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

	    if (lambda > 1) {
	        rx *= mathSqrt(lambda);
	        ry *= mathSqrt(lambda);
	    }

	    var f = (fa === fs ? -1 : 1) * mathSqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;

	    var cxp = f * rx * yp / ry;
	    var cyp = f * -ry * xp / rx;

	    var cx = (x1 + x2) / 2.0 + mathCos(psi) * cxp - mathSin(psi) * cyp;
	    var cy = (y1 + y2) / 2.0 + mathSin(psi) * cxp + mathCos(psi) * cyp;

	    var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	    var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	    var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	    var dTheta = vAngle(u, v);

	    if (vRatio(u, v) <= -1) {
	        dTheta = PI;
	    }
	    if (vRatio(u, v) >= 1) {
	        dTheta = 0;
	    }
	    if (fs === 0 && dTheta > 0) {
	        dTheta = dTheta - 2 * PI;
	    }
	    if (fs === 1 && dTheta < 0) {
	        dTheta = dTheta + 2 * PI;
	    }

	    path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	}

	function createPathProxyFromString(data) {
	    if (!data) {
	        return [];
	    }

	    // command string
	    var cs = data.replace(/-/g, ' -').replace(/  /g, ' ').replace(/ /g, ',').replace(/,,/g, ',');

	    var n;
	    // create pipes so that we can split the data
	    for (n = 0; n < cc.length; n++) {
	        cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	    }

	    // create array
	    var arr = cs.split('|');
	    // init context point
	    var cpx = 0;
	    var cpy = 0;

	    var path = new PathProxy();
	    var CMD = PathProxy.CMD;

	    var prevCmd;
	    for (n = 1; n < arr.length; n++) {
	        var str = arr[n];
	        var c = str.charAt(0);
	        var off = 0;
	        var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	        var cmd;

	        if (p.length > 0 && p[0] === '') {
	            p.shift();
	        }

	        for (var i = 0; i < p.length; i++) {
	            p[i] = parseFloat(p[i]);
	        }
	        while (off < p.length && !isNaN(p[off])) {
	            if (isNaN(p[0])) {
	                break;
	            }
	            var ctlPtx;
	            var ctlPty;

	            var rx;
	            var ry;
	            var psi;
	            var fa;
	            var fs;

	            var x1 = cpx;
	            var y1 = cpy;

	            // convert l, H, h, V, and v to L
	            switch (c) {
	                case 'l':
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'L':
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'm':
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.M;
	                    path.addData(cmd, cpx, cpy);
	                    c = 'l';
	                    break;
	                case 'M':
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.M;
	                    path.addData(cmd, cpx, cpy);
	                    c = 'L';
	                    break;
	                case 'h':
	                    cpx += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'H':
	                    cpx = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'v':
	                    cpy += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'V':
	                    cpy = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'C':
	                    cmd = CMD.C;
	                    path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
	                    cpx = p[off - 2];
	                    cpy = p[off - 1];
	                    break;
	                case 'c':
	                    cmd = CMD.C;
	                    path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
	                    cpx += p[off - 2];
	                    cpy += p[off - 1];
	                    break;
	                case 'S':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.C) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cmd = CMD.C;
	                    x1 = p[off++];
	                    y1 = p[off++];
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                    break;
	                case 's':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.C) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cmd = CMD.C;
	                    x1 = cpx + p[off++];
	                    y1 = cpy + p[off++];
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                    break;
	                case 'Q':
	                    x1 = p[off++];
	                    y1 = p[off++];
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, x1, y1, cpx, cpy);
	                    break;
	                case 'q':
	                    x1 = p[off++] + cpx;
	                    y1 = p[off++] + cpy;
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, x1, y1, cpx, cpy);
	                    break;
	                case 'T':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.Q) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                    break;
	                case 't':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.Q) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                    break;
	                case 'A':
	                    rx = p[off++];
	                    ry = p[off++];
	                    psi = p[off++];
	                    fa = p[off++];
	                    fs = p[off++];

	                    x1 = cpx, y1 = cpy;
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.A;
	                    processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	                    break;
	                case 'a':
	                    rx = p[off++];
	                    ry = p[off++];
	                    psi = p[off++];
	                    fa = p[off++];
	                    fs = p[off++];

	                    x1 = cpx, y1 = cpy;
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.A;
	                    processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	                    break;
	            }
	        }

	        if (c === 'z' || c === 'Z') {
	            cmd = CMD.Z;
	            path.addData(cmd);
	        }

	        prevCmd = cmd;
	    }

	    path.toStatic();

	    return path;
	}

	// TODO Optimize double memory cost problem
	function createPathOptions(str, opts) {
	    var pathProxy = createPathProxyFromString(str);
	    var transform;
	    opts = opts || {};
	    opts.buildPath = function (path) {
	        path.setData(pathProxy.data);
	        transform && transformPath(path, transform);
	        // Svg and vml renderer don't have context
	        var ctx = path.getContext();
	        if (ctx) {
	            path.rebuildPath(ctx);
	        }
	    };

	    opts.applyTransform = function (m) {
	        if (!transform) {
	            transform = matrix.create();
	        }
	        matrix.mul(transform, m, transform);
	        this.dirty(true);
	    };

	    return opts;
	}

	module.exports = {
	    /**
	     * Create a Path object from path string data
	     * http://www.w3.org/TR/SVG/paths.html#PathData
	     * @param  {Object} opts Other options
	     */
	    createFromString: function createFromString(str, opts) {
	        return new Path(createPathOptions(str, opts));
	    },

	    /**
	     * Create a Path class from path string data
	     * @param  {string} str
	     * @param  {Object} opts Other options
	     */
	    extendFromString: function extendFromString(str, opts) {
	        return Path.extend(createPathOptions(str, opts));
	    },

	    /**
	     * Merge multiple paths
	     */
	    // TODO Apply transform
	    // TODO stroke dash
	    // TODO Optimize double memory cost problem
	    mergePath: function mergePath(pathEls, opts) {
	        var pathList = [];
	        var len = pathEls.length;
	        for (var i = 0; i < len; i++) {
	            var pathEl = pathEls[i];
	            if (pathEl.__dirty) {
	                pathEl.buildPath(pathEl.path, pathEl.shape, true);
	            }
	            pathList.push(pathEl.path);
	        }

	        var pathBundle = new Path(opts);
	        pathBundle.buildPath = function (path) {
	            path.appendPath(pathList);
	            // Svg and vml renderer don't have context
	            var ctx = path.getContext();
	            if (ctx) {
	                path.rebuildPath(ctx);
	            }
	        };

	        return pathBundle;
	    }
	};

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Path element
	 * @module zrender/graphic/Path
	 */

	var Displayable = __webpack_require__(546);
	var zrUtil = __webpack_require__(504);
	var PathProxy = __webpack_require__(549);
	var pathContain = __webpack_require__(552);

	var Pattern = __webpack_require__(559);
	var getCanvasPattern = Pattern.prototype.getCanvasPattern;

	var abs = Math.abs;

	/**
	 * @alias module:zrender/graphic/Path
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	function Path(opts) {
	    Displayable.call(this, opts);

	    /**
	     * @type {module:zrender/core/PathProxy}
	     * @readOnly
	     */
	    this.path = new PathProxy();
	}

	Path.prototype = {

	    constructor: Path,

	    type: 'path',

	    __dirtyPath: true,

	    strokeContainThreshold: 5,

	    brush: function brush(ctx, prevEl) {
	        var style = this.style;
	        var path = this.path;
	        var hasStroke = style.hasStroke();
	        var hasFill = style.hasFill();
	        var fill = style.fill;
	        var stroke = style.stroke;
	        var hasFillGradient = hasFill && !!fill.colorStops;
	        var hasStrokeGradient = hasStroke && !!stroke.colorStops;
	        var hasFillPattern = hasFill && !!fill.image;
	        var hasStrokePattern = hasStroke && !!stroke.image;

	        style.bind(ctx, this, prevEl);
	        this.setTransform(ctx);

	        if (this.__dirty) {
	            var rect = this.getBoundingRect();
	            // Update gradient because bounding rect may changed
	            if (hasFillGradient) {
	                this._fillGradient = style.getGradient(ctx, fill, rect);
	            }
	            if (hasStrokeGradient) {
	                this._strokeGradient = style.getGradient(ctx, stroke, rect);
	            }
	        }
	        // Use the gradient or pattern
	        if (hasFillGradient) {
	            // PENDING If may have affect the state
	            ctx.fillStyle = this._fillGradient;
	        } else if (hasFillPattern) {
	            ctx.fillStyle = getCanvasPattern.call(fill, ctx);
	        }
	        if (hasStrokeGradient) {
	            ctx.strokeStyle = this._strokeGradient;
	        } else if (hasStrokePattern) {
	            ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
	        }

	        var lineDash = style.lineDash;
	        var lineDashOffset = style.lineDashOffset;

	        var ctxLineDash = !!ctx.setLineDash;

	        // Update path sx, sy
	        var scale = this.getGlobalScale();
	        path.setScale(scale[0], scale[1]);

	        // Proxy context
	        // Rebuild path in following 2 cases
	        // 1. Path is dirty
	        // 2. Path needs javascript implemented lineDash stroking.
	        //    In this case, lineDash information will not be saved in PathProxy
	        if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
	            path = this.path.beginPath(ctx);

	            // Setting line dash before build path
	            if (lineDash && !ctxLineDash) {
	                path.setLineDash(lineDash);
	                path.setLineDashOffset(lineDashOffset);
	            }

	            this.buildPath(path, this.shape, false);

	            // Clear path dirty flag
	            this.__dirtyPath = false;
	        } else {
	            // Replay path building
	            ctx.beginPath();
	            this.path.rebuildPath(ctx);
	        }

	        hasFill && path.fill(ctx);

	        if (lineDash && ctxLineDash) {
	            ctx.setLineDash(lineDash);
	            ctx.lineDashOffset = lineDashOffset;
	        }

	        hasStroke && path.stroke(ctx);

	        if (lineDash && ctxLineDash) {
	            // PENDING
	            // Remove lineDash
	            ctx.setLineDash([]);
	        }

	        this.restoreTransform(ctx);

	        // Draw rect text
	        if (style.text != null) {
	            // var rect = this.getBoundingRect();
	            this.drawRectText(ctx, this.getBoundingRect());
	        }
	    },

	    // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
	    // Like in circle
	    buildPath: function buildPath(ctx, shapeCfg, inBundle) {},

	    getBoundingRect: function getBoundingRect() {
	        var rect = this._rect;
	        var style = this.style;
	        var needsUpdateRect = !rect;
	        if (needsUpdateRect) {
	            var path = this.path;
	            if (this.__dirtyPath) {
	                path.beginPath();
	                this.buildPath(path, this.shape, false);
	            }
	            rect = path.getBoundingRect();
	        }
	        this._rect = rect;

	        if (style.hasStroke()) {
	            // Needs update rect with stroke lineWidth when
	            // 1. Element changes scale or lineWidth
	            // 2. Shape is changed
	            var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
	            if (this.__dirty || needsUpdateRect) {
	                rectWithStroke.copy(rect);
	                // FIXME Must after updateTransform
	                var w = style.lineWidth;
	                // PENDING, Min line width is needed when line is horizontal or vertical
	                var lineScale = style.strokeNoScale ? this.getLineScale() : 1;

	                // Only add extra hover lineWidth when there are no fill
	                if (!style.hasFill()) {
	                    w = Math.max(w, this.strokeContainThreshold || 4);
	                }
	                // Consider line width
	                // Line scale can't be 0;
	                if (lineScale > 1e-10) {
	                    rectWithStroke.width += w / lineScale;
	                    rectWithStroke.height += w / lineScale;
	                    rectWithStroke.x -= w / lineScale / 2;
	                    rectWithStroke.y -= w / lineScale / 2;
	                }
	            }

	            // Return rect with stroke
	            return rectWithStroke;
	        }

	        return rect;
	    },

	    contain: function contain(x, y) {
	        var localPos = this.transformCoordToLocal(x, y);
	        var rect = this.getBoundingRect();
	        var style = this.style;
	        x = localPos[0];
	        y = localPos[1];

	        if (rect.contain(x, y)) {
	            var pathData = this.path.data;
	            if (style.hasStroke()) {
	                var lineWidth = style.lineWidth;
	                var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	                // Line scale can't be 0;
	                if (lineScale > 1e-10) {
	                    // Only add extra hover lineWidth when there are no fill
	                    if (!style.hasFill()) {
	                        lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	                    }
	                    if (pathContain.containStroke(pathData, lineWidth / lineScale, x, y)) {
	                        return true;
	                    }
	                }
	            }
	            if (style.hasFill()) {
	                return pathContain.contain(pathData, x, y);
	            }
	        }
	        return false;
	    },

	    /**
	     * @param  {boolean} dirtyPath
	     */
	    dirty: function dirty(dirtyPath) {
	        if (dirtyPath == null) {
	            dirtyPath = true;
	        }
	        // Only mark dirty, not mark clean
	        if (dirtyPath) {
	            this.__dirtyPath = dirtyPath;
	            this._rect = null;
	        }

	        this.__dirty = true;

	        this.__zr && this.__zr.refresh();

	        // Used as a clipping path
	        if (this.__clipTarget) {
	            this.__clipTarget.dirty();
	        }
	    },

	    /**
	     * Alias for animate('shape')
	     * @param {boolean} loop
	     */
	    animateShape: function animateShape(loop) {
	        return this.animate('shape', loop);
	    },

	    // Overwrite attrKV
	    attrKV: function attrKV(key, value) {
	        // FIXME
	        if (key === 'shape') {
	            this.setShape(value);
	            this.__dirtyPath = true;
	            this._rect = null;
	        } else {
	            Displayable.prototype.attrKV.call(this, key, value);
	        }
	    },

	    /**
	     * @param {Object|string} key
	     * @param {*} value
	     */
	    setShape: function setShape(key, value) {
	        var shape = this.shape;
	        // Path from string may not have shape
	        if (shape) {
	            if (zrUtil.isObject(key)) {
	                for (var name in key) {
	                    if (key.hasOwnProperty(name)) {
	                        shape[name] = key[name];
	                    }
	                }
	            } else {
	                shape[key] = value;
	            }
	            this.dirty(true);
	        }
	        return this;
	    },

	    getLineScale: function getLineScale() {
	        var m = this.transform;
	        // Get the line scale.
	        // Determinant of `m` means how much the area is enlarged by the
	        // transformation. So its square root can be used as a scale factor
	        // for width.
	        return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
	    }
	};

	/**
	 * 扩展一个 Path element, 比如星形，圆等。
	 * Extend a path element
	 * @param {Object} props
	 * @param {string} props.type Path type
	 * @param {Function} props.init Initialize
	 * @param {Function} props.buildPath Overwrite buildPath method
	 * @param {Object} [props.style] Extended default style config
	 * @param {Object} [props.shape] Extended default shape config
	 */
	Path.extend = function (defaults) {
	    var Sub = function Sub(opts) {
	        Path.call(this, opts);

	        if (defaults.style) {
	            // Extend default style
	            this.style.extendFrom(defaults.style, false);
	        }

	        // Extend default shape
	        var defaultShape = defaults.shape;
	        if (defaultShape) {
	            this.shape = this.shape || {};
	            var thisShape = this.shape;
	            for (var name in defaultShape) {
	                if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
	                    thisShape[name] = defaultShape[name];
	                }
	            }
	        }

	        defaults.init && defaults.init.call(this, opts);
	    };

	    zrUtil.inherits(Sub, Path);

	    // FIXME 不能 extend position, rotation 等引用对象
	    for (var name in defaults) {
	        // Extending prototype values and methods
	        if (name !== 'style' && name !== 'shape') {
	            Sub.prototype[name] = defaults[name];
	        }
	    }

	    return Sub;
	};

	zrUtil.inherits(Path, Displayable);

	module.exports = Path;

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */

	var zrUtil = __webpack_require__(504);

	var Style = __webpack_require__(547);

	var Element = __webpack_require__(531);
	var RectText = __webpack_require__(548);
	// var Stateful = require('./mixin/Stateful');

	/**
	 * @alias module:zrender/graphic/Displayable
	 * @extends module:zrender/Element
	 * @extends module:zrender/graphic/mixin/RectText
	 */
	function Displayable(opts) {

	  opts = opts || {};

	  Element.call(this, opts);

	  // Extend properties
	  for (var name in opts) {
	    if (opts.hasOwnProperty(name) && name !== 'style') {
	      this[name] = opts[name];
	    }
	  }

	  /**
	   * @type {module:zrender/graphic/Style}
	   */
	  this.style = new Style(opts.style);

	  this._rect = null;
	  // Shapes for cascade clipping.
	  this.__clipPaths = [];

	  // FIXME Stateful must be mixined after style is setted
	  // Stateful.call(this, opts);
	}

	Displayable.prototype = {

	  constructor: Displayable,

	  type: 'displayable',

	  /**
	   * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	   * Dirty flag. From which painter will determine if this displayable object needs brush
	   * @name module:zrender/graphic/Displayable#__dirty
	   * @type {boolean}
	   */
	  __dirty: true,

	  /**
	   * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	   * If ignore drawing of the displayable object. Mouse event will still be triggered
	   * @name module:/zrender/graphic/Displayable#invisible
	   * @type {boolean}
	   * @default false
	   */
	  invisible: false,

	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z: 0,

	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z2: 0,

	  /**
	   * z层level，决定绘画在哪层canvas中
	   * @name module:/zrender/graphic/Displayable#zlevel
	   * @type {number}
	   * @default 0
	   */
	  zlevel: 0,

	  /**
	   * 是否可拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  draggable: false,

	  /**
	   * 是否正在拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  dragging: false,

	  /**
	   * 是否相应鼠标事件
	   * @name module:/zrender/graphic/Displayable#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,

	  /**
	   * If enable culling
	   * @type {boolean}
	   * @default false
	   */
	  culling: false,

	  /**
	   * Mouse cursor when hovered
	   * @name module:/zrender/graphic/Displayable#cursor
	   * @type {string}
	   */
	  cursor: 'pointer',

	  /**
	   * If hover area is bounding rect
	   * @name module:/zrender/graphic/Displayable#rectHover
	   * @type {string}
	   */
	  rectHover: false,

	  /**
	   * Render the element progressively when the value >= 0,
	   * usefull for large data.
	   * @type {number}
	   */
	  progressive: -1,

	  beforeBrush: function beforeBrush(ctx) {},

	  afterBrush: function afterBrush(ctx) {},

	  /**
	   * 图形绘制方法
	   * @param {Canvas2DRenderingContext} ctx
	   */
	  // Interface
	  brush: function brush(ctx, prevEl) {},

	  /**
	   * 获取最小包围盒
	   * @return {module:zrender/core/BoundingRect}
	   */
	  // Interface
	  getBoundingRect: function getBoundingRect() {},

	  /**
	   * 判断坐标 x, y 是否在图形上
	   * If displayable element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  contain: function contain(x, y) {
	    return this.rectContain(x, y);
	  },

	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function traverse(cb, context) {
	    cb.call(context, this);
	  },

	  /**
	   * 判断坐标 x, y 是否在图形的包围盒上
	   * If bounding rect of element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  rectContain: function rectContain(x, y) {
	    var coord = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    return rect.contain(coord[0], coord[1]);
	  },

	  /**
	   * 标记图形元素为脏，并且在下一帧重绘
	   * Mark displayable element dirty and refresh next frame
	   */
	  dirty: function dirty() {
	    this.__dirty = true;

	    this._rect = null;

	    this.__zr && this.__zr.refresh();
	  },

	  /**
	   * 图形是否会触发事件
	   * If displayable object binded any event
	   * @return {boolean}
	   */
	  // TODO, 通过 bind 绑定的事件
	  // isSilent: function () {
	  //     return !(
	  //         this.hoverable || this.draggable
	  //         || this.onmousemove || this.onmouseover || this.onmouseout
	  //         || this.onmousedown || this.onmouseup || this.onclick
	  //         || this.ondragenter || this.ondragover || this.ondragleave
	  //         || this.ondrop
	  //     );
	  // },
	  /**
	   * Alias for animate('style')
	   * @param {boolean} loop
	   */
	  animateStyle: function animateStyle(loop) {
	    return this.animate('style', loop);
	  },

	  attrKV: function attrKV(key, value) {
	    if (key !== 'style') {
	      Element.prototype.attrKV.call(this, key, value);
	    } else {
	      this.style.set(value);
	    }
	  },

	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setStyle: function setStyle(key, value) {
	    this.style.set(key, value);
	    this.dirty(false);
	    return this;
	  },

	  /**
	   * Use given style object
	   * @param  {Object} obj
	   */
	  useStyle: function useStyle(obj) {
	    this.style = new Style(obj);
	    this.dirty(false);
	    return this;
	  }
	};

	zrUtil.inherits(Displayable, Element);

	zrUtil.mixin(Displayable, RectText);
	// zrUtil.mixin(Displayable, Stateful);

	module.exports = Displayable;

/***/ },
/* 547 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * @module zrender/graphic/Style
	 */

	var STYLE_COMMON_PROPS = [['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'], ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]];

	// var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
	// var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);

	var Style = function Style(opts) {
	    this.extendFrom(opts);
	};

	function createLinearGradient(ctx, obj, rect) {
	    // var size =
	    var x = obj.x;
	    var x2 = obj.x2;
	    var y = obj.y;
	    var y2 = obj.y2;

	    if (!obj.global) {
	        x = x * rect.width + rect.x;
	        x2 = x2 * rect.width + rect.x;
	        y = y * rect.height + rect.y;
	        y2 = y2 * rect.height + rect.y;
	    }

	    var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);

	    return canvasGradient;
	}

	function createRadialGradient(ctx, obj, rect) {
	    var width = rect.width;
	    var height = rect.height;
	    var min = Math.min(width, height);

	    var x = obj.x;
	    var y = obj.y;
	    var r = obj.r;
	    if (!obj.global) {
	        x = x * width + rect.x;
	        y = y * height + rect.y;
	        r = r * min;
	    }

	    var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);

	    return canvasGradient;
	}

	Style.prototype = {

	    constructor: Style,

	    /**
	     * @type {string}
	     */
	    fill: '#000000',

	    /**
	     * @type {string}
	     */
	    stroke: null,

	    /**
	     * @type {number}
	     */
	    opacity: 1,

	    /**
	     * @type {Array.<number>}
	     */
	    lineDash: null,

	    /**
	     * @type {number}
	     */
	    lineDashOffset: 0,

	    /**
	     * @type {number}
	     */
	    shadowBlur: 0,

	    /**
	     * @type {number}
	     */
	    shadowOffsetX: 0,

	    /**
	     * @type {number}
	     */
	    shadowOffsetY: 0,

	    /**
	     * @type {number}
	     */
	    lineWidth: 1,

	    /**
	     * If stroke ignore scale
	     * @type {Boolean}
	     */
	    strokeNoScale: false,

	    // Bounding rect text configuration
	    // Not affected by element transform
	    /**
	     * @type {string}
	     */
	    text: null,

	    /**
	     * @type {string}
	     */
	    textFill: '#000',

	    /**
	     * @type {string}
	     */
	    textStroke: null,

	    /**
	     * 'inside', 'left', 'right', 'top', 'bottom'
	     * [x, y]
	     * @type {string|Array.<number>}
	     * @default 'inside'
	     */
	    textPosition: 'inside',

	    /**
	     * [x, y]
	     * @type {Array.<number>}
	     */
	    textOffset: null,

	    /**
	     * @type {string}
	     */
	    textBaseline: null,

	    /**
	     * @type {string}
	     */
	    textAlign: null,

	    /**
	     * @type {string}
	     */
	    textVerticalAlign: null,

	    /**
	     * Only useful in Path and Image element
	     * @type {number}
	     */
	    textDistance: 5,

	    /**
	     * Only useful in Path and Image element
	     * @type {number}
	     */
	    textShadowBlur: 0,

	    /**
	     * Only useful in Path and Image element
	     * @type {number}
	     */
	    textShadowOffsetX: 0,

	    /**
	     * Only useful in Path and Image element
	     * @type {number}
	     */
	    textShadowOffsetY: 0,

	    /**
	     * If transform text
	     * Only useful in Path and Image element
	     * @type {boolean}
	     */
	    textTransform: false,

	    /**
	     * Text rotate around position of Path or Image
	     * Only useful in Path and Image element and textTransform is false.
	     */
	    textRotation: 0,

	    /**
	     * @type {string}
	     * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	     */
	    blend: null,

	    /**
	     * @param {CanvasRenderingContext2D} ctx
	     */
	    bind: function bind(ctx, el, prevEl) {
	        var style = this;
	        var prevStyle = prevEl && prevEl.style;
	        var firstDraw = !prevStyle;

	        for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	            var prop = STYLE_COMMON_PROPS[i];
	            var styleName = prop[0];

	            if (firstDraw || style[styleName] !== prevStyle[styleName]) {
	                // FIXME Invalid property value will cause style leak from previous element.
	                ctx[styleName] = style[styleName] || prop[1];
	            }
	        }

	        if (firstDraw || style.fill !== prevStyle.fill) {
	            ctx.fillStyle = style.fill;
	        }
	        if (firstDraw || style.stroke !== prevStyle.stroke) {
	            ctx.strokeStyle = style.stroke;
	        }
	        if (firstDraw || style.opacity !== prevStyle.opacity) {
	            ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
	        }

	        if (firstDraw || style.blend !== prevStyle.blend) {
	            ctx.globalCompositeOperation = style.blend || 'source-over';
	        }
	        if (this.hasStroke()) {
	            var lineWidth = style.lineWidth;
	            ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
	        }
	    },

	    hasFill: function hasFill() {
	        var fill = this.fill;
	        return fill != null && fill !== 'none';
	    },

	    hasStroke: function hasStroke() {
	        var stroke = this.stroke;
	        return stroke != null && stroke !== 'none' && this.lineWidth > 0;
	    },

	    /**
	     * Extend from other style
	     * @param {zrender/graphic/Style} otherStyle
	     * @param {boolean} overwrite
	     */
	    extendFrom: function extendFrom(otherStyle, overwrite) {
	        if (otherStyle) {
	            var target = this;
	            for (var name in otherStyle) {
	                if (otherStyle.hasOwnProperty(name) && (overwrite || !target.hasOwnProperty(name))) {
	                    target[name] = otherStyle[name];
	                }
	            }
	        }
	    },

	    /**
	     * Batch setting style with a given object
	     * @param {Object|string} obj
	     * @param {*} [obj]
	     */
	    set: function set(obj, value) {
	        if (typeof obj === 'string') {
	            this[obj] = value;
	        } else {
	            this.extendFrom(obj, true);
	        }
	    },

	    /**
	     * Clone
	     * @return {zrender/graphic/Style} [description]
	     */
	    clone: function clone() {
	        var newStyle = new this.constructor();
	        newStyle.extendFrom(this, true);
	        return newStyle;
	    },

	    getGradient: function getGradient(ctx, obj, rect) {
	        var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
	        var canvasGradient = method(ctx, obj, rect);
	        var colorStops = obj.colorStops;
	        for (var i = 0; i < colorStops.length; i++) {
	            canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
	        }
	        return canvasGradient;
	    }
	};

	var styleProto = Style.prototype;
	for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	    var prop = STYLE_COMMON_PROPS[i];
	    if (!(prop[0] in styleProto)) {
	        styleProto[prop[0]] = prop[1];
	    }
	}

	// Provide for others
	Style.getGradient = styleProto.getGradient;

	module.exports = Style;

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */

	var textContain = __webpack_require__(508);
	var BoundingRect = __webpack_require__(509);

	var tmpRect = new BoundingRect();

	var RectText = function RectText() {};

	function parsePercent(value, maxValue) {
	    if (typeof value === 'string') {
	        if (value.lastIndexOf('%') >= 0) {
	            return parseFloat(value) / 100 * maxValue;
	        }
	        return parseFloat(value);
	    }
	    return value;
	}

	RectText.prototype = {

	    constructor: RectText,

	    /**
	     * Draw text in a rect with specified position.
	     * @param  {CanvasRenderingContext} ctx
	     * @param  {Object} rect Displayable rect
	     * @return {Object} textRect Alternative precalculated text bounding rect
	     */
	    drawRectText: function drawRectText(ctx, rect, textRect) {
	        var style = this.style;
	        var text = style.text;
	        // Convert to string
	        text != null && (text += '');
	        if (!text) {
	            return;
	        }

	        // FIXME
	        ctx.save();

	        var x;
	        var y;
	        var textPosition = style.textPosition;
	        var textOffset = style.textOffset;
	        var distance = style.textDistance;
	        var align = style.textAlign;
	        var font = style.textFont || style.font;
	        var baseline = style.textBaseline;
	        var verticalAlign = style.textVerticalAlign;

	        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);

	        // Transform rect to view space
	        var transform = this.transform;
	        if (!style.textTransform) {
	            if (transform) {
	                tmpRect.copy(rect);
	                tmpRect.applyTransform(transform);
	                rect = tmpRect;
	            }
	        } else {
	            this.setTransform(ctx);
	        }

	        // Text position represented by coord
	        if (textPosition instanceof Array) {
	            // Percent
	            x = rect.x + parsePercent(textPosition[0], rect.width);
	            y = rect.y + parsePercent(textPosition[1], rect.height);
	            align = align || 'left';
	            baseline = baseline || 'top';

	            if (verticalAlign) {
	                switch (verticalAlign) {
	                    case 'middle':
	                        y -= textRect.height / 2 - textRect.lineHeight / 2;
	                        break;
	                    case 'bottom':
	                        y -= textRect.height - textRect.lineHeight / 2;
	                        break;
	                    default:
	                        y += textRect.lineHeight / 2;
	                }
	                // Force bseline to be middle
	                baseline = 'middle';
	            }
	        } else {
	            var res = textContain.adjustTextPositionOnRect(textPosition, rect, textRect, distance);
	            x = res.x;
	            y = res.y;
	            // Default align and baseline when has textPosition
	            align = align || res.textAlign;
	            baseline = baseline || res.textBaseline;
	        }

	        if (textOffset) {
	            x += textOffset[0];
	            y += textOffset[1];
	        }

	        // Use canvas default left textAlign. Giving invalid value will cause state not change
	        ctx.textAlign = align || 'left';
	        // Use canvas default alphabetic baseline
	        ctx.textBaseline = baseline || 'alphabetic';

	        var textFill = style.textFill;
	        var textStroke = style.textStroke;
	        textFill && (ctx.fillStyle = textFill);
	        textStroke && (ctx.strokeStyle = textStroke);

	        // TODO Invalid font
	        ctx.font = font || '12px sans-serif';

	        // Text shadow
	        // Always set shadowBlur and shadowOffset to avoid leak from displayable
	        ctx.shadowBlur = style.textShadowBlur;
	        ctx.shadowColor = style.textShadowColor || 'transparent';
	        ctx.shadowOffsetX = style.textShadowOffsetX;
	        ctx.shadowOffsetY = style.textShadowOffsetY;

	        var textLines = text.split('\n');

	        if (style.textRotation) {
	            transform && ctx.translate(transform[4], transform[5]);
	            ctx.rotate(style.textRotation);
	            transform && ctx.translate(-transform[4], -transform[5]);
	        }

	        for (var i = 0; i < textLines.length; i++) {
	            textFill && ctx.fillText(textLines[i], x, y);
	            textStroke && ctx.strokeText(textLines[i], x, y);
	            y += textRect.lineHeight;
	        }

	        ctx.restore();
	    }
	};

	module.exports = RectText;

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */

	// TODO getTotalLength, getPointAtLength


	var curve = __webpack_require__(550);
	var vec2 = __webpack_require__(510);
	var bbox = __webpack_require__(551);
	var BoundingRect = __webpack_require__(509);
	var dpr = __webpack_require__(541).devicePixelRatio;

	var CMD = {
	    M: 1,
	    L: 2,
	    C: 3,
	    Q: 4,
	    A: 5,
	    Z: 6,
	    // Rect
	    R: 7
	};

	var min = [];
	var max = [];
	var min2 = [];
	var max2 = [];
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathCos = Math.cos;
	var mathSin = Math.sin;
	var mathSqrt = Math.sqrt;
	var mathAbs = Math.abs;

	var hasTypedArray = typeof Float32Array != 'undefined';

	/**
	 * @alias module:zrender/core/PathProxy
	 * @constructor
	 */
	var PathProxy = function PathProxy() {

	    /**
	     * Path data. Stored as flat array
	     * @type {Array.<Object>}
	     */
	    this.data = [];

	    this._len = 0;

	    this._ctx = null;

	    this._xi = 0;
	    this._yi = 0;

	    this._x0 = 0;
	    this._y0 = 0;

	    // Unit x, Unit y. Provide for avoiding drawing that too short line segment
	    this._ux = 0;
	    this._uy = 0;
	};

	/**
	 * 快速计算Path包围盒（并不是最小包围盒）
	 * @return {Object}
	 */
	PathProxy.prototype = {

	    constructor: PathProxy,

	    _lineDash: null,

	    _dashOffset: 0,

	    _dashIdx: 0,

	    _dashSum: 0,

	    /**
	     * @readOnly
	     */
	    setScale: function setScale(sx, sy) {
	        this._ux = mathAbs(1 / dpr / sx) || 0;
	        this._uy = mathAbs(1 / dpr / sy) || 0;
	    },

	    getContext: function getContext() {
	        return this._ctx;
	    },

	    /**
	     * @param  {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/core/PathProxy}
	     */
	    beginPath: function beginPath(ctx) {

	        this._ctx = ctx;

	        ctx && ctx.beginPath();

	        ctx && (this.dpr = ctx.dpr);

	        // Reset
	        this._len = 0;

	        if (this._lineDash) {
	            this._lineDash = null;

	            this._dashOffset = 0;
	        }

	        return this;
	    },

	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/core/PathProxy}
	     */
	    moveTo: function moveTo(x, y) {
	        this.addData(CMD.M, x, y);
	        this._ctx && this._ctx.moveTo(x, y);

	        // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	        // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	        // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	        // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
	        this._x0 = x;
	        this._y0 = y;

	        this._xi = x;
	        this._yi = y;

	        return this;
	    },

	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/core/PathProxy}
	     */
	    lineTo: function lineTo(x, y) {
	        var exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy
	        // Force draw the first segment
	        || this._len < 5;

	        this.addData(CMD.L, x, y);

	        if (this._ctx && exceedUnit) {
	            this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
	        }
	        if (exceedUnit) {
	            this._xi = x;
	            this._yi = y;
	        }

	        return this;
	    },

	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @param  {number} x3
	     * @param  {number} y3
	     * @return {module:zrender/core/PathProxy}
	     */
	    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x3, y3) {
	        this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
	        if (this._ctx) {
	            this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	        }
	        this._xi = x3;
	        this._yi = y3;
	        return this;
	    },

	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @return {module:zrender/core/PathProxy}
	     */
	    quadraticCurveTo: function quadraticCurveTo(x1, y1, x2, y2) {
	        this.addData(CMD.Q, x1, y1, x2, y2);
	        if (this._ctx) {
	            this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	        }
	        this._xi = x2;
	        this._yi = y2;
	        return this;
	    },

	    /**
	     * @param  {number} cx
	     * @param  {number} cy
	     * @param  {number} r
	     * @param  {number} startAngle
	     * @param  {number} endAngle
	     * @param  {boolean} anticlockwise
	     * @return {module:zrender/core/PathProxy}
	     */
	    arc: function arc(cx, cy, r, startAngle, endAngle, anticlockwise) {
	        this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
	        this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);

	        this._xi = mathCos(endAngle) * r + cx;
	        this._yi = mathSin(endAngle) * r + cx;
	        return this;
	    },

	    // TODO
	    arcTo: function arcTo(x1, y1, x2, y2, radius) {
	        if (this._ctx) {
	            this._ctx.arcTo(x1, y1, x2, y2, radius);
	        }
	        return this;
	    },

	    // TODO
	    rect: function rect(x, y, w, h) {
	        this._ctx && this._ctx.rect(x, y, w, h);
	        this.addData(CMD.R, x, y, w, h);
	        return this;
	    },

	    /**
	     * @return {module:zrender/core/PathProxy}
	     */
	    closePath: function closePath() {
	        this.addData(CMD.Z);

	        var ctx = this._ctx;
	        var x0 = this._x0;
	        var y0 = this._y0;
	        if (ctx) {
	            this._needsDash() && this._dashedLineTo(x0, y0);
	            ctx.closePath();
	        }

	        this._xi = x0;
	        this._yi = y0;
	        return this;
	    },

	    /**
	     * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	     * stroke 同样
	     * @param {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/core/PathProxy}
	     */
	    fill: function fill(ctx) {
	        ctx && ctx.fill();
	        this.toStatic();
	    },

	    /**
	     * @param {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/core/PathProxy}
	     */
	    stroke: function stroke(ctx) {
	        ctx && ctx.stroke();
	        this.toStatic();
	    },

	    /**
	     * 必须在其它绘制命令前调用
	     * Must be invoked before all other path drawing methods
	     * @return {module:zrender/core/PathProxy}
	     */
	    setLineDash: function setLineDash(lineDash) {
	        if (lineDash instanceof Array) {
	            this._lineDash = lineDash;

	            this._dashIdx = 0;

	            var lineDashSum = 0;
	            for (var i = 0; i < lineDash.length; i++) {
	                lineDashSum += lineDash[i];
	            }
	            this._dashSum = lineDashSum;
	        }
	        return this;
	    },

	    /**
	     * 必须在其它绘制命令前调用
	     * Must be invoked before all other path drawing methods
	     * @return {module:zrender/core/PathProxy}
	     */
	    setLineDashOffset: function setLineDashOffset(offset) {
	        this._dashOffset = offset;
	        return this;
	    },

	    /**
	     *
	     * @return {boolean}
	     */
	    len: function len() {
	        return this._len;
	    },

	    /**
	     * 直接设置 Path 数据
	     */
	    setData: function setData(data) {

	        var len = data.length;

	        if (!(this.data && this.data.length == len) && hasTypedArray) {
	            this.data = new Float32Array(len);
	        }

	        for (var i = 0; i < len; i++) {
	            this.data[i] = data[i];
	        }

	        this._len = len;
	    },

	    /**
	     * 添加子路径
	     * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	     */
	    appendPath: function appendPath(path) {
	        if (!(path instanceof Array)) {
	            path = [path];
	        }
	        var len = path.length;
	        var appendSize = 0;
	        var offset = this._len;
	        for (var i = 0; i < len; i++) {
	            appendSize += path[i].len();
	        }
	        if (hasTypedArray && this.data instanceof Float32Array) {
	            this.data = new Float32Array(offset + appendSize);
	        }
	        for (var i = 0; i < len; i++) {
	            var appendPathData = path[i].data;
	            for (var k = 0; k < appendPathData.length; k++) {
	                this.data[offset++] = appendPathData[k];
	            }
	        }
	        this._len = offset;
	    },

	    /**
	     * 填充 Path 数据。
	     * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	     */
	    addData: function addData(cmd) {
	        var data = this.data;
	        if (this._len + arguments.length > data.length) {
	            // 因为之前的数组已经转换成静态的 Float32Array
	            // 所以不够用时需要扩展一个新的动态数组
	            this._expandData();
	            data = this.data;
	        }
	        for (var i = 0; i < arguments.length; i++) {
	            data[this._len++] = arguments[i];
	        }

	        this._prevCmd = cmd;
	    },

	    _expandData: function _expandData() {
	        // Only if data is Float32Array
	        if (!(this.data instanceof Array)) {
	            var newData = [];
	            for (var i = 0; i < this._len; i++) {
	                newData[i] = this.data[i];
	            }
	            this.data = newData;
	        }
	    },

	    /**
	     * If needs js implemented dashed line
	     * @return {boolean}
	     * @private
	     */
	    _needsDash: function _needsDash() {
	        return this._lineDash;
	    },

	    _dashedLineTo: function _dashedLineTo(x1, y1) {
	        var dashSum = this._dashSum;
	        var offset = this._dashOffset;
	        var lineDash = this._lineDash;
	        var ctx = this._ctx;

	        var x0 = this._xi;
	        var y0 = this._yi;
	        var dx = x1 - x0;
	        var dy = y1 - y0;
	        var dist = mathSqrt(dx * dx + dy * dy);
	        var x = x0;
	        var y = y0;
	        var dash;
	        var nDash = lineDash.length;
	        var idx;
	        dx /= dist;
	        dy /= dist;

	        if (offset < 0) {
	            // Convert to positive offset
	            offset = dashSum + offset;
	        }
	        offset %= dashSum;
	        x -= offset * dx;
	        y -= offset * dy;

	        while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx == 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
	            idx = this._dashIdx;
	            dash = lineDash[idx];
	            x += dx * dash;
	            y += dy * dash;
	            this._dashIdx = (idx + 1) % nDash;
	            // Skip positive offset
	            if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
	                continue;
	            }
	            ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));
	        }
	        // Offset for next lineTo
	        dx = x - x1;
	        dy = y - y1;
	        this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	    },

	    // Not accurate dashed line to
	    _dashedBezierTo: function _dashedBezierTo(x1, y1, x2, y2, x3, y3) {
	        var dashSum = this._dashSum;
	        var offset = this._dashOffset;
	        var lineDash = this._lineDash;
	        var ctx = this._ctx;

	        var x0 = this._xi;
	        var y0 = this._yi;
	        var t;
	        var dx;
	        var dy;
	        var cubicAt = curve.cubicAt;
	        var bezierLen = 0;
	        var idx = this._dashIdx;
	        var nDash = lineDash.length;

	        var x;
	        var y;

	        var tmpLen = 0;

	        if (offset < 0) {
	            // Convert to positive offset
	            offset = dashSum + offset;
	        }
	        offset %= dashSum;
	        // Bezier approx length
	        for (t = 0; t < 1; t += 0.1) {
	            dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
	            dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
	            bezierLen += mathSqrt(dx * dx + dy * dy);
	        }

	        // Find idx after add offset
	        for (; idx < nDash; idx++) {
	            tmpLen += lineDash[idx];
	            if (tmpLen > offset) {
	                break;
	            }
	        }
	        t = (tmpLen - offset) / bezierLen;

	        while (t <= 1) {

	            x = cubicAt(x0, x1, x2, x3, t);
	            y = cubicAt(y0, y1, y2, y3, t);

	            // Use line to approximate dashed bezier
	            // Bad result if dash is long
	            idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);

	            t += lineDash[idx] / bezierLen;

	            idx = (idx + 1) % nDash;
	        }

	        // Finish the last segment and calculate the new offset
	        idx % 2 !== 0 && ctx.lineTo(x3, y3);
	        dx = x3 - x;
	        dy = y3 - y;
	        this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	    },

	    _dashedQuadraticTo: function _dashedQuadraticTo(x1, y1, x2, y2) {
	        // Convert quadratic to cubic using degree elevation
	        var x3 = x2;
	        var y3 = y2;
	        x2 = (x2 + 2 * x1) / 3;
	        y2 = (y2 + 2 * y1) / 3;
	        x1 = (this._xi + 2 * x1) / 3;
	        y1 = (this._yi + 2 * y1) / 3;

	        this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	    },

	    /**
	     * 转成静态的 Float32Array 减少堆内存占用
	     * Convert dynamic array to static Float32Array
	     */
	    toStatic: function toStatic() {
	        var data = this.data;
	        if (data instanceof Array) {
	            data.length = this._len;
	            if (hasTypedArray) {
	                this.data = new Float32Array(data);
	            }
	        }
	    },

	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getBoundingRect: function getBoundingRect() {
	        min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	        max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;

	        var data = this.data;
	        var xi = 0;
	        var yi = 0;
	        var x0 = 0;
	        var y0 = 0;

	        for (var i = 0; i < data.length;) {
	            var cmd = data[i++];

	            if (i == 1) {
	                // 如果第一个命令是 L, C, Q
	                // 则 previous point 同绘制命令的第一个 point
	                //
	                // 第一个命令为 Arc 的情况下会在后面特殊处理
	                xi = data[i];
	                yi = data[i + 1];

	                x0 = xi;
	                y0 = yi;
	            }

	            switch (cmd) {
	                case CMD.M:
	                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                    // 在 closePath 的时候使用
	                    x0 = data[i++];
	                    y0 = data[i++];
	                    xi = x0;
	                    yi = y0;
	                    min2[0] = x0;
	                    min2[1] = y0;
	                    max2[0] = x0;
	                    max2[1] = y0;
	                    break;
	                case CMD.L:
	                    bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.C:
	                    bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.Q:
	                    bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.A:
	                    // TODO Arc 判断的开销比较大
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++];
	                    var endAngle = data[i++] + startAngle;
	                    // TODO Arc 旋转
	                    var psi = data[i++];
	                    var anticlockwise = 1 - data[i++];

	                    if (i == 1) {
	                        // 直接使用 arc 命令
	                        // 第一个命令起点还未定义
	                        x0 = mathCos(startAngle) * rx + cx;
	                        y0 = mathSin(startAngle) * ry + cy;
	                    }

	                    bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);

	                    xi = mathCos(endAngle) * rx + cx;
	                    yi = mathSin(endAngle) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = data[i++];
	                    y0 = yi = data[i++];
	                    var width = data[i++];
	                    var height = data[i++];
	                    // Use fromLine
	                    bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	                    break;
	                case CMD.Z:
	                    xi = x0;
	                    yi = y0;
	                    break;
	            }

	            // Union
	            vec2.min(min, min, min2);
	            vec2.max(max, max, max2);
	        }

	        // No data
	        if (i === 0) {
	            min[0] = min[1] = max[0] = max[1] = 0;
	        }

	        return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	    },

	    /**
	     * Rebuild path from current data
	     * Rebuild path will not consider javascript implemented line dash.
	     * @param {CanvasRenderingContext} ctx
	     */
	    rebuildPath: function rebuildPath(ctx) {
	        var d = this.data;
	        var x0, y0;
	        var xi, yi;
	        var x, y;
	        var ux = this._ux;
	        var uy = this._uy;
	        var len = this._len;
	        for (var i = 0; i < len;) {
	            var cmd = d[i++];

	            if (i == 1) {
	                // 如果第一个命令是 L, C, Q
	                // 则 previous point 同绘制命令的第一个 point
	                //
	                // 第一个命令为 Arc 的情况下会在后面特殊处理
	                xi = d[i];
	                yi = d[i + 1];

	                x0 = xi;
	                y0 = yi;
	            }
	            switch (cmd) {
	                case CMD.M:
	                    x0 = xi = d[i++];
	                    y0 = yi = d[i++];
	                    ctx.moveTo(xi, yi);
	                    break;
	                case CMD.L:
	                    x = d[i++];
	                    y = d[i++];
	                    // Not draw too small seg between
	                    if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
	                        ctx.lineTo(x, y);
	                        xi = x;
	                        yi = y;
	                    }
	                    break;
	                case CMD.C:
	                    ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
	                    xi = d[i - 2];
	                    yi = d[i - 1];
	                    break;
	                case CMD.Q:
	                    ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	                    xi = d[i - 2];
	                    yi = d[i - 1];
	                    break;
	                case CMD.A:
	                    var cx = d[i++];
	                    var cy = d[i++];
	                    var rx = d[i++];
	                    var ry = d[i++];
	                    var theta = d[i++];
	                    var dTheta = d[i++];
	                    var psi = d[i++];
	                    var fs = d[i++];
	                    var r = rx > ry ? rx : ry;
	                    var scaleX = rx > ry ? 1 : rx / ry;
	                    var scaleY = rx > ry ? ry / rx : 1;
	                    var isEllipse = Math.abs(rx - ry) > 1e-3;
	                    var endAngle = theta + dTheta;
	                    if (isEllipse) {
	                        ctx.translate(cx, cy);
	                        ctx.rotate(psi);
	                        ctx.scale(scaleX, scaleY);
	                        ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
	                        ctx.scale(1 / scaleX, 1 / scaleY);
	                        ctx.rotate(-psi);
	                        ctx.translate(-cx, -cy);
	                    } else {
	                        ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
	                    }

	                    if (i == 1) {
	                        // 直接使用 arc 命令
	                        // 第一个命令起点还未定义
	                        x0 = mathCos(theta) * rx + cx;
	                        y0 = mathSin(theta) * ry + cy;
	                    }
	                    xi = mathCos(endAngle) * rx + cx;
	                    yi = mathSin(endAngle) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = d[i];
	                    y0 = yi = d[i + 1];
	                    ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	                    break;
	                case CMD.Z:
	                    ctx.closePath();
	                    xi = x0;
	                    yi = y0;
	            }
	        }
	    }
	};

	PathProxy.CMD = CMD;

	module.exports = PathProxy;

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */

	var vec2 = __webpack_require__(510);
	var v2Create = vec2.create;
	var v2DistSquare = vec2.distSquare;
	var mathPow = Math.pow;
	var mathSqrt = Math.sqrt;

	var EPSILON = 1e-8;
	var EPSILON_NUMERIC = 1e-4;

	var THREE_SQRT = mathSqrt(3);
	var ONE_THIRD = 1 / 3;

	// 临时变量
	var _v0 = v2Create();
	var _v1 = v2Create();
	var _v2 = v2Create();
	// var _v3 = vec2.create();

	function isAroundZero(val) {
	    return val > -EPSILON && val < EPSILON;
	}
	function isNotAroundZero(val) {
	    return val > EPSILON || val < -EPSILON;
	}
	/**
	 * 计算三次贝塞尔值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */
	function cubicAt(p0, p1, p2, p3, t) {
	    var onet = 1 - t;
	    return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
	}

	/**
	 * 计算三次贝塞尔导数值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */
	function cubicDerivativeAt(p0, p1, p2, p3, t) {
	    var onet = 1 - t;
	    return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	}

	/**
	 * 计算三次贝塞尔方程根，使用盛金公式
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} val
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */
	function cubicRootAt(p0, p1, p2, p3, val, roots) {
	    // Evaluate roots of cubic functions
	    var a = p3 + 3 * (p1 - p2) - p0;
	    var b = 3 * (p2 - p1 * 2 + p0);
	    var c = 3 * (p1 - p0);
	    var d = p0 - val;

	    var A = b * b - 3 * a * c;
	    var B = b * c - 9 * a * d;
	    var C = c * c - 3 * b * d;

	    var n = 0;

	    if (isAroundZero(A) && isAroundZero(B)) {
	        if (isAroundZero(b)) {
	            roots[0] = 0;
	        } else {
	            var t1 = -c / b; //t1, t2, t3, b is not zero
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        }
	    } else {
	        var disc = B * B - 4 * A * C;

	        if (isAroundZero(disc)) {
	            var K = B / A;
	            var t1 = -b / a + K; // t1, a is not zero
	            var t2 = -K / 2; // t2, t3
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                roots[n++] = t2;
	            }
	        } else if (disc > 0) {
	            var discSqrt = mathSqrt(disc);
	            var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	            var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	            if (Y1 < 0) {
	                Y1 = -mathPow(-Y1, ONE_THIRD);
	            } else {
	                Y1 = mathPow(Y1, ONE_THIRD);
	            }
	            if (Y2 < 0) {
	                Y2 = -mathPow(-Y2, ONE_THIRD);
	            } else {
	                Y2 = mathPow(Y2, ONE_THIRD);
	            }
	            var t1 = (-b - (Y1 + Y2)) / (3 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        } else {
	            var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	            var theta = Math.acos(T) / 3;
	            var ASqrt = mathSqrt(A);
	            var tmp = Math.cos(theta);

	            var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	            var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	            var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                roots[n++] = t2;
	            }
	            if (t3 >= 0 && t3 <= 1) {
	                roots[n++] = t3;
	            }
	        }
	    }
	    return n;
	}

	/**
	 * 计算三次贝塞尔方程极限值的位置
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {Array.<number>} extrema
	 * @return {number} 有效数目
	 */
	function cubicExtrema(p0, p1, p2, p3, extrema) {
	    var b = 6 * p2 - 12 * p1 + 6 * p0;
	    var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	    var c = 3 * p1 - 3 * p0;

	    var n = 0;
	    if (isAroundZero(a)) {
	        if (isNotAroundZero(b)) {
	            var t1 = -c / b;
	            if (t1 >= 0 && t1 <= 1) {
	                extrema[n++] = t1;
	            }
	        }
	    } else {
	        var disc = b * b - 4 * a * c;
	        if (isAroundZero(disc)) {
	            extrema[0] = -b / (2 * a);
	        } else if (disc > 0) {
	            var discSqrt = mathSqrt(disc);
	            var t1 = (-b + discSqrt) / (2 * a);
	            var t2 = (-b - discSqrt) / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                extrema[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                extrema[n++] = t2;
	            }
	        }
	    }
	    return n;
	}

	/**
	 * 细分三次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */
	function cubicSubdivide(p0, p1, p2, p3, t, out) {
	    var p01 = (p1 - p0) * t + p0;
	    var p12 = (p2 - p1) * t + p1;
	    var p23 = (p3 - p2) * t + p2;

	    var p012 = (p12 - p01) * t + p01;
	    var p123 = (p23 - p12) * t + p12;

	    var p0123 = (p123 - p012) * t + p012;
	    // Seg0
	    out[0] = p0;
	    out[1] = p01;
	    out[2] = p012;
	    out[3] = p0123;
	    // Seg1
	    out[4] = p0123;
	    out[5] = p123;
	    out[6] = p23;
	    out[7] = p3;
	}

	/**
	 * 投射点到三次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} [out] 投射点
	 * @return {number}
	 */
	function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
	    // http://pomax.github.io/bezierinfo/#projections
	    var t;
	    var interval = 0.005;
	    var d = Infinity;
	    var prev;
	    var next;
	    var d1;
	    var d2;

	    _v0[0] = x;
	    _v0[1] = y;

	    // 先粗略估计一下可能的最小距离的 t 值
	    // PENDING
	    for (var _t = 0; _t < 1; _t += 0.05) {
	        _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	        _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	        d1 = v2DistSquare(_v0, _v1);
	        if (d1 < d) {
	            t = _t;
	            d = d1;
	        }
	    }
	    d = Infinity;

	    // At most 32 iteration
	    for (var i = 0; i < 32; i++) {
	        if (interval < EPSILON_NUMERIC) {
	            break;
	        }
	        prev = t - interval;
	        next = t + interval;
	        // t - interval
	        _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	        _v1[1] = cubicAt(y0, y1, y2, y3, prev);

	        d1 = v2DistSquare(_v1, _v0);

	        if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	        } else {
	            // t + interval
	            _v2[0] = cubicAt(x0, x1, x2, x3, next);
	            _v2[1] = cubicAt(y0, y1, y2, y3, next);
	            d2 = v2DistSquare(_v2, _v0);

	            if (next <= 1 && d2 < d) {
	                t = next;
	                d = d2;
	            } else {
	                interval *= 0.5;
	            }
	        }
	    }
	    // t
	    if (out) {
	        out[0] = cubicAt(x0, x1, x2, x3, t);
	        out[1] = cubicAt(y0, y1, y2, y3, t);
	    }
	    // console.log(interval, i);
	    return mathSqrt(d);
	}

	/**
	 * 计算二次方贝塞尔值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */
	function quadraticAt(p0, p1, p2, t) {
	    var onet = 1 - t;
	    return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	}

	/**
	 * 计算二次方贝塞尔导数值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */
	function quadraticDerivativeAt(p0, p1, p2, t) {
	    return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	}

	/**
	 * 计算二次方贝塞尔方程根
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */
	function quadraticRootAt(p0, p1, p2, val, roots) {
	    var a = p0 - 2 * p1 + p2;
	    var b = 2 * (p1 - p0);
	    var c = p0 - val;

	    var n = 0;
	    if (isAroundZero(a)) {
	        if (isNotAroundZero(b)) {
	            var t1 = -c / b;
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        }
	    } else {
	        var disc = b * b - 4 * a * c;
	        if (isAroundZero(disc)) {
	            var t1 = -b / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        } else if (disc > 0) {
	            var discSqrt = mathSqrt(disc);
	            var t1 = (-b + discSqrt) / (2 * a);
	            var t2 = (-b - discSqrt) / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                roots[n++] = t2;
	            }
	        }
	    }
	    return n;
	}

	/**
	 * 计算二次贝塞尔方程极限值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @return {number}
	 */
	function quadraticExtremum(p0, p1, p2) {
	    var divider = p0 + p2 - 2 * p1;
	    if (divider === 0) {
	        // p1 is center of p0 and p2
	        return 0.5;
	    } else {
	        return (p0 - p1) / divider;
	    }
	}

	/**
	 * 细分二次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */
	function quadraticSubdivide(p0, p1, p2, t, out) {
	    var p01 = (p1 - p0) * t + p0;
	    var p12 = (p2 - p1) * t + p1;
	    var p012 = (p12 - p01) * t + p01;

	    // Seg0
	    out[0] = p0;
	    out[1] = p01;
	    out[2] = p012;

	    // Seg1
	    out[3] = p012;
	    out[4] = p12;
	    out[5] = p2;
	}

	/**
	 * 投射点到二次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} out 投射点
	 * @return {number}
	 */
	function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
	    // http://pomax.github.io/bezierinfo/#projections
	    var t;
	    var interval = 0.005;
	    var d = Infinity;

	    _v0[0] = x;
	    _v0[1] = y;

	    // 先粗略估计一下可能的最小距离的 t 值
	    // PENDING
	    for (var _t = 0; _t < 1; _t += 0.05) {
	        _v1[0] = quadraticAt(x0, x1, x2, _t);
	        _v1[1] = quadraticAt(y0, y1, y2, _t);
	        var d1 = v2DistSquare(_v0, _v1);
	        if (d1 < d) {
	            t = _t;
	            d = d1;
	        }
	    }
	    d = Infinity;

	    // At most 32 iteration
	    for (var i = 0; i < 32; i++) {
	        if (interval < EPSILON_NUMERIC) {
	            break;
	        }
	        var prev = t - interval;
	        var next = t + interval;
	        // t - interval
	        _v1[0] = quadraticAt(x0, x1, x2, prev);
	        _v1[1] = quadraticAt(y0, y1, y2, prev);

	        var d1 = v2DistSquare(_v1, _v0);

	        if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	        } else {
	            // t + interval
	            _v2[0] = quadraticAt(x0, x1, x2, next);
	            _v2[1] = quadraticAt(y0, y1, y2, next);
	            var d2 = v2DistSquare(_v2, _v0);
	            if (next <= 1 && d2 < d) {
	                t = next;
	                d = d2;
	            } else {
	                interval *= 0.5;
	            }
	        }
	    }
	    // t
	    if (out) {
	        out[0] = quadraticAt(x0, x1, x2, t);
	        out[1] = quadraticAt(y0, y1, y2, t);
	    }
	    // console.log(interval, i);
	    return mathSqrt(d);
	}

	module.exports = {

	    cubicAt: cubicAt,

	    cubicDerivativeAt: cubicDerivativeAt,

	    cubicRootAt: cubicRootAt,

	    cubicExtrema: cubicExtrema,

	    cubicSubdivide: cubicSubdivide,

	    cubicProjectPoint: cubicProjectPoint,

	    quadraticAt: quadraticAt,

	    quadraticDerivativeAt: quadraticDerivativeAt,

	    quadraticRootAt: quadraticRootAt,

	    quadraticExtremum: quadraticExtremum,

	    quadraticSubdivide: quadraticSubdivide,

	    quadraticProjectPoint: quadraticProjectPoint
	};

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */

	var vec2 = __webpack_require__(510);
	var curve = __webpack_require__(550);

	var bbox = {};
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathSin = Math.sin;
	var mathCos = Math.cos;

	var start = vec2.create();
	var end = vec2.create();
	var extremity = vec2.create();

	var PI2 = Math.PI * 2;
	/**
	 * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	 * @module zrender/core/bbox
	 * @param {Array<Object>} points 顶点数组
	 * @param {number} min
	 * @param {number} max
	 */
	bbox.fromPoints = function (points, min, max) {
	    if (points.length === 0) {
	        return;
	    }
	    var p = points[0];
	    var left = p[0];
	    var right = p[0];
	    var top = p[1];
	    var bottom = p[1];
	    var i;

	    for (i = 1; i < points.length; i++) {
	        p = points[i];
	        left = mathMin(left, p[0]);
	        right = mathMax(right, p[0]);
	        top = mathMin(top, p[1]);
	        bottom = mathMax(bottom, p[1]);
	    }

	    min[0] = left;
	    min[1] = top;
	    max[0] = right;
	    max[1] = bottom;
	};

	/**
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromLine = function (x0, y0, x1, y1, min, max) {
	    min[0] = mathMin(x0, x1);
	    min[1] = mathMin(y0, y1);
	    max[0] = mathMax(x0, x1);
	    max[1] = mathMax(y0, y1);
	};

	var xDim = [];
	var yDim = [];
	/**
	 * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromCubic = function (x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
	    var cubicExtrema = curve.cubicExtrema;
	    var cubicAt = curve.cubicAt;
	    var i;
	    var n = cubicExtrema(x0, x1, x2, x3, xDim);
	    min[0] = Infinity;
	    min[1] = Infinity;
	    max[0] = -Infinity;
	    max[1] = -Infinity;

	    for (i = 0; i < n; i++) {
	        var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	        min[0] = mathMin(x, min[0]);
	        max[0] = mathMax(x, max[0]);
	    }
	    n = cubicExtrema(y0, y1, y2, y3, yDim);
	    for (i = 0; i < n; i++) {
	        var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	        min[1] = mathMin(y, min[1]);
	        max[1] = mathMax(y, max[1]);
	    }

	    min[0] = mathMin(x0, min[0]);
	    max[0] = mathMax(x0, max[0]);
	    min[0] = mathMin(x3, min[0]);
	    max[0] = mathMax(x3, max[0]);

	    min[1] = mathMin(y0, min[1]);
	    max[1] = mathMax(y0, max[1]);
	    min[1] = mathMin(y3, min[1]);
	    max[1] = mathMax(y3, max[1]);
	};

	/**
	 * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromQuadratic = function (x0, y0, x1, y1, x2, y2, min, max) {
	    var quadraticExtremum = curve.quadraticExtremum;
	    var quadraticAt = curve.quadraticAt;
	    // Find extremities, where derivative in x dim or y dim is zero
	    var tx = mathMax(mathMin(quadraticExtremum(x0, x1, x2), 1), 0);
	    var ty = mathMax(mathMin(quadraticExtremum(y0, y1, y2), 1), 0);

	    var x = quadraticAt(x0, x1, x2, tx);
	    var y = quadraticAt(y0, y1, y2, ty);

	    min[0] = mathMin(x0, x2, x);
	    min[1] = mathMin(y0, y2, y);
	    max[0] = mathMax(x0, x2, x);
	    max[1] = mathMax(y0, y2, y);
	};

	/**
	 * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	 * @method
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x
	 * @param {number} y
	 * @param {number} rx
	 * @param {number} ry
	 * @param {number} startAngle
	 * @param {number} endAngle
	 * @param {number} anticlockwise
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromArc = function (x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
	    var vec2Min = vec2.min;
	    var vec2Max = vec2.max;

	    var diff = Math.abs(startAngle - endAngle);

	    if (diff % PI2 < 1e-4 && diff > 1e-4) {
	        // Is a circle
	        min[0] = x - rx;
	        min[1] = y - ry;
	        max[0] = x + rx;
	        max[1] = y + ry;
	        return;
	    }

	    start[0] = mathCos(startAngle) * rx + x;
	    start[1] = mathSin(startAngle) * ry + y;

	    end[0] = mathCos(endAngle) * rx + x;
	    end[1] = mathSin(endAngle) * ry + y;

	    vec2Min(min, start, end);
	    vec2Max(max, start, end);

	    // Thresh to [0, Math.PI * 2]
	    startAngle = startAngle % PI2;
	    if (startAngle < 0) {
	        startAngle = startAngle + PI2;
	    }
	    endAngle = endAngle % PI2;
	    if (endAngle < 0) {
	        endAngle = endAngle + PI2;
	    }

	    if (startAngle > endAngle && !anticlockwise) {
	        endAngle += PI2;
	    } else if (startAngle < endAngle && anticlockwise) {
	        startAngle += PI2;
	    }
	    if (anticlockwise) {
	        var tmp = endAngle;
	        endAngle = startAngle;
	        startAngle = tmp;
	    }

	    // var number = 0;
	    // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	    for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	        if (angle > startAngle) {
	            extremity[0] = mathCos(angle) * rx + x;
	            extremity[1] = mathSin(angle) * ry + y;

	            vec2Min(min, extremity, min);
	            vec2Max(max, extremity, max);
	        }
	    }
	};

	module.exports = bbox;

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var CMD = __webpack_require__(549).CMD;
	var line = __webpack_require__(553);
	var cubic = __webpack_require__(554);
	var quadratic = __webpack_require__(555);
	var arc = __webpack_require__(556);
	var normalizeRadian = __webpack_require__(557).normalizeRadian;
	var curve = __webpack_require__(550);

	var windingLine = __webpack_require__(558);

	var containStroke = line.containStroke;

	var PI2 = Math.PI * 2;

	var EPSILON = 1e-4;

	function isAroundEqual(a, b) {
	    return Math.abs(a - b) < EPSILON;
	}

	// 临时数组
	var roots = [-1, -1, -1];
	var extrema = [-1, -1];

	function swapExtrema() {
	    var tmp = extrema[0];
	    extrema[0] = extrema[1];
	    extrema[1] = tmp;
	}

	function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	    // Quick reject
	    if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
	        return 0;
	    }
	    var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	    if (nRoots === 0) {
	        return 0;
	    } else {
	        var w = 0;
	        var nExtrema = -1;
	        var y0_, y1_;
	        for (var i = 0; i < nRoots; i++) {
	            var t = roots[i];

	            // Avoid winding error when intersection point is the connect point of two line of polygon
	            var unit = t === 0 || t === 1 ? 0.5 : 1;

	            var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	            if (x_ < x) {
	                // Quick reject
	                continue;
	            }
	            if (nExtrema < 0) {
	                nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                if (extrema[1] < extrema[0] && nExtrema > 1) {
	                    swapExtrema();
	                }
	                y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                if (nExtrema > 1) {
	                    y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                }
	            }
	            if (nExtrema == 2) {
	                // 分成三段单调函数
	                if (t < extrema[0]) {
	                    w += y0_ < y0 ? unit : -unit;
	                } else if (t < extrema[1]) {
	                    w += y1_ < y0_ ? unit : -unit;
	                } else {
	                    w += y3 < y1_ ? unit : -unit;
	                }
	            } else {
	                // 分成两段单调函数
	                if (t < extrema[0]) {
	                    w += y0_ < y0 ? unit : -unit;
	                } else {
	                    w += y3 < y0_ ? unit : -unit;
	                }
	            }
	        }
	        return w;
	    }
	}

	function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	    // Quick reject
	    if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
	        return 0;
	    }
	    var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	    if (nRoots === 0) {
	        return 0;
	    } else {
	        var t = curve.quadraticExtremum(y0, y1, y2);
	        if (t >= 0 && t <= 1) {
	            var w = 0;
	            var y_ = curve.quadraticAt(y0, y1, y2, t);
	            for (var i = 0; i < nRoots; i++) {
	                // Remove one endpoint.
	                var unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;

	                var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                if (x_ < x) {
	                    // Quick reject
	                    continue;
	                }
	                if (roots[i] < t) {
	                    w += y_ < y0 ? unit : -unit;
	                } else {
	                    w += y2 < y_ ? unit : -unit;
	                }
	            }
	            return w;
	        } else {
	            // Remove one endpoint.
	            var unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;

	            var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	            if (x_ < x) {
	                // Quick reject
	                return 0;
	            }
	            return y2 < y0 ? unit : -unit;
	        }
	    }
	}

	// TODO
	// Arc 旋转
	function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
	    y -= cy;
	    if (y > r || y < -r) {
	        return 0;
	    }
	    var tmp = Math.sqrt(r * r - y * y);
	    roots[0] = -tmp;
	    roots[1] = tmp;

	    var diff = Math.abs(startAngle - endAngle);
	    if (diff < 1e-4) {
	        return 0;
	    }
	    if (diff % PI2 < 1e-4) {
	        // Is a circle
	        startAngle = 0;
	        endAngle = PI2;
	        var dir = anticlockwise ? 1 : -1;
	        if (x >= roots[0] + cx && x <= roots[1] + cx) {
	            return dir;
	        } else {
	            return 0;
	        }
	    }

	    if (anticlockwise) {
	        var tmp = startAngle;
	        startAngle = normalizeRadian(endAngle);
	        endAngle = normalizeRadian(tmp);
	    } else {
	        startAngle = normalizeRadian(startAngle);
	        endAngle = normalizeRadian(endAngle);
	    }
	    if (startAngle > endAngle) {
	        endAngle += PI2;
	    }

	    var w = 0;
	    for (var i = 0; i < 2; i++) {
	        var x_ = roots[i];
	        if (x_ + cx > x) {
	            var angle = Math.atan2(y, x_);
	            var dir = anticlockwise ? 1 : -1;
	            if (angle < 0) {
	                angle = PI2 + angle;
	            }
	            if (angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle) {
	                if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                    dir = -dir;
	                }
	                w += dir;
	            }
	        }
	    }
	    return w;
	}

	function containPath(data, lineWidth, isStroke, x, y) {
	    var w = 0;
	    var xi = 0;
	    var yi = 0;
	    var x0 = 0;
	    var y0 = 0;

	    for (var i = 0; i < data.length;) {
	        var cmd = data[i++];
	        // Begin a new subpath
	        if (cmd === CMD.M && i > 1) {
	            // Close previous subpath
	            if (!isStroke) {
	                w += windingLine(xi, yi, x0, y0, x, y);
	            }
	            // 如果被任何一个 subpath 包含
	            // if (w !== 0) {
	            //     return true;
	            // }
	        }

	        if (i == 1) {
	            // 如果第一个命令是 L, C, Q
	            // 则 previous point 同绘制命令的第一个 point
	            //
	            // 第一个命令为 Arc 的情况下会在后面特殊处理
	            xi = data[i];
	            yi = data[i + 1];

	            x0 = xi;
	            y0 = yi;
	        }

	        switch (cmd) {
	            case CMD.M:
	                // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                // 在 closePath 的时候使用
	                x0 = data[i++];
	                y0 = data[i++];
	                xi = x0;
	                yi = y0;
	                break;
	            case CMD.L:
	                if (isStroke) {
	                    if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	                    w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.C:
	                if (isStroke) {
	                    if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.Q:
	                if (isStroke) {
	                    if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.A:
	                // TODO Arc 判断的开销比较大
	                var cx = data[i++];
	                var cy = data[i++];
	                var rx = data[i++];
	                var ry = data[i++];
	                var theta = data[i++];
	                var dTheta = data[i++];
	                // TODO Arc 旋转
	                var psi = data[i++];
	                var anticlockwise = 1 - data[i++];
	                var x1 = Math.cos(theta) * rx + cx;
	                var y1 = Math.sin(theta) * ry + cy;
	                // 不是直接使用 arc 命令
	                if (i > 1) {
	                    w += windingLine(xi, yi, x1, y1, x, y);
	                } else {
	                    // 第一个命令起点还未定义
	                    x0 = x1;
	                    y0 = y1;
	                }
	                // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                var _x = (x - cx) * ry / rx + cx;
	                if (isStroke) {
	                    if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
	                }
	                xi = Math.cos(theta + dTheta) * rx + cx;
	                yi = Math.sin(theta + dTheta) * ry + cy;
	                break;
	            case CMD.R:
	                x0 = xi = data[i++];
	                y0 = yi = data[i++];
	                var width = data[i++];
	                var height = data[i++];
	                var x1 = x0 + width;
	                var y1 = y0 + height;
	                if (isStroke) {
	                    if (containStroke(x0, y0, x1, y0, lineWidth, x, y) || containStroke(x1, y0, x1, y1, lineWidth, x, y) || containStroke(x1, y1, x0, y1, lineWidth, x, y) || containStroke(x0, y1, x0, y0, lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // FIXME Clockwise ?
	                    w += windingLine(x1, y0, x1, y1, x, y);
	                    w += windingLine(x0, y1, x0, y0, x, y);
	                }
	                break;
	            case CMD.Z:
	                if (isStroke) {
	                    if (containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // Close a subpath
	                    w += windingLine(xi, yi, x0, y0, x, y);
	                    // 如果被任何一个 subpath 包含
	                    // FIXME subpaths may overlap
	                    // if (w !== 0) {
	                    //     return true;
	                    // }
	                }
	                xi = x0;
	                yi = y0;
	                break;
	        }
	    }
	    if (!isStroke && !isAroundEqual(yi, y0)) {
	        w += windingLine(xi, yi, x0, y0, x, y) || 0;
	    }
	    return w !== 0;
	}

	module.exports = {
	    contain: function contain(pathData, x, y) {
	        return containPath(pathData, 0, false, x, y);
	    },

	    containStroke: function containStroke(pathData, lineWidth, x, y) {
	        return containPath(pathData, lineWidth, true, x, y);
	    }
	};

/***/ },
/* 553 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	    /**
	     * 线段包含判断
	     * @param  {number}  x0
	     * @param  {number}  y0
	     * @param  {number}  x1
	     * @param  {number}  y1
	     * @param  {number}  lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {boolean}
	     */
	    containStroke: function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;
	        var _a = 0;
	        var _b = x0;
	        // Quick reject
	        if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
	            return false;
	        }

	        if (x0 !== x1) {
	            _a = (y0 - y1) / (x0 - x1);
	            _b = (x0 * y1 - x1 * y0) / (x0 - x1);
	        } else {
	            return Math.abs(x - x0) <= _l / 2;
	        }
	        var tmp = _a * x - y + _b;
	        var _s = tmp * tmp / (_a * _a + 1);
	        return _s <= _l / 2 * _l / 2;
	    }
	};

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curve = __webpack_require__(550);

	module.exports = {
	    /**
	     * 三次贝塞尔曲线描边包含判断
	     * @param  {number}  x0
	     * @param  {number}  y0
	     * @param  {number}  x1
	     * @param  {number}  y1
	     * @param  {number}  x2
	     * @param  {number}  y2
	     * @param  {number}  x3
	     * @param  {number}  y3
	     * @param  {number}  lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {boolean}
	     */
	    containStroke: function containStroke(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;
	        // Quick reject
	        if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
	            return false;
	        }
	        var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
	        return d <= _l / 2;
	    }
	};

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curve = __webpack_require__(550);

	module.exports = {
	    /**
	     * 二次贝塞尔曲线描边包含判断
	     * @param  {number}  x0
	     * @param  {number}  y0
	     * @param  {number}  x1
	     * @param  {number}  y1
	     * @param  {number}  x2
	     * @param  {number}  y2
	     * @param  {number}  lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {boolean}
	     */
	    containStroke: function containStroke(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;
	        // Quick reject
	        if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
	            return false;
	        }
	        var d = curve.quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, null);
	        return d <= _l / 2;
	    }
	};

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var normalizeRadian = __webpack_require__(557).normalizeRadian;
	var PI2 = Math.PI * 2;

	module.exports = {
	    /**
	     * 圆弧描边包含判断
	     * @param  {number}  cx
	     * @param  {number}  cy
	     * @param  {number}  r
	     * @param  {number}  startAngle
	     * @param  {number}  endAngle
	     * @param  {boolean}  anticlockwise
	     * @param  {number} lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {Boolean}
	     */
	    containStroke: function containStroke(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {

	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;

	        x -= cx;
	        y -= cy;
	        var d = Math.sqrt(x * x + y * y);

	        if (d - _l > r || d + _l < r) {
	            return false;
	        }
	        if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	            // Is a circle
	            return true;
	        }
	        if (anticlockwise) {
	            var tmp = startAngle;
	            startAngle = normalizeRadian(endAngle);
	            endAngle = normalizeRadian(tmp);
	        } else {
	            startAngle = normalizeRadian(startAngle);
	            endAngle = normalizeRadian(endAngle);
	        }
	        if (startAngle > endAngle) {
	            endAngle += PI2;
	        }

	        var angle = Math.atan2(y, x);
	        if (angle < 0) {
	            angle += PI2;
	        }
	        return angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle;
	    }
	};

/***/ },
/* 557 */
/***/ function(module, exports) {

	"use strict";

	var PI2 = Math.PI * 2;
	module.exports = {
	    normalizeRadian: function normalizeRadian(angle) {
	        angle %= PI2;
	        if (angle < 0) {
	            angle += PI2;
	        }
	        return angle;
	    }
	};

/***/ },
/* 558 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function windingLine(x0, y0, x1, y1, x, y) {
	    if (y > y0 && y > y1 || y < y0 && y < y1) {
	        return 0;
	    }
	    // Ignore horizontal line
	    if (y1 === y0) {
	        return 0;
	    }
	    var dir = y1 < y0 ? 1 : -1;
	    var t = (y - y0) / (y1 - y0);

	    // Avoid winding error when intersection point is the connect point of two line of polygon
	    if (t === 1 || t === 0) {
	        dir = y1 < y0 ? 0.5 : -0.5;
	    }

	    var x_ = t * (x1 - x0) + x0;

	    return x_ > x ? dir : 0;
	};

/***/ },
/* 559 */
/***/ function(module, exports) {

	'use strict';

	var Pattern = function Pattern(image, repeat) {
	    this.image = image;
	    this.repeat = repeat;

	    // Can be cloned
	    this.type = 'pattern';
	};

	Pattern.prototype.getCanvasPattern = function (ctx) {

	    return this._canvasPattern || (this._canvasPattern = ctx.createPattern(this.image, this.repeat));
	};

	module.exports = Pattern;

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var CMD = __webpack_require__(549).CMD;
	var vec2 = __webpack_require__(510);
	var v2ApplyTransform = vec2.applyTransform;

	var points = [[], [], []];
	var mathSqrt = Math.sqrt;
	var mathAtan2 = Math.atan2;
	function transformPath(path, m) {
	    var data = path.data;
	    var cmd;
	    var nPoint;
	    var i;
	    var j;
	    var k;
	    var p;

	    var M = CMD.M;
	    var C = CMD.C;
	    var L = CMD.L;
	    var R = CMD.R;
	    var A = CMD.A;
	    var Q = CMD.Q;

	    for (i = 0, j = 0; i < data.length;) {
	        cmd = data[i++];
	        j = i;
	        nPoint = 0;

	        switch (cmd) {
	            case M:
	                nPoint = 1;
	                break;
	            case L:
	                nPoint = 1;
	                break;
	            case C:
	                nPoint = 3;
	                break;
	            case Q:
	                nPoint = 2;
	                break;
	            case A:
	                var x = m[4];
	                var y = m[5];
	                var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	                var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	                var angle = mathAtan2(-m[1] / sy, m[0] / sx);
	                // cx
	                data[i++] += x;
	                // cy
	                data[i++] += y;
	                // Scale rx and ry
	                // FIXME Assume psi is 0 here
	                data[i++] *= sx;
	                data[i++] *= sy;

	                // Start angle
	                data[i++] += angle;
	                // end angle
	                data[i++] += angle;
	                // FIXME psi
	                i += 2;
	                j = i;
	                break;
	            case R:
	                // x0, y0
	                p[0] = data[i++];
	                p[1] = data[i++];
	                v2ApplyTransform(p, p, m);
	                data[j++] = p[0];
	                data[j++] = p[1];
	                // x1, y1
	                p[0] += data[i++];
	                p[1] += data[i++];
	                v2ApplyTransform(p, p, m);
	                data[j++] = p[0];
	                data[j++] = p[1];
	        }

	        for (k = 0; k < nPoint; k++) {
	            var p = points[k];
	            p[0] = data[i++];
	            p[1] = data[i++];

	            v2ApplyTransform(p, p, m);
	            // Write back
	            data[j++] = p[0];
	            data[j++] = p[1];
	        }
	    }
	}

	module.exports = transformPath;

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Image element
	 * @module zrender/graphic/Image
	 */

	var Displayable = __webpack_require__(546);
	var BoundingRect = __webpack_require__(509);
	var zrUtil = __webpack_require__(504);

	var LRU = __webpack_require__(562);
	var globalImageCache = new LRU(50);
	/**
	 * @alias zrender/graphic/Image
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	function ZImage(opts) {
	    Displayable.call(this, opts);
	}

	ZImage.prototype = {

	    constructor: ZImage,

	    type: 'image',

	    brush: function brush(ctx, prevEl) {
	        var style = this.style;
	        var src = style.image;
	        var image;

	        // Must bind each time
	        style.bind(ctx, this, prevEl);
	        // style.image is a url string
	        if (typeof src === 'string') {
	            image = this._image;
	        }
	        // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas
	        else {
	                image = src;
	            }
	        // FIXME Case create many images with src
	        if (!image && src) {
	            // Try get from global image cache
	            var cachedImgObj = globalImageCache.get(src);
	            if (!cachedImgObj) {
	                // Create a new image
	                image = new Image();
	                image.onload = function () {
	                    image.onload = null;
	                    for (var i = 0; i < cachedImgObj.pending.length; i++) {
	                        cachedImgObj.pending[i].dirty();
	                    }
	                };
	                cachedImgObj = {
	                    image: image,
	                    pending: [this]
	                };
	                image.src = src;
	                globalImageCache.put(src, cachedImgObj);
	                this._image = image;
	                return;
	            } else {
	                image = cachedImgObj.image;
	                this._image = image;
	                // Image is not complete finish, add to pending list
	                if (!image.width || !image.height) {
	                    cachedImgObj.pending.push(this);
	                    return;
	                }
	            }
	        }

	        if (image) {
	            // 图片已经加载完成
	            // if (image.nodeName.toUpperCase() == 'IMG') {
	            //     if (!image.complete) {
	            //         return;
	            //     }
	            // }
	            // Else is canvas

	            var width = style.width || image.width;
	            var height = style.height || image.height;
	            var x = style.x || 0;
	            var y = style.y || 0;
	            // 图片加载失败
	            if (!image.width || !image.height) {
	                return;
	            }

	            // 设置transform
	            this.setTransform(ctx);

	            if (style.sWidth && style.sHeight) {
	                var sx = style.sx || 0;
	                var sy = style.sy || 0;
	                ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
	            } else if (style.sx && style.sy) {
	                var sx = style.sx;
	                var sy = style.sy;
	                var sWidth = width - sx;
	                var sHeight = height - sy;
	                ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);
	            } else {
	                ctx.drawImage(image, x, y, width, height);
	            }

	            // 如果没设置宽和高的话自动根据图片宽高设置
	            if (style.width == null) {
	                style.width = width;
	            }
	            if (style.height == null) {
	                style.height = height;
	            }

	            this.restoreTransform(ctx);

	            // Draw rect text
	            if (style.text != null) {
	                this.drawRectText(ctx, this.getBoundingRect());
	            }
	        }
	    },

	    getBoundingRect: function getBoundingRect() {
	        var style = this.style;
	        if (!this._rect) {
	            this._rect = new BoundingRect(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
	        }
	        return this._rect;
	    }
	};

	zrUtil.inherits(ZImage, Displayable);

	module.exports = ZImage;

/***/ },
/* 562 */
/***/ function(module, exports) {

	"use strict";

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU


	/**
	 * Simple double linked list. Compared with array, it has O(1) remove operation.
	 * @constructor
	 */
	var LinkedList = function LinkedList() {

	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.head = null;

	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.tail = null;

	    this._len = 0;
	};

	var linkedListProto = LinkedList.prototype;
	/**
	 * Insert a new value at the tail
	 * @param  {} val
	 * @return {module:zrender/core/LRU~Entry}
	 */
	linkedListProto.insert = function (val) {
	    var entry = new Entry(val);
	    this.insertEntry(entry);
	    return entry;
	};

	/**
	 * Insert an entry at the tail
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */
	linkedListProto.insertEntry = function (entry) {
	    if (!this.head) {
	        this.head = this.tail = entry;
	    } else {
	        this.tail.next = entry;
	        entry.prev = this.tail;
	        this.tail = entry;
	    }
	    this._len++;
	};

	/**
	 * Remove entry.
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */
	linkedListProto.remove = function (entry) {
	    var prev = entry.prev;
	    var next = entry.next;
	    if (prev) {
	        prev.next = next;
	    } else {
	        // Is head
	        this.head = next;
	    }
	    if (next) {
	        next.prev = prev;
	    } else {
	        // Is tail
	        this.tail = prev;
	    }
	    entry.next = entry.prev = null;
	    this._len--;
	};

	/**
	 * @return {number}
	 */
	linkedListProto.len = function () {
	    return this._len;
	};

	/**
	 * @constructor
	 * @param {} val
	 */
	var Entry = function Entry(val) {
	    /**
	     * @type {}
	     */
	    this.value = val;

	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.next;

	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.prev;
	};

	/**
	 * LRU Cache
	 * @constructor
	 * @alias module:zrender/core/LRU
	 */
	var LRU = function LRU(maxSize) {

	    this._list = new LinkedList();

	    this._map = {};

	    this._maxSize = maxSize || 10;
	};

	var LRUProto = LRU.prototype;

	/**
	 * @param  {string} key
	 * @param  {} value
	 */
	LRUProto.put = function (key, value) {
	    var list = this._list;
	    var map = this._map;
	    if (map[key] == null) {
	        var len = list.len();
	        if (len >= this._maxSize && len > 0) {
	            // Remove the least recently used
	            var leastUsedEntry = list.head;
	            list.remove(leastUsedEntry);
	            delete map[leastUsedEntry.key];
	        }

	        var entry = list.insert(value);
	        entry.key = key;
	        map[key] = entry;
	    }
	};

	/**
	 * @param  {string} key
	 * @return {}
	 */
	LRUProto.get = function (key) {
	    var entry = this._map[key];
	    var list = this._list;
	    if (entry != null) {
	        // Put the latest used entry in the tail
	        if (entry !== list.tail) {
	            list.remove(entry);
	            list.insertEntry(entry);
	        }

	        return entry.value;
	    }
	};

	/**
	 * Clear the cache
	 */
	LRUProto.clear = function () {
	    this._list.clear();
	    this._map = {};
	};

	module.exports = LRU;

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Text element
	 * @module zrender/graphic/Text
	 *
	 * TODO Wrapping
	 *
	 * Text not support gradient
	 */

	var Displayable = __webpack_require__(546);
	var zrUtil = __webpack_require__(504);
	var textContain = __webpack_require__(508);

	/**
	 * @alias zrender/graphic/Text
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	var Text = function Text(opts) {
	    Displayable.call(this, opts);
	};

	Text.prototype = {

	    constructor: Text,

	    type: 'text',

	    brush: function brush(ctx, prevEl) {
	        var style = this.style;
	        var x = style.x || 0;
	        var y = style.y || 0;
	        // Convert to string
	        var text = style.text;

	        // Convert to string
	        text != null && (text += '');

	        // Always bind style
	        style.bind(ctx, this, prevEl);

	        if (text) {

	            this.setTransform(ctx);

	            var textBaseline;
	            var textAlign = style.textAlign;
	            var font = style.textFont || style.font;
	            if (style.textVerticalAlign) {
	                var rect = textContain.getBoundingRect(text, font, style.textAlign, 'top');
	                // Ignore textBaseline
	                textBaseline = 'middle';
	                switch (style.textVerticalAlign) {
	                    case 'middle':
	                        y -= rect.height / 2 - rect.lineHeight / 2;
	                        break;
	                    case 'bottom':
	                        y -= rect.height - rect.lineHeight / 2;
	                        break;
	                    default:
	                        y += rect.lineHeight / 2;
	                }
	            } else {
	                textBaseline = style.textBaseline;
	            }

	            // TODO Invalid font
	            ctx.font = font || '12px sans-serif';
	            ctx.textAlign = textAlign || 'left';
	            // Use canvas default left textAlign. Giving invalid value will cause state not change
	            if (ctx.textAlign !== textAlign) {
	                ctx.textAlign = 'left';
	            }
	            ctx.textBaseline = textBaseline || 'alphabetic';
	            // Use canvas default alphabetic baseline
	            if (ctx.textBaseline !== textBaseline) {
	                ctx.textBaseline = 'alphabetic';
	            }

	            var lineHeight = textContain.measureText('国', ctx.font).width;

	            var textLines = text.split('\n');
	            for (var i = 0; i < textLines.length; i++) {
	                style.hasFill() && ctx.fillText(textLines[i], x, y);
	                style.hasStroke() && ctx.strokeText(textLines[i], x, y);
	                y += lineHeight;
	            }

	            this.restoreTransform(ctx);
	        }
	    },

	    getBoundingRect: function getBoundingRect() {
	        if (!this._rect) {
	            var style = this.style;
	            var textVerticalAlign = style.textVerticalAlign;
	            var rect = textContain.getBoundingRect(style.text + '', style.textFont || style.font, style.textAlign, textVerticalAlign ? 'top' : style.textBaseline);
	            switch (textVerticalAlign) {
	                case 'middle':
	                    rect.y -= rect.height / 2;
	                    break;
	                case 'bottom':
	                    rect.y -= rect.height;
	                    break;
	            }
	            rect.x += style.x || 0;
	            rect.y += style.y || 0;
	            this._rect = rect;
	        }
	        return this._rect;
	    }
	};

	zrUtil.inherits(Text, Displayable);

	module.exports = Text;

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */

	module.exports = __webpack_require__(545).extend({

	    type: 'circle',

	    shape: {
	        cx: 0,
	        cy: 0,
	        r: 0
	    },

	    buildPath: function buildPath(ctx, shape, inBundle) {
	        // Better stroking in ShapeBundle
	        // Always do it may have performence issue ( fill may be 2x more cost)
	        if (inBundle) {
	            ctx.moveTo(shape.cx + shape.r, shape.cy);
	        }
	        // Better stroking in ShapeBundle
	        // ctx.moveTo(shape.cx + shape.r, shape.cy);
	        ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	    }
	});

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */

	var env = __webpack_require__(502);
	var Path = __webpack_require__(545);

	var shadowTemp = [['shadowBlur', 0], ['shadowColor', '#000'], ['shadowOffsetX', 0], ['shadowOffsetY', 0]];

	module.exports = Path.extend({

	    type: 'sector',

	    shape: {

	        cx: 0,

	        cy: 0,

	        r0: 0,

	        r: 0,

	        startAngle: 0,

	        endAngle: Math.PI * 2,

	        clockwise: true
	    },

	    brush: env.browser.ie && env.browser.version >= 11 ? // version: '11.0'
	    // Fix weird bug in some version of IE11 (like 11.0.9600.17801),
	    // where exception "unexpected call to method or property access"
	    // might be thrown when calling ctx.fill after a path whose area size
	    // is zero is drawn and ctx.clip() is called and shadowBlur is set.
	    // (e.g.,
	    //  ctx.moveTo(10, 10);
	    //  ctx.lineTo(20, 10);
	    //  ctx.closePath();
	    //  ctx.clip();
	    //  ctx.shadowBlur = 10;
	    //  ...
	    //  ctx.fill();
	    // )
	    function () {
	        var clipPaths = this.__clipPaths;
	        var style = this.style;
	        var modified;

	        if (clipPaths) {
	            for (var i = 0; i < clipPaths.length; i++) {
	                var shape = clipPaths[i] && clipPaths[i].shape;
	                if (shape && shape.startAngle === shape.endAngle) {
	                    for (var j = 0; j < shadowTemp.length; j++) {
	                        shadowTemp[j][2] = style[shadowTemp[j][0]];
	                        style[shadowTemp[j][0]] = shadowTemp[j][1];
	                    }
	                    modified = true;
	                    break;
	                }
	            }
	        }

	        Path.prototype.brush.apply(this, arguments);

	        if (modified) {
	            for (var j = 0; j < shadowTemp.length; j++) {
	                style[shadowTemp[j][0]] = shadowTemp[j][2];
	            }
	        }
	    } : Path.prototype.brush,

	    buildPath: function buildPath(ctx, shape) {

	        var x = shape.cx;
	        var y = shape.cy;
	        var r0 = Math.max(shape.r0 || 0, 0);
	        var r = Math.max(shape.r, 0);
	        var startAngle = shape.startAngle;
	        var endAngle = shape.endAngle;
	        var clockwise = shape.clockwise;

	        var unitX = Math.cos(startAngle);
	        var unitY = Math.sin(startAngle);

	        ctx.moveTo(unitX * r0 + x, unitY * r0 + y);

	        ctx.lineTo(unitX * r + x, unitY * r + y);

	        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);

	        ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);

	        if (r0 !== 0) {
	            ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	        }

	        ctx.closePath();
	    }
	});

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */

	module.exports = __webpack_require__(545).extend({

	    type: 'ring',

	    shape: {
	        cx: 0,
	        cy: 0,
	        r: 0,
	        r0: 0
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var x = shape.cx;
	        var y = shape.cy;
	        var PI2 = Math.PI * 2;
	        ctx.moveTo(x + shape.r, y);
	        ctx.arc(x, y, shape.r, 0, PI2, false);
	        ctx.moveTo(x + shape.r0, y);
	        ctx.arc(x, y, shape.r0, 0, PI2, true);
	    }
	});

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */

	var polyHelper = __webpack_require__(568);

	module.exports = __webpack_require__(545).extend({

	    type: 'polygon',

	    shape: {
	        points: null,

	        smooth: false,

	        smoothConstraint: null
	    },

	    buildPath: function buildPath(ctx, shape) {
	        polyHelper.buildPath(ctx, shape, true);
	    }
	});

/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var smoothSpline = __webpack_require__(569);
	var smoothBezier = __webpack_require__(570);

	module.exports = {
	    buildPath: function buildPath(ctx, shape, closePath) {
	        var points = shape.points;
	        var smooth = shape.smooth;
	        if (points && points.length >= 2) {
	            if (smooth && smooth !== 'spline') {
	                var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);

	                ctx.moveTo(points[0][0], points[0][1]);
	                var len = points.length;
	                for (var i = 0; i < (closePath ? len : len - 1); i++) {
	                    var cp1 = controlPoints[i * 2];
	                    var cp2 = controlPoints[i * 2 + 1];
	                    var p = points[(i + 1) % len];
	                    ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
	                }
	            } else {
	                if (smooth === 'spline') {
	                    points = smoothSpline(points, closePath);
	                }

	                ctx.moveTo(points[0][0], points[0][1]);
	                for (var i = 1, l = points.length; i < l; i++) {
	                    ctx.lineTo(points[i][0], points[i][1]);
	                }
	            }

	            closePath && ctx.closePath();
	        }
	    }
	};

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	var vec2 = __webpack_require__(510);

	/**
	 * @inner
	 */
	function interpolate(p0, p1, p2, p3, t, t2, t3) {
	    var v0 = (p2 - p0) * 0.5;
	    var v1 = (p3 - p1) * 0.5;
	    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}

	/**
	 * @alias module:zrender/shape/util/smoothSpline
	 * @param {Array} points 线段顶点数组
	 * @param {boolean} isLoop
	 * @return {Array}
	 */
	module.exports = function (points, isLoop) {
	    var len = points.length;
	    var ret = [];

	    var distance = 0;
	    for (var i = 1; i < len; i++) {
	        distance += vec2.distance(points[i - 1], points[i]);
	    }

	    var segs = distance / 2;
	    segs = segs < len ? len : segs;
	    for (var i = 0; i < segs; i++) {
	        var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	        var idx = Math.floor(pos);

	        var w = pos - idx;

	        var p0;
	        var p1 = points[idx % len];
	        var p2;
	        var p3;
	        if (!isLoop) {
	            p0 = points[idx === 0 ? idx : idx - 1];
	            p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	            p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	        } else {
	            p0 = points[(idx - 1 + len) % len];
	            p2 = points[(idx + 1) % len];
	            p3 = points[(idx + 2) % len];
	        }

	        var w2 = w * w;
	        var w3 = w * w2;

	        ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
	    }
	    return ret;
	};

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	var vec2 = __webpack_require__(510);
	var v2Min = vec2.min;
	var v2Max = vec2.max;
	var v2Scale = vec2.scale;
	var v2Distance = vec2.distance;
	var v2Add = vec2.add;

	/**
	 * 贝塞尔平滑曲线
	 * @alias module:zrender/shape/util/smoothBezier
	 * @param {Array} points 线段顶点数组
	 * @param {number} smooth 平滑等级, 0-1
	 * @param {boolean} isLoop
	 * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	 *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	 *                           整个折线的包围盒做一个并集用来约束控制点。
	 * @param {Array} 计算出来的控制点数组
	 */
	module.exports = function (points, smooth, isLoop, constraint) {
	    var cps = [];

	    var v = [];
	    var v1 = [];
	    var v2 = [];
	    var prevPoint;
	    var nextPoint;

	    var min, max;
	    if (constraint) {
	        min = [Infinity, Infinity];
	        max = [-Infinity, -Infinity];
	        for (var i = 0, len = points.length; i < len; i++) {
	            v2Min(min, min, points[i]);
	            v2Max(max, max, points[i]);
	        }
	        // 与指定的包围盒做并集
	        v2Min(min, min, constraint[0]);
	        v2Max(max, max, constraint[1]);
	    }

	    for (var i = 0, len = points.length; i < len; i++) {
	        var point = points[i];

	        if (isLoop) {
	            prevPoint = points[i ? i - 1 : len - 1];
	            nextPoint = points[(i + 1) % len];
	        } else {
	            if (i === 0 || i === len - 1) {
	                cps.push(vec2.clone(points[i]));
	                continue;
	            } else {
	                prevPoint = points[i - 1];
	                nextPoint = points[i + 1];
	            }
	        }

	        vec2.sub(v, nextPoint, prevPoint);

	        // use degree to scale the handle length
	        v2Scale(v, v, smooth);

	        var d0 = v2Distance(point, prevPoint);
	        var d1 = v2Distance(point, nextPoint);
	        var sum = d0 + d1;
	        if (sum !== 0) {
	            d0 /= sum;
	            d1 /= sum;
	        }

	        v2Scale(v1, v, -d0);
	        v2Scale(v2, v, d1);
	        var cp0 = v2Add([], point, v1);
	        var cp1 = v2Add([], point, v2);
	        if (constraint) {
	            v2Max(cp0, cp0, min);
	            v2Min(cp0, cp0, max);
	            v2Max(cp1, cp1, min);
	            v2Min(cp1, cp1, max);
	        }
	        cps.push(cp0);
	        cps.push(cp1);
	    }

	    if (isLoop) {
	        cps.push(cps.shift());
	    }

	    return cps;
	};

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module zrender/graphic/shape/Polyline
	 */

	var polyHelper = __webpack_require__(568);

	module.exports = __webpack_require__(545).extend({

	    type: 'polyline',

	    shape: {
	        points: null,

	        smooth: false,

	        smoothConstraint: null
	    },

	    style: {
	        stroke: '#000',

	        fill: null
	    },

	    buildPath: function buildPath(ctx, shape) {
	        polyHelper.buildPath(ctx, shape, false);
	    }
	});

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */

	var roundRectHelper = __webpack_require__(573);

	module.exports = __webpack_require__(545).extend({

	    type: 'rect',

	    shape: {
	        // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	        // r缩写为1         相当于 [1, 1, 1, 1]
	        // r缩写为[1]       相当于 [1, 1, 1, 1]
	        // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	        // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	        r: 0,

	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var x = shape.x;
	        var y = shape.y;
	        var width = shape.width;
	        var height = shape.height;
	        if (!shape.r) {
	            ctx.rect(x, y, width, height);
	        } else {
	            roundRectHelper.buildPath(ctx, shape);
	        }
	        ctx.closePath();
	        return;
	    }
	});

/***/ },
/* 573 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	    buildPath: function buildPath(ctx, shape) {
	        var x = shape.x;
	        var y = shape.y;
	        var width = shape.width;
	        var height = shape.height;
	        var r = shape.r;
	        var r1;
	        var r2;
	        var r3;
	        var r4;

	        // Convert width and height to positive for better borderRadius
	        if (width < 0) {
	            x = x + width;
	            width = -width;
	        }
	        if (height < 0) {
	            y = y + height;
	            height = -height;
	        }

	        if (typeof r === 'number') {
	            r1 = r2 = r3 = r4 = r;
	        } else if (r instanceof Array) {
	            if (r.length === 1) {
	                r1 = r2 = r3 = r4 = r[0];
	            } else if (r.length === 2) {
	                r1 = r3 = r[0];
	                r2 = r4 = r[1];
	            } else if (r.length === 3) {
	                r1 = r[0];
	                r2 = r4 = r[1];
	                r3 = r[2];
	            } else {
	                r1 = r[0];
	                r2 = r[1];
	                r3 = r[2];
	                r4 = r[3];
	            }
	        } else {
	            r1 = r2 = r3 = r4 = 0;
	        }

	        var total;
	        if (r1 + r2 > width) {
	            total = r1 + r2;
	            r1 *= width / total;
	            r2 *= width / total;
	        }
	        if (r3 + r4 > width) {
	            total = r3 + r4;
	            r3 *= width / total;
	            r4 *= width / total;
	        }
	        if (r2 + r3 > height) {
	            total = r2 + r3;
	            r2 *= height / total;
	            r3 *= height / total;
	        }
	        if (r1 + r4 > height) {
	            total = r1 + r4;
	            r1 *= height / total;
	            r4 *= height / total;
	        }
	        ctx.moveTo(x + r1, y);
	        ctx.lineTo(x + width - r2, y);
	        r2 !== 0 && ctx.quadraticCurveTo(x + width, y, x + width, y + r2);
	        ctx.lineTo(x + width, y + height - r3);
	        r3 !== 0 && ctx.quadraticCurveTo(x + width, y + height, x + width - r3, y + height);
	        ctx.lineTo(x + r4, y + height);
	        r4 !== 0 && ctx.quadraticCurveTo(x, y + height, x, y + height - r4);
	        ctx.lineTo(x, y + r1);
	        r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	    }
	};

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */

	module.exports = __webpack_require__(545).extend({

	    type: 'line',

	    shape: {
	        // Start point
	        x1: 0,
	        y1: 0,
	        // End point
	        x2: 0,
	        y2: 0,

	        percent: 1
	    },

	    style: {
	        stroke: '#000',
	        fill: null
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var x1 = shape.x1;
	        var y1 = shape.y1;
	        var x2 = shape.x2;
	        var y2 = shape.y2;
	        var percent = shape.percent;

	        if (percent === 0) {
	            return;
	        }

	        ctx.moveTo(x1, y1);

	        if (percent < 1) {
	            x2 = x1 * (1 - percent) + x2 * percent;
	            y2 = y1 * (1 - percent) + y2 * percent;
	        }
	        ctx.lineTo(x2, y2);
	    },

	    /**
	     * Get point at percent
	     * @param  {number} percent
	     * @return {Array.<number>}
	     */
	    pointAt: function pointAt(p) {
	        var shape = this.shape;
	        return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
	    }
	});

/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */

	var curveTool = __webpack_require__(550);
	var vec2 = __webpack_require__(510);
	var quadraticSubdivide = curveTool.quadraticSubdivide;
	var cubicSubdivide = curveTool.cubicSubdivide;
	var quadraticAt = curveTool.quadraticAt;
	var cubicAt = curveTool.cubicAt;
	var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;
	var cubicDerivativeAt = curveTool.cubicDerivativeAt;

	var out = [];

	function someVectorAt(shape, t, isTangent) {
	    var cpx2 = shape.cpx2;
	    var cpy2 = shape.cpy2;
	    if (cpx2 === null || cpy2 === null) {
	        return [(isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t), (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)];
	    } else {
	        return [(isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t), (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)];
	    }
	}
	module.exports = __webpack_require__(545).extend({

	    type: 'bezier-curve',

	    shape: {
	        x1: 0,
	        y1: 0,
	        x2: 0,
	        y2: 0,
	        cpx1: 0,
	        cpy1: 0,
	        // cpx2: 0,
	        // cpy2: 0

	        // Curve show percent, for animating
	        percent: 1
	    },

	    style: {
	        stroke: '#000',
	        fill: null
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var x1 = shape.x1;
	        var y1 = shape.y1;
	        var x2 = shape.x2;
	        var y2 = shape.y2;
	        var cpx1 = shape.cpx1;
	        var cpy1 = shape.cpy1;
	        var cpx2 = shape.cpx2;
	        var cpy2 = shape.cpy2;
	        var percent = shape.percent;
	        if (percent === 0) {
	            return;
	        }

	        ctx.moveTo(x1, y1);

	        if (cpx2 == null || cpy2 == null) {
	            if (percent < 1) {
	                quadraticSubdivide(x1, cpx1, x2, percent, out);
	                cpx1 = out[1];
	                x2 = out[2];
	                quadraticSubdivide(y1, cpy1, y2, percent, out);
	                cpy1 = out[1];
	                y2 = out[2];
	            }

	            ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
	        } else {
	            if (percent < 1) {
	                cubicSubdivide(x1, cpx1, cpx2, x2, percent, out);
	                cpx1 = out[1];
	                cpx2 = out[2];
	                x2 = out[3];
	                cubicSubdivide(y1, cpy1, cpy2, y2, percent, out);
	                cpy1 = out[1];
	                cpy2 = out[2];
	                y2 = out[3];
	            }
	            ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
	        }
	    },

	    /**
	     * Get point at percent
	     * @param  {number} t
	     * @return {Array.<number>}
	     */
	    pointAt: function pointAt(t) {
	        return someVectorAt(this.shape, t, false);
	    },

	    /**
	     * Get tangent at percent
	     * @param  {number} t
	     * @return {Array.<number>}
	     */
	    tangentAt: function tangentAt(t) {
	        var p = someVectorAt(this.shape, t, true);
	        return vec2.normalize(p, p);
	    }
	});

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */

	module.exports = __webpack_require__(545).extend({

	    type: 'arc',

	    shape: {

	        cx: 0,

	        cy: 0,

	        r: 0,

	        startAngle: 0,

	        endAngle: Math.PI * 2,

	        clockwise: true
	    },

	    style: {

	        stroke: '#000',

	        fill: null
	    },

	    buildPath: function buildPath(ctx, shape) {

	        var x = shape.cx;
	        var y = shape.cy;
	        var r = Math.max(shape.r, 0);
	        var startAngle = shape.startAngle;
	        var endAngle = shape.endAngle;
	        var clockwise = shape.clockwise;

	        var unitX = Math.cos(startAngle);
	        var unitY = Math.sin(startAngle);

	        ctx.moveTo(unitX * r + x, unitY * r + y);
	        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	    }
	});

/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// CompoundPath to improve performance


	var Path = __webpack_require__(545);
	module.exports = Path.extend({

	    type: 'compound',

	    shape: {

	        paths: null
	    },

	    _updatePathDirty: function _updatePathDirty() {
	        var dirtyPath = this.__dirtyPath;
	        var paths = this.shape.paths;
	        for (var i = 0; i < paths.length; i++) {
	            // Mark as dirty if any subpath is dirty
	            dirtyPath = dirtyPath || paths[i].__dirtyPath;
	        }
	        this.__dirtyPath = dirtyPath;
	        this.__dirty = this.__dirty || dirtyPath;
	    },

	    beforeBrush: function beforeBrush() {
	        this._updatePathDirty();
	        var paths = this.shape.paths || [];
	        var scale = this.getGlobalScale();
	        // Update path scale
	        for (var i = 0; i < paths.length; i++) {
	            paths[i].path.setScale(scale[0], scale[1]);
	        }
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var paths = shape.paths || [];
	        for (var i = 0; i < paths.length; i++) {
	            paths[i].buildPath(ctx, paths[i].shape, true);
	        }
	    },

	    afterBrush: function afterBrush() {
	        var paths = this.shape.paths;
	        for (var i = 0; i < paths.length; i++) {
	            paths[i].__dirtyPath = false;
	        }
	    },

	    getBoundingRect: function getBoundingRect() {
	        this._updatePathDirty();
	        return Path.prototype.getBoundingRect.call(this);
	    }
	});

/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var Gradient = __webpack_require__(579);

	/**
	 * x, y, x2, y2 are all percent from 0 to 1
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @param {number} [x2=1]
	 * @param {number} [y2=0]
	 * @param {Array.<Object>} colorStops
	 * @param {boolean} [globalCoord=false]
	 */
	var LinearGradient = function LinearGradient(x, y, x2, y2, colorStops, globalCoord) {
	    this.x = x == null ? 0 : x;

	    this.y = y == null ? 0 : y;

	    this.x2 = x2 == null ? 1 : x2;

	    this.y2 = y2 == null ? 0 : y2;

	    // Can be cloned
	    this.type = 'linear';

	    // If use global coord
	    this.global = globalCoord || false;

	    Gradient.call(this, colorStops);
	};

	LinearGradient.prototype = {

	    constructor: LinearGradient
	};

	zrUtil.inherits(LinearGradient, Gradient);

	module.exports = LinearGradient;

/***/ },
/* 579 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @param {Array.<Object>} colorStops
	 */
	var Gradient = function Gradient(colorStops) {

	    this.colorStops = colorStops || [];
	};

	Gradient.prototype = {

	    constructor: Gradient,

	    addColorStop: function addColorStop(offset, color) {
	        this.colorStops.push({

	            offset: offset,

	            color: color
	        });
	    }
	};

	module.exports = Gradient;

/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var Gradient = __webpack_require__(579);

	/**
	 * x, y, r are all percent from 0 to 1
	 * @param {number} [x=0.5]
	 * @param {number} [y=0.5]
	 * @param {number} [r=0.5]
	 * @param {Array.<Object>} [colorStops]
	 * @param {boolean} [globalCoord=false]
	 */
	var RadialGradient = function RadialGradient(x, y, r, colorStops, globalCoord) {
	    this.x = x == null ? 0.5 : x;

	    this.y = y == null ? 0.5 : y;

	    this.r = r == null ? 0.5 : r;

	    // Can be cloned
	    this.type = 'radial';

	    // If use global coord
	    this.global = globalCoord || false;

	    Gradient.call(this, colorStops);
	};

	RadialGradient.prototype = {

	    constructor: RadialGradient
	};

	zrUtil.inherits(RadialGradient, Gradient);

	module.exports = RadialGradient;

/***/ },
/* 581 */
/***/ function(module, exports) {

	'use strict';

	var lib = {};

	var ORIGIN_METHOD = '\0__throttleOriginMethod';
	var RATE = '\0__throttleRate';
	var THROTTLE_TYPE = '\0__throttleType';

	/**
	 * @public
	 * @param {(Function)} fn
	 * @param {number} [delay=0] Unit: ms.
	 * @param {boolean} [debounce=false]
	 *        true: If call interval less than `delay`, only the last call works.
	 *        false: If call interval less than `delay, call works on fixed rate.
	 * @return {(Function)} throttled fn.
	 */
	lib.throttle = function (fn, delay, debounce) {

	    var currCall;
	    var lastCall = 0;
	    var lastExec = 0;
	    var timer = null;
	    var diff;
	    var scope;
	    var args;

	    delay = delay || 0;

	    function exec() {
	        lastExec = new Date().getTime();
	        timer = null;
	        fn.apply(scope, args || []);
	    }

	    var cb = function cb() {
	        currCall = new Date().getTime();
	        scope = this;
	        args = arguments;
	        diff = currCall - (debounce ? lastCall : lastExec) - delay;

	        clearTimeout(timer);

	        if (debounce) {
	            timer = setTimeout(exec, delay);
	        } else {
	            if (diff >= 0) {
	                exec();
	            } else {
	                timer = setTimeout(exec, -diff);
	            }
	        }

	        lastCall = currCall;
	    };

	    /**
	     * Clear throttle.
	     * @public
	     */
	    cb.clear = function () {
	        if (timer) {
	            clearTimeout(timer);
	            timer = null;
	        }
	    };

	    return cb;
	};

	/**
	 * Create throttle method or update throttle rate.
	 *
	 * @example
	 * ComponentView.prototype.render = function () {
	 *     ...
	 *     throttle.createOrUpdate(
	 *         this,
	 *         '_dispatchAction',
	 *         this.model.get('throttle'),
	 *         'fixRate'
	 *     );
	 * };
	 * ComponentView.prototype.remove = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 * ComponentView.prototype.dispose = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 * @param {number} [rate]
	 * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
	 * @return {Function} throttled function.
	 */
	lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {
	    var fn = obj[fnAttr];

	    if (!fn) {
	        return;
	    }

	    var originFn = fn[ORIGIN_METHOD] || fn;
	    var lastThrottleType = fn[THROTTLE_TYPE];
	    var lastRate = fn[RATE];

	    if (lastRate !== rate || lastThrottleType !== throttleType) {
	        if (rate == null || !throttleType) {
	            return obj[fnAttr] = originFn;
	        }

	        fn = obj[fnAttr] = lib.throttle(originFn, rate, throttleType === 'debounce');
	        fn[ORIGIN_METHOD] = originFn;
	        fn[THROTTLE_TYPE] = throttleType;
	        fn[RATE] = rate;
	    }

	    return fn;
	};

	/**
	 * Clear throttle. Example see throttle.createOrUpdate.
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 */
	lib.clear = function (obj, fnAttr) {
	    var fn = obj[fnAttr];
	    if (fn && fn[ORIGIN_METHOD]) {
	        obj[fnAttr] = fn[ORIGIN_METHOD];
	    }
	};

	module.exports = lib;

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*!
	 * ZRender, a high performance 2d drawing library.
	 *
	 * Copyright (c) 2013, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	 */
	// Global defines

	var guid = __webpack_require__(532);
	var env = __webpack_require__(502);
	var zrUtil = __webpack_require__(504);

	var Handler = __webpack_require__(583);
	var Storage = __webpack_require__(585);
	var Animation = __webpack_require__(587);
	var HandlerProxy = __webpack_require__(590);

	var useVML = !env.canvasSupported;

	var painterCtors = {
	    canvas: __webpack_require__(592)
	};

	var instances = {}; // ZRender实例map索引

	var zrender = {};

	/**
	 * @type {string}
	 */
	zrender.version = '3.3.0';

	/**
	 * Initializing a zrender instance
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @return {module:zrender/ZRender}
	 */
	zrender.init = function (dom, opts) {
	    var zr = new ZRender(guid(), dom, opts);
	    instances[zr.id] = zr;
	    return zr;
	};

	/**
	 * Dispose zrender instance
	 * @param {module:zrender/ZRender} zr
	 */
	zrender.dispose = function (zr) {
	    if (zr) {
	        zr.dispose();
	    } else {
	        for (var key in instances) {
	            if (instances.hasOwnProperty(key)) {
	                instances[key].dispose();
	            }
	        }
	        instances = {};
	    }

	    return zrender;
	};

	/**
	 * Get zrender instance by id
	 * @param {string} id zrender instance id
	 * @return {module:zrender/ZRender}
	 */
	zrender.getInstance = function (id) {
	    return instances[id];
	};

	zrender.registerPainter = function (name, Ctor) {
	    painterCtors[name] = Ctor;
	};

	function delInstance(id) {
	    delete instances[id];
	}

	/**
	 * @module zrender/ZRender
	 */
	/**
	 * @constructor
	 * @alias module:zrender/ZRender
	 * @param {string} id
	 * @param {HTMLDomElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 */
	var ZRender = function ZRender(id, dom, opts) {

	    opts = opts || {};

	    /**
	     * @type {HTMLDomElement}
	     */
	    this.dom = dom;

	    /**
	     * @type {string}
	     */
	    this.id = id;

	    var self = this;
	    var storage = new Storage();

	    var rendererType = opts.renderer;
	    if (useVML) {
	        if (!painterCtors.vml) {
	            throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	        }
	        rendererType = 'vml';
	    } else if (!rendererType || !painterCtors[rendererType]) {
	        rendererType = 'canvas';
	    }
	    var painter = new painterCtors[rendererType](dom, storage, opts);

	    this.storage = storage;
	    this.painter = painter;

	    var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;
	    this.handler = new Handler(storage, painter, handerProxy, painter.root);

	    /**
	     * @type {module:zrender/animation/Animation}
	     */
	    this.animation = new Animation({
	        stage: {
	            update: zrUtil.bind(this.flush, this)
	        }
	    });
	    this.animation.start();

	    /**
	     * @type {boolean}
	     * @private
	     */
	    this._needsRefresh;

	    // 修改 storage.delFromMap, 每次删除元素之前删除动画
	    // FIXME 有点ugly
	    var oldDelFromMap = storage.delFromMap;
	    var oldAddToMap = storage.addToMap;

	    storage.delFromMap = function (elId) {
	        var el = storage.get(elId);

	        oldDelFromMap.call(storage, elId);

	        el && el.removeSelfFromZr(self);
	    };

	    storage.addToMap = function (el) {
	        oldAddToMap.call(storage, el);

	        el.addSelfToZr(self);
	    };
	};

	ZRender.prototype = {

	    constructor: ZRender,
	    /**
	     * 获取实例唯一标识
	     * @return {string}
	     */
	    getId: function getId() {
	        return this.id;
	    },

	    /**
	     * 添加元素
	     * @param  {module:zrender/Element} el
	     */
	    add: function add(el) {
	        this.storage.addRoot(el);
	        this._needsRefresh = true;
	    },

	    /**
	     * 删除元素
	     * @param  {module:zrender/Element} el
	     */
	    remove: function remove(el) {
	        this.storage.delRoot(el);
	        this._needsRefresh = true;
	    },

	    /**
	     * Change configuration of layer
	     * @param {string} zLevel
	     * @param {Object} config
	     * @param {string} [config.clearColor=0] Clear color
	     * @param {string} [config.motionBlur=false] If enable motion blur
	     * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
	    */
	    configLayer: function configLayer(zLevel, config) {
	        this.painter.configLayer(zLevel, config);
	        this._needsRefresh = true;
	    },

	    /**
	     * Repaint the canvas immediately
	     */
	    refreshImmediately: function refreshImmediately() {
	        // Clear needsRefresh ahead to avoid something wrong happens in refresh
	        // Or it will cause zrender refreshes again and again.
	        this._needsRefresh = false;
	        this.painter.refresh();
	        /**
	         * Avoid trigger zr.refresh in Element#beforeUpdate hook
	         */
	        this._needsRefresh = false;
	    },

	    /**
	     * Mark and repaint the canvas in the next frame of browser
	     */
	    refresh: function refresh() {
	        this._needsRefresh = true;
	    },

	    /**
	     * Perform all refresh
	     */
	    flush: function flush() {
	        if (this._needsRefresh) {
	            this.refreshImmediately();
	        }
	        if (this._needsRefreshHover) {
	            this.refreshHoverImmediately();
	        }
	    },

	    /**
	     * Add element to hover layer
	     * @param  {module:zrender/Element} el
	     * @param {Object} style
	     */
	    addHover: function addHover(el, style) {
	        if (this.painter.addHover) {
	            this.painter.addHover(el, style);
	            this.refreshHover();
	        }
	    },

	    /**
	     * Add element from hover layer
	     * @param  {module:zrender/Element} el
	     */
	    removeHover: function removeHover(el) {
	        if (this.painter.removeHover) {
	            this.painter.removeHover(el);
	            this.refreshHover();
	        }
	    },

	    /**
	     * Clear all hover elements in hover layer
	     * @param  {module:zrender/Element} el
	     */
	    clearHover: function clearHover() {
	        if (this.painter.clearHover) {
	            this.painter.clearHover();
	            this.refreshHover();
	        }
	    },

	    /**
	     * Refresh hover in next frame
	     */
	    refreshHover: function refreshHover() {
	        this._needsRefreshHover = true;
	    },

	    /**
	     * Refresh hover immediately
	     */
	    refreshHoverImmediately: function refreshHoverImmediately() {
	        this._needsRefreshHover = false;
	        this.painter.refreshHover && this.painter.refreshHover();
	    },

	    /**
	     * Resize the canvas.
	     * Should be invoked when container size is changed
	     * @param {Object} [opts]
	     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	     */
	    resize: function resize(opts) {
	        opts = opts || {};
	        this.painter.resize(opts.width, opts.height);
	        this.handler.resize();
	    },

	    /**
	     * Stop and clear all animation immediately
	     */
	    clearAnimation: function clearAnimation() {
	        this.animation.clear();
	    },

	    /**
	     * Get container width
	     */
	    getWidth: function getWidth() {
	        return this.painter.getWidth();
	    },

	    /**
	     * Get container height
	     */
	    getHeight: function getHeight() {
	        return this.painter.getHeight();
	    },

	    /**
	     * Export the canvas as Base64 URL
	     * @param {string} type
	     * @param {string} [backgroundColor='#fff']
	     * @return {string} Base64 URL
	     */
	    // toDataURL: function(type, backgroundColor) {
	    //     return this.painter.getRenderedCanvas({
	    //         backgroundColor: backgroundColor
	    //     }).toDataURL(type);
	    // },

	    /**
	     * Converting a path to image.
	     * It has much better performance of drawing image rather than drawing a vector path.
	     * @param {module:zrender/graphic/Path} e
	     * @param {number} width
	     * @param {number} height
	     */
	    pathToImage: function pathToImage(e, width, height) {
	        var id = guid();
	        return this.painter.pathToImage(id, e, width, height);
	    },

	    /**
	     * Set default cursor
	     * @param {string} [cursorStyle='default'] 例如 crosshair
	     */
	    setCursorStyle: function setCursorStyle(cursorStyle) {
	        this.handler.setCursorStyle(cursorStyle);
	    },

	    /**
	     * Bind event
	     *
	     * @param {string} eventName Event name
	     * @param {Function} eventHandler Handler function
	     * @param {Object} [context] Context object
	     */
	    on: function on(eventName, eventHandler, context) {
	        this.handler.on(eventName, eventHandler, context);
	    },

	    /**
	     * Unbind event
	     * @param {string} eventName Event name
	     * @param {Function} [eventHandler] Handler function
	     */
	    off: function off(eventName, eventHandler) {
	        this.handler.off(eventName, eventHandler);
	    },

	    /**
	     * Trigger event manually
	     *
	     * @param {string} eventName Event name
	     * @param {event=} event Event object
	     */
	    trigger: function trigger(eventName, event) {
	        this.handler.trigger(eventName, event);
	    },

	    /**
	     * Clear all objects and the canvas.
	     */
	    clear: function clear() {
	        this.storage.delRoot();
	        this.painter.clear();
	    },

	    /**
	     * Dispose self.
	     */
	    dispose: function dispose() {
	        this.animation.stop();

	        this.clear();
	        this.storage.dispose();
	        this.painter.dispose();
	        this.handler.dispose();

	        this.animation = this.storage = this.painter = this.handler = null;

	        delInstance(this.id);
	    }
	};

	module.exports = zrender;

/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Handler
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (shenyi.914@gmail.com)
	 */

	var util = __webpack_require__(504);
	var Draggable = __webpack_require__(584);

	var Eventful = __webpack_require__(533);

	function makeEventPacket(eveType, target, event) {
	    return {
	        type: eveType,
	        event: event,
	        target: target,
	        cancelBubble: false,
	        offsetX: event.zrX,
	        offsetY: event.zrY,
	        gestureEvent: event.gestureEvent,
	        pinchX: event.pinchX,
	        pinchY: event.pinchY,
	        pinchScale: event.pinchScale,
	        wheelDelta: event.zrDelta,
	        zrByTouch: event.zrByTouch
	    };
	}

	function EmptyProxy() {}
	EmptyProxy.prototype.dispose = function () {};

	var handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
	/**
	 * @alias module:zrender/Handler
	 * @constructor
	 * @extends module:zrender/mixin/Eventful
	 * @param {module:zrender/Storage} storage Storage instance.
	 * @param {module:zrender/Painter} painter Painter instance.
	 * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
	 * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
	 */
	var Handler = function Handler(storage, painter, proxy, painterRoot) {
	    Eventful.call(this);

	    this.storage = storage;

	    this.painter = painter;

	    this.painterRoot = painterRoot;

	    proxy = proxy || new EmptyProxy();

	    /**
	     * Proxy of event. can be Dom, WebGLSurface, etc.
	     */
	    this.proxy = proxy;

	    // Attach handler
	    proxy.handler = this;

	    /**
	     * @private
	     * @type {boolean}
	     */
	    this._hovered;

	    /**
	     * @private
	     * @type {Date}
	     */
	    this._lastTouchMoment;

	    /**
	     * @private
	     * @type {number}
	     */
	    this._lastX;

	    /**
	     * @private
	     * @type {number}
	     */
	    this._lastY;

	    Draggable.call(this);

	    util.each(handlerNames, function (name) {
	        proxy.on && proxy.on(name, this[name], this);
	    }, this);
	};

	Handler.prototype = {

	    constructor: Handler,

	    mousemove: function mousemove(event) {
	        var x = event.zrX;
	        var y = event.zrY;

	        var hovered = this.findHover(x, y, null);
	        var lastHovered = this._hovered;
	        var proxy = this.proxy;

	        this._hovered = hovered;

	        proxy.setCursor && proxy.setCursor(hovered ? hovered.cursor : 'default');

	        // Mouse out on previous hovered element
	        if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {
	            this.dispatchToElement(lastHovered, 'mouseout', event);
	        }

	        // Mouse moving on one element
	        this.dispatchToElement(hovered, 'mousemove', event);

	        // Mouse over on a new element
	        if (hovered && hovered !== lastHovered) {
	            this.dispatchToElement(hovered, 'mouseover', event);
	        }
	    },

	    mouseout: function mouseout(event) {
	        this.dispatchToElement(this._hovered, 'mouseout', event);

	        // There might be some doms created by upper layer application
	        // at the same level of painter.getViewportRoot() (e.g., tooltip
	        // dom created by echarts), where 'globalout' event should not
	        // be triggered when mouse enters these doms. (But 'mouseout'
	        // should be triggered at the original hovered element as usual).
	        var element = event.toElement || event.relatedTarget;
	        var innerDom;
	        do {
	            element = element && element.parentNode;
	        } while (element && element.nodeType != 9 && !(innerDom = element === this.painterRoot));

	        !innerDom && this.trigger('globalout', { event: event });
	    },

	    /**
	     * Resize
	     */
	    resize: function resize(event) {
	        this._hovered = null;
	    },

	    /**
	     * Dispatch event
	     * @param {string} eventName
	     * @param {event=} eventArgs
	     */
	    dispatch: function dispatch(eventName, eventArgs) {
	        var handler = this[eventName];
	        handler && handler.call(this, eventArgs);
	    },

	    /**
	     * Dispose
	     */
	    dispose: function dispose() {

	        this.proxy.dispose();

	        this.storage = this.proxy = this.painter = null;
	    },

	    /**
	     * 设置默认的cursor style
	     * @param {string} [cursorStyle='default'] 例如 crosshair
	     */
	    setCursorStyle: function setCursorStyle(cursorStyle) {
	        var proxy = this.proxy;
	        proxy.setCursor && proxy.setCursor(cursorStyle);
	    },

	    /**
	     * 事件分发代理
	     *
	     * @private
	     * @param {Object} targetEl 目标图形元素
	     * @param {string} eventName 事件名称
	     * @param {Object} event 事件对象
	     */
	    dispatchToElement: function dispatchToElement(targetEl, eventName, event) {
	        var eventHandler = 'on' + eventName;
	        var eventPacket = makeEventPacket(eventName, targetEl, event);

	        var el = targetEl;

	        while (el) {
	            el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));

	            el.trigger(eventName, eventPacket);

	            el = el.parent;

	            if (eventPacket.cancelBubble) {
	                break;
	            }
	        }

	        if (!eventPacket.cancelBubble) {
	            // 冒泡到顶级 zrender 对象
	            this.trigger(eventName, eventPacket);
	            // 分发事件到用户自定义层
	            // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
	            this.painter && this.painter.eachOtherLayer(function (layer) {
	                if (typeof layer[eventHandler] == 'function') {
	                    layer[eventHandler].call(layer, eventPacket);
	                }
	                if (layer.trigger) {
	                    layer.trigger(eventName, eventPacket);
	                }
	            });
	        }
	    },

	    /**
	     * @private
	     * @param {number} x
	     * @param {number} y
	     * @param {module:zrender/graphic/Displayable} exclude
	     * @method
	     */
	    findHover: function findHover(x, y, exclude) {
	        var list = this.storage.getDisplayList();
	        for (var i = list.length - 1; i >= 0; i--) {
	            if (!list[i].silent && list[i] !== exclude
	            // getDisplayList may include ignored item in VML mode
	            && !list[i].ignore && isHover(list[i], x, y)) {
	                return list[i];
	            }
	        }
	    }
	};

	// Common handlers
	util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	    Handler.prototype[name] = function (event) {
	        // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	        var hovered = this.findHover(event.zrX, event.zrY, null);

	        if (name === 'mousedown') {
	            this._downel = hovered;
	            // In case click triggered before mouseup
	            this._upel = hovered;
	        } else if (name === 'mosueup') {
	            this._upel = hovered;
	        } else if (name === 'click') {
	            if (this._downel !== this._upel) {
	                return;
	            }
	        }

	        this.dispatchToElement(hovered, name, event);
	    };
	});

	function isHover(displayable, x, y) {
	    if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	        var el = displayable;
	        while (el) {
	            // If ancestor is silent or clipped by ancestor
	            if (el.silent || el.clipPath && !el.clipPath.contain(x, y)) {
	                return false;
	            }
	            el = el.parent;
	        }
	        return true;
	    }

	    return false;
	}

	util.mixin(Handler, Eventful);
	util.mixin(Handler, Draggable);

	module.exports = Handler;

/***/ },
/* 584 */
/***/ function(module, exports) {

	'use strict';

	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale

	function Draggable() {

	    this.on('mousedown', this._dragStart, this);
	    this.on('mousemove', this._drag, this);
	    this.on('mouseup', this._dragEnd, this);
	    this.on('globalout', this._dragEnd, this);
	    // this._dropTarget = null;
	    // this._draggingTarget = null;

	    // this._x = 0;
	    // this._y = 0;
	}

	Draggable.prototype = {

	    constructor: Draggable,

	    _dragStart: function _dragStart(e) {
	        var draggingTarget = e.target;
	        if (draggingTarget && draggingTarget.draggable) {
	            this._draggingTarget = draggingTarget;
	            draggingTarget.dragging = true;
	            this._x = e.offsetX;
	            this._y = e.offsetY;

	            this.dispatchToElement(draggingTarget, 'dragstart', e.event);
	        }
	    },

	    _drag: function _drag(e) {
	        var draggingTarget = this._draggingTarget;
	        if (draggingTarget) {

	            var x = e.offsetX;
	            var y = e.offsetY;

	            var dx = x - this._x;
	            var dy = y - this._y;
	            this._x = x;
	            this._y = y;

	            draggingTarget.drift(dx, dy, e);
	            this.dispatchToElement(draggingTarget, 'drag', e.event);

	            var dropTarget = this.findHover(x, y, draggingTarget);
	            var lastDropTarget = this._dropTarget;
	            this._dropTarget = dropTarget;

	            if (draggingTarget !== dropTarget) {
	                if (lastDropTarget && dropTarget !== lastDropTarget) {
	                    this.dispatchToElement(lastDropTarget, 'dragleave', e.event);
	                }
	                if (dropTarget && dropTarget !== lastDropTarget) {
	                    this.dispatchToElement(dropTarget, 'dragenter', e.event);
	                }
	            }
	        }
	    },

	    _dragEnd: function _dragEnd(e) {
	        var draggingTarget = this._draggingTarget;

	        if (draggingTarget) {
	            draggingTarget.dragging = false;
	        }

	        this.dispatchToElement(draggingTarget, 'dragend', e.event);

	        if (this._dropTarget) {
	            this.dispatchToElement(this._dropTarget, 'drop', e.event);
	        }

	        this._draggingTarget = null;
	        this._dropTarget = null;
	    }

	};

	module.exports = Draggable;

/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */

	var util = __webpack_require__(504);
	var env = __webpack_require__(502);

	var Group = __webpack_require__(530);

	// Use timsort because in most case elements are partially sorted
	// https://jsfiddle.net/pissang/jr4x7mdm/8/
	var timsort = __webpack_require__(586);

	function shapeCompareFunc(a, b) {
	    if (a.zlevel === b.zlevel) {
	        if (a.z === b.z) {
	            // if (a.z2 === b.z2) {
	            //     // FIXME Slow has renderidx compare
	            //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
	            //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
	            //     return a.__renderidx - b.__renderidx;
	            // }
	            return a.z2 - b.z2;
	        }
	        return a.z - b.z;
	    }
	    return a.zlevel - b.zlevel;
	}
	/**
	 * 内容仓库 (M)
	 * @alias module:zrender/Storage
	 * @constructor
	 */
	var Storage = function Storage() {
	    // 所有常规形状，id索引的map
	    this._elements = {};

	    this._roots = [];

	    this._displayList = [];

	    this._displayListLen = 0;
	};

	Storage.prototype = {

	    constructor: Storage,

	    /**
	     * @param  {Function} cb
	     *
	     */
	    traverse: function traverse(cb, context) {
	        for (var i = 0; i < this._roots.length; i++) {
	            this._roots[i].traverse(cb, context);
	        }
	    },

	    /**
	     * 返回所有图形的绘制队列
	     * @param {boolean} [update=false] 是否在返回前更新该数组
	     * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	     *
	     * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	     * @return {Array.<module:zrender/graphic/Displayable>}
	     */
	    getDisplayList: function getDisplayList(update, includeIgnore) {
	        includeIgnore = includeIgnore || false;
	        if (update) {
	            this.updateDisplayList(includeIgnore);
	        }
	        return this._displayList;
	    },

	    /**
	     * 更新图形的绘制队列。
	     * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	     * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	     * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	     */
	    updateDisplayList: function updateDisplayList(includeIgnore) {
	        this._displayListLen = 0;
	        var roots = this._roots;
	        var displayList = this._displayList;
	        for (var i = 0, len = roots.length; i < len; i++) {
	            this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	        }
	        displayList.length = this._displayListLen;

	        // for (var i = 0, len = displayList.length; i < len; i++) {
	        //     displayList[i].__renderidx = i;
	        // }

	        // displayList.sort(shapeCompareFunc);
	        env.canvasSupported && timsort(displayList, shapeCompareFunc);
	    },

	    _updateAndAddDisplayable: function _updateAndAddDisplayable(el, clipPaths, includeIgnore) {

	        if (el.ignore && !includeIgnore) {
	            return;
	        }

	        el.beforeUpdate();

	        if (el.__dirty) {

	            el.update();
	        }

	        el.afterUpdate();

	        var userSetClipPath = el.clipPath;
	        if (userSetClipPath) {

	            // FIXME 效率影响
	            if (clipPaths) {
	                clipPaths = clipPaths.slice();
	            } else {
	                clipPaths = [];
	            }

	            var currentClipPath = userSetClipPath;
	            var parentClipPath = el;
	            // Recursively add clip path
	            while (currentClipPath) {
	                // clipPath 的变换是基于使用这个 clipPath 的元素
	                currentClipPath.parent = parentClipPath;
	                currentClipPath.updateTransform();

	                clipPaths.push(currentClipPath);

	                parentClipPath = currentClipPath;
	                currentClipPath = currentClipPath.clipPath;
	            }
	        }

	        if (el.isGroup) {
	            var children = el._children;

	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];

	                // Force to mark as dirty if group is dirty
	                // FIXME __dirtyPath ?
	                if (el.__dirty) {
	                    child.__dirty = true;
	                }

	                this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	            }

	            // Mark group clean here
	            el.__dirty = false;
	        } else {
	            el.__clipPaths = clipPaths;

	            this._displayList[this._displayListLen++] = el;
	        }
	    },

	    /**
	     * 添加图形(Shape)或者组(Group)到根节点
	     * @param {module:zrender/Element} el
	     */
	    addRoot: function addRoot(el) {
	        // Element has been added
	        if (this._elements[el.id]) {
	            return;
	        }

	        if (el instanceof Group) {
	            el.addChildrenToStorage(this);
	        }

	        this.addToMap(el);
	        this._roots.push(el);
	    },

	    /**
	     * 删除指定的图形(Shape)或者组(Group)
	     * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
	     */
	    delRoot: function delRoot(elId) {
	        if (elId == null) {
	            // 不指定elId清空
	            for (var i = 0; i < this._roots.length; i++) {
	                var root = this._roots[i];
	                if (root instanceof Group) {
	                    root.delChildrenFromStorage(this);
	                }
	            }

	            this._elements = {};
	            this._roots = [];
	            this._displayList = [];
	            this._displayListLen = 0;

	            return;
	        }

	        if (elId instanceof Array) {
	            for (var i = 0, l = elId.length; i < l; i++) {
	                this.delRoot(elId[i]);
	            }
	            return;
	        }

	        var el;
	        if (typeof elId == 'string') {
	            el = this._elements[elId];
	        } else {
	            el = elId;
	        }

	        var idx = util.indexOf(this._roots, el);
	        if (idx >= 0) {
	            this.delFromMap(el.id);
	            this._roots.splice(idx, 1);
	            if (el instanceof Group) {
	                el.delChildrenFromStorage(this);
	            }
	        }
	    },

	    addToMap: function addToMap(el) {
	        if (el instanceof Group) {
	            el.__storage = this;
	        }
	        el.dirty(false);

	        this._elements[el.id] = el;

	        return this;
	    },

	    get: function get(elId) {
	        return this._elements[elId];
	    },

	    delFromMap: function delFromMap(elId) {
	        var elements = this._elements;
	        var el = elements[elId];
	        if (el) {
	            delete elements[elId];
	            if (el instanceof Group) {
	                el.__storage = null;
	            }
	        }

	        return this;
	    },

	    /**
	     * 清空并且释放Storage
	     */
	    dispose: function dispose() {
	        this._elements = this._renderList = this._roots = null;
	    },

	    displayableSortFunc: shapeCompareFunc
	};

	module.exports = Storage;

/***/ },
/* 586 */
/***/ function(module, exports) {

	"use strict";

	// https://github.com/mziccard/node-timsort

	var DEFAULT_MIN_MERGE = 32;

	var DEFAULT_MIN_GALLOPING = 7;

	var DEFAULT_TMP_STORAGE_LENGTH = 256;

	function minRunLength(n) {
	    var r = 0;

	    while (n >= DEFAULT_MIN_MERGE) {
	        r |= n & 1;
	        n >>= 1;
	    }

	    return n + r;
	}

	function makeAscendingRun(array, lo, hi, compare) {
	    var runHi = lo + 1;

	    if (runHi === hi) {
	        return 1;
	    }

	    if (compare(array[runHi++], array[lo]) < 0) {
	        while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	            runHi++;
	        }

	        reverseRun(array, lo, runHi);
	    } else {
	        while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	            runHi++;
	        }
	    }

	    return runHi - lo;
	}

	function reverseRun(array, lo, hi) {
	    hi--;

	    while (lo < hi) {
	        var t = array[lo];
	        array[lo++] = array[hi];
	        array[hi--] = t;
	    }
	}

	function binaryInsertionSort(array, lo, hi, start, compare) {
	    if (start === lo) {
	        start++;
	    }

	    for (; start < hi; start++) {
	        var pivot = array[start];

	        var left = lo;
	        var right = start;
	        var mid;

	        while (left < right) {
	            mid = left + right >>> 1;

	            if (compare(pivot, array[mid]) < 0) {
	                right = mid;
	            } else {
	                left = mid + 1;
	            }
	        }

	        var n = start - left;

	        switch (n) {
	            case 3:
	                array[left + 3] = array[left + 2];

	            case 2:
	                array[left + 2] = array[left + 1];

	            case 1:
	                array[left + 1] = array[left];
	                break;
	            default:
	                while (n > 0) {
	                    array[left + n] = array[left + n - 1];
	                    n--;
	                }
	        }

	        array[left] = pivot;
	    }
	}

	function gallopLeft(value, array, start, length, hint, compare) {
	    var lastOffset = 0;
	    var maxOffset = 0;
	    var offset = 1;

	    if (compare(value, array[start + hint]) > 0) {
	        maxOffset = length - hint;

	        while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	            lastOffset = offset;
	            offset = (offset << 1) + 1;

	            if (offset <= 0) {
	                offset = maxOffset;
	            }
	        }

	        if (offset > maxOffset) {
	            offset = maxOffset;
	        }

	        lastOffset += hint;
	        offset += hint;
	    } else {
	        maxOffset = hint + 1;
	        while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	            lastOffset = offset;
	            offset = (offset << 1) + 1;

	            if (offset <= 0) {
	                offset = maxOffset;
	            }
	        }
	        if (offset > maxOffset) {
	            offset = maxOffset;
	        }

	        var tmp = lastOffset;
	        lastOffset = hint - offset;
	        offset = hint - tmp;
	    }

	    lastOffset++;
	    while (lastOffset < offset) {
	        var m = lastOffset + (offset - lastOffset >>> 1);

	        if (compare(value, array[start + m]) > 0) {
	            lastOffset = m + 1;
	        } else {
	            offset = m;
	        }
	    }
	    return offset;
	}

	function gallopRight(value, array, start, length, hint, compare) {
	    var lastOffset = 0;
	    var maxOffset = 0;
	    var offset = 1;

	    if (compare(value, array[start + hint]) < 0) {
	        maxOffset = hint + 1;

	        while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	            lastOffset = offset;
	            offset = (offset << 1) + 1;

	            if (offset <= 0) {
	                offset = maxOffset;
	            }
	        }

	        if (offset > maxOffset) {
	            offset = maxOffset;
	        }

	        var tmp = lastOffset;
	        lastOffset = hint - offset;
	        offset = hint - tmp;
	    } else {
	        maxOffset = length - hint;

	        while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	            lastOffset = offset;
	            offset = (offset << 1) + 1;

	            if (offset <= 0) {
	                offset = maxOffset;
	            }
	        }

	        if (offset > maxOffset) {
	            offset = maxOffset;
	        }

	        lastOffset += hint;
	        offset += hint;
	    }

	    lastOffset++;

	    while (lastOffset < offset) {
	        var m = lastOffset + (offset - lastOffset >>> 1);

	        if (compare(value, array[start + m]) < 0) {
	            offset = m;
	        } else {
	            lastOffset = m + 1;
	        }
	    }

	    return offset;
	}

	function TimSort(array, compare) {
	    var minGallop = DEFAULT_MIN_GALLOPING;
	    var length = 0;
	    var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	    var stackLength = 0;
	    var runStart;
	    var runLength;
	    var stackSize = 0;

	    length = array.length;

	    if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	        tmpStorageLength = length >>> 1;
	    }

	    var tmp = [];

	    stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;

	    runStart = [];
	    runLength = [];

	    function pushRun(_runStart, _runLength) {
	        runStart[stackSize] = _runStart;
	        runLength[stackSize] = _runLength;
	        stackSize += 1;
	    }

	    function mergeRuns() {
	        while (stackSize > 1) {
	            var n = stackSize - 2;

	            if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
	                if (runLength[n - 1] < runLength[n + 1]) {
	                    n--;
	                }
	            } else if (runLength[n] > runLength[n + 1]) {
	                break;
	            }
	            mergeAt(n);
	        }
	    }

	    function forceMergeRuns() {
	        while (stackSize > 1) {
	            var n = stackSize - 2;

	            if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
	                n--;
	            }

	            mergeAt(n);
	        }
	    }

	    function mergeAt(i) {
	        var start1 = runStart[i];
	        var length1 = runLength[i];
	        var start2 = runStart[i + 1];
	        var length2 = runLength[i + 1];

	        runLength[i] = length1 + length2;

	        if (i === stackSize - 3) {
	            runStart[i + 1] = runStart[i + 2];
	            runLength[i + 1] = runLength[i + 2];
	        }

	        stackSize--;

	        var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	        start1 += k;
	        length1 -= k;

	        if (length1 === 0) {
	            return;
	        }

	        length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

	        if (length2 === 0) {
	            return;
	        }

	        if (length1 <= length2) {
	            mergeLow(start1, length1, start2, length2);
	        } else {
	            mergeHigh(start1, length1, start2, length2);
	        }
	    }

	    function mergeLow(start1, length1, start2, length2) {
	        var i = 0;

	        for (i = 0; i < length1; i++) {
	            tmp[i] = array[start1 + i];
	        }

	        var cursor1 = 0;
	        var cursor2 = start2;
	        var dest = start1;

	        array[dest++] = array[cursor2++];

	        if (--length2 === 0) {
	            for (i = 0; i < length1; i++) {
	                array[dest + i] = tmp[cursor1 + i];
	            }
	            return;
	        }

	        if (length1 === 1) {
	            for (i = 0; i < length2; i++) {
	                array[dest + i] = array[cursor2 + i];
	            }
	            array[dest + length2] = tmp[cursor1];
	            return;
	        }

	        var _minGallop = minGallop;
	        var count1, count2, exit;

	        while (1) {
	            count1 = 0;
	            count2 = 0;
	            exit = false;

	            do {
	                if (compare(array[cursor2], tmp[cursor1]) < 0) {
	                    array[dest++] = array[cursor2++];
	                    count2++;
	                    count1 = 0;

	                    if (--length2 === 0) {
	                        exit = true;
	                        break;
	                    }
	                } else {
	                    array[dest++] = tmp[cursor1++];
	                    count1++;
	                    count2 = 0;
	                    if (--length1 === 1) {
	                        exit = true;
	                        break;
	                    }
	                }
	            } while ((count1 | count2) < _minGallop);

	            if (exit) {
	                break;
	            }

	            do {
	                count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

	                if (count1 !== 0) {
	                    for (i = 0; i < count1; i++) {
	                        array[dest + i] = tmp[cursor1 + i];
	                    }

	                    dest += count1;
	                    cursor1 += count1;
	                    length1 -= count1;
	                    if (length1 <= 1) {
	                        exit = true;
	                        break;
	                    }
	                }

	                array[dest++] = array[cursor2++];

	                if (--length2 === 0) {
	                    exit = true;
	                    break;
	                }

	                count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

	                if (count2 !== 0) {
	                    for (i = 0; i < count2; i++) {
	                        array[dest + i] = array[cursor2 + i];
	                    }

	                    dest += count2;
	                    cursor2 += count2;
	                    length2 -= count2;

	                    if (length2 === 0) {
	                        exit = true;
	                        break;
	                    }
	                }
	                array[dest++] = tmp[cursor1++];

	                if (--length1 === 1) {
	                    exit = true;
	                    break;
	                }

	                _minGallop--;
	            } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	            if (exit) {
	                break;
	            }

	            if (_minGallop < 0) {
	                _minGallop = 0;
	            }

	            _minGallop += 2;
	        }

	        minGallop = _minGallop;

	        minGallop < 1 && (minGallop = 1);

	        if (length1 === 1) {
	            for (i = 0; i < length2; i++) {
	                array[dest + i] = array[cursor2 + i];
	            }
	            array[dest + length2] = tmp[cursor1];
	        } else if (length1 === 0) {
	            throw new Error();
	            // throw new Error('mergeLow preconditions were not respected');
	        } else {
	            for (i = 0; i < length1; i++) {
	                array[dest + i] = tmp[cursor1 + i];
	            }
	        }
	    }

	    function mergeHigh(start1, length1, start2, length2) {
	        var i = 0;

	        for (i = 0; i < length2; i++) {
	            tmp[i] = array[start2 + i];
	        }

	        var cursor1 = start1 + length1 - 1;
	        var cursor2 = length2 - 1;
	        var dest = start2 + length2 - 1;
	        var customCursor = 0;
	        var customDest = 0;

	        array[dest--] = array[cursor1--];

	        if (--length1 === 0) {
	            customCursor = dest - (length2 - 1);

	            for (i = 0; i < length2; i++) {
	                array[customCursor + i] = tmp[i];
	            }

	            return;
	        }

	        if (length2 === 1) {
	            dest -= length1;
	            cursor1 -= length1;
	            customDest = dest + 1;
	            customCursor = cursor1 + 1;

	            for (i = length1 - 1; i >= 0; i--) {
	                array[customDest + i] = array[customCursor + i];
	            }

	            array[dest] = tmp[cursor2];
	            return;
	        }

	        var _minGallop = minGallop;

	        while (true) {
	            var count1 = 0;
	            var count2 = 0;
	            var exit = false;

	            do {
	                if (compare(tmp[cursor2], array[cursor1]) < 0) {
	                    array[dest--] = array[cursor1--];
	                    count1++;
	                    count2 = 0;
	                    if (--length1 === 0) {
	                        exit = true;
	                        break;
	                    }
	                } else {
	                    array[dest--] = tmp[cursor2--];
	                    count2++;
	                    count1 = 0;
	                    if (--length2 === 1) {
	                        exit = true;
	                        break;
	                    }
	                }
	            } while ((count1 | count2) < _minGallop);

	            if (exit) {
	                break;
	            }

	            do {
	                count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

	                if (count1 !== 0) {
	                    dest -= count1;
	                    cursor1 -= count1;
	                    length1 -= count1;
	                    customDest = dest + 1;
	                    customCursor = cursor1 + 1;

	                    for (i = count1 - 1; i >= 0; i--) {
	                        array[customDest + i] = array[customCursor + i];
	                    }

	                    if (length1 === 0) {
	                        exit = true;
	                        break;
	                    }
	                }

	                array[dest--] = tmp[cursor2--];

	                if (--length2 === 1) {
	                    exit = true;
	                    break;
	                }

	                count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

	                if (count2 !== 0) {
	                    dest -= count2;
	                    cursor2 -= count2;
	                    length2 -= count2;
	                    customDest = dest + 1;
	                    customCursor = cursor2 + 1;

	                    for (i = 0; i < count2; i++) {
	                        array[customDest + i] = tmp[customCursor + i];
	                    }

	                    if (length2 <= 1) {
	                        exit = true;
	                        break;
	                    }
	                }

	                array[dest--] = array[cursor1--];

	                if (--length1 === 0) {
	                    exit = true;
	                    break;
	                }

	                _minGallop--;
	            } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	            if (exit) {
	                break;
	            }

	            if (_minGallop < 0) {
	                _minGallop = 0;
	            }

	            _minGallop += 2;
	        }

	        minGallop = _minGallop;

	        if (minGallop < 1) {
	            minGallop = 1;
	        }

	        if (length2 === 1) {
	            dest -= length1;
	            cursor1 -= length1;
	            customDest = dest + 1;
	            customCursor = cursor1 + 1;

	            for (i = length1 - 1; i >= 0; i--) {
	                array[customDest + i] = array[customCursor + i];
	            }

	            array[dest] = tmp[cursor2];
	        } else if (length2 === 0) {
	            throw new Error();
	            // throw new Error('mergeHigh preconditions were not respected');
	        } else {
	            customCursor = dest - (length2 - 1);
	            for (i = 0; i < length2; i++) {
	                array[customCursor + i] = tmp[i];
	            }
	        }
	    }

	    this.mergeRuns = mergeRuns;
	    this.forceMergeRuns = forceMergeRuns;
	    this.pushRun = pushRun;
	}

	function sort(array, compare, lo, hi) {
	    if (!lo) {
	        lo = 0;
	    }
	    if (!hi) {
	        hi = array.length;
	    }

	    var remaining = hi - lo;

	    if (remaining < 2) {
	        return;
	    }

	    var runLength = 0;

	    if (remaining < DEFAULT_MIN_MERGE) {
	        runLength = makeAscendingRun(array, lo, hi, compare);
	        binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	        return;
	    }

	    var ts = new TimSort(array, compare);

	    var minRun = minRunLength(remaining);

	    do {
	        runLength = makeAscendingRun(array, lo, hi, compare);
	        if (runLength < minRun) {
	            var force = remaining;
	            if (force > minRun) {
	                force = minRun;
	            }

	            binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	            runLength = force;
	        }

	        ts.pushRun(lo, runLength);
	        ts.mergeRuns();

	        remaining -= runLength;
	        lo += runLength;
	    } while (remaining !== 0);

	    ts.forceMergeRuns();
	}

	module.exports = sort;

/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236


	var util = __webpack_require__(504);
	var Dispatcher = __webpack_require__(588).Dispatcher;

	var requestAnimationFrame = __webpack_require__(589);

	var Animator = __webpack_require__(536);
	/**
	 * @typedef {Object} IZRenderStage
	 * @property {Function} update
	 */

	/**
	 * @alias module:zrender/animation/Animation
	 * @constructor
	 * @param {Object} [options]
	 * @param {Function} [options.onframe]
	 * @param {IZRenderStage} [options.stage]
	 * @example
	 *     var animation = new Animation();
	 *     var obj = {
	 *         x: 100,
	 *         y: 100
	 *     };
	 *     animation.animate(node.position)
	 *         .when(1000, {
	 *             x: 500,
	 *             y: 500
	 *         })
	 *         .when(2000, {
	 *             x: 100,
	 *             y: 100
	 *         })
	 *         .start('spline');
	 */
	var Animation = function Animation(options) {

	    options = options || {};

	    this.stage = options.stage || {};

	    this.onframe = options.onframe || function () {};

	    // private properties
	    this._clips = [];

	    this._running = false;

	    this._time;

	    this._pausedTime;

	    this._pauseStart;

	    this._paused = false;

	    Dispatcher.call(this);
	};

	Animation.prototype = {

	    constructor: Animation,
	    /**
	     * 添加 clip
	     * @param {module:zrender/animation/Clip} clip
	     */
	    addClip: function addClip(clip) {
	        this._clips.push(clip);
	    },
	    /**
	     * 添加 animator
	     * @param {module:zrender/animation/Animator} animator
	     */
	    addAnimator: function addAnimator(animator) {
	        animator.animation = this;
	        var clips = animator.getClips();
	        for (var i = 0; i < clips.length; i++) {
	            this.addClip(clips[i]);
	        }
	    },
	    /**
	     * 删除动画片段
	     * @param {module:zrender/animation/Clip} clip
	     */
	    removeClip: function removeClip(clip) {
	        var idx = util.indexOf(this._clips, clip);
	        if (idx >= 0) {
	            this._clips.splice(idx, 1);
	        }
	    },

	    /**
	     * 删除动画片段
	     * @param {module:zrender/animation/Animator} animator
	     */
	    removeAnimator: function removeAnimator(animator) {
	        var clips = animator.getClips();
	        for (var i = 0; i < clips.length; i++) {
	            this.removeClip(clips[i]);
	        }
	        animator.animation = null;
	    },

	    _update: function _update() {

	        var time = new Date().getTime() - this._pausedTime;
	        var delta = time - this._time;
	        var clips = this._clips;
	        var len = clips.length;

	        var deferredEvents = [];
	        var deferredClips = [];
	        for (var i = 0; i < len; i++) {
	            var clip = clips[i];
	            var e = clip.step(time);
	            // Throw out the events need to be called after
	            // stage.update, like destroy
	            if (e) {
	                deferredEvents.push(e);
	                deferredClips.push(clip);
	            }
	        }

	        // Remove the finished clip
	        for (var i = 0; i < len;) {
	            if (clips[i]._needsRemove) {
	                clips[i] = clips[len - 1];
	                clips.pop();
	                len--;
	            } else {
	                i++;
	            }
	        }

	        len = deferredEvents.length;
	        for (var i = 0; i < len; i++) {
	            deferredClips[i].fire(deferredEvents[i]);
	        }

	        this._time = time;

	        this.onframe(delta);

	        this.trigger('frame', delta);

	        if (this.stage.update) {
	            this.stage.update();
	        }
	    },

	    _startLoop: function _startLoop() {
	        var self = this;

	        this._running = true;

	        function step() {
	            if (self._running) {

	                requestAnimationFrame(step);

	                !self._paused && self._update();
	            }
	        }

	        requestAnimationFrame(step);
	    },

	    /**
	     * 开始运行动画
	     */
	    start: function start() {

	        this._time = new Date().getTime();
	        this._pausedTime = 0;

	        this._startLoop();
	    },
	    /**
	     * 停止运行动画
	     */
	    stop: function stop() {
	        this._running = false;
	    },

	    /**
	     * Pause
	     */
	    pause: function pause() {
	        if (!this._paused) {
	            this._pauseStart = new Date().getTime();
	            this._paused = true;
	        }
	    },

	    /**
	     * Resume
	     */
	    resume: function resume() {
	        if (this._paused) {
	            this._pausedTime += new Date().getTime() - this._pauseStart;
	            this._paused = false;
	        }
	    },

	    /**
	     * 清除所有动画片段
	     */
	    clear: function clear() {
	        this._clips = [];
	    },
	    /**
	     * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	     * @param  {Object} target
	     * @param  {Object} options
	     * @param  {boolean} [options.loop=false] 是否循环播放动画
	     * @param  {Function} [options.getter=null]
	     *         如果指定getter函数，会通过getter函数取属性值
	     * @param  {Function} [options.setter=null]
	     *         如果指定setter函数，会通过setter函数设置属性值
	     * @return {module:zrender/animation/Animation~Animator}
	     */
	    // TODO Gap
	    animate: function animate(target, options) {
	        options = options || {};

	        var animator = new Animator(target, options.loop, options.getter, options.setter);

	        this.addAnimator(animator);

	        return animator;
	    }
	};

	util.mixin(Animation, Dispatcher);

	module.exports = Animation;

/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */

	var Eventful = __webpack_require__(533);
	var env = __webpack_require__(502);

	var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;

	function getBoundingClientRect(el) {
	    // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	    return el.getBoundingClientRect ? el.getBoundingClientRect() : { left: 0, top: 0 };
	}

	// `calculate` is optional, default false
	function clientToLocal(el, e, out, calculate) {
	    out = out || {};

	    // According to the W3C Working Draft, offsetX and offsetY should be relative
	    // to the padding edge of the target element. The only browser using this convention
	    // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
	    // not support the properties.
	    // (see http://www.jacklmoore.com/notes/mouse-position/)
	    // In zr painter.dom, padding edge equals to border edge.

	    // FIXME
	    // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and
	    // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y
	    // is too complex. So css-transfrom dont support in this case temporarily.
	    if (calculate || !env.canvasSupported) {
	        defaultGetZrXY(el, e, out);
	    }
	    // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
	    // ancestor element, so we should make sure el is positioned (e.g., not position:static).
	    // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
	    // zoom-factor, overflow / opacity layers, transforms ...)
	    // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
	    // <https://bugs.jquery.com/ticket/8523#comment:14>
	    // BTW3, In ff, offsetX/offsetY is always 0.
	    else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
	            out.zrX = e.layerX;
	            out.zrY = e.layerY;
	        }
	        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
	        else if (e.offsetX != null) {
	                out.zrX = e.offsetX;
	                out.zrY = e.offsetY;
	            }
	            // For some other device, e.g., IOS safari.
	            else {
	                    defaultGetZrXY(el, e, out);
	                }

	    return out;
	}

	function defaultGetZrXY(el, e, out) {
	    // This well-known method below does not support css transform.
	    var box = getBoundingClientRect(el);
	    out.zrX = e.clientX - box.left;
	    out.zrY = e.clientY - box.top;
	}

	/**
	 * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.
	 * `calculate` is optional, default false.
	 */
	function normalizeEvent(el, e, calculate) {

	    e = e || window.event;

	    if (e.zrX != null) {
	        return e;
	    }

	    var eventType = e.type;
	    var isTouch = eventType && eventType.indexOf('touch') >= 0;

	    if (!isTouch) {
	        clientToLocal(el, e, e, calculate);
	        e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	    } else {
	        var touch = eventType != 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
	        touch && clientToLocal(el, touch, e, calculate);
	    }

	    return e;
	}

	function addEventListener(el, name, handler) {
	    if (isDomLevel2) {
	        el.addEventListener(name, handler);
	    } else {
	        el.attachEvent('on' + name, handler);
	    }
	}

	function removeEventListener(el, name, handler) {
	    if (isDomLevel2) {
	        el.removeEventListener(name, handler);
	    } else {
	        el.detachEvent('on' + name, handler);
	    }
	}

	/**
	 * preventDefault and stopPropagation.
	 * Notice: do not do that in zrender. Upper application
	 * do that if necessary.
	 *
	 * @memberOf module:zrender/core/event
	 * @method
	 * @param {Event} e : event对象
	 */
	var stop = isDomLevel2 ? function (e) {
	    e.preventDefault();
	    e.stopPropagation();
	    e.cancelBubble = true;
	} : function (e) {
	    e.returnValue = false;
	    e.cancelBubble = true;
	};

	module.exports = {
	    clientToLocal: clientToLocal,
	    normalizeEvent: normalizeEvent,
	    addEventListener: addEventListener,
	    removeEventListener: removeEventListener,

	    stop: stop,
	    // 做向上兼容
	    Dispatcher: Eventful
	};

/***/ },
/* 589 */
/***/ function(module, exports) {

	'use strict';

	module.exports = typeof window !== 'undefined' && (window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
	    setTimeout(func, 16);
	};

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var eventTool = __webpack_require__(588);
	var zrUtil = __webpack_require__(504);
	var Eventful = __webpack_require__(533);
	var env = __webpack_require__(502);
	var GestureMgr = __webpack_require__(591);

	var addEventListener = eventTool.addEventListener;
	var removeEventListener = eventTool.removeEventListener;
	var normalizeEvent = eventTool.normalizeEvent;

	var TOUCH_CLICK_DELAY = 300;

	var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];

	var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];

	var pointerEventNames = {
	    pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1
	};

	var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {
	    var nm = name.replace('mouse', 'pointer');
	    return pointerEventNames[nm] ? nm : name;
	});

	function eventNameFix(name) {
	    return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;
	}

	function processGesture(proxy, event, stage) {
	    var gestureMgr = proxy._gestureMgr;

	    stage === 'start' && gestureMgr.clear();

	    var gestureInfo = gestureMgr.recognize(event, proxy.handler.findHover(event.zrX, event.zrY, null), proxy.dom);

	    stage === 'end' && gestureMgr.clear();

	    // Do not do any preventDefault here. Upper application do that if necessary.
	    if (gestureInfo) {
	        var type = gestureInfo.type;
	        event.gestureEvent = type;

	        proxy.handler.dispatchToElement(gestureInfo.target, type, gestureInfo.event);
	    }
	}

	// function onMSGestureChange(proxy, event) {
	//     if (event.translationX || event.translationY) {
	//         // mousemove is carried by MSGesture to reduce the sensitivity.
	//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
	//     }
	//     if (event.scale !== 1) {
	//         event.pinchX = event.offsetX;
	//         event.pinchY = event.offsetY;
	//         event.pinchScale = event.scale;
	//         proxy.handler.dispatchToElement(event.target, 'pinch', event);
	//     }
	// }

	/**
	 * Prevent mouse event from being dispatched after Touch Events action
	 * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	 * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	 * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	 * Result: Blocking Mouse Events for 700ms.
	 */
	function setTouchTimer(instance) {
	    instance._touching = true;
	    clearTimeout(instance._touchTimer);
	    instance._touchTimer = setTimeout(function () {
	        instance._touching = false;
	    }, 700);
	}

	var domHandlers = {
	    /**
	     * Mouse move handler
	     * @inner
	     * @param {Event} event
	     */
	    mousemove: function mousemove(event) {
	        event = normalizeEvent(this.dom, event);

	        this.trigger('mousemove', event);
	    },

	    /**
	     * Mouse out handler
	     * @inner
	     * @param {Event} event
	     */
	    mouseout: function mouseout(event) {
	        event = normalizeEvent(this.dom, event);

	        var element = event.toElement || event.relatedTarget;
	        if (element != this.dom) {
	            while (element && element.nodeType != 9) {
	                // 忽略包含在root中的dom引起的mouseOut
	                if (element === this.dom) {
	                    return;
	                }

	                element = element.parentNode;
	            }
	        }

	        this.trigger('mouseout', event);
	    },

	    /**
	     * Touch开始响应函数
	     * @inner
	     * @param {Event} event
	     */
	    touchstart: function touchstart(event) {
	        // Default mouse behaviour should not be disabled here.
	        // For example, page may needs to be slided.
	        event = normalizeEvent(this.dom, event);

	        // Mark touch, which is useful in distinguish touch and
	        // mouse event in upper applicatoin.
	        event.zrByTouch = true;

	        this._lastTouchMoment = new Date();

	        processGesture(this, event, 'start');

	        // In touch device, trigger `mousemove`(`mouseover`) should
	        // be triggered, and must before `mousedown` triggered.
	        domHandlers.mousemove.call(this, event);

	        domHandlers.mousedown.call(this, event);

	        setTouchTimer(this);
	    },

	    /**
	     * Touch移动响应函数
	     * @inner
	     * @param {Event} event
	     */
	    touchmove: function touchmove(event) {

	        event = normalizeEvent(this.dom, event);

	        // Mark touch, which is useful in distinguish touch and
	        // mouse event in upper applicatoin.
	        event.zrByTouch = true;

	        processGesture(this, event, 'change');

	        // Mouse move should always be triggered no matter whether
	        // there is gestrue event, because mouse move and pinch may
	        // be used at the same time.
	        domHandlers.mousemove.call(this, event);

	        setTouchTimer(this);
	    },

	    /**
	     * Touch结束响应函数
	     * @inner
	     * @param {Event} event
	     */
	    touchend: function touchend(event) {

	        event = normalizeEvent(this.dom, event);

	        // Mark touch, which is useful in distinguish touch and
	        // mouse event in upper applicatoin.
	        event.zrByTouch = true;

	        processGesture(this, event, 'end');

	        domHandlers.mouseup.call(this, event);

	        // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
	        // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
	        // we can conveniently implement "hover style" in both PC and touch device just
	        // by listening to `mouseover` to add "hover style" and listening to `mouseout`
	        // to remove "hover style" on an element, without any additional code for
	        // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
	        // style" will remain for user view)

	        // click event should always be triggered no matter whether
	        // there is gestrue event. System click can not be prevented.
	        if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	            domHandlers.click.call(this, event);
	        }

	        setTouchTimer(this);
	    },

	    pointerdown: function pointerdown(event) {
	        domHandlers.mousedown.call(this, event);

	        // if (useMSGuesture(this, event)) {
	        //     this._msGesture.addPointer(event.pointerId);
	        // }
	    },

	    pointermove: function pointermove(event) {
	        // FIXME
	        // pointermove is so sensitive that it always triggered when
	        // tap(click) on touch screen, which affect some judgement in
	        // upper application. So, we dont support mousemove on MS touch
	        // device yet.
	        if (!isPointerFromTouch(event)) {
	            domHandlers.mousemove.call(this, event);
	        }
	    },

	    pointerup: function pointerup(event) {
	        domHandlers.mouseup.call(this, event);
	    },

	    pointerout: function pointerout(event) {
	        // pointerout will be triggered when tap on touch screen
	        // (IE11+/Edge on MS Surface) after click event triggered,
	        // which is inconsistent with the mousout behavior we defined
	        // in touchend. So we unify them.
	        // (check domHandlers.touchend for detailed explanation)
	        if (!isPointerFromTouch(event)) {
	            domHandlers.mouseout.call(this, event);
	        }
	    }
	};

	function isPointerFromTouch(event) {
	    var pointerType = event.pointerType;
	    return pointerType === 'pen' || pointerType === 'touch';
	}

	// function useMSGuesture(handlerProxy, event) {
	//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
	// }

	// Common handlers
	zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	    domHandlers[name] = function (event) {
	        event = normalizeEvent(this.dom, event);
	        this.trigger(name, event);
	    };
	});

	/**
	 * 为控制类实例初始化dom 事件处理函数
	 *
	 * @inner
	 * @param {module:zrender/Handler} instance 控制类实例
	 */
	function initDomHandler(instance) {
	    zrUtil.each(touchHandlerNames, function (name) {
	        instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	    });

	    zrUtil.each(pointerHandlerNames, function (name) {
	        instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	    });

	    zrUtil.each(mouseHandlerNames, function (name) {
	        instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	    });

	    function makeMouseHandler(fn, instance) {
	        return function () {
	            if (instance._touching) {
	                return;
	            }
	            return fn.apply(instance, arguments);
	        };
	    }
	}

	function HandlerDomProxy(dom) {
	    Eventful.call(this);

	    this.dom = dom;

	    /**
	     * @private
	     * @type {boolean}
	     */
	    this._touching = false;

	    /**
	     * @private
	     * @type {number}
	     */
	    this._touchTimer;

	    /**
	     * @private
	     * @type {module:zrender/core/GestureMgr}
	     */
	    this._gestureMgr = new GestureMgr();

	    this._handlers = {};

	    initDomHandler(this);

	    if (env.pointerEventsSupported) {
	        // Only IE11+/Edge
	        // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
	        // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
	        // at the same time.
	        // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
	        // screen, which do not occurs in pointer event.
	        // So we use pointer event to both detect touch gesture and mouse behavior.
	        mountHandlers(pointerHandlerNames, this);

	        // FIXME
	        // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
	        // which does not prevent defuault behavior occasionally (which may cause view port
	        // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
	        // So we have to not to use MSGesture and not to support touchmove and pinch on MS
	        // touch screen. And we only support click behavior on MS touch screen now.

	        // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
	        // We dont support touch on IE on win7.
	        // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
	        // if (typeof MSGesture === 'function') {
	        //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
	        //     dom.addEventListener('MSGestureChange', onMSGestureChange);
	        // }
	    } else {
	        if (env.touchEventsSupported) {
	            mountHandlers(touchHandlerNames, this);
	            // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	            // addEventListener(root, 'mouseout', this._mouseoutHandler);
	        }

	        // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
	        // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	        // mouse event can not be handle in those devices.
	        // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
	        // mouseevent after touch event triggered, see `setTouchTimer`.
	        mountHandlers(mouseHandlerNames, this);
	    }

	    function mountHandlers(handlerNames, instance) {
	        zrUtil.each(handlerNames, function (name) {
	            addEventListener(dom, eventNameFix(name), instance._handlers[name]);
	        }, instance);
	    }
	}

	var handlerDomProxyProto = HandlerDomProxy.prototype;
	handlerDomProxyProto.dispose = function () {
	    var handlerNames = mouseHandlerNames.concat(touchHandlerNames);

	    for (var i = 0; i < handlerNames.length; i++) {
	        var name = handlerNames[i];
	        removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);
	    }
	};

	handlerDomProxyProto.setCursor = function (cursorStyle) {
	    this.dom.style.cursor = cursorStyle || 'default';
	};

	zrUtil.mixin(HandlerDomProxy, Eventful);

	module.exports = HandlerDomProxy;

/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Only implements needed gestures for mobile.
	 */

	var eventUtil = __webpack_require__(588);

	var GestureMgr = function GestureMgr() {

	    /**
	     * @private
	     * @type {Array.<Object>}
	     */
	    this._track = [];
	};

	GestureMgr.prototype = {

	    constructor: GestureMgr,

	    recognize: function recognize(event, target, root) {
	        this._doTrack(event, target, root);
	        return this._recognize(event);
	    },

	    clear: function clear() {
	        this._track.length = 0;
	        return this;
	    },

	    _doTrack: function _doTrack(event, target, root) {
	        var touches = event.touches;

	        if (!touches) {
	            return;
	        }

	        var trackItem = {
	            points: [],
	            touches: [],
	            target: target,
	            event: event
	        };

	        for (var i = 0, len = touches.length; i < len; i++) {
	            var touch = touches[i];
	            var pos = eventUtil.clientToLocal(root, touch, {});
	            trackItem.points.push([pos.zrX, pos.zrY]);
	            trackItem.touches.push(touch);
	        }

	        this._track.push(trackItem);
	    },

	    _recognize: function _recognize(event) {
	        for (var eventName in recognizers) {
	            if (recognizers.hasOwnProperty(eventName)) {
	                var gestureInfo = recognizers[eventName](this._track, event);
	                if (gestureInfo) {
	                    return gestureInfo;
	                }
	            }
	        }
	    }
	};

	function dist(pointPair) {
	    var dx = pointPair[1][0] - pointPair[0][0];
	    var dy = pointPair[1][1] - pointPair[0][1];

	    return Math.sqrt(dx * dx + dy * dy);
	}

	function center(pointPair) {
	    return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
	}

	var recognizers = {

	    pinch: function pinch(track, event) {
	        var trackLen = track.length;

	        if (!trackLen) {
	            return;
	        }

	        var pinchEnd = (track[trackLen - 1] || {}).points;
	        var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

	        if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
	            var pinchScale = dist(pinchEnd) / dist(pinchPre);
	            !isFinite(pinchScale) && (pinchScale = 1);

	            event.pinchScale = pinchScale;

	            var pinchCenter = center(pinchEnd);
	            event.pinchX = pinchCenter[0];
	            event.pinchY = pinchCenter[1];

	            return {
	                type: 'pinch',
	                target: track[0].target,
	                event: event
	            };
	        }
	    }

	    // Only pinch currently.
	};

	module.exports = GestureMgr;

/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Default canvas painter
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */

	var config = __webpack_require__(541);
	var util = __webpack_require__(504);
	var log = __webpack_require__(540);
	var BoundingRect = __webpack_require__(509);
	var timsort = __webpack_require__(586);

	var Layer = __webpack_require__(593);

	var requestAnimationFrame = __webpack_require__(589);

	// PENDIGN
	// Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.
	//
	// Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.
	var MAX_PROGRESSIVE_LAYER_NUMBER = 5;

	function parseInt10(val) {
	    return parseInt(val, 10);
	}

	function isLayerValid(layer) {
	    if (!layer) {
	        return false;
	    }

	    if (layer.isBuildin) {
	        return true;
	    }

	    if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
	        return false;
	    }

	    return true;
	}

	function preProcessLayer(layer) {
	    layer.__unusedCount++;
	}

	function postProcessLayer(layer) {
	    if (layer.__unusedCount == 1) {
	        layer.clear();
	    }
	}

	var tmpRect = new BoundingRect(0, 0, 0, 0);
	var viewRect = new BoundingRect(0, 0, 0, 0);
	function isDisplayableCulled(el, width, height) {
	    tmpRect.copy(el.getBoundingRect());
	    if (el.transform) {
	        tmpRect.applyTransform(el.transform);
	    }
	    viewRect.width = width;
	    viewRect.height = height;
	    return !tmpRect.intersect(viewRect);
	}

	function isClipPathChanged(clipPaths, prevClipPaths) {
	    if (clipPaths == prevClipPaths) {
	        // Can both be null or undefined
	        return false;
	    }

	    if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
	        return true;
	    }
	    for (var i = 0; i < clipPaths.length; i++) {
	        if (clipPaths[i] !== prevClipPaths[i]) {
	            return true;
	        }
	    }
	}

	function doClip(clipPaths, ctx) {
	    for (var i = 0; i < clipPaths.length; i++) {
	        var clipPath = clipPaths[i];
	        var path = clipPath.path;

	        clipPath.setTransform(ctx);
	        path.beginPath(ctx);
	        clipPath.buildPath(path, clipPath.shape);
	        ctx.clip();
	        // Transform back
	        clipPath.restoreTransform(ctx);
	    }
	}

	function createRoot(width, height) {
	    var domRoot = document.createElement('div');

	    // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	    domRoot.style.cssText = ['position:relative', 'overflow:hidden', 'width:' + width + 'px', 'height:' + height + 'px', 'padding:0', 'margin:0', 'border-width:0'].join(';') + ';';

	    return domRoot;
	}

	/**
	 * @alias module:zrender/Painter
	 * @constructor
	 * @param {HTMLElement} root 绘图容器
	 * @param {module:zrender/Storage} storage
	 * @param {Ojbect} opts
	 */
	var Painter = function Painter(root, storage, opts) {
	    // In node environment using node-canvas
	    var singleCanvas = !root.nodeName // In node ?
	    || root.nodeName.toUpperCase() === 'CANVAS';

	    this._opts = opts = util.extend({}, opts || {});

	    /**
	     * @type {number}
	     */
	    this.dpr = opts.devicePixelRatio || config.devicePixelRatio;
	    /**
	     * @type {boolean}
	     * @private
	     */
	    this._singleCanvas = singleCanvas;
	    /**
	     * 绘图容器
	     * @type {HTMLElement}
	     */
	    this.root = root;

	    var rootStyle = root.style;

	    if (rootStyle) {
	        rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	        rootStyle['-webkit-user-select'] = rootStyle['user-select'] = rootStyle['-webkit-touch-callout'] = 'none';

	        root.innerHTML = '';
	    }

	    /**
	     * @type {module:zrender/Storage}
	     */
	    this.storage = storage;

	    /**
	     * @type {Array.<number>}
	     * @private
	     */
	    var zlevelList = this._zlevelList = [];

	    /**
	     * @type {Object.<string, module:zrender/Layer>}
	     * @private
	     */
	    var layers = this._layers = {};

	    /**
	     * @type {Object.<string, Object>}
	     * @type {private}
	     */
	    this._layerConfig = {};

	    if (!singleCanvas) {
	        this._width = this._getSize(0);
	        this._height = this._getSize(1);

	        var domRoot = this._domRoot = createRoot(this._width, this._height);
	        root.appendChild(domRoot);
	    } else {
	        // Use canvas width and height directly
	        var width = root.width;
	        var height = root.height;
	        this._width = width;
	        this._height = height;

	        // Create layer if only one given canvas
	        // Device pixel ratio is fixed to 1 because given canvas has its specified width and height
	        var mainLayer = new Layer(root, this, 1);
	        mainLayer.initContext();
	        // FIXME Use canvas width and height
	        // mainLayer.resize(width, height);
	        layers[0] = mainLayer;
	        zlevelList.push(0);

	        this._domRoot = root;
	    }

	    this.pathToImage = this._createPathToImage();

	    // Layers for progressive rendering
	    this._progressiveLayers = [];

	    /**
	     * @type {module:zrender/Layer}
	     * @private
	     */
	    this._hoverlayer;

	    this._hoverElements = [];
	};

	Painter.prototype = {

	    constructor: Painter,

	    /**
	     * If painter use a single canvas
	     * @return {boolean}
	     */
	    isSingleCanvas: function isSingleCanvas() {
	        return this._singleCanvas;
	    },
	    /**
	     * @return {HTMLDivElement}
	     */
	    getViewportRoot: function getViewportRoot() {
	        return this._domRoot;
	    },

	    /**
	     * 刷新
	     * @param {boolean} [paintAll=false] 强制绘制所有displayable
	     */
	    refresh: function refresh(paintAll) {

	        var list = this.storage.getDisplayList(true);

	        var zlevelList = this._zlevelList;

	        this._paintList(list, paintAll);

	        // Paint custum layers
	        for (var i = 0; i < zlevelList.length; i++) {
	            var z = zlevelList[i];
	            var layer = this._layers[z];
	            if (!layer.isBuildin && layer.refresh) {
	                layer.refresh();
	            }
	        }

	        this.refreshHover();

	        if (this._progressiveLayers.length) {
	            this._startProgessive();
	        }

	        return this;
	    },

	    addHover: function addHover(el, hoverStyle) {
	        if (el.__hoverMir) {
	            return;
	        }
	        var elMirror = new el.constructor({
	            style: el.style,
	            shape: el.shape
	        });
	        elMirror.__from = el;
	        el.__hoverMir = elMirror;
	        elMirror.setStyle(hoverStyle);
	        this._hoverElements.push(elMirror);
	    },

	    removeHover: function removeHover(el) {
	        var elMirror = el.__hoverMir;
	        var hoverElements = this._hoverElements;
	        var idx = util.indexOf(hoverElements, elMirror);
	        if (idx >= 0) {
	            hoverElements.splice(idx, 1);
	        }
	        el.__hoverMir = null;
	    },

	    clearHover: function clearHover(el) {
	        var hoverElements = this._hoverElements;
	        for (var i = 0; i < hoverElements.length; i++) {
	            var from = hoverElements[i].__from;
	            if (from) {
	                from.__hoverMir = null;
	            }
	        }
	        hoverElements.length = 0;
	    },

	    refreshHover: function refreshHover() {
	        var hoverElements = this._hoverElements;
	        var len = hoverElements.length;
	        var hoverLayer = this._hoverlayer;
	        hoverLayer && hoverLayer.clear();

	        if (!len) {
	            return;
	        }
	        timsort(hoverElements, this.storage.displayableSortFunc);

	        // Use a extream large zlevel
	        // FIXME?
	        if (!hoverLayer) {
	            hoverLayer = this._hoverlayer = this.getLayer(1e5);
	        }

	        var scope = {};
	        hoverLayer.ctx.save();
	        for (var i = 0; i < len;) {
	            var el = hoverElements[i];
	            var originalEl = el.__from;
	            // Original el is removed
	            // PENDING
	            if (!(originalEl && originalEl.__zr)) {
	                hoverElements.splice(i, 1);
	                originalEl.__hoverMir = null;
	                len--;
	                continue;
	            }
	            i++;

	            // Use transform
	            // FIXME style and shape ?
	            if (!originalEl.invisible) {
	                el.transform = originalEl.transform;
	                el.invTransform = originalEl.invTransform;
	                el.__clipPaths = originalEl.__clipPaths;
	                // el.
	                this._doPaintEl(el, hoverLayer, true, scope);
	            }
	        }
	        hoverLayer.ctx.restore();
	    },

	    _startProgessive: function _startProgessive() {
	        var self = this;

	        if (!self._furtherProgressive) {
	            return;
	        }

	        // Use a token to stop progress steps triggered by
	        // previous zr.refresh calling.
	        var token = self._progressiveToken = +new Date();

	        self._progress++;
	        requestAnimationFrame(step);

	        function step() {
	            // In case refreshed or disposed
	            if (token === self._progressiveToken && self.storage) {

	                self._doPaintList(self.storage.getDisplayList());

	                if (self._furtherProgressive) {
	                    self._progress++;
	                    requestAnimationFrame(step);
	                } else {
	                    self._progressiveToken = -1;
	                }
	            }
	        }
	    },

	    _clearProgressive: function _clearProgressive() {
	        this._progressiveToken = -1;
	        this._progress = 0;
	        util.each(this._progressiveLayers, function (layer) {
	            layer.__dirty && layer.clear();
	        });
	    },

	    _paintList: function _paintList(list, paintAll) {

	        if (paintAll == null) {
	            paintAll = false;
	        }

	        this._updateLayerStatus(list);

	        this._clearProgressive();

	        this.eachBuildinLayer(preProcessLayer);

	        this._doPaintList(list, paintAll);

	        this.eachBuildinLayer(postProcessLayer);
	    },

	    _doPaintList: function _doPaintList(list, paintAll) {
	        var currentLayer;
	        var currentZLevel;
	        var ctx;

	        // var invTransform = [];
	        var scope;

	        var progressiveLayerIdx = 0;
	        var currentProgressiveLayer;

	        var width = this._width;
	        var height = this._height;
	        var layerProgress;
	        var frame = this._progress;
	        function flushProgressiveLayer(layer) {
	            var dpr = ctx.dpr || 1;
	            ctx.save();
	            ctx.globalAlpha = 1;
	            ctx.shadowBlur = 0;
	            // Avoid layer don't clear in next progressive frame
	            currentLayer.__dirty = true;
	            ctx.setTransform(1, 0, 0, 1, 0, 0);
	            ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);
	            ctx.restore();
	        }

	        for (var i = 0, l = list.length; i < l; i++) {
	            var el = list[i];
	            var elZLevel = this._singleCanvas ? 0 : el.zlevel;

	            var elFrame = el.__frame;

	            // Flush at current context
	            // PENDING
	            if (elFrame < 0 && currentProgressiveLayer) {
	                flushProgressiveLayer(currentProgressiveLayer);
	                currentProgressiveLayer = null;
	            }

	            // Change draw layer
	            if (currentZLevel !== elZLevel) {
	                if (ctx) {
	                    ctx.restore();
	                }

	                // Reset scope
	                scope = {};

	                // Only 0 zlevel if only has one canvas
	                currentZLevel = elZLevel;
	                currentLayer = this.getLayer(currentZLevel);

	                if (!currentLayer.isBuildin) {
	                    log('ZLevel ' + currentZLevel + ' has been used by unkown layer ' + currentLayer.id);
	                }

	                ctx = currentLayer.ctx;
	                ctx.save();

	                // Reset the count
	                currentLayer.__unusedCount = 0;

	                if (currentLayer.__dirty || paintAll) {
	                    currentLayer.clear();
	                }
	            }

	            if (!(currentLayer.__dirty || paintAll)) {
	                continue;
	            }

	            if (elFrame >= 0) {
	                // Progressive layer changed
	                if (!currentProgressiveLayer) {
	                    currentProgressiveLayer = this._progressiveLayers[Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)];

	                    currentProgressiveLayer.ctx.save();
	                    currentProgressiveLayer.renderScope = {};

	                    if (currentProgressiveLayer && currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress) {
	                        // flushProgressiveLayer(currentProgressiveLayer);
	                        // Quick jump all progressive elements
	                        // All progressive element are not dirty, jump over and flush directly
	                        i = currentProgressiveLayer.__nextIdxNotProg - 1;
	                        // currentProgressiveLayer = null;
	                        continue;
	                    }

	                    layerProgress = currentProgressiveLayer.__progress;

	                    if (!currentProgressiveLayer.__dirty) {
	                        // Keep rendering
	                        frame = layerProgress;
	                    }

	                    currentProgressiveLayer.__progress = frame + 1;
	                }

	                if (elFrame === frame) {
	                    this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);
	                }
	            } else {
	                this._doPaintEl(el, currentLayer, paintAll, scope);
	            }

	            el.__dirty = false;
	        }

	        if (currentProgressiveLayer) {
	            flushProgressiveLayer(currentProgressiveLayer);
	        }

	        // Restore the lastLayer ctx
	        ctx && ctx.restore();
	        // If still has clipping state
	        // if (scope.prevElClipPaths) {
	        //     ctx.restore();
	        // }

	        this._furtherProgressive = false;
	        util.each(this._progressiveLayers, function (layer) {
	            if (layer.__maxProgress >= layer.__progress) {
	                this._furtherProgressive = true;
	            }
	        }, this);
	    },

	    _doPaintEl: function _doPaintEl(el, currentLayer, forcePaint, scope) {
	        var ctx = currentLayer.ctx;
	        var m = el.transform;
	        if ((currentLayer.__dirty || forcePaint) &&
	        // Ignore invisible element
	        !el.invisible
	        // Ignore transparent element
	        && el.style.opacity !== 0
	        // Ignore scale 0 element, in some environment like node-canvas
	        // Draw a scale 0 element can cause all following draw wrong
	        // And setTransform with scale 0 will cause set back transform failed.
	        && !(m && !m[0] && !m[3])
	        // Ignore culled element
	        && !(el.culling && isDisplayableCulled(el, this._width, this._height))) {

	            var clipPaths = el.__clipPaths;

	            // Optimize when clipping on group with several elements
	            if (scope.prevClipLayer !== currentLayer || isClipPathChanged(clipPaths, scope.prevElClipPaths)) {
	                // If has previous clipping state, restore from it
	                if (scope.prevElClipPaths) {
	                    scope.prevClipLayer.ctx.restore();
	                    scope.prevClipLayer = scope.prevElClipPaths = null;

	                    // Reset prevEl since context has been restored
	                    scope.prevEl = null;
	                }
	                // New clipping state
	                if (clipPaths) {
	                    ctx.save();
	                    doClip(clipPaths, ctx);
	                    scope.prevClipLayer = currentLayer;
	                    scope.prevElClipPaths = clipPaths;
	                }
	            }
	            el.beforeBrush && el.beforeBrush(ctx);

	            el.brush(ctx, scope.prevEl || null);
	            scope.prevEl = el;

	            el.afterBrush && el.afterBrush(ctx);
	        }
	    },

	    /**
	     * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	     * @param {number} zlevel
	     * @return {module:zrender/Layer}
	     */
	    getLayer: function getLayer(zlevel) {
	        if (this._singleCanvas) {
	            return this._layers[0];
	        }

	        var layer = this._layers[zlevel];
	        if (!layer) {
	            // Create a new layer
	            layer = new Layer('zr_' + zlevel, this, this.dpr);
	            layer.isBuildin = true;

	            if (this._layerConfig[zlevel]) {
	                util.merge(layer, this._layerConfig[zlevel], true);
	            }

	            this.insertLayer(zlevel, layer);

	            // Context is created after dom inserted to document
	            // Or excanvas will get 0px clientWidth and clientHeight
	            layer.initContext();
	        }

	        return layer;
	    },

	    insertLayer: function insertLayer(zlevel, layer) {

	        var layersMap = this._layers;
	        var zlevelList = this._zlevelList;
	        var len = zlevelList.length;
	        var prevLayer = null;
	        var i = -1;
	        var domRoot = this._domRoot;

	        if (layersMap[zlevel]) {
	            log('ZLevel ' + zlevel + ' has been used already');
	            return;
	        }
	        // Check if is a valid layer
	        if (!isLayerValid(layer)) {
	            log('Layer of zlevel ' + zlevel + ' is not valid');
	            return;
	        }

	        if (len > 0 && zlevel > zlevelList[0]) {
	            for (i = 0; i < len - 1; i++) {
	                if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
	                    break;
	                }
	            }
	            prevLayer = layersMap[zlevelList[i]];
	        }
	        zlevelList.splice(i + 1, 0, zlevel);

	        if (prevLayer) {
	            var prevDom = prevLayer.dom;
	            if (prevDom.nextSibling) {
	                domRoot.insertBefore(layer.dom, prevDom.nextSibling);
	            } else {
	                domRoot.appendChild(layer.dom);
	            }
	        } else {
	            if (domRoot.firstChild) {
	                domRoot.insertBefore(layer.dom, domRoot.firstChild);
	            } else {
	                domRoot.appendChild(layer.dom);
	            }
	        }

	        layersMap[zlevel] = layer;
	    },

	    // Iterate each layer
	    eachLayer: function eachLayer(cb, context) {
	        var zlevelList = this._zlevelList;
	        var z;
	        var i;
	        for (i = 0; i < zlevelList.length; i++) {
	            z = zlevelList[i];
	            cb.call(context, this._layers[z], z);
	        }
	    },

	    // Iterate each buildin layer
	    eachBuildinLayer: function eachBuildinLayer(cb, context) {
	        var zlevelList = this._zlevelList;
	        var layer;
	        var z;
	        var i;
	        for (i = 0; i < zlevelList.length; i++) {
	            z = zlevelList[i];
	            layer = this._layers[z];
	            if (layer.isBuildin) {
	                cb.call(context, layer, z);
	            }
	        }
	    },

	    // Iterate each other layer except buildin layer
	    eachOtherLayer: function eachOtherLayer(cb, context) {
	        var zlevelList = this._zlevelList;
	        var layer;
	        var z;
	        var i;
	        for (i = 0; i < zlevelList.length; i++) {
	            z = zlevelList[i];
	            layer = this._layers[z];
	            if (!layer.isBuildin) {
	                cb.call(context, layer, z);
	            }
	        }
	    },

	    /**
	     * 获取所有已创建的层
	     * @param {Array.<module:zrender/Layer>} [prevLayer]
	     */
	    getLayers: function getLayers() {
	        return this._layers;
	    },

	    _updateLayerStatus: function _updateLayerStatus(list) {

	        var layers = this._layers;
	        var progressiveLayers = this._progressiveLayers;

	        var elCountsLastFrame = {};
	        var progressiveElCountsLastFrame = {};

	        this.eachBuildinLayer(function (layer, z) {
	            elCountsLastFrame[z] = layer.elCount;
	            layer.elCount = 0;
	            layer.__dirty = false;
	        });

	        util.each(progressiveLayers, function (layer, idx) {
	            progressiveElCountsLastFrame[idx] = layer.elCount;
	            layer.elCount = 0;
	            layer.__dirty = false;
	        });

	        var progressiveLayerCount = 0;
	        var currentProgressiveLayer;
	        var lastProgressiveKey;
	        var frameCount = 0;
	        for (var i = 0, l = list.length; i < l; i++) {
	            var el = list[i];
	            var zlevel = this._singleCanvas ? 0 : el.zlevel;
	            var layer = layers[zlevel];
	            var elProgress = el.progressive;
	            if (layer) {
	                layer.elCount++;
	                layer.__dirty = layer.__dirty || el.__dirty;
	            }

	            /////// Update progressive
	            if (elProgress >= 0) {
	                // Fix wrong progressive sequence problem.
	                if (lastProgressiveKey !== elProgress) {
	                    lastProgressiveKey = elProgress;
	                    frameCount++;
	                }
	                var elFrame = el.__frame = frameCount - 1;
	                if (!currentProgressiveLayer) {
	                    var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);
	                    currentProgressiveLayer = progressiveLayers[idx];
	                    if (!currentProgressiveLayer) {
	                        currentProgressiveLayer = progressiveLayers[idx] = new Layer('progressive', this, this.dpr);
	                        currentProgressiveLayer.initContext();
	                    }
	                    currentProgressiveLayer.__maxProgress = 0;
	                }
	                currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;
	                currentProgressiveLayer.elCount++;

	                currentProgressiveLayer.__maxProgress = Math.max(currentProgressiveLayer.__maxProgress, elFrame);

	                if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {
	                    // Should keep rendering this  layer because progressive rendering is not finished yet
	                    layer.__dirty = true;
	                }
	            } else {
	                el.__frame = -1;

	                if (currentProgressiveLayer) {
	                    currentProgressiveLayer.__nextIdxNotProg = i;
	                    progressiveLayerCount++;
	                    currentProgressiveLayer = null;
	                }
	            }
	        }

	        if (currentProgressiveLayer) {
	            progressiveLayerCount++;
	            currentProgressiveLayer.__nextIdxNotProg = i;
	        }

	        // 层中的元素数量有发生变化
	        this.eachBuildinLayer(function (layer, z) {
	            if (elCountsLastFrame[z] !== layer.elCount) {
	                layer.__dirty = true;
	            }
	        });

	        progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);
	        util.each(progressiveLayers, function (layer, idx) {
	            if (progressiveElCountsLastFrame[idx] !== layer.elCount) {
	                el.__dirty = true;
	            }
	            if (layer.__dirty) {
	                layer.__progress = 0;
	            }
	        });
	    },

	    /**
	     * 清除hover层外所有内容
	     */
	    clear: function clear() {
	        this.eachBuildinLayer(this._clearLayer);
	        return this;
	    },

	    _clearLayer: function _clearLayer(layer) {
	        layer.clear();
	    },

	    /**
	     * 修改指定zlevel的绘制参数
	     *
	     * @param {string} zlevel
	     * @param {Object} config 配置对象
	     * @param {string} [config.clearColor=0] 每次清空画布的颜色
	     * @param {string} [config.motionBlur=false] 是否开启动态模糊
	     * @param {number} [config.lastFrameAlpha=0.7]
	     *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	     */
	    configLayer: function configLayer(zlevel, config) {
	        if (config) {
	            var layerConfig = this._layerConfig;
	            if (!layerConfig[zlevel]) {
	                layerConfig[zlevel] = config;
	            } else {
	                util.merge(layerConfig[zlevel], config, true);
	            }

	            var layer = this._layers[zlevel];

	            if (layer) {
	                util.merge(layer, layerConfig[zlevel], true);
	            }
	        }
	    },

	    /**
	     * 删除指定层
	     * @param {number} zlevel 层所在的zlevel
	     */
	    delLayer: function delLayer(zlevel) {
	        var layers = this._layers;
	        var zlevelList = this._zlevelList;
	        var layer = layers[zlevel];
	        if (!layer) {
	            return;
	        }
	        layer.dom.parentNode.removeChild(layer.dom);
	        delete layers[zlevel];

	        zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	    },

	    /**
	     * 区域大小变化后重绘
	     */
	    resize: function resize(width, height) {
	        var domRoot = this._domRoot;
	        // FIXME Why ?
	        domRoot.style.display = 'none';

	        // Save input w/h
	        var opts = this._opts;
	        width != null && (opts.width = width);
	        height != null && (opts.height = height);

	        width = this._getSize(0);
	        height = this._getSize(1);

	        domRoot.style.display = '';

	        // 优化没有实际改变的resize
	        if (this._width != width || height != this._height) {
	            domRoot.style.width = width + 'px';
	            domRoot.style.height = height + 'px';

	            for (var id in this._layers) {
	                if (this._layers.hasOwnProperty(id)) {
	                    this._layers[id].resize(width, height);
	                }
	            }
	            util.each(this._progressiveLayers, function (layer) {
	                layer.resize(width, height);
	            });

	            this.refresh(true);
	        }

	        this._width = width;
	        this._height = height;

	        return this;
	    },

	    /**
	     * 清除单独的一个层
	     * @param {number} zlevel
	     */
	    clearLayer: function clearLayer(zlevel) {
	        var layer = this._layers[zlevel];
	        if (layer) {
	            layer.clear();
	        }
	    },

	    /**
	     * 释放
	     */
	    dispose: function dispose() {
	        this.root.innerHTML = '';

	        this.root = this.storage = this._domRoot = this._layers = null;
	    },

	    /**
	     * Get canvas which has all thing rendered
	     * @param {Object} opts
	     * @param {string} [opts.backgroundColor]
	     */
	    getRenderedCanvas: function getRenderedCanvas(opts) {
	        opts = opts || {};
	        if (this._singleCanvas) {
	            return this._layers[0].dom;
	        }

	        var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	        imageLayer.initContext();

	        imageLayer.clearColor = opts.backgroundColor;
	        imageLayer.clear();

	        var displayList = this.storage.getDisplayList(true);

	        var scope = {};
	        for (var i = 0; i < displayList.length; i++) {
	            var el = displayList[i];
	            this._doPaintEl(el, imageLayer, true, scope);
	        }

	        return imageLayer.dom;
	    },
	    /**
	     * 获取绘图区域宽度
	     */
	    getWidth: function getWidth() {
	        return this._width;
	    },

	    /**
	     * 获取绘图区域高度
	     */
	    getHeight: function getHeight() {
	        return this._height;
	    },

	    _getSize: function _getSize(whIdx) {
	        var opts = this._opts;
	        var wh = ['width', 'height'][whIdx];
	        var cwh = ['clientWidth', 'clientHeight'][whIdx];
	        var plt = ['paddingLeft', 'paddingTop'][whIdx];
	        var prb = ['paddingRight', 'paddingBottom'][whIdx];

	        if (opts[wh] != null && opts[wh] !== 'auto') {
	            return parseFloat(opts[wh]);
	        }

	        var root = this.root;
	        var stl = document.defaultView.getComputedStyle(root);

	        return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
	    },

	    _pathToImage: function _pathToImage(id, path, width, height, dpr) {
	        var canvas = document.createElement('canvas');
	        var ctx = canvas.getContext('2d');

	        canvas.width = width * dpr;
	        canvas.height = height * dpr;

	        ctx.clearRect(0, 0, width * dpr, height * dpr);

	        var pathTransform = {
	            position: path.position,
	            rotation: path.rotation,
	            scale: path.scale
	        };
	        path.position = [0, 0, 0];
	        path.rotation = 0;
	        path.scale = [1, 1];
	        if (path) {
	            path.brush(ctx);
	        }

	        var ImageShape = __webpack_require__(561);
	        var imgShape = new ImageShape({
	            id: id,
	            style: {
	                x: 0,
	                y: 0,
	                image: canvas
	            }
	        });

	        if (pathTransform.position != null) {
	            imgShape.position = path.position = pathTransform.position;
	        }

	        if (pathTransform.rotation != null) {
	            imgShape.rotation = path.rotation = pathTransform.rotation;
	        }

	        if (pathTransform.scale != null) {
	            imgShape.scale = path.scale = pathTransform.scale;
	        }

	        return imgShape;
	    },

	    _createPathToImage: function _createPathToImage() {
	        var me = this;

	        return function (id, e, width, height) {
	            return me._pathToImage(id, e, width, height, me.dpr);
	        };
	    }
	};

	module.exports = Painter;

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */

	var util = __webpack_require__(504);
	var config = __webpack_require__(541);
	var Style = __webpack_require__(547);
	var Pattern = __webpack_require__(559);

	function returnFalse() {
	    return false;
	}

	/**
	 * 创建dom
	 *
	 * @inner
	 * @param {string} id dom id 待用
	 * @param {string} type dom type，such as canvas, div etc.
	 * @param {Painter} painter painter instance
	 * @param {number} number
	 */
	function createDom(id, type, painter, dpr) {
	    var newDom = document.createElement(type);
	    var width = painter.getWidth();
	    var height = painter.getHeight();

	    var newDomStyle = newDom.style;
	    // 没append呢，请原谅我这样写，清晰~
	    newDomStyle.position = 'absolute';
	    newDomStyle.left = 0;
	    newDomStyle.top = 0;
	    newDomStyle.width = width + 'px';
	    newDomStyle.height = height + 'px';
	    newDom.width = width * dpr;
	    newDom.height = height * dpr;

	    // id不作为索引用，避免可能造成的重名，定义为私有属性
	    newDom.setAttribute('data-zr-dom-id', id);
	    return newDom;
	}

	/**
	 * @alias module:zrender/Layer
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @param {string} id
	 * @param {module:zrender/Painter} painter
	 * @param {number} [dpr]
	 */
	var Layer = function Layer(id, painter, dpr) {
	    var dom;
	    dpr = dpr || config.devicePixelRatio;
	    if (typeof id === 'string') {
	        dom = createDom(id, 'canvas', painter, dpr);
	    }
	    // Not using isDom because in node it will return false
	    else if (util.isObject(id)) {
	            dom = id;
	            id = dom.id;
	        }
	    this.id = id;
	    this.dom = dom;

	    var domStyle = dom.style;
	    if (domStyle) {
	        // Not in node
	        dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	        domStyle['-webkit-user-select'] = 'none';
	        domStyle['user-select'] = 'none';
	        domStyle['-webkit-touch-callout'] = 'none';
	        domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	        domStyle['padding'] = 0;
	        domStyle['margin'] = 0;
	        domStyle['border-width'] = 0;
	    }

	    this.domBack = null;
	    this.ctxBack = null;

	    this.painter = painter;

	    this.config = null;

	    // Configs
	    /**
	     * 每次清空画布的颜色
	     * @type {string}
	     * @default 0
	     */
	    this.clearColor = 0;
	    /**
	     * 是否开启动态模糊
	     * @type {boolean}
	     * @default false
	     */
	    this.motionBlur = false;
	    /**
	     * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	     * @type {number}
	     * @default 0.7
	     */
	    this.lastFrameAlpha = 0.7;

	    /**
	     * Layer dpr
	     * @type {number}
	     */
	    this.dpr = dpr;
	};

	Layer.prototype = {

	    constructor: Layer,

	    elCount: 0,

	    __dirty: true,

	    initContext: function initContext() {
	        this.ctx = this.dom.getContext('2d');

	        this.ctx.dpr = this.dpr;
	    },

	    createBackBuffer: function createBackBuffer() {
	        var dpr = this.dpr;

	        this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);
	        this.ctxBack = this.domBack.getContext('2d');

	        if (dpr != 1) {
	            this.ctxBack.scale(dpr, dpr);
	        }
	    },

	    /**
	     * @param  {number} width
	     * @param  {number} height
	     */
	    resize: function resize(width, height) {
	        var dpr = this.dpr;

	        var dom = this.dom;
	        var domStyle = dom.style;
	        var domBack = this.domBack;

	        domStyle.width = width + 'px';
	        domStyle.height = height + 'px';

	        dom.width = width * dpr;
	        dom.height = height * dpr;

	        if (domBack) {
	            domBack.width = width * dpr;
	            domBack.height = height * dpr;

	            if (dpr != 1) {
	                this.ctxBack.scale(dpr, dpr);
	            }
	        }
	    },

	    /**
	     * 清空该层画布
	     * @param {boolean} clearAll Clear all with out motion blur
	     */
	    clear: function clear(clearAll) {
	        var dom = this.dom;
	        var ctx = this.ctx;
	        var width = dom.width;
	        var height = dom.height;

	        var clearColor = this.clearColor;
	        var haveMotionBLur = this.motionBlur && !clearAll;
	        var lastFrameAlpha = this.lastFrameAlpha;

	        var dpr = this.dpr;

	        if (haveMotionBLur) {
	            if (!this.domBack) {
	                this.createBackBuffer();
	            }

	            this.ctxBack.globalCompositeOperation = 'copy';
	            this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
	        }

	        ctx.clearRect(0, 0, width, height);
	        if (clearColor) {
	            var clearColorGradientOrPattern;
	            // Gradient
	            if (clearColor.colorStops) {
	                // Cache canvas gradient
	                clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {
	                    x: 0,
	                    y: 0,
	                    width: width,
	                    height: height
	                });

	                clearColor.__canvasGradient = clearColorGradientOrPattern;
	            }
	            // Pattern
	            else if (clearColor.image) {
	                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);
	                }
	            ctx.save();
	            ctx.fillStyle = clearColorGradientOrPattern || clearColor;
	            ctx.fillRect(0, 0, width, height);
	            ctx.restore();
	        }

	        if (haveMotionBLur) {
	            var domBack = this.domBack;
	            ctx.save();
	            ctx.globalAlpha = lastFrameAlpha;
	            ctx.drawImage(domBack, 0, 0, width, height);
	            ctx.restore();
	        }
	    }
	};

	module.exports = Layer;

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Gradient = __webpack_require__(579);
	module.exports = function (ecModel) {
	    function encodeColor(seriesModel) {
	        var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');
	        var data = seriesModel.getData();
	        var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	        || seriesModel.getColorFromPalette(seriesModel.get('name')); // Default color

	        // FIXME Set color function or use the platte color
	        data.setVisual('color', color);

	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            if (typeof color === 'function' && !(color instanceof Gradient)) {
	                data.each(function (idx) {
	                    data.setItemVisual(idx, 'color', color(seriesModel.getDataParams(idx)));
	                });
	            }

	            // itemStyle in each data item
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var color = itemModel.get(colorAccessPath, true);
	                if (color != null) {
	                    data.setItemVisual(idx, 'color', color);
	                }
	            });
	        }
	    }
	    ecModel.eachRawSeries(encodeColor);
	};

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Compatitable with 2.0


	var zrUtil = __webpack_require__(504);
	var compatStyle = __webpack_require__(596);

	function get(opt, path) {
	    path = path.split(',');
	    var obj = opt;
	    for (var i = 0; i < path.length; i++) {
	        obj = obj && obj[path[i]];
	        if (obj == null) {
	            break;
	        }
	    }
	    return obj;
	}

	function set(opt, path, val, overwrite) {
	    path = path.split(',');
	    var obj = opt;
	    var key;
	    for (var i = 0; i < path.length - 1; i++) {
	        key = path[i];
	        if (obj[key] == null) {
	            obj[key] = {};
	        }
	        obj = obj[key];
	    }
	    if (overwrite || obj[path[i]] == null) {
	        obj[path[i]] = val;
	    }
	}

	function compatLayoutProperties(option) {
	    each(LAYOUT_PROPERTIES, function (prop) {
	        if (prop[0] in option && !(prop[1] in option)) {
	            option[prop[1]] = option[prop[0]];
	        }
	    });
	}

	var LAYOUT_PROPERTIES = [['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']];

	var COMPATITABLE_COMPONENTS = ['grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'];

	var COMPATITABLE_SERIES = ['bar', 'boxplot', 'candlestick', 'chord', 'effectScatter', 'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel', 'pie', 'radar', 'sankey', 'scatter', 'treemap'];

	var each = zrUtil.each;

	module.exports = function (option) {
	    each(option.series, function (seriesOpt) {
	        if (!zrUtil.isObject(seriesOpt)) {
	            return;
	        }

	        var seriesType = seriesOpt.type;

	        compatStyle(seriesOpt);

	        if (seriesType === 'pie' || seriesType === 'gauge') {
	            if (seriesOpt.clockWise != null) {
	                seriesOpt.clockwise = seriesOpt.clockWise;
	            }
	        }
	        if (seriesType === 'gauge') {
	            var pointerColor = get(seriesOpt, 'pointer.color');
	            pointerColor != null && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	        }

	        for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
	            if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
	                compatLayoutProperties(seriesOpt);
	                break;
	            }
	        }
	    });

	    // dataRange has changed to visualMap
	    if (option.dataRange) {
	        option.visualMap = option.dataRange;
	    }

	    each(COMPATITABLE_COMPONENTS, function (componentName) {
	        var options = option[componentName];
	        if (options) {
	            if (!zrUtil.isArray(options)) {
	                options = [options];
	            }
	            each(options, function (option) {
	                compatLayoutProperties(option);
	            });
	        }
	    });
	};

/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var POSSIBLE_STYLES = ['areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle', 'chordStyle', 'label', 'labelLine'];

	function compatItemStyle(opt) {
	    var itemStyleOpt = opt && opt.itemStyle;
	    if (itemStyleOpt) {
	        zrUtil.each(POSSIBLE_STYLES, function (styleName) {
	            var normalItemStyleOpt = itemStyleOpt.normal;
	            var emphasisItemStyleOpt = itemStyleOpt.emphasis;
	            if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	                opt[styleName] = opt[styleName] || {};
	                if (!opt[styleName].normal) {
	                    opt[styleName].normal = normalItemStyleOpt[styleName];
	                } else {
	                    zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	                }
	                normalItemStyleOpt[styleName] = null;
	            }
	            if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	                opt[styleName] = opt[styleName] || {};
	                if (!opt[styleName].emphasis) {
	                    opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	                } else {
	                    zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	                }
	                emphasisItemStyleOpt[styleName] = null;
	            }
	        });
	    }
	}

	module.exports = function (seriesOpt) {
	    if (!seriesOpt) {
	        return;
	    }
	    compatItemStyle(seriesOpt);
	    compatItemStyle(seriesOpt.markPoint);
	    compatItemStyle(seriesOpt.markLine);
	    var data = seriesOpt.data;
	    if (data) {
	        for (var i = 0; i < data.length; i++) {
	            compatItemStyle(data[i]);
	        }
	        // mark point data
	        var markPoint = seriesOpt.markPoint;
	        if (markPoint && markPoint.data) {
	            var mpData = markPoint.data;
	            for (var i = 0; i < mpData.length; i++) {
	                compatItemStyle(mpData[i]);
	            }
	        }
	        // mark line data
	        var markLine = seriesOpt.markLine;
	        if (markLine && markLine.data) {
	            var mlData = markLine.data;
	            for (var i = 0; i < mlData.length; i++) {
	                if (zrUtil.isArray(mlData[i])) {
	                    compatItemStyle(mlData[i][0]);
	                    compatItemStyle(mlData[i][1]);
	                } else {
	                    compatItemStyle(mlData[i]);
	                }
	            }
	        }
	    }
	};

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);
	var PI = Math.PI;
	/**
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} [opts]
	 * @param {string} [opts.text]
	 * @param {string} [opts.color]
	 * @param {string} [opts.textColor]
	 * @return {module:zrender/Element}
	 */
	module.exports = function (api, opts) {
	    opts = opts || {};
	    zrUtil.defaults(opts, {
	        text: 'loading',
	        color: '#c23531',
	        textColor: '#000',
	        maskColor: 'rgba(255, 255, 255, 0.8)',
	        zlevel: 0
	    });
	    var mask = new graphic.Rect({
	        style: {
	            fill: opts.maskColor
	        },
	        zlevel: opts.zlevel,
	        z: 10000
	    });
	    var arc = new graphic.Arc({
	        shape: {
	            startAngle: -PI / 2,
	            endAngle: -PI / 2 + 0.1,
	            r: 10
	        },
	        style: {
	            stroke: opts.color,
	            lineCap: 'round',
	            lineWidth: 5
	        },
	        zlevel: opts.zlevel,
	        z: 10001
	    });
	    var labelRect = new graphic.Rect({
	        style: {
	            fill: 'none',
	            text: opts.text,
	            textPosition: 'right',
	            textDistance: 10,
	            textFill: opts.textColor
	        },
	        zlevel: opts.zlevel,
	        z: 10001
	    });

	    arc.animateShape(true).when(1000, {
	        endAngle: PI * 3 / 2
	    }).start('circularInOut');
	    arc.animateShape(true).when(1000, {
	        startAngle: PI * 3 / 2
	    }).delay(300).start('circularInOut');

	    var group = new graphic.Group();
	    group.add(arc);
	    group.add(labelRect);
	    group.add(mask);
	    // Inject resize
	    group.resize = function () {
	        var cx = api.getWidth() / 2;
	        var cy = api.getHeight() / 2;
	        arc.setShape({
	            cx: cx,
	            cy: cy
	        });
	        var r = arc.shape.r;
	        labelRect.setShape({
	            x: cx - r,
	            y: cy - r,
	            width: r * 2,
	            height: r * 2
	        });

	        mask.setShape({
	            x: 0,
	            y: 0,
	            width: api.getWidth(),
	            height: api.getHeight()
	        });
	    };
	    group.resize();
	    return group;
	};

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * List for data storage
	 * @module echarts/data/List
	 */

	var UNDEFINED = 'undefined';
	var globalObj = typeof window === 'undefined' ? global : window;
	var Float64Array = _typeof(globalObj.Float64Array) === UNDEFINED ? Array : globalObj.Float64Array;
	var Int32Array = _typeof(globalObj.Int32Array) === UNDEFINED ? Array : globalObj.Int32Array;

	var dataCtors = {
	    'float': Float64Array,
	    'int': Int32Array,
	    // Ordinal data type can be string or int
	    'ordinal': Array,
	    'number': Array,
	    'time': Array
	};

	var Model = __webpack_require__(512);
	var DataDiffer = __webpack_require__(599);

	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);
	var isObject = zrUtil.isObject;

	var TRANSFERABLE_PROPERTIES = ['stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'];

	var transferProperties = function transferProperties(a, b) {
	    zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {
	        if (b.hasOwnProperty(propName)) {
	            a[propName] = b[propName];
	        }
	    });

	    a.__wrappedMethods = b.__wrappedMethods;
	};

	/**
	 * @constructor
	 * @alias module:echarts/data/List
	 *
	 * @param {Array.<string>} dimensions
	 *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	 * @param {module:echarts/model/Model} hostModel
	 */
	var List = function List(dimensions, hostModel) {

	    dimensions = dimensions || ['x', 'y'];

	    var dimensionInfos = {};
	    var dimensionNames = [];
	    for (var i = 0; i < dimensions.length; i++) {
	        var dimensionName;
	        var dimensionInfo = {};
	        if (typeof dimensions[i] === 'string') {
	            dimensionName = dimensions[i];
	            dimensionInfo = {
	                name: dimensionName,
	                stackable: false,
	                // Type can be 'float', 'int', 'number'
	                // Default is number, Precision of float may not enough
	                type: 'number'
	            };
	        } else {
	            dimensionInfo = dimensions[i];
	            dimensionName = dimensionInfo.name;
	            dimensionInfo.type = dimensionInfo.type || 'number';
	        }
	        dimensionNames.push(dimensionName);
	        dimensionInfos[dimensionName] = dimensionInfo;
	    }
	    /**
	     * @readOnly
	     * @type {Array.<string>}
	     */
	    this.dimensions = dimensionNames;

	    /**
	     * Infomation of each data dimension, like data type.
	     * @type {Object}
	     */
	    this._dimensionInfos = dimensionInfos;

	    /**
	     * @type {module:echarts/model/Model}
	     */
	    this.hostModel = hostModel;

	    /**
	     * @type {module:echarts/model/Model}
	     */
	    this.dataType;

	    /**
	     * Indices stores the indices of data subset after filtered.
	     * This data subset will be used in chart.
	     * @type {Array.<number>}
	     * @readOnly
	     */
	    this.indices = [];

	    /**
	     * Data storage
	     * @type {Object.<key, TypedArray|Array>}
	     * @private
	     */
	    this._storage = {};

	    /**
	     * @type {Array.<string>}
	     */
	    this._nameList = [];
	    /**
	     * @type {Array.<string>}
	     */
	    this._idList = [];
	    /**
	     * Models of data option is stored sparse for optimizing memory cost
	     * @type {Array.<module:echarts/model/Model>}
	     * @private
	     */
	    this._optionModels = [];

	    /**
	     * @param {module:echarts/data/List}
	     */
	    this.stackedOn = null;

	    /**
	     * Global visual properties after visual coding
	     * @type {Object}
	     * @private
	     */
	    this._visual = {};

	    /**
	     * Globel layout properties.
	     * @type {Object}
	     * @private
	     */
	    this._layout = {};

	    /**
	     * Item visual properties after visual coding
	     * @type {Array.<Object>}
	     * @private
	     */
	    this._itemVisuals = [];

	    /**
	     * Item layout properties after layout
	     * @type {Array.<Object>}
	     * @private
	     */
	    this._itemLayouts = [];

	    /**
	     * Graphic elemnents
	     * @type {Array.<module:zrender/Element>}
	     * @private
	     */
	    this._graphicEls = [];

	    /**
	     * @type {Array.<Array|Object>}
	     * @private
	     */
	    this._rawData;

	    /**
	     * @type {Object}
	     * @private
	     */
	    this._extent;
	};

	var listProto = List.prototype;

	listProto.type = 'list';
	/**
	 * If each data item has it's own option
	 * @type {boolean}
	 */
	listProto.hasItemOption = true;

	/**
	 * Get dimension name
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 * @return {string} Concrete dim name.
	 */
	listProto.getDimension = function (dim) {
	    if (!isNaN(dim)) {
	        dim = this.dimensions[dim] || dim;
	    }
	    return dim;
	};
	/**
	 * Get type and stackable info of particular dimension
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 */
	listProto.getDimensionInfo = function (dim) {
	    return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
	};

	/**
	 * Initialize from data
	 * @param {Array.<Object|number|Array>} data
	 * @param {Array.<string>} [nameList]
	 * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	 */
	listProto.initData = function (data, nameList, dimValueGetter) {
	    data = data || [];

	    if (__DEV__) {
	        if (!zrUtil.isArray(data)) {
	            throw new Error('Invalid data.');
	        }
	    }

	    this._rawData = data;

	    // Clear
	    var storage = this._storage = {};
	    var indices = this.indices = [];

	    var dimensions = this.dimensions;
	    var size = data.length;
	    var dimensionInfoMap = this._dimensionInfos;

	    var idList = [];
	    var nameRepeatCount = {};

	    nameList = nameList || [];

	    // Init storage
	    for (var i = 0; i < dimensions.length; i++) {
	        var dimInfo = dimensionInfoMap[dimensions[i]];
	        var DataCtor = dataCtors[dimInfo.type];
	        storage[dimensions[i]] = new DataCtor(size);
	    }

	    var self = this;
	    if (!dimValueGetter) {
	        self.hasItemOption = false;
	    }
	    // Default dim value getter
	    dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
	        var value = modelUtil.getDataItemValue(dataItem);
	        // If any dataItem is like { value: 10 }
	        if (modelUtil.isDataItemOption(dataItem)) {
	            self.hasItemOption = true;
	        }
	        return modelUtil.converDataValue(value instanceof Array ? value[dimIndex]
	        // If value is a single number or something else not array.
	        : value, dimensionInfoMap[dimName]);
	    };

	    for (var idx = 0; idx < data.length; idx++) {
	        var dataItem = data[idx];
	        // Each data item is value
	        // [1, 2]
	        // 2
	        // Bar chart, line chart which uses category axis
	        // only gives the 'y' value. 'x' value is the indices of cateogry
	        // Use a tempValue to normalize the value to be a (x, y) value

	        // Store the data by dimensions
	        for (var k = 0; k < dimensions.length; k++) {
	            var dim = dimensions[k];
	            var dimStorage = storage[dim];
	            // PENDING NULL is empty or zero
	            dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);
	        }

	        indices.push(idx);
	    }

	    // Use the name in option and create id
	    for (var i = 0; i < data.length; i++) {
	        if (!nameList[i]) {
	            if (data[i] && data[i].name != null) {
	                nameList[i] = data[i].name;
	            }
	        }
	        var name = nameList[i] || '';
	        // Try using the id in option
	        var id = data[i] && data[i].id;

	        if (!id && name) {
	            // Use name as id and add counter to avoid same name
	            nameRepeatCount[name] = nameRepeatCount[name] || 0;
	            id = name;
	            if (nameRepeatCount[name] > 0) {
	                id += '__ec__' + nameRepeatCount[name];
	            }
	            nameRepeatCount[name]++;
	        }
	        id && (idList[i] = id);
	    }

	    this._nameList = nameList;
	    this._idList = idList;
	};

	/**
	 * @return {number}
	 */
	listProto.count = function () {
	    return this.indices.length;
	};

	/**
	 * Get value. Return NaN if idx is out of range.
	 * @param {string} dim Dim must be concrete name.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */
	listProto.get = function (dim, idx, stack) {
	    var storage = this._storage;
	    var dataIndex = this.indices[idx];

	    // If value not exists
	    if (dataIndex == null) {
	        return NaN;
	    }

	    var value = storage[dim] && storage[dim][dataIndex];
	    // FIXME ordinal data type is not stackable
	    if (stack) {
	        var dimensionInfo = this._dimensionInfos[dim];
	        if (dimensionInfo && dimensionInfo.stackable) {
	            var stackedOn = this.stackedOn;
	            while (stackedOn) {
	                // Get no stacked data of stacked on
	                var stackedValue = stackedOn.get(dim, idx);
	                // Considering positive stack, negative stack and empty data
	                if (value >= 0 && stackedValue > 0 || // Positive stack
	                value <= 0 && stackedValue < 0 // Negative stack
	                ) {
	                        value += stackedValue;
	                    }
	                stackedOn = stackedOn.stackedOn;
	            }
	        }
	    }
	    return value;
	};

	/**
	 * Get value for multi dimensions.
	 * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */
	listProto.getValues = function (dimensions, idx, stack) {
	    var values = [];

	    if (!zrUtil.isArray(dimensions)) {
	        stack = idx;
	        idx = dimensions;
	        dimensions = this.dimensions;
	    }

	    for (var i = 0, len = dimensions.length; i < len; i++) {
	        values.push(this.get(dimensions[i], idx, stack));
	    }

	    return values;
	};

	/**
	 * If value is NaN. Inlcuding '-'
	 * @param {string} dim
	 * @param {number} idx
	 * @return {number}
	 */
	listProto.hasValue = function (idx) {
	    var dimensions = this.dimensions;
	    var dimensionInfos = this._dimensionInfos;
	    for (var i = 0, len = dimensions.length; i < len; i++) {
	        if (
	        // Ordinal type can be string or number
	        dimensionInfos[dimensions[i]].type !== 'ordinal' && isNaN(this.get(dimensions[i], idx))) {
	            return false;
	        }
	    }
	    return true;
	};

	/**
	 * Get extent of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 * @param {Function} filter
	 */
	listProto.getDataExtent = function (dim, stack, filter) {
	    dim = this.getDimension(dim);
	    var dimData = this._storage[dim];
	    var dimInfo = this.getDimensionInfo(dim);
	    stack = dimInfo && dimInfo.stackable && stack;
	    var dimExtent = (this._extent || (this._extent = {}))[dim + !!stack];
	    var value;
	    if (dimExtent) {
	        return dimExtent;
	    }
	    // var dimInfo = this._dimensionInfos[dim];
	    if (dimData) {
	        var min = Infinity;
	        var max = -Infinity;
	        // var isOrdinal = dimInfo.type === 'ordinal';
	        for (var i = 0, len = this.count(); i < len; i++) {
	            value = this.get(dim, i, stack);
	            // FIXME
	            // if (isOrdinal && typeof value === 'string') {
	            //     value = zrUtil.indexOf(dimData, value);
	            // }
	            if (!filter || filter(value, dim, i)) {
	                value < min && (min = value);
	                value > max && (max = value);
	            }
	        }
	        return this._extent[dim + !!stack] = [min, max];
	    } else {
	        return [Infinity, -Infinity];
	    }
	};

	/**
	 * Get sum of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 */
	listProto.getSum = function (dim, stack) {
	    var dimData = this._storage[dim];
	    var sum = 0;
	    if (dimData) {
	        for (var i = 0, len = this.count(); i < len; i++) {
	            var value = this.get(dim, i, stack);
	            if (!isNaN(value)) {
	                sum += value;
	            }
	        }
	    }
	    return sum;
	};

	/**
	 * Retreive the index with given value
	 * @param {number} idx
	 * @param {number} value
	 * @return {number}
	 */
	// FIXME Precision of float value
	listProto.indexOf = function (dim, value) {
	    var storage = this._storage;
	    var dimData = storage[dim];
	    var indices = this.indices;

	    if (dimData) {
	        for (var i = 0, len = indices.length; i < len; i++) {
	            var rawIndex = indices[i];
	            if (dimData[rawIndex] === value) {
	                return i;
	            }
	        }
	    }
	    return -1;
	};

	/**
	 * Retreive the index with given name
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */
	listProto.indexOfName = function (name) {
	    var indices = this.indices;
	    var nameList = this._nameList;

	    for (var i = 0, len = indices.length; i < len; i++) {
	        var rawIndex = indices[i];
	        if (nameList[rawIndex] === name) {
	            return i;
	        }
	    }

	    return -1;
	};

	/**
	 * Retreive the index with given raw data index
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */
	listProto.indexOfRawIndex = function (rawIndex) {
	    // Indices are ascending
	    var indices = this.indices;

	    // If rawIndex === dataIndex
	    var rawDataIndex = indices[rawIndex];
	    if (rawDataIndex != null && rawDataIndex === rawIndex) {
	        return rawIndex;
	    }

	    var left = 0;
	    var right = indices.length - 1;
	    while (left <= right) {
	        var mid = (left + right) / 2 | 0;
	        if (indices[mid] < rawIndex) {
	            left = mid + 1;
	        } else if (indices[mid] > rawIndex) {
	            right = mid - 1;
	        } else {
	            return mid;
	        }
	    }
	    return -1;
	};

	/**
	 * Retreive the index of nearest value
	 * @param {string} dim
	 * @param {number} value
	 * @param {boolean} stack If given value is after stacked
	 * @param {number} [maxDistance=Infinity]
	 * @return {number}
	 */
	listProto.indexOfNearest = function (dim, value, stack, maxDistance) {
	    var storage = this._storage;
	    var dimData = storage[dim];

	    if (maxDistance == null) {
	        maxDistance = Infinity;
	    }

	    var nearestIdx = -1;
	    if (dimData) {
	        var minDist = Number.MAX_VALUE;
	        for (var i = 0, len = this.count(); i < len; i++) {
	            var diff = value - this.get(dim, i, stack);
	            var dist = Math.abs(diff);
	            if (diff <= maxDistance && (dist < minDist
	            // For the case of two data are same on xAxis, which has sequence data.
	            // Show the nearest index
	            // https://github.com/ecomfe/echarts/issues/2869
	            || dist === minDist && diff > 0)) {
	                minDist = dist;
	                nearestIdx = i;
	            }
	        }
	    }
	    return nearestIdx;
	};

	/**
	 * Get raw data index
	 * @param {number} idx
	 * @return {number}
	 */
	listProto.getRawIndex = function (idx) {
	    var rawIdx = this.indices[idx];
	    return rawIdx == null ? -1 : rawIdx;
	};

	/**
	 * Get raw data item
	 * @param {number} idx
	 * @return {number}
	 */
	listProto.getRawDataItem = function (idx) {
	    return this._rawData[this.getRawIndex(idx)];
	};

	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */
	listProto.getName = function (idx) {
	    return this._nameList[this.indices[idx]] || '';
	};

	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */
	listProto.getId = function (idx) {
	    return this._idList[this.indices[idx]] || this.getRawIndex(idx) + '';
	};

	function normalizeDimensions(dimensions) {
	    if (!zrUtil.isArray(dimensions)) {
	        dimensions = [dimensions];
	    }
	    return dimensions;
	}

	/**
	 * Data iteration
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 *
	 * @example
	 *  list.each('x', function (x, idx) {});
	 *  list.each(['x', 'y'], function (x, y, idx) {});
	 *  list.each(function (idx) {})
	 */
	listProto.each = function (dims, cb, stack, context) {
	    if (typeof dims === 'function') {
	        context = stack;
	        stack = cb;
	        cb = dims;
	        dims = [];
	    }

	    dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);

	    var value = [];
	    var dimSize = dims.length;
	    var indices = this.indices;

	    context = context || this;

	    for (var i = 0; i < indices.length; i++) {
	        // Simple optimization
	        switch (dimSize) {
	            case 0:
	                cb.call(context, i);
	                break;
	            case 1:
	                cb.call(context, this.get(dims[0], i, stack), i);
	                break;
	            case 2:
	                cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);
	                break;
	            default:
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dims[k], i, stack);
	                }
	                // Index
	                value[k] = i;
	                cb.apply(context, value);
	        }
	    }
	};

	/**
	 * Data filter
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 */
	listProto.filterSelf = function (dimensions, cb, stack, context) {
	    if (typeof dimensions === 'function') {
	        context = stack;
	        stack = cb;
	        cb = dimensions;
	        dimensions = [];
	    }

	    dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);

	    var newIndices = [];
	    var value = [];
	    var dimSize = dimensions.length;
	    var indices = this.indices;

	    context = context || this;

	    for (var i = 0; i < indices.length; i++) {
	        var keep;
	        // Simple optimization
	        if (dimSize === 1) {
	            keep = cb.call(context, this.get(dimensions[0], i, stack), i);
	        } else {
	            for (var k = 0; k < dimSize; k++) {
	                value[k] = this.get(dimensions[k], i, stack);
	            }
	            value[k] = i;
	            keep = cb.apply(context, value);
	        }
	        if (keep) {
	            newIndices.push(indices[i]);
	        }
	    }

	    this.indices = newIndices;

	    // Reset data extent
	    this._extent = {};

	    return this;
	};

	/**
	 * Data mapping to a plain array
	 * @param {string|Array.<string>} [dimensions]
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 * @return {Array}
	 */
	listProto.mapArray = function (dimensions, cb, stack, context) {
	    if (typeof dimensions === 'function') {
	        context = stack;
	        stack = cb;
	        cb = dimensions;
	        dimensions = [];
	    }

	    var result = [];
	    this.each(dimensions, function () {
	        result.push(cb && cb.apply(this, arguments));
	    }, stack, context);
	    return result;
	};

	function cloneListForMapAndSample(original, excludeDimensions) {
	    var allDimensions = original.dimensions;
	    var list = new List(zrUtil.map(allDimensions, original.getDimensionInfo, original), original.hostModel);
	    // FIXME If needs stackedOn, value may already been stacked
	    transferProperties(list, original);

	    var storage = list._storage = {};
	    var originalStorage = original._storage;
	    // Init storage
	    for (var i = 0; i < allDimensions.length; i++) {
	        var dim = allDimensions[i];
	        var dimStore = originalStorage[dim];
	        if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	            storage[dim] = new dimStore.constructor(originalStorage[dim].length);
	        } else {
	            // Direct reference for other dimensions
	            storage[dim] = originalStorage[dim];
	        }
	    }
	    return list;
	}

	/**
	 * Data mapping to a new List with given dimensions
	 * @param {string|Array.<string>} dimensions
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 * @return {Array}
	 */
	listProto.map = function (dimensions, cb, stack, context) {
	    dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);

	    var list = cloneListForMapAndSample(this, dimensions);
	    // Following properties are all immutable.
	    // So we can reference to the same value
	    var indices = list.indices = this.indices;

	    var storage = list._storage;

	    var tmpRetValue = [];
	    this.each(dimensions, function () {
	        var idx = arguments[arguments.length - 1];
	        var retValue = cb && cb.apply(this, arguments);
	        if (retValue != null) {
	            // a number
	            if (typeof retValue === 'number') {
	                tmpRetValue[0] = retValue;
	                retValue = tmpRetValue;
	            }
	            for (var i = 0; i < retValue.length; i++) {
	                var dim = dimensions[i];
	                var dimStore = storage[dim];
	                var rawIdx = indices[idx];
	                if (dimStore) {
	                    dimStore[rawIdx] = retValue[i];
	                }
	            }
	        }
	    }, stack, context);

	    return list;
	};

	/**
	 * Large data down sampling on given dimension
	 * @param {string} dimension
	 * @param {number} rate
	 * @param {Function} sampleValue
	 * @param {Function} sampleIndex Sample index for name and id
	 */
	listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	    var list = cloneListForMapAndSample(this, [dimension]);
	    var storage = this._storage;
	    var targetStorage = list._storage;

	    var originalIndices = this.indices;
	    var indices = list.indices = [];

	    var frameValues = [];
	    var frameIndices = [];
	    var frameSize = Math.floor(1 / rate);

	    var dimStore = targetStorage[dimension];
	    var len = this.count();
	    // Copy data from original data
	    for (var i = 0; i < storage[dimension].length; i++) {
	        targetStorage[dimension][i] = storage[dimension][i];
	    }
	    for (var i = 0; i < len; i += frameSize) {
	        // Last frame
	        if (frameSize > len - i) {
	            frameSize = len - i;
	            frameValues.length = frameSize;
	        }
	        for (var k = 0; k < frameSize; k++) {
	            var idx = originalIndices[i + k];
	            frameValues[k] = dimStore[idx];
	            frameIndices[k] = idx;
	        }
	        var value = sampleValue(frameValues);
	        var idx = frameIndices[sampleIndex(frameValues, value) || 0];
	        // Only write value on the filtered data
	        dimStore[idx] = value;
	        indices.push(idx);
	    }

	    return list;
	};

	/**
	 * Get model of one data item.
	 *
	 * @param {number} idx
	 */
	// FIXME Model proxy ?
	listProto.getItemModel = function (idx) {
	    var hostModel = this.hostModel;
	    idx = this.indices[idx];
	    return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);
	};

	/**
	 * Create a data differ
	 * @param {module:echarts/data/List} otherList
	 * @return {module:echarts/data/DataDiffer}
	 */
	listProto.diff = function (otherList) {
	    var idList = this._idList;
	    var otherIdList = otherList && otherList._idList;
	    var val;
	    // Use prefix to avoid index to be the same as otherIdList[idx],
	    // which will cause weird udpate animation.
	    var prefix = 'e\0\0';

	    return new DataDiffer(otherList ? otherList.indices : [], this.indices, function (idx) {
	        return (val = otherIdList[idx]) != null ? val : prefix + idx;
	    }, function (idx) {
	        return (val = idList[idx]) != null ? val : prefix + idx;
	    });
	};
	/**
	 * Get visual property.
	 * @param {string} key
	 */
	listProto.getVisual = function (key) {
	    var visual = this._visual;
	    return visual && visual[key];
	};

	/**
	 * Set visual property
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setVisual('color', color);
	 *  setVisual({
	 *      'color': color
	 *  });
	 */
	listProto.setVisual = function (key, val) {
	    if (isObject(key)) {
	        for (var name in key) {
	            if (key.hasOwnProperty(name)) {
	                this.setVisual(name, key[name]);
	            }
	        }
	        return;
	    }
	    this._visual = this._visual || {};
	    this._visual[key] = val;
	};

	/**
	 * Set layout property.
	 * @param {string} key
	 * @param {*} [val]
	 */
	listProto.setLayout = function (key, val) {
	    if (isObject(key)) {
	        for (var name in key) {
	            if (key.hasOwnProperty(name)) {
	                this.setLayout(name, key[name]);
	            }
	        }
	        return;
	    }
	    this._layout[key] = val;
	};

	/**
	 * Get layout property.
	 * @param  {string} key.
	 * @return {*}
	 */
	listProto.getLayout = function (key) {
	    return this._layout[key];
	};

	/**
	 * Get layout of single data item
	 * @param {number} idx
	 */
	listProto.getItemLayout = function (idx) {
	    return this._itemLayouts[idx];
	};

	/**
	 * Set layout of single data item
	 * @param {number} idx
	 * @param {Object} layout
	 * @param {boolean=} [merge=false]
	 */
	listProto.setItemLayout = function (idx, layout, merge) {
	    this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;
	};

	/**
	 * Clear all layout of single data item
	 */
	listProto.clearItemLayouts = function () {
	    this._itemLayouts.length = 0;
	};

	/**
	 * Get visual property of single data item
	 * @param {number} idx
	 * @param {string} key
	 * @param {boolean} ignoreParent
	 */
	listProto.getItemVisual = function (idx, key, ignoreParent) {
	    var itemVisual = this._itemVisuals[idx];
	    var val = itemVisual && itemVisual[key];
	    if (val == null && !ignoreParent) {
	        // Use global visual property
	        return this.getVisual(key);
	    }
	    return val;
	};

	/**
	 * Set visual property of single data item
	 *
	 * @param {number} idx
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setItemVisual(0, 'color', color);
	 *  setItemVisual(0, {
	 *      'color': color
	 *  });
	 */
	listProto.setItemVisual = function (idx, key, value) {
	    var itemVisual = this._itemVisuals[idx] || {};
	    this._itemVisuals[idx] = itemVisual;

	    if (isObject(key)) {
	        for (var name in key) {
	            if (key.hasOwnProperty(name)) {
	                itemVisual[name] = key[name];
	            }
	        }
	        return;
	    }
	    itemVisual[key] = value;
	};

	/**
	 * Clear itemVisuals and list visual.
	 */
	listProto.clearAllVisual = function () {
	    this._visual = {};
	    this._itemVisuals = [];
	};

	var setItemDataAndSeriesIndex = function setItemDataAndSeriesIndex(child) {
	    child.seriesIndex = this.seriesIndex;
	    child.dataIndex = this.dataIndex;
	    child.dataType = this.dataType;
	};
	/**
	 * Set graphic element relative to data. It can be set as null
	 * @param {number} idx
	 * @param {module:zrender/Element} [el]
	 */
	listProto.setItemGraphicEl = function (idx, el) {
	    var hostModel = this.hostModel;

	    if (el) {
	        // Add data index and series index for indexing the data by element
	        // Useful in tooltip
	        el.dataIndex = idx;
	        el.dataType = this.dataType;
	        el.seriesIndex = hostModel && hostModel.seriesIndex;
	        if (el.type === 'group') {
	            el.traverse(setItemDataAndSeriesIndex, el);
	        }
	    }

	    this._graphicEls[idx] = el;
	};

	/**
	 * @param {number} idx
	 * @return {module:zrender/Element}
	 */
	listProto.getItemGraphicEl = function (idx) {
	    return this._graphicEls[idx];
	};

	/**
	 * @param {Function} cb
	 * @param {*} context
	 */
	listProto.eachItemGraphicEl = function (cb, context) {
	    zrUtil.each(this._graphicEls, function (el, idx) {
	        if (el) {
	            cb && cb.call(context, el, idx);
	        }
	    });
	};

	/**
	 * Shallow clone a new list except visual and layout properties, and graph elements.
	 * New list only change the indices.
	 */
	listProto.cloneShallow = function () {
	    var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	    var list = new List(dimensionInfoList, this.hostModel);

	    // FIXME
	    list._storage = this._storage;

	    transferProperties(list, this);

	    // Clone will not change the data extent and indices
	    list.indices = this.indices.slice();

	    if (this._extent) {
	        list._extent = zrUtil.extend({}, this._extent);
	    }

	    return list;
	};

	/**
	 * Wrap some method to add more feature
	 * @param {string} methodName
	 * @param {Function} injectFunction
	 */
	listProto.wrapMethod = function (methodName, injectFunction) {
	    var originalMethod = this[methodName];
	    if (typeof originalMethod !== 'function') {
	        return;
	    }
	    this.__wrappedMethods = this.__wrappedMethods || [];
	    this.__wrappedMethods.push(methodName);
	    this[methodName] = function () {
	        var res = originalMethod.apply(this, arguments);
	        return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));
	    };
	};

	// Methods that create a new list based on this list should be listed here.
	// Notice that those method should `RETURN` the new list.
	listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];
	// Methods that change indices of this list should be listed here.
	listProto.CHANGABLE_METHODS = ['filterSelf'];

	module.exports = List;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 599 */
/***/ function(module, exports) {

	'use strict';

	function defaultKeyGetter(item) {
	    return item;
	}

	function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {
	    this._old = oldArr;
	    this._new = newArr;

	    this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	    this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	}

	DataDiffer.prototype = {

	    constructor: DataDiffer,

	    /**
	     * Callback function when add a data
	     */
	    add: function add(func) {
	        this._add = func;
	        return this;
	    },

	    /**
	     * Callback function when update a data
	     */
	    update: function update(func) {
	        this._update = func;
	        return this;
	    },

	    /**
	     * Callback function when remove a data
	     */
	    remove: function remove(func) {
	        this._remove = func;
	        return this;
	    },

	    execute: function execute() {
	        var oldArr = this._old;
	        var newArr = this._new;
	        var oldKeyGetter = this._oldKeyGetter;
	        var newKeyGetter = this._newKeyGetter;

	        var oldDataIndexMap = {};
	        var newDataIndexMap = {};
	        var oldDataKeyArr = [];
	        var newDataKeyArr = [];
	        var i;

	        initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);
	        initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);

	        // Travel by inverted order to make sure order consistency
	        // when duplicate keys exists (consider newDataIndex.pop() below).
	        // For performance consideration, these code below do not look neat.
	        for (i = 0; i < oldArr.length; i++) {
	            var key = oldDataKeyArr[i];
	            var idx = newDataIndexMap[key];

	            // idx can never be empty array here. see 'set null' logic below.
	            if (idx != null) {
	                // Consider there is duplicate key (for example, use dataItem.name as key).
	                // We should make sure every item in newArr and oldArr can be visited.
	                var len = idx.length;
	                if (len) {
	                    len === 1 && (newDataIndexMap[key] = null);
	                    idx = idx.unshift();
	                } else {
	                    newDataIndexMap[key] = null;
	                }
	                this._update && this._update(idx, i);
	            } else {
	                this._remove && this._remove(i);
	            }
	        }

	        for (var i = 0; i < newDataKeyArr.length; i++) {
	            var key = newDataKeyArr[i];
	            if (newDataIndexMap.hasOwnProperty(key)) {
	                var idx = newDataIndexMap[key];
	                if (idx == null) {
	                    continue;
	                }
	                // idx can never be empty array here. see 'set null' logic above.
	                if (!idx.length) {
	                    this._add && this._add(idx);
	                } else {
	                    for (var j = 0, len = idx.length; j < len; j++) {
	                        this._add && this._add(idx[j]);
	                    }
	                }
	            }
	        }
	    }
	};

	function initIndexMap(arr, map, keyArr, keyGetter) {
	    for (var i = 0; i < arr.length; i++) {
	        var key = keyGetter(arr[i], i);
	        var existence = map[key];
	        if (existence == null) {
	            keyArr.push(key);
	            map[key] = i;
	        } else {
	            if (!existence.length) {
	                map[key] = existence = [existence];
	            }
	            existence.push(i);
	        }
	    }
	}

	module.exports = DataDiffer;

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var echarts = __webpack_require__(501);
	var PRIORITY = echarts.PRIORITY;

	__webpack_require__(601);
	__webpack_require__(604);

	echarts.registerVisual(zrUtil.curry(__webpack_require__(610), 'line', 'circle', 'line'));
	echarts.registerLayout(zrUtil.curry(__webpack_require__(611), 'line'));

	// Down sample after filter
	echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(__webpack_require__(612), 'line'));

	// In case developer forget to include grid component
	__webpack_require__(613);

/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createListFromArray = __webpack_require__(602);
	var SeriesModel = __webpack_require__(528);

	module.exports = SeriesModel.extend({

	    type: 'series.line',

	    dependencies: ['grid', 'polar'],

	    getInitialData: function getInitialData(option, ecModel) {
	        if (__DEV__) {
	            var coordSys = option.coordinateSystem;
	            if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {
	                throw new Error('Line not support coordinateSystem besides cartesian and polar');
	            }
	        }
	        return createListFromArray(option.data, this, ecModel);
	    },

	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,

	        hoverAnimation: true,
	        // stack: null
	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        // polarIndex: 0,

	        // If clip the overflow value
	        clipOverflow: true,

	        label: {
	            normal: {
	                position: 'top'
	            }
	        },
	        // itemStyle: {
	        //     normal: {},
	        //     emphasis: {}
	        // },
	        lineStyle: {
	            normal: {
	                width: 2,
	                type: 'solid'
	            }
	        },
	        // areaStyle: {},
	        // false, 'start', 'end', 'middle'
	        step: false,

	        // Disabled if step is true
	        smooth: false,
	        smoothMonotone: null,
	        // 拐点图形类型
	        symbol: 'emptyCircle',
	        // 拐点图形大小
	        symbolSize: 4,
	        // 拐点图形旋转控制
	        symbolRotate: null,

	        // 是否显示 symbol, 只有在 tooltip hover 的时候显示
	        showSymbol: true,
	        // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	        showAllSymbol: false,

	        // 是否连接断点
	        connectNulls: false,

	        // 数据过滤，'average', 'max', 'min', 'sum'
	        sampling: 'none',

	        animationEasing: 'linear',

	        // Disable progressive
	        progressive: 0,
	        hoverLayerThreshold: Infinity
	    }
	});

/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var completeDimensions = __webpack_require__(603);
	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);
	var CoordinateSystem = __webpack_require__(526);
	var getDataItemValue = modelUtil.getDataItemValue;
	var converDataValue = modelUtil.converDataValue;

	function firstDataNotNull(data) {
	    var i = 0;
	    while (i < data.length && data[i] == null) {
	        i++;
	    }
	    return data[i];
	}
	function ifNeedCompleteOrdinalData(data) {
	    var sampleItem = firstDataNotNull(data);
	    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));
	}

	/**
	 * Helper function to create a list from option data
	 */
	function createListFromArray(data, seriesModel, ecModel) {
	    // If data is undefined
	    data = data || [];

	    if (__DEV__) {
	        if (!zrUtil.isArray(data)) {
	            throw new Error('Invalid data.');
	        }
	    }

	    var coordSysName = seriesModel.get('coordinateSystem');
	    var creator = creators[coordSysName];
	    var registeredCoordSys = CoordinateSystem.get(coordSysName);
	    // FIXME
	    var axesInfo = creator && creator(data, seriesModel, ecModel);
	    var dimensions = axesInfo && axesInfo.dimensions;
	    if (!dimensions) {
	        // Get dimensions from registered coordinate system
	        dimensions = registeredCoordSys && registeredCoordSys.dimensions || ['x', 'y'];
	        dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));
	    }
	    var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;

	    var list = new List(dimensions, seriesModel);

	    var nameList = createNameList(axesInfo, data);

	    var categories = {};
	    var dimValueGetter = categoryIndex >= 0 && ifNeedCompleteOrdinalData(data) ? function (itemOpt, dimName, dataIndex, dimIndex) {
	        // If any dataItem is like { value: 10 }
	        if (modelUtil.isDataItemOption(itemOpt)) {
	            list.hasItemOption = true;
	        }

	        // Use dataIndex as ordinal value in categoryAxis
	        return dimIndex === categoryIndex ? dataIndex : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
	    } : function (itemOpt, dimName, dataIndex, dimIndex) {
	        var value = getDataItemValue(itemOpt);
	        var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);
	        // If any dataItem is like { value: 10 }
	        if (modelUtil.isDataItemOption(itemOpt)) {
	            list.hasItemOption = true;
	        }

	        var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;
	        if (categoryAxesModels && categoryAxesModels[dimName]) {
	            // If given value is a category string
	            if (typeof val === 'string') {
	                // Lazy get categories
	                categories[dimName] = categories[dimName] || categoryAxesModels[dimName].getCategories();
	                val = zrUtil.indexOf(categories[dimName], val);
	                if (val < 0 && !isNaN(val)) {
	                    // In case some one write '1', '2' istead of 1, 2
	                    val = +val;
	                }
	            }
	        }
	        return val;
	    };

	    list.hasItemOption = false;
	    list.initData(data, nameList, dimValueGetter);

	    return list;
	}

	function isStackable(axisType) {
	    return axisType !== 'category' && axisType !== 'time';
	}

	function getDimTypeByAxis(axisType) {
	    return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
	}

	/**
	 * Creaters for each coord system.
	 */
	var creators = {

	    cartesian2d: function cartesian2d(data, seriesModel, ecModel) {

	        var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {
	            return ecModel.queryComponents({
	                mainType: name,
	                index: seriesModel.get(name + 'Index'),
	                id: seriesModel.get(name + 'Id')
	            })[0];
	        });
	        var xAxisModel = axesModels[0];
	        var yAxisModel = axesModels[1];

	        if (__DEV__) {
	            if (!xAxisModel) {
	                throw new Error('xAxis "' + zrUtil.retrieve(seriesModel.get('xAxisIndex'), seriesModel.get('xAxisId'), 0) + '" not found');
	            }
	            if (!yAxisModel) {
	                throw new Error('yAxis "' + zrUtil.retrieve(seriesModel.get('xAxisIndex'), seriesModel.get('yAxisId'), 0) + '" not found');
	            }
	        }

	        var xAxisType = xAxisModel.get('type');
	        var yAxisType = yAxisModel.get('type');

	        var dimensions = [{
	            name: 'x',
	            type: getDimTypeByAxis(xAxisType),
	            stackable: isStackable(xAxisType)
	        }, {
	            name: 'y',
	            // If two category axes
	            type: getDimTypeByAxis(yAxisType),
	            stackable: isStackable(yAxisType)
	        }];

	        var isXAxisCateogry = xAxisType === 'category';
	        var isYAxisCategory = yAxisType === 'category';

	        completeDimensions(dimensions, data, ['x', 'y', 'z']);

	        var categoryAxesModels = {};
	        if (isXAxisCateogry) {
	            categoryAxesModels.x = xAxisModel;
	        }
	        if (isYAxisCategory) {
	            categoryAxesModels.y = yAxisModel;
	        }
	        return {
	            dimensions: dimensions,
	            categoryIndex: isXAxisCateogry ? 0 : isYAxisCategory ? 1 : -1,
	            categoryAxesModels: categoryAxesModels
	        };
	    },

	    singleAxis: function singleAxis(data, seriesModel, ecModel) {

	        var singleAxisModel = ecModel.queryComponents({
	            mainType: 'singleAxis',
	            index: seriesModel.get('singleAxisIndex'),
	            id: seriesModel.get('singleAxisId')
	        })[0];

	        if (__DEV__) {
	            if (!singleAxisModel) {
	                throw new Error('singleAxis should be specified.');
	            }
	        }

	        var singleAxisType = singleAxisModel.get('type');
	        var isCategory = singleAxisType === 'category';

	        var dimensions = [{
	            name: 'single',
	            type: getDimTypeByAxis(singleAxisType),
	            stackable: isStackable(singleAxisType)
	        }];

	        completeDimensions(dimensions, data);

	        var categoryAxesModels = {};
	        if (isCategory) {
	            categoryAxesModels.single = singleAxisModel;
	        }

	        return {
	            dimensions: dimensions,
	            categoryIndex: isCategory ? 0 : -1,
	            categoryAxesModels: categoryAxesModels
	        };
	    },

	    polar: function polar(data, seriesModel, ecModel) {
	        var polarModel = ecModel.queryComponents({
	            mainType: 'polar',
	            index: seriesModel.get('polarIndex'),
	            id: seriesModel.get('polarId')
	        })[0];

	        var angleAxisModel = polarModel.findAxisModel('angleAxis');
	        var radiusAxisModel = polarModel.findAxisModel('radiusAxis');

	        if (__DEV__) {
	            if (!angleAxisModel) {
	                throw new Error('angleAxis option not found');
	            }
	            if (!radiusAxisModel) {
	                throw new Error('radiusAxis option not found');
	            }
	        }

	        var radiusAxisType = radiusAxisModel.get('type');
	        var angleAxisType = angleAxisModel.get('type');

	        var dimensions = [{
	            name: 'radius',
	            type: getDimTypeByAxis(radiusAxisType),
	            stackable: isStackable(radiusAxisType)
	        }, {
	            name: 'angle',
	            type: getDimTypeByAxis(angleAxisType),
	            stackable: isStackable(angleAxisType)
	        }];
	        var isAngleAxisCateogry = angleAxisType === 'category';
	        var isRadiusAxisCateogry = radiusAxisType === 'category';

	        completeDimensions(dimensions, data, ['radius', 'angle', 'value']);

	        var categoryAxesModels = {};
	        if (isRadiusAxisCateogry) {
	            categoryAxesModels.radius = radiusAxisModel;
	        }
	        if (isAngleAxisCateogry) {
	            categoryAxesModels.angle = angleAxisModel;
	        }
	        return {
	            dimensions: dimensions,
	            categoryIndex: isAngleAxisCateogry ? 1 : isRadiusAxisCateogry ? 0 : -1,
	            categoryAxesModels: categoryAxesModels
	        };
	    },

	    geo: function geo(data, seriesModel, ecModel) {
	        // TODO Region
	        // 多个散点图系列在同一个地区的时候
	        return {
	            dimensions: completeDimensions([{ name: 'lng' }, { name: 'lat' }], data, ['lng', 'lat', 'value'])
	        };
	    }
	};

	function createNameList(result, data) {
	    var nameList = [];

	    var categoryDim = result && result.dimensions[result.categoryIndex];
	    var categoryAxisModel;
	    if (categoryDim) {
	        categoryAxisModel = result.categoryAxesModels[categoryDim.name];
	    }

	    if (categoryAxisModel) {
	        // FIXME Two category axis
	        var categories = categoryAxisModel.getCategories();
	        if (categories) {
	            var dataLen = data.length;
	            // Ordered data is given explicitly like
	            // [[3, 0.2], [1, 0.3], [2, 0.15]]
	            // or given scatter data,
	            // pick the category
	            if (zrUtil.isArray(data[0]) && data[0].length > 1) {
	                nameList = [];
	                for (var i = 0; i < dataLen; i++) {
	                    nameList[i] = categories[data[i][result.categoryIndex || 0]];
	                }
	            } else {
	                nameList = categories.slice(0);
	            }
	        }
	    }

	    return nameList;
	}

	module.exports = createListFromArray;

/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Complete dimensions by data (guess dimension).
	 */

	var zrUtil = __webpack_require__(504);

	/**
	 * Complete the dimensions array guessed from the data structure.
	 * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']
	 * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]
	 * @param  {Array.<string>} [defaultNames]    Default names to fill not necessary dimensions, like ['value']
	 * @param  {string} [extraPrefix]             Prefix of name when filling the left dimensions.
	 * @return {Array.<string>}
	 */
	function completeDimensions(dimensions, data, defaultNames, extraPrefix) {
	    if (!data) {
	        return dimensions;
	    }

	    var value0 = retrieveValue(data[0]);
	    var dimSize = zrUtil.isArray(value0) && value0.length || 1;

	    defaultNames = defaultNames || [];
	    extraPrefix = extraPrefix || 'extra';
	    for (var i = 0; i < dimSize; i++) {
	        if (!dimensions[i]) {
	            var name = defaultNames[i] || extraPrefix + (i - defaultNames.length);
	            dimensions[i] = guessOrdinal(data, i) ? { type: 'ordinal', name: name } : name;
	        }
	    }

	    return dimensions;
	}

	// The rule should not be complex, otherwise user might not
	// be able to known where the data is wrong.
	var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {
	    for (var i = 0, len = data.length; i < len; i++) {
	        var value = retrieveValue(data[i]);

	        if (!zrUtil.isArray(value)) {
	            return false;
	        }

	        var value = value[dimIndex];
	        if (value != null && isFinite(value)) {
	            return false;
	        } else if (zrUtil.isString(value) && value !== '-') {
	            return true;
	        }
	    }
	    return false;
	};

	function retrieveValue(o) {
	    return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value : o;
	}

	module.exports = completeDimensions;

/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME step not support polar


	var zrUtil = __webpack_require__(504);
	var SymbolDraw = __webpack_require__(605);
	var _Symbol = __webpack_require__(606);
	var lineAnimationDiff = __webpack_require__(608);
	var graphic = __webpack_require__(543);
	var modelUtil = __webpack_require__(505);
	var polyHelper = __webpack_require__(609);
	var ChartView = __webpack_require__(542);

	function isPointsSame(points1, points2) {
	    if (points1.length !== points2.length) {
	        return;
	    }
	    for (var i = 0; i < points1.length; i++) {
	        var p1 = points1[i];
	        var p2 = points2[i];
	        if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	            return;
	        }
	    }
	    return true;
	}

	function getSmooth(smooth) {
	    return typeof smooth === 'number' ? smooth : smooth ? 0.3 : 0;
	}

	function getAxisExtentWithGap(axis) {
	    var extent = axis.getGlobalExtent();
	    if (axis.onBand) {
	        // Remove extra 1px to avoid line miter in clipped edge
	        var halfBandWidth = axis.getBandWidth() / 2 - 1;
	        var dir = extent[1] > extent[0] ? 1 : -1;
	        extent[0] += dir * halfBandWidth;
	        extent[1] -= dir * halfBandWidth;
	    }
	    return extent;
	}

	function sign(val) {
	    return val >= 0 ? 1 : -1;
	}
	/**
	 * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	 * @param {module:echarts/data/List} data
	 * @param {Array.<Array.<number>>} points
	 * @private
	 */
	function getStackedOnPoints(coordSys, data) {
	    var baseAxis = coordSys.getBaseAxis();
	    var valueAxis = coordSys.getOtherAxis(baseAxis);
	    var valueStart = baseAxis.onZero ? 0 : valueAxis.scale.getExtent()[0];

	    var valueDim = valueAxis.dim;

	    var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

	    return data.mapArray([valueDim], function (val, idx) {
	        var stackedOnSameSign;
	        var stackedOn = data.stackedOn;
	        // Find first stacked value with same sign
	        while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	            stackedOnSameSign = stackedOn;
	            break;
	        }
	        var stackedData = [];
	        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	        stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

	        return coordSys.dataToPoint(stackedData);
	    }, true);
	}

	function createGridClipShape(cartesian, hasAnimation, seriesModel) {
	    var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	    var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	    var isHorizontal = cartesian.getBaseAxis().isHorizontal();

	    var x = Math.min(xExtent[0], xExtent[1]);
	    var y = Math.min(yExtent[0], yExtent[1]);
	    var width = Math.max(xExtent[0], xExtent[1]) - x;
	    var height = Math.max(yExtent[0], yExtent[1]) - y;
	    var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;
	    // Expand clip shape to avoid clipping when line value exceeds axis
	    var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);
	    if (isHorizontal) {
	        y -= expandSize;
	        height += expandSize * 2;
	    } else {
	        x -= expandSize;
	        width += expandSize * 2;
	    }

	    var clipPath = new graphic.Rect({
	        shape: {
	            x: x,
	            y: y,
	            width: width,
	            height: height
	        }
	    });

	    if (hasAnimation) {
	        clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	        graphic.initProps(clipPath, {
	            shape: {
	                width: width,
	                height: height
	            }
	        }, seriesModel);
	    }

	    return clipPath;
	}

	function createPolarClipShape(polar, hasAnimation, seriesModel) {
	    var angleAxis = polar.getAngleAxis();
	    var radiusAxis = polar.getRadiusAxis();

	    var radiusExtent = radiusAxis.getExtent();
	    var angleExtent = angleAxis.getExtent();

	    var RADIAN = Math.PI / 180;

	    var clipPath = new graphic.Sector({
	        shape: {
	            cx: polar.cx,
	            cy: polar.cy,
	            r0: radiusExtent[0],
	            r: radiusExtent[1],
	            startAngle: -angleExtent[0] * RADIAN,
	            endAngle: -angleExtent[1] * RADIAN,
	            clockwise: angleAxis.inverse
	        }
	    });

	    if (hasAnimation) {
	        clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	        graphic.initProps(clipPath, {
	            shape: {
	                endAngle: -angleExtent[1] * RADIAN
	            }
	        }, seriesModel);
	    }

	    return clipPath;
	}

	function createClipShape(coordSys, hasAnimation, seriesModel) {
	    return coordSys.type === 'polar' ? createPolarClipShape(coordSys, hasAnimation, seriesModel) : createGridClipShape(coordSys, hasAnimation, seriesModel);
	}

	function turnPointsIntoStep(points, coordSys, stepTurnAt) {
	    var baseAxis = coordSys.getBaseAxis();
	    var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;

	    var stepPoints = [];
	    for (var i = 0; i < points.length - 1; i++) {
	        var nextPt = points[i + 1];
	        var pt = points[i];
	        stepPoints.push(pt);

	        var stepPt = [];
	        switch (stepTurnAt) {
	            case 'end':
	                stepPt[baseIndex] = nextPt[baseIndex];
	                stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                // default is start
	                stepPoints.push(stepPt);
	                break;
	            case 'middle':
	                // default is start
	                var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
	                var stepPt2 = [];
	                stepPt[baseIndex] = stepPt2[baseIndex] = middle;
	                stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
	                stepPoints.push(stepPt);
	                stepPoints.push(stepPt2);
	                break;
	            default:
	                stepPt[baseIndex] = pt[baseIndex];
	                stepPt[1 - baseIndex] = nextPt[1 - baseIndex];
	                // default is start
	                stepPoints.push(stepPt);
	        }
	    }
	    // Last points
	    points[i] && stepPoints.push(points[i]);
	    return stepPoints;
	}

	function getVisualGradient(data, coordSys) {
	    var visualMetaList = data.getVisual('visualMeta');
	    if (!visualMetaList || !visualMetaList.length || !data.count()) {
	        // When data.count() is 0, gradient range can not be calculated.
	        return;
	    }

	    var visualMeta;
	    for (var i = visualMetaList.length - 1; i >= 0; i--) {
	        // Can only be x or y
	        if (visualMetaList[i].dimension < 2) {
	            visualMeta = visualMetaList[i];
	            break;
	        }
	    }
	    if (!visualMeta || coordSys.type !== 'cartesian2d') {
	        if (__DEV__) {
	            console.warn('Visual map on line style only support x or y dimension.');
	        }
	        return;
	    }

	    // If the area to be rendered is bigger than area defined by LinearGradient,
	    // the canvas spec prescribes that the color of the first stop and the last
	    // stop should be used. But if two stops are added at offset 0, in effect
	    // browsers use the color of the second stop to render area outside
	    // LinearGradient. So we can only infinitesimally extend area defined in
	    // LinearGradient to render `outerColors`.

	    var dimension = visualMeta.dimension;
	    var dimName = data.dimensions[dimension];
	    var axis = coordSys.getAxis(dimName);

	    // dataToCoor mapping may not be linear, but must be monotonic.
	    var colorStops = zrUtil.map(visualMeta.stops, function (stop) {
	        return {
	            coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),
	            color: stop.color
	        };
	    });
	    var stopLen = colorStops.length;
	    var outerColors = visualMeta.outerColors.slice();

	    if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {
	        colorStops.reverse();
	        outerColors.reverse();
	    }

	    var tinyExtent = 10; // Arbitrary value: 10px
	    var minCoord = colorStops[0].coord - tinyExtent;
	    var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;
	    var coordSpan = maxCoord - minCoord;

	    if (coordSpan < 1e-3) {
	        return 'transparent';
	    }

	    zrUtil.each(colorStops, function (stop) {
	        stop.offset = (stop.coord - minCoord) / coordSpan;
	    });
	    colorStops.push({
	        offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,
	        color: outerColors[1] || 'transparent'
	    });
	    colorStops.unshift({ // notice colorStops.length have been changed.
	        offset: stopLen ? colorStops[0].offset : 0.5,
	        color: outerColors[0] || 'transparent'
	    });

	    // zrUtil.each(colorStops, function (colorStop) {
	    //     // Make sure each offset has rounded px to avoid not sharp edge
	    //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);
	    // });

	    var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);
	    gradient[dimName] = minCoord;
	    gradient[dimName + '2'] = maxCoord;

	    return gradient;
	}

	module.exports = ChartView.extend({

	    type: 'line',

	    init: function init() {
	        var lineGroup = new graphic.Group();

	        var symbolDraw = new SymbolDraw();
	        this.group.add(symbolDraw.group);

	        this._symbolDraw = symbolDraw;
	        this._lineGroup = lineGroup;
	    },

	    render: function render(seriesModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var group = this.group;
	        var data = seriesModel.getData();
	        var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	        var areaStyleModel = seriesModel.getModel('areaStyle.normal');

	        var points = data.mapArray(data.getItemLayout, true);

	        var isCoordSysPolar = coordSys.type === 'polar';
	        var prevCoordSys = this._coordSys;

	        var symbolDraw = this._symbolDraw;
	        var polyline = this._polyline;
	        var polygon = this._polygon;

	        var lineGroup = this._lineGroup;

	        var hasAnimation = seriesModel.get('animation');

	        var isAreaChart = !areaStyleModel.isEmpty();
	        var stackedOnPoints = getStackedOnPoints(coordSys, data);

	        var showSymbol = seriesModel.get('showSymbol');

	        var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol') && this._getSymbolIgnoreFunc(data, coordSys);

	        // Remove temporary symbols
	        var oldData = this._data;
	        oldData && oldData.eachItemGraphicEl(function (el, idx) {
	            if (el.__temp) {
	                group.remove(el);
	                oldData.setItemGraphicEl(idx, null);
	            }
	        });

	        // Remove previous created symbols if showSymbol changed to false
	        if (!showSymbol) {
	            symbolDraw.remove();
	        }

	        group.add(lineGroup);

	        // FIXME step not support polar
	        var step = !isCoordSysPolar && seriesModel.get('step');
	        // Initialization animation or coordinate system changed
	        if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {
	            showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

	            if (step) {
	                // TODO If stacked series is not step
	                points = turnPointsIntoStep(points, coordSys, step);
	                stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	            }

	            polyline = this._newPolyline(points, coordSys, hasAnimation);
	            if (isAreaChart) {
	                polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	            }
	            lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
	        } else {
	            if (isAreaChart && !polygon) {
	                // If areaStyle is added
	                polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	            } else if (polygon && !isAreaChart) {
	                // If areaStyle is removed
	                lineGroup.remove(polygon);
	                polygon = this._polygon = null;
	            }

	            // Update clipPath
	            lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));

	            // Always update, or it is wrong in the case turning on legend
	            // because points are not changed
	            showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

	            // Stop symbol animation and sync with line points
	            // FIXME performance?
	            data.eachItemGraphicEl(function (el) {
	                el.stopAnimation(true);
	            });

	            // In the case data zoom triggerred refreshing frequently
	            // Data may not change if line has a category axis. So it should animate nothing
	            if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {
	                if (hasAnimation) {
	                    this._updateAnimation(data, stackedOnPoints, coordSys, api, step);
	                } else {
	                    // Not do it in update with animation
	                    if (step) {
	                        // TODO If stacked series is not step
	                        points = turnPointsIntoStep(points, coordSys, step);
	                        stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	                    }

	                    polyline.setShape({
	                        points: points
	                    });
	                    polygon && polygon.setShape({
	                        points: points,
	                        stackedOnPoints: stackedOnPoints
	                    });
	                }
	            }
	        }

	        var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');

	        polyline.useStyle(zrUtil.defaults(
	        // Use color in lineStyle first
	        lineStyleModel.getLineStyle(), {
	            fill: 'none',
	            stroke: visualColor,
	            lineJoin: 'bevel'
	        }));

	        var smooth = seriesModel.get('smooth');
	        smooth = getSmooth(seriesModel.get('smooth'));
	        polyline.setShape({
	            smooth: smooth,
	            smoothMonotone: seriesModel.get('smoothMonotone'),
	            connectNulls: seriesModel.get('connectNulls')
	        });

	        if (polygon) {
	            var stackedOn = data.stackedOn;
	            var stackedOnSmooth = 0;

	            polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	                fill: visualColor,
	                opacity: 0.7,
	                lineJoin: 'bevel'
	            }));

	            if (stackedOn) {
	                var stackedOnSeries = stackedOn.hostModel;
	                stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	            }

	            polygon.setShape({
	                smooth: smooth,
	                stackedOnSmooth: stackedOnSmooth,
	                smoothMonotone: seriesModel.get('smoothMonotone'),
	                connectNulls: seriesModel.get('connectNulls')
	            });
	        }

	        this._data = data;
	        // Save the coordinate system for transition animation when data changed
	        this._coordSys = coordSys;
	        this._stackedOnPoints = stackedOnPoints;
	        this._points = points;
	        this._step = step;
	    },

	    dispose: function dispose() {},

	    highlight: function highlight(seriesModel, ecModel, api, payload) {
	        var data = seriesModel.getData();
	        var dataIndex = modelUtil.queryDataIndex(data, payload);

	        if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
	            var symbol = data.getItemGraphicEl(dataIndex);
	            if (!symbol) {
	                // Create a temporary symbol if it is not exists
	                var pt = data.getItemLayout(dataIndex);
	                if (!pt) {
	                    // Null data
	                    return;
	                }
	                symbol = new _Symbol(data, dataIndex);
	                symbol.position = pt;
	                symbol.setZ(seriesModel.get('zlevel'), seriesModel.get('z'));
	                symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	                symbol.__temp = true;
	                data.setItemGraphicEl(dataIndex, symbol);

	                // Stop scale animation
	                symbol.stopSymbolAnimation(true);

	                this.group.add(symbol);
	            }
	            symbol.highlight();
	        } else {
	            // Highlight whole series
	            ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);
	        }
	    },

	    downplay: function downplay(seriesModel, ecModel, api, payload) {
	        var data = seriesModel.getData();
	        var dataIndex = modelUtil.queryDataIndex(data, payload);
	        if (dataIndex != null && dataIndex >= 0) {
	            var symbol = data.getItemGraphicEl(dataIndex);
	            if (symbol) {
	                if (symbol.__temp) {
	                    data.setItemGraphicEl(dataIndex, null);
	                    this.group.remove(symbol);
	                } else {
	                    symbol.downplay();
	                }
	            }
	        } else {
	            // Downplay whole series
	            ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);
	        }
	    },

	    /**
	     * @param {module:zrender/container/Group} group
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    _newPolyline: function _newPolyline(points) {
	        var polyline = this._polyline;
	        // Remove previous created polyline
	        if (polyline) {
	            this._lineGroup.remove(polyline);
	        }

	        polyline = new polyHelper.Polyline({
	            shape: {
	                points: points
	            },
	            silent: true,
	            z2: 10
	        });

	        this._lineGroup.add(polyline);

	        this._polyline = polyline;

	        return polyline;
	    },

	    /**
	     * @param {module:zrender/container/Group} group
	     * @param {Array.<Array.<number>>} stackedOnPoints
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    _newPolygon: function _newPolygon(points, stackedOnPoints) {
	        var polygon = this._polygon;
	        // Remove previous created polygon
	        if (polygon) {
	            this._lineGroup.remove(polygon);
	        }

	        polygon = new polyHelper.Polygon({
	            shape: {
	                points: points,
	                stackedOnPoints: stackedOnPoints
	            },
	            silent: true
	        });

	        this._lineGroup.add(polygon);

	        this._polygon = polygon;
	        return polygon;
	    },
	    /**
	     * @private
	     */
	    _getSymbolIgnoreFunc: function _getSymbolIgnoreFunc(data, coordSys) {
	        var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	        // `getLabelInterval` is provided by echarts/component/axis
	        if (categoryAxis && categoryAxis.isLabelIgnored) {
	            return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
	        }
	    },

	    /**
	     * @private
	     */
	    // FIXME Two value axis
	    _updateAnimation: function _updateAnimation(data, stackedOnPoints, coordSys, api, step) {
	        var polyline = this._polyline;
	        var polygon = this._polygon;
	        var seriesModel = data.hostModel;

	        var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys);

	        var current = diff.current;
	        var stackedOnCurrent = diff.stackedOnCurrent;
	        var next = diff.next;
	        var stackedOnNext = diff.stackedOnNext;
	        if (step) {
	            // TODO If stacked series is not step
	            current = turnPointsIntoStep(diff.current, coordSys, step);
	            stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);
	            next = turnPointsIntoStep(diff.next, coordSys, step);
	            stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);
	        }
	        // `diff.current` is subset of `current` (which should be ensured by
	        // turnPointsIntoStep), so points in `__points` can be updated when
	        // points in `current` are update during animation.
	        polyline.shape.__points = diff.current;
	        polyline.shape.points = current;

	        graphic.updateProps(polyline, {
	            shape: {
	                points: next
	            }
	        }, seriesModel);

	        if (polygon) {
	            polygon.setShape({
	                points: current,
	                stackedOnPoints: stackedOnCurrent
	            });
	            graphic.updateProps(polygon, {
	                shape: {
	                    points: next,
	                    stackedOnPoints: stackedOnNext
	                }
	            }, seriesModel);
	        }

	        var updatedDataInfo = [];
	        var diffStatus = diff.status;

	        for (var i = 0; i < diffStatus.length; i++) {
	            var cmd = diffStatus[i].cmd;
	            if (cmd === '=') {
	                var el = data.getItemGraphicEl(diffStatus[i].idx1);
	                if (el) {
	                    updatedDataInfo.push({
	                        el: el,
	                        ptIdx: i // Index of points
	                    });
	                }
	            }
	        }

	        if (polyline.animators && polyline.animators.length) {
	            polyline.animators[0].during(function () {
	                for (var i = 0; i < updatedDataInfo.length; i++) {
	                    var el = updatedDataInfo[i].el;
	                    el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);
	                }
	            });
	        }
	    },

	    remove: function remove(ecModel) {
	        var group = this.group;
	        var oldData = this._data;
	        this._lineGroup.removeAll();
	        this._symbolDraw.remove(true);
	        // Remove temporary created elements when highlighting
	        oldData && oldData.eachItemGraphicEl(function (el, idx) {
	            if (el.__temp) {
	                group.remove(el);
	                oldData.setItemGraphicEl(idx, null);
	            }
	        });

	        this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
	    }
	});

/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/chart/helper/SymbolDraw
	 */

	var graphic = __webpack_require__(543);
	var _Symbol = __webpack_require__(606);

	/**
	 * @constructor
	 * @alias module:echarts/chart/helper/SymbolDraw
	 * @param {module:zrender/graphic/Group} [symbolCtor]
	 */
	function SymbolDraw(symbolCtor) {
	    this.group = new graphic.Group();

	    this._symbolCtor = symbolCtor || _Symbol;
	}

	var symbolDrawProto = SymbolDraw.prototype;

	function symbolNeedsDraw(data, idx, isIgnore) {
	    var point = data.getItemLayout(idx);
	    // Is an object
	    // if (point && point.hasOwnProperty('point')) {
	    //     point = point.point;
	    // }
	    return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx)) && data.getItemVisual(idx, 'symbol') !== 'none';
	}
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 * @param {Array.<boolean>} [isIgnore]
	 */
	symbolDrawProto.updateData = function (data, isIgnore) {
	    var group = this.group;
	    var seriesModel = data.hostModel;
	    var oldData = this._data;

	    var SymbolCtor = this._symbolCtor;

	    var seriesScope = {
	        itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),
	        hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),
	        symbolRotate: seriesModel.get('symbolRotate'),
	        symbolOffset: seriesModel.get('symbolOffset'),
	        hoverAnimation: seriesModel.get('hoverAnimation'),

	        labelModel: seriesModel.getModel('label.normal'),
	        hoverLabelModel: seriesModel.getModel('label.emphasis')
	    };

	    data.diff(oldData).add(function (newIdx) {
	        var point = data.getItemLayout(newIdx);
	        if (symbolNeedsDraw(data, newIdx, isIgnore)) {
	            var symbolEl = new SymbolCtor(data, newIdx, seriesScope);
	            symbolEl.attr('position', point);
	            data.setItemGraphicEl(newIdx, symbolEl);
	            group.add(symbolEl);
	        }
	    }).update(function (newIdx, oldIdx) {
	        var symbolEl = oldData.getItemGraphicEl(oldIdx);
	        var point = data.getItemLayout(newIdx);
	        if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
	            group.remove(symbolEl);
	            return;
	        }
	        if (!symbolEl) {
	            symbolEl = new SymbolCtor(data, newIdx);
	            symbolEl.attr('position', point);
	        } else {
	            symbolEl.updateData(data, newIdx, seriesScope);
	            graphic.updateProps(symbolEl, {
	                position: point
	            }, seriesModel);
	        }

	        // Add back
	        group.add(symbolEl);

	        data.setItemGraphicEl(newIdx, symbolEl);
	    }).remove(function (oldIdx) {
	        var el = oldData.getItemGraphicEl(oldIdx);
	        el && el.fadeOut(function () {
	            group.remove(el);
	        });
	    }).execute();

	    this._data = data;
	};

	symbolDrawProto.updateLayout = function () {
	    var data = this._data;
	    if (data) {
	        // Not use animation
	        data.eachItemGraphicEl(function (el, idx) {
	            var point = data.getItemLayout(idx);
	            el.attr('position', point);
	        });
	    }
	};

	symbolDrawProto.remove = function (enableAnimation) {
	    var group = this.group;
	    var data = this._data;
	    if (data) {
	        if (enableAnimation) {
	            data.eachItemGraphicEl(function (el) {
	                el.fadeOut(function () {
	                    group.remove(el);
	                });
	            });
	        } else {
	            group.removeAll();
	        }
	    }
	};

	module.exports = SymbolDraw;

/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/chart/helper/Symbol
	 */

	var zrUtil = __webpack_require__(504);
	var symbolUtil = __webpack_require__(607);
	var graphic = __webpack_require__(543);
	var numberUtil = __webpack_require__(507);

	function getSymbolSize(data, idx) {
	    var symbolSize = data.getItemVisual(idx, 'symbolSize');
	    return symbolSize instanceof Array ? symbolSize.slice() : [+symbolSize, +symbolSize];
	}

	function getScale(symbolSize) {
	    return [symbolSize[0] / 2, symbolSize[1] / 2];
	}

	/**
	 * @constructor
	 * @alias {module:echarts/chart/helper/Symbol}
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @extends {module:zrender/graphic/Group}
	 */
	function _Symbol(data, idx, seriesScope) {
	    graphic.Group.call(this);

	    this.updateData(data, idx, seriesScope);
	}

	var symbolProto = _Symbol.prototype;

	function driftSymbol(dx, dy) {
	    this.parent.drift(dx, dy);
	}

	symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {
	    // Remove paths created before
	    this.removeAll();

	    var seriesModel = data.hostModel;
	    var color = data.getItemVisual(idx, 'color');

	    // var symbolPath = symbolUtil.createSymbol(
	    //     symbolType, -0.5, -0.5, 1, 1, color
	    // );
	    // If width/height are set too small (e.g., set to 1) on ios10
	    // and macOS Sierra, a circle stroke become a rect, no matter what
	    // the scale is set. So we set width/height as 2. See #4150.
	    var symbolPath = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);

	    symbolPath.attr({
	        z2: 100,
	        culling: true,
	        scale: [0, 0]
	    });
	    // Rewrite drift method
	    symbolPath.drift = driftSymbol;

	    graphic.initProps(symbolPath, {
	        scale: getScale(symbolSize)
	    }, seriesModel, idx);
	    this._symbolType = symbolType;

	    this.add(symbolPath);
	};

	/**
	 * Stop animation
	 * @param {boolean} toLastFrame
	 */
	symbolProto.stopSymbolAnimation = function (toLastFrame) {
	    this.childAt(0).stopAnimation(toLastFrame);
	};

	/**
	 * Get symbol path element
	 */
	symbolProto.getSymbolPath = function () {
	    return this.childAt(0);
	};

	/**
	 * Get scale(aka, current symbol size).
	 * Including the change caused by animation
	 */
	symbolProto.getScale = function () {
	    return this.childAt(0).scale;
	};

	/**
	 * Highlight symbol
	 */
	symbolProto.highlight = function () {
	    this.childAt(0).trigger('emphasis');
	};

	/**
	 * Downplay symbol
	 */
	symbolProto.downplay = function () {
	    this.childAt(0).trigger('normal');
	};

	/**
	 * @param {number} zlevel
	 * @param {number} z
	 */
	symbolProto.setZ = function (zlevel, z) {
	    var symbolPath = this.childAt(0);
	    symbolPath.zlevel = zlevel;
	    symbolPath.z = z;
	};

	symbolProto.setDraggable = function (draggable) {
	    var symbolPath = this.childAt(0);
	    symbolPath.draggable = draggable;
	    symbolPath.cursor = draggable ? 'move' : 'pointer';
	};

	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */
	symbolProto.updateData = function (data, idx, seriesScope) {
	    this.silent = false;

	    var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	    var seriesModel = data.hostModel;
	    var symbolSize = getSymbolSize(data, idx);

	    if (symbolType !== this._symbolType) {
	        this._createSymbol(symbolType, data, idx, symbolSize);
	    } else {
	        var symbolPath = this.childAt(0);
	        graphic.updateProps(symbolPath, {
	            scale: getScale(symbolSize)
	        }, seriesModel, idx);
	    }
	    this._updateCommon(data, idx, symbolSize, seriesScope);
	    this._seriesModel = seriesModel;
	};

	// Update common properties
	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	var normalLabelAccessPath = ['label', 'normal'];
	var emphasisLabelAccessPath = ['label', 'emphasis'];

	symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {
	    var symbolPath = this.childAt(0);
	    var seriesModel = data.hostModel;
	    var color = data.getItemVisual(idx, 'color');

	    // Reset style
	    if (symbolPath.type !== 'image') {
	        symbolPath.useStyle({
	            strokeNoScale: true
	        });
	    }

	    seriesScope = seriesScope || null;

	    var itemStyle = seriesScope && seriesScope.itemStyle;
	    var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;
	    var symbolRotate = seriesScope && seriesScope.symbolRotate;
	    var symbolOffset = seriesScope && seriesScope.symbolOffset;
	    var labelModel = seriesScope && seriesScope.labelModel;
	    var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	    var hoverAnimation = seriesScope && seriesScope.hoverAnimation;

	    if (!seriesScope || data.hasItemOption) {
	        var itemModel = data.getItemModel(idx);

	        // Color must be excluded.
	        // Because symbol provide setColor individually to set fill and stroke
	        itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);
	        hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();

	        symbolRotate = itemModel.getShallow('symbolRotate');
	        symbolOffset = itemModel.getShallow('symbolOffset');

	        labelModel = itemModel.getModel(normalLabelAccessPath);
	        hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);
	        hoverAnimation = itemModel.getShallow('hoverAnimation');
	    } else {
	        hoverItemStyle = zrUtil.extend({}, hoverItemStyle);
	    }

	    var elStyle = symbolPath.style;

	    symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);

	    if (symbolOffset) {
	        symbolPath.attr('position', [numberUtil.parsePercent(symbolOffset[0], symbolSize[0]), numberUtil.parsePercent(symbolOffset[1], symbolSize[1])]);
	    }

	    // PENDING setColor before setStyle!!!
	    symbolPath.setColor(color);

	    symbolPath.setStyle(itemStyle);

	    var opacity = data.getItemVisual(idx, 'opacity');
	    if (opacity != null) {
	        elStyle.opacity = opacity;
	    }

	    // Get last value dim
	    var dimensions = data.dimensions.slice();
	    var valueDim;
	    var dataType;
	    while (dimensions.length && (valueDim = dimensions.pop(), dataType = data.getDimensionInfo(valueDim).type, dataType === 'ordinal' || dataType === 'time')) {} // jshint ignore:line

	    if (valueDim != null && labelModel.getShallow('show')) {
	        graphic.setText(elStyle, labelModel, color);
	        elStyle.text = zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal'), data.get(valueDim, idx));
	    } else {
	        elStyle.text = '';
	    }

	    if (valueDim != null && hoverLabelModel.getShallow('show')) {
	        graphic.setText(hoverItemStyle, hoverLabelModel, color);
	        hoverItemStyle.text = zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis'), data.get(valueDim, idx));
	    } else {
	        hoverItemStyle.text = '';
	    }

	    symbolPath.off('mouseover').off('mouseout').off('emphasis').off('normal');

	    symbolPath.hoverStyle = hoverItemStyle;

	    graphic.setHoverStyle(symbolPath);

	    var scale = getScale(symbolSize);

	    if (hoverAnimation && seriesModel.isAnimationEnabled()) {
	        var onEmphasis = function onEmphasis() {
	            var ratio = scale[1] / scale[0];
	            this.animateTo({
	                scale: [Math.max(scale[0] * 1.1, scale[0] + 3), Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)]
	            }, 400, 'elasticOut');
	        };
	        var onNormal = function onNormal() {
	            this.animateTo({
	                scale: scale
	            }, 400, 'elasticOut');
	        };
	        symbolPath.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	    }
	};

	symbolProto.fadeOut = function (cb) {
	    var symbolPath = this.childAt(0);
	    // Avoid mistaken hover when fading out
	    this.silent = true;
	    // Not show text when animating
	    symbolPath.style.text = '';
	    graphic.updateProps(symbolPath, {
	        scale: [0, 0]
	    }, this._seriesModel, this.dataIndex, cb);
	};

	zrUtil.inherits(_Symbol, graphic.Group);

	module.exports = _Symbol;

/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Symbol factory


	var graphic = __webpack_require__(543);
	var BoundingRect = __webpack_require__(509);

	/**
	 * Triangle shape
	 * @inner
	 */
	var Triangle = graphic.extendShape({
	    type: 'triangle',
	    shape: {
	        cx: 0,
	        cy: 0,
	        width: 0,
	        height: 0
	    },
	    buildPath: function buildPath(path, shape) {
	        var cx = shape.cx;
	        var cy = shape.cy;
	        var width = shape.width / 2;
	        var height = shape.height / 2;
	        path.moveTo(cx, cy - height);
	        path.lineTo(cx + width, cy + height);
	        path.lineTo(cx - width, cy + height);
	        path.closePath();
	    }
	});
	/**
	 * Diamond shape
	 * @inner
	 */
	var Diamond = graphic.extendShape({
	    type: 'diamond',
	    shape: {
	        cx: 0,
	        cy: 0,
	        width: 0,
	        height: 0
	    },
	    buildPath: function buildPath(path, shape) {
	        var cx = shape.cx;
	        var cy = shape.cy;
	        var width = shape.width / 2;
	        var height = shape.height / 2;
	        path.moveTo(cx, cy - height);
	        path.lineTo(cx + width, cy);
	        path.lineTo(cx, cy + height);
	        path.lineTo(cx - width, cy);
	        path.closePath();
	    }
	});

	/**
	 * Pin shape
	 * @inner
	 */
	var Pin = graphic.extendShape({
	    type: 'pin',
	    shape: {
	        // x, y on the cusp
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },

	    buildPath: function buildPath(path, shape) {
	        var x = shape.x;
	        var y = shape.y;
	        var w = shape.width / 5 * 3;
	        // Height must be larger than width
	        var h = Math.max(w, shape.height);
	        var r = w / 2;

	        // Dist on y with tangent point and circle center
	        var dy = r * r / (h - r);
	        var cy = y - h + r + dy;
	        var angle = Math.asin(dy / r);
	        // Dist on x with tangent point and circle center
	        var dx = Math.cos(angle) * r;

	        var tanX = Math.sin(angle);
	        var tanY = Math.cos(angle);

	        path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);

	        var cpLen = r * 0.6;
	        var cpLen2 = r * 0.7;
	        path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
	        path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
	        path.closePath();
	    }
	});

	/**
	 * Arrow shape
	 * @inner
	 */
	var Arrow = graphic.extendShape({

	    type: 'arrow',

	    shape: {
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var height = shape.height;
	        var width = shape.width;
	        var x = shape.x;
	        var y = shape.y;
	        var dx = width / 3 * 2;
	        ctx.moveTo(x, y);
	        ctx.lineTo(x + dx, y + height);
	        ctx.lineTo(x, y + height / 4 * 3);
	        ctx.lineTo(x - dx, y + height);
	        ctx.lineTo(x, y);
	        ctx.closePath();
	    }
	});

	/**
	 * Map of path contructors
	 * @type {Object.<string, module:zrender/graphic/Path>}
	 */
	var symbolCtors = {
	    line: graphic.Line,

	    rect: graphic.Rect,

	    roundRect: graphic.Rect,

	    square: graphic.Rect,

	    circle: graphic.Circle,

	    diamond: Diamond,

	    pin: Pin,

	    arrow: Arrow,

	    triangle: Triangle
	};

	var symbolShapeMakers = {

	    line: function line(x, y, w, h, shape) {
	        // FIXME
	        shape.x1 = x;
	        shape.y1 = y + h / 2;
	        shape.x2 = x + w;
	        shape.y2 = y + h / 2;
	    },

	    rect: function rect(x, y, w, h, shape) {
	        shape.x = x;
	        shape.y = y;
	        shape.width = w;
	        shape.height = h;
	    },

	    roundRect: function roundRect(x, y, w, h, shape) {
	        shape.x = x;
	        shape.y = y;
	        shape.width = w;
	        shape.height = h;
	        shape.r = Math.min(w, h) / 4;
	    },

	    square: function square(x, y, w, h, shape) {
	        var size = Math.min(w, h);
	        shape.x = x;
	        shape.y = y;
	        shape.width = size;
	        shape.height = size;
	    },

	    circle: function circle(x, y, w, h, shape) {
	        // Put circle in the center of square
	        shape.cx = x + w / 2;
	        shape.cy = y + h / 2;
	        shape.r = Math.min(w, h) / 2;
	    },

	    diamond: function diamond(x, y, w, h, shape) {
	        shape.cx = x + w / 2;
	        shape.cy = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    },

	    pin: function pin(x, y, w, h, shape) {
	        shape.x = x + w / 2;
	        shape.y = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    },

	    arrow: function arrow(x, y, w, h, shape) {
	        shape.x = x + w / 2;
	        shape.y = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    },

	    triangle: function triangle(x, y, w, h, shape) {
	        shape.cx = x + w / 2;
	        shape.cy = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    }
	};

	var symbolBuildProxies = {};
	for (var name in symbolCtors) {
	    if (symbolCtors.hasOwnProperty(name)) {
	        symbolBuildProxies[name] = new symbolCtors[name]();
	    }
	}

	var _Symbol = graphic.extendShape({

	    type: 'symbol',

	    shape: {
	        symbolType: '',
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },

	    beforeBrush: function beforeBrush() {
	        var style = this.style;
	        var shape = this.shape;
	        // FIXME
	        if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	            style.textPosition = ['50%', '40%'];
	            style.textAlign = 'center';
	            style.textVerticalAlign = 'middle';
	        }
	    },

	    buildPath: function buildPath(ctx, shape, inBundle) {
	        var symbolType = shape.symbolType;
	        var proxySymbol = symbolBuildProxies[symbolType];
	        if (shape.symbolType !== 'none') {
	            if (!proxySymbol) {
	                // Default rect
	                symbolType = 'rect';
	                proxySymbol = symbolBuildProxies[symbolType];
	            }
	            symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
	            proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
	        }
	    }
	});

	// Provide setColor helper method to avoid determine if set the fill or stroke outside
	var symbolPathSetColor = function symbolPathSetColor(color) {
	    if (this.type !== 'image') {
	        var symbolStyle = this.style;
	        var symbolShape = this.shape;
	        if (symbolShape && symbolShape.symbolType === 'line') {
	            symbolStyle.stroke = color;
	        } else if (this.__isEmptyBrush) {
	            symbolStyle.stroke = color;
	            symbolStyle.fill = '#fff';
	        } else {
	            // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	            symbolStyle.fill && (symbolStyle.fill = color);
	            symbolStyle.stroke && (symbolStyle.stroke = color);
	        }
	        this.dirty(false);
	    }
	};

	var symbolUtil = {
	    /**
	     * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	     * @param {string} symbolType
	     * @param {number} x
	     * @param {number} y
	     * @param {number} w
	     * @param {number} h
	     * @param {string} color
	     */
	    createSymbol: function createSymbol(symbolType, x, y, w, h, color) {
	        var isEmpty = symbolType.indexOf('empty') === 0;
	        if (isEmpty) {
	            symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	        }
	        var symbolPath;

	        if (symbolType.indexOf('image://') === 0) {
	            symbolPath = new graphic.Image({
	                style: {
	                    image: symbolType.slice(8),
	                    x: x,
	                    y: y,
	                    width: w,
	                    height: h
	                }
	            });
	        } else if (symbolType.indexOf('path://') === 0) {
	            symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));
	        } else {
	            symbolPath = new _Symbol({
	                shape: {
	                    symbolType: symbolType,
	                    x: x,
	                    y: y,
	                    width: w,
	                    height: h
	                }
	            });
	        }

	        symbolPath.__isEmptyBrush = isEmpty;

	        symbolPath.setColor = symbolPathSetColor;

	        symbolPath.setColor(color);

	        return symbolPath;
	    }
	};

	module.exports = symbolUtil;

/***/ },
/* 608 */
/***/ function(module, exports) {

	'use strict';

	// var arrayDiff = require('zrender/lib/core/arrayDiff');
	// 'zrender/core/arrayDiff' has been used before, but it did
	// not do well in performance when roam with fixed dataZoom window.

	function sign(val) {
	    return val >= 0 ? 1 : -1;
	}

	function getStackedOnPoint(coordSys, data, idx) {
	    var baseAxis = coordSys.getBaseAxis();
	    var valueAxis = coordSys.getOtherAxis(baseAxis);
	    var valueStart = baseAxis.onZero ? 0 : valueAxis.scale.getExtent()[0];

	    var valueDim = valueAxis.dim;
	    var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

	    var stackedOnSameSign;
	    var stackedOn = data.stackedOn;
	    var val = data.get(valueDim, idx);
	    // Find first stacked value with same sign
	    while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	        stackedOnSameSign = stackedOn;
	        break;
	    }
	    var stackedData = [];
	    stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	    stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

	    return coordSys.dataToPoint(stackedData);
	}

	// function convertToIntId(newIdList, oldIdList) {
	//     // Generate int id instead of string id.
	//     // Compare string maybe slow in score function of arrDiff

	//     // Assume id in idList are all unique
	//     var idIndicesMap = {};
	//     var idx = 0;
	//     for (var i = 0; i < newIdList.length; i++) {
	//         idIndicesMap[newIdList[i]] = idx;
	//         newIdList[i] = idx++;
	//     }
	//     for (var i = 0; i < oldIdList.length; i++) {
	//         var oldId = oldIdList[i];
	//         // Same with newIdList
	//         if (idIndicesMap[oldId]) {
	//             oldIdList[i] = idIndicesMap[oldId];
	//         }
	//         else {
	//             oldIdList[i] = idx++;
	//         }
	//     }
	// }

	function diffData(oldData, newData) {
	    var diffResult = [];

	    newData.diff(oldData).add(function (idx) {
	        diffResult.push({ cmd: '+', idx: idx });
	    }).update(function (newIdx, oldIdx) {
	        diffResult.push({ cmd: '=', idx: oldIdx, idx1: newIdx });
	    }).remove(function (idx) {
	        diffResult.push({ cmd: '-', idx: idx });
	    }).execute();

	    return diffResult;
	}

	module.exports = function (oldData, newData, oldStackedOnPoints, newStackedOnPoints, oldCoordSys, newCoordSys) {
	    var diff = diffData(oldData, newData);

	    // var newIdList = newData.mapArray(newData.getId);
	    // var oldIdList = oldData.mapArray(oldData.getId);

	    // convertToIntId(newIdList, oldIdList);

	    // // FIXME One data ?
	    // diff = arrayDiff(oldIdList, newIdList);

	    var currPoints = [];
	    var nextPoints = [];
	    // Points for stacking base line
	    var currStackedPoints = [];
	    var nextStackedPoints = [];

	    var status = [];
	    var sortedIndices = [];
	    var rawIndices = [];
	    var dims = newCoordSys.dimensions;
	    for (var i = 0; i < diff.length; i++) {
	        var diffItem = diff[i];
	        var pointAdded = true;

	        // FIXME, animation is not so perfect when dataZoom window moves fast
	        // Which is in case remvoing or add more than one data in the tail or head
	        switch (diffItem.cmd) {
	            case '=':
	                var currentPt = oldData.getItemLayout(diffItem.idx);
	                var nextPt = newData.getItemLayout(diffItem.idx1);
	                // If previous data is NaN, use next point directly
	                if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	                    currentPt = nextPt.slice();
	                }
	                currPoints.push(currentPt);
	                nextPoints.push(nextPt);

	                currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	                nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);

	                rawIndices.push(newData.getRawIndex(diffItem.idx1));
	                break;
	            case '+':
	                var idx = diffItem.idx;
	                currPoints.push(oldCoordSys.dataToPoint([newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)]));

	                nextPoints.push(newData.getItemLayout(idx).slice());

	                currStackedPoints.push(getStackedOnPoint(oldCoordSys, newData, idx));
	                nextStackedPoints.push(newStackedOnPoints[idx]);

	                rawIndices.push(newData.getRawIndex(idx));
	                break;
	            case '-':
	                var idx = diffItem.idx;
	                var rawIndex = oldData.getRawIndex(idx);
	                // Data is replaced. In the case of dynamic data queue
	                // FIXME FIXME FIXME
	                if (rawIndex !== idx) {
	                    currPoints.push(oldData.getItemLayout(idx));
	                    nextPoints.push(newCoordSys.dataToPoint([oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)]));

	                    currStackedPoints.push(oldStackedOnPoints[idx]);
	                    nextStackedPoints.push(getStackedOnPoint(newCoordSys, oldData, idx));

	                    rawIndices.push(rawIndex);
	                } else {
	                    pointAdded = false;
	                }
	        }

	        // Original indices
	        if (pointAdded) {
	            status.push(diffItem);
	            sortedIndices.push(sortedIndices.length);
	        }
	    }

	    // Diff result may be crossed if all items are changed
	    // Sort by data index
	    sortedIndices.sort(function (a, b) {
	        return rawIndices[a] - rawIndices[b];
	    });

	    var sortedCurrPoints = [];
	    var sortedNextPoints = [];

	    var sortedCurrStackedPoints = [];
	    var sortedNextStackedPoints = [];

	    var sortedStatus = [];
	    for (var i = 0; i < sortedIndices.length; i++) {
	        var idx = sortedIndices[i];
	        sortedCurrPoints[i] = currPoints[idx];
	        sortedNextPoints[i] = nextPoints[idx];

	        sortedCurrStackedPoints[i] = currStackedPoints[idx];
	        sortedNextStackedPoints[i] = nextStackedPoints[idx];

	        sortedStatus[i] = status[idx];
	    }

	    return {
	        current: sortedCurrPoints,
	        next: sortedNextPoints,

	        stackedOnCurrent: sortedCurrStackedPoints,
	        stackedOnNext: sortedNextStackedPoints,

	        status: sortedStatus
	    };
	};

/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Poly path support NaN point


	var Path = __webpack_require__(545);
	var vec2 = __webpack_require__(510);

	var vec2Min = vec2.min;
	var vec2Max = vec2.max;

	var scaleAndAdd = vec2.scaleAndAdd;
	var v2Copy = vec2.copy;

	// Temporary variable
	var v = [];
	var cp0 = [];
	var cp1 = [];

	function isPointNull(p) {
	    return isNaN(p[0]) || isNaN(p[1]);
	}

	function drawSegment(ctx, points, start, segLen, allLen, dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
	    var prevIdx = 0;
	    var idx = start;
	    for (var k = 0; k < segLen; k++) {
	        var p = points[idx];
	        if (idx >= allLen || idx < 0) {
	            break;
	        }
	        if (isPointNull(p)) {
	            if (connectNulls) {
	                idx += dir;
	                continue;
	            }
	            break;
	        }

	        if (idx === start) {
	            ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	            v2Copy(cp0, p);
	        } else {
	            if (smooth > 0) {
	                var nextIdx = idx + dir;
	                var nextP = points[nextIdx];
	                if (connectNulls) {
	                    // Find next point not null
	                    while (nextP && isPointNull(points[nextIdx])) {
	                        nextIdx += dir;
	                        nextP = points[nextIdx];
	                    }
	                }

	                var ratioNextSeg = 0.5;
	                var prevP = points[prevIdx];
	                var nextP = points[nextIdx];
	                // Last point
	                if (!nextP || isPointNull(nextP)) {
	                    v2Copy(cp1, p);
	                } else {
	                    // If next data is null in not connect case
	                    if (isPointNull(nextP) && !connectNulls) {
	                        nextP = p;
	                    }

	                    vec2.sub(v, nextP, prevP);

	                    var lenPrevSeg;
	                    var lenNextSeg;
	                    if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	                        var dim = smoothMonotone === 'x' ? 0 : 1;
	                        lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	                        lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	                    } else {
	                        lenPrevSeg = vec2.dist(p, prevP);
	                        lenNextSeg = vec2.dist(p, nextP);
	                    }

	                    // Use ratio of seg length
	                    ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);

	                    scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	                }
	                // Smooth constraint
	                vec2Min(cp0, cp0, smoothMax);
	                vec2Max(cp0, cp0, smoothMin);
	                vec2Min(cp1, cp1, smoothMax);
	                vec2Max(cp1, cp1, smoothMin);

	                ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]);
	                // cp0 of next segment
	                scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	            } else {
	                ctx.lineTo(p[0], p[1]);
	            }
	        }

	        prevIdx = idx;
	        idx += dir;
	    }

	    return k;
	}

	function getBoundingBox(points, smoothConstraint) {
	    var ptMin = [Infinity, Infinity];
	    var ptMax = [-Infinity, -Infinity];
	    if (smoothConstraint) {
	        for (var i = 0; i < points.length; i++) {
	            var pt = points[i];
	            if (pt[0] < ptMin[0]) {
	                ptMin[0] = pt[0];
	            }
	            if (pt[1] < ptMin[1]) {
	                ptMin[1] = pt[1];
	            }
	            if (pt[0] > ptMax[0]) {
	                ptMax[0] = pt[0];
	            }
	            if (pt[1] > ptMax[1]) {
	                ptMax[1] = pt[1];
	            }
	        }
	    }
	    return {
	        min: smoothConstraint ? ptMin : ptMax,
	        max: smoothConstraint ? ptMax : ptMin
	    };
	}

	module.exports = {

	    Polyline: Path.extend({

	        type: 'ec-polyline',

	        shape: {
	            points: [],

	            smooth: 0,

	            smoothConstraint: true,

	            smoothMonotone: null,

	            connectNulls: false
	        },

	        style: {
	            fill: null,

	            stroke: '#000'
	        },

	        buildPath: function buildPath(ctx, shape) {
	            var points = shape.points;

	            var i = 0;
	            var len = points.length;

	            var result = getBoundingBox(points, shape.smoothConstraint);

	            if (shape.connectNulls) {
	                // Must remove first and last null values avoid draw error in polygon
	                for (; len > 0; len--) {
	                    if (!isPointNull(points[len - 1])) {
	                        break;
	                    }
	                }
	                for (; i < len; i++) {
	                    if (!isPointNull(points[i])) {
	                        break;
	                    }
	                }
	            }
	            while (i < len) {
	                i += drawSegment(ctx, points, i, len, len, 1, result.min, result.max, shape.smooth, shape.smoothMonotone, shape.connectNulls) + 1;
	            }
	        }
	    }),

	    Polygon: Path.extend({

	        type: 'ec-polygon',

	        shape: {
	            points: [],

	            // Offset between stacked base points and points
	            stackedOnPoints: [],

	            smooth: 0,

	            stackedOnSmooth: 0,

	            smoothConstraint: true,

	            smoothMonotone: null,

	            connectNulls: false
	        },

	        buildPath: function buildPath(ctx, shape) {
	            var points = shape.points;
	            var stackedOnPoints = shape.stackedOnPoints;

	            var i = 0;
	            var len = points.length;
	            var smoothMonotone = shape.smoothMonotone;
	            var bbox = getBoundingBox(points, shape.smoothConstraint);
	            var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);

	            if (shape.connectNulls) {
	                // Must remove first and last null values avoid draw error in polygon
	                for (; len > 0; len--) {
	                    if (!isPointNull(points[len - 1])) {
	                        break;
	                    }
	                }
	                for (; i < len; i++) {
	                    if (!isPointNull(points[i])) {
	                        break;
	                    }
	                }
	            }
	            while (i < len) {
	                var k = drawSegment(ctx, points, i, len, len, 1, bbox.min, bbox.max, shape.smooth, smoothMonotone, shape.connectNulls);
	                drawSegment(ctx, stackedOnPoints, i + k - 1, k, len, -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth, smoothMonotone, shape.connectNulls);
	                i += k + 1;

	                ctx.closePath();
	            }
	        }
	    })
	};

/***/ },
/* 610 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {

	    // Encoding visual for all series include which is filtered for legend drawing
	    ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	        var data = seriesModel.getData();

	        var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	        var symbolSize = seriesModel.get('symbolSize');

	        data.setVisual({
	            legendSymbol: legendSymbol || symbolType,
	            symbol: symbolType,
	            symbolSize: symbolSize
	        });

	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            if (typeof symbolSize === 'function') {
	                data.each(function (idx) {
	                    var rawValue = seriesModel.getRawValue(idx);
	                    // FIXME
	                    var params = seriesModel.getDataParams(idx);
	                    data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	                });
	            }
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var itemSymbolType = itemModel.getShallow('symbol', true);
	                var itemSymbolSize = itemModel.getShallow('symbolSize', true);
	                // If has item symbol
	                if (itemSymbolType != null) {
	                    data.setItemVisual(idx, 'symbol', itemSymbolType);
	                }
	                if (itemSymbolSize != null) {
	                    // PENDING Transform symbolSize ?
	                    data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	                }
	            });
	        }
	    });
	};

/***/ },
/* 611 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (seriesType, ecModel) {
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;

	        if (coordSys) {
	            var dims = coordSys.dimensions;

	            if (coordSys.type === 'singleAxis') {
	                data.each(dims[0], function (x, idx) {
	                    // Also {Array.<number>}, not undefined to avoid if...else... statement
	                    data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));
	                });
	            } else {
	                data.each(dims, function (x, y, idx) {
	                    // Also {Array.<number>}, not undefined to avoid if...else... statement
	                    data.setItemLayout(idx, isNaN(x) || isNaN(y) ? [NaN, NaN] : coordSys.dataToPoint([x, y]));
	                }, true);
	            }
	        }
	    });
	};

/***/ },
/* 612 */
/***/ function(module, exports) {

	'use strict';

	var samplers = {
	    average: function average(frame) {
	        var sum = 0;
	        var count = 0;
	        for (var i = 0; i < frame.length; i++) {
	            if (!isNaN(frame[i])) {
	                sum += frame[i];
	                count++;
	            }
	        }
	        // Return NaN if count is 0
	        return count === 0 ? NaN : sum / count;
	    },
	    sum: function sum(frame) {
	        var sum = 0;
	        for (var i = 0; i < frame.length; i++) {
	            // Ignore NaN
	            sum += frame[i] || 0;
	        }
	        return sum;
	    },
	    max: function max(frame) {
	        var max = -Infinity;
	        for (var i = 0; i < frame.length; i++) {
	            frame[i] > max && (max = frame[i]);
	        }
	        return max;
	    },
	    min: function min(frame) {
	        var min = Infinity;
	        for (var i = 0; i < frame.length; i++) {
	            frame[i] < min && (min = frame[i]);
	        }
	        return min;
	    },
	    // TODO
	    // Median
	    nearest: function nearest(frame) {
	        return frame[0];
	    }
	};

	var indexSampler = function indexSampler(frame, value) {
	    return Math.round(frame.length / 2);
	};
	module.exports = function (seriesType, ecModel, api) {
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        var data = seriesModel.getData();
	        var sampling = seriesModel.get('sampling');
	        var coordSys = seriesModel.coordinateSystem;
	        // Only cartesian2d support down sampling
	        if (coordSys.type === 'cartesian2d' && sampling) {
	            var baseAxis = coordSys.getBaseAxis();
	            var valueAxis = coordSys.getOtherAxis(baseAxis);
	            var extent = baseAxis.getExtent();
	            // Coordinste system has been resized
	            var size = extent[1] - extent[0];
	            var rate = Math.round(data.count() / size);
	            if (rate > 1) {
	                var sampler;
	                if (typeof sampling === 'string') {
	                    sampler = samplers[sampling];
	                } else if (typeof sampling === 'function') {
	                    sampler = sampling;
	                }
	                if (sampler) {
	                    data = data.downSample(valueAxis.dim, 1 / rate, sampler, indexSampler);
	                    seriesModel.setData(data);
	                }
	            }
	        }
	    }, this);
	};

/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);
	var echarts = __webpack_require__(501);

	__webpack_require__(614);

	__webpack_require__(631);

	// Grid view
	echarts.extendComponentView({

	    type: 'grid',

	    render: function render(gridModel, ecModel) {
	        this.group.removeAll();
	        if (gridModel.get('show')) {
	            this.group.add(new graphic.Rect({
	                shape: gridModel.coordinateSystem.getRect(),
	                style: zrUtil.defaults({
	                    fill: gridModel.get('backgroundColor')
	                }, gridModel.getItemStyle()),
	                silent: true,
	                z2: -1
	            }));
	        }
	    }

	});

	echarts.registerPreprocessor(function (option) {
	    // Only create grid when need
	    if (option.xAxis && option.yAxis && !option.grid) {
	        option.grid = {};
	    }
	});

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	var factory = exports;

	var layout = __webpack_require__(521);
	var axisHelper = __webpack_require__(615);

	var zrUtil = __webpack_require__(504);
	var Cartesian2D = __webpack_require__(621);
	var Axis2D = __webpack_require__(623);

	var each = zrUtil.each;

	var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
	var niceScaleExtent = axisHelper.niceScaleExtent;

	// 依赖 GridModel, AxisModel 做预处理
	__webpack_require__(626);

	/**
	 * Check if the axis is used in the specified grid
	 * @inner
	 */
	function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	    return axisModel.getCoordSysModel() === gridModel;
	}

	function getLabelUnionRect(axis) {
	    var axisModel = axis.model;
	    var labels = axisModel.getFormattedLabels();
	    var textStyleModel = axisModel.getModel('axisLabel.textStyle');
	    var rect;
	    var step = 1;
	    var labelCount = labels.length;
	    if (labelCount > 40) {
	        // Simple optimization for large amount of labels
	        step = Math.ceil(labelCount / 40);
	    }
	    for (var i = 0; i < labelCount; i += step) {
	        if (!axis.isLabelIgnored(i)) {
	            var singleRect = textStyleModel.getTextRect(labels[i]);
	            // FIXME consider label rotate
	            rect ? rect.union(singleRect) : rect = singleRect;
	        }
	    }
	    return rect;
	}

	function Grid(gridModel, ecModel, api) {
	    /**
	     * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	     * @private
	     */
	    this._coordsMap = {};

	    /**
	     * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	     * @private
	     */
	    this._coordsList = [];

	    /**
	     * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	     * @private
	     */
	    this._axesMap = {};

	    /**
	     * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	     * @private
	     */
	    this._axesList = [];

	    this._initCartesian(gridModel, ecModel, api);

	    this._model = gridModel;
	}

	var gridProto = Grid.prototype;

	gridProto.type = 'grid';

	gridProto.getRect = function () {
	    return this._rect;
	};

	gridProto.update = function (ecModel, api) {

	    var axesMap = this._axesMap;

	    this._updateScale(ecModel, this._model);

	    function ifAxisCanNotOnZero(otherAxisDim) {
	        var axes = axesMap[otherAxisDim];
	        for (var idx in axes) {
	            if (axes.hasOwnProperty(idx)) {
	                var axis = axes[idx];
	                if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }

	    each(axesMap.x, function (xAxis) {
	        niceScaleExtent(xAxis, xAxis.model);
	    });
	    each(axesMap.y, function (yAxis) {
	        niceScaleExtent(yAxis, yAxis.model);
	    });
	    // Fix configuration
	    each(axesMap.x, function (xAxis) {
	        // onZero can not be enabled in these two situations
	        // 1. When any other axis is a category axis
	        // 2. When any other axis not across 0 point
	        if (ifAxisCanNotOnZero('y')) {
	            xAxis.onZero = false;
	        }
	    });
	    each(axesMap.y, function (yAxis) {
	        if (ifAxisCanNotOnZero('x')) {
	            yAxis.onZero = false;
	        }
	    });

	    // Resize again if containLabel is enabled
	    // FIXME It may cause getting wrong grid size in data processing stage
	    this.resize(this._model, api);
	};

	/**
	 * Resize the grid
	 * @param {module:echarts/coord/cartesian/GridModel} gridModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	gridProto.resize = function (gridModel, api) {

	    var gridRect = layout.getLayoutRect(gridModel.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });

	    this._rect = gridRect;

	    var axesList = this._axesList;

	    adjustAxes();

	    // Minus label size
	    if (gridModel.get('containLabel')) {
	        each(axesList, function (axis) {
	            if (!axis.model.get('axisLabel.inside')) {
	                var labelUnionRect = getLabelUnionRect(axis);
	                if (labelUnionRect) {
	                    var dim = axis.isHorizontal() ? 'height' : 'width';
	                    var margin = axis.model.get('axisLabel.margin');
	                    gridRect[dim] -= labelUnionRect[dim] + margin;
	                    if (axis.position === 'top') {
	                        gridRect.y += labelUnionRect.height + margin;
	                    } else if (axis.position === 'left') {
	                        gridRect.x += labelUnionRect.width + margin;
	                    }
	                }
	            }
	        });

	        adjustAxes();
	    }

	    function adjustAxes() {
	        each(axesList, function (axis) {
	            var isHorizontal = axis.isHorizontal();
	            var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	            var idx = axis.inverse ? 1 : 0;
	            axis.setExtent(extent[idx], extent[1 - idx]);
	            updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
	        });
	    }
	};

	/**
	 * @param {string} axisType
	 * @param {ndumber} [axisIndex]
	 */
	gridProto.getAxis = function (axisType, axisIndex) {
	    var axesMapOnDim = this._axesMap[axisType];
	    if (axesMapOnDim != null) {
	        if (axisIndex == null) {
	            // Find first axis
	            for (var name in axesMapOnDim) {
	                if (axesMapOnDim.hasOwnProperty(name)) {
	                    return axesMapOnDim[name];
	                }
	            }
	        }
	        return axesMapOnDim[axisIndex];
	    }
	};

	gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	    if (xAxisIndex != null && yAxisIndex != null) {
	        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	        return this._coordsMap[key];
	    } else {
	        // When only xAxisIndex or yAxisIndex given, find its first cartesian.
	        for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
	            if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {
	                return coordList[i];
	            }
	        }
	    }
	};

	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */
	gridProto.convertToPixel = function (ecModel, finder, value) {
	    var target = this._findConvertTarget(ecModel, finder);

	    return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
	};

	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */
	gridProto.convertFromPixel = function (ecModel, finder, value) {
	    var target = this._findConvertTarget(ecModel, finder);

	    return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
	};

	/**
	 * @inner
	 */
	gridProto._findConvertTarget = function (ecModel, finder) {
	    var seriesModel = finder.seriesModel;
	    var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis')[0];
	    var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis')[0];
	    var gridModel = finder.gridModel;
	    var coordsList = this._coordsList;
	    var cartesian;
	    var axis;

	    if (seriesModel) {
	        cartesian = seriesModel.coordinateSystem;
	        zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);
	    } else if (xAxisModel && yAxisModel) {
	        cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	    } else if (xAxisModel) {
	        axis = this.getAxis('x', xAxisModel.componentIndex);
	    } else if (yAxisModel) {
	        axis = this.getAxis('y', yAxisModel.componentIndex);
	    }
	    // Lowest priority.
	    else if (gridModel) {
	            var grid = gridModel.coordinateSystem;
	            if (grid === this) {
	                cartesian = this._coordsList[0];
	            }
	        }

	    return { cartesian: cartesian, axis: axis };
	};

	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */
	gridProto.containPoint = function (point) {
	    var coord = this._coordsList[0];
	    if (coord) {
	        return coord.containPoint(point);
	    }
	};

	/**
	 * Initialize cartesian coordinate systems
	 * @private
	 */
	gridProto._initCartesian = function (gridModel, ecModel, api) {
	    var axisPositionUsed = {
	        left: false,
	        right: false,
	        top: false,
	        bottom: false
	    };

	    var axesMap = {
	        x: {},
	        y: {}
	    };
	    var axesCount = {
	        x: 0,
	        y: 0
	    };

	    /// Create axis
	    ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	    ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

	    if (!axesCount.x || !axesCount.y) {
	        // Roll back when there no either x or y axis
	        this._axesMap = {};
	        this._axesList = [];
	        return;
	    }

	    this._axesMap = axesMap;

	    /// Create cartesian2d
	    each(axesMap.x, function (xAxis, xAxisIndex) {
	        each(axesMap.y, function (yAxis, yAxisIndex) {
	            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	            var cartesian = new Cartesian2D(key);

	            cartesian.grid = this;

	            this._coordsMap[key] = cartesian;
	            this._coordsList.push(cartesian);

	            cartesian.addAxis(xAxis);
	            cartesian.addAxis(yAxis);
	        }, this);
	    }, this);

	    function createAxisCreator(axisType) {
	        return function (axisModel, idx) {
	            if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	                return;
	            }

	            var axisPosition = axisModel.get('position');
	            if (axisType === 'x') {
	                // Fix position
	                if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	                    // Default bottom of X
	                    axisPosition = 'bottom';
	                    if (axisPositionUsed[axisPosition]) {
	                        axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	                    }
	                }
	            } else {
	                // Fix position
	                if (axisPosition !== 'left' && axisPosition !== 'right') {
	                    // Default left of Y
	                    axisPosition = 'left';
	                    if (axisPositionUsed[axisPosition]) {
	                        axisPosition = axisPosition === 'left' ? 'right' : 'left';
	                    }
	                }
	            }
	            axisPositionUsed[axisPosition] = true;

	            var axis = new Axis2D(axisType, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);

	            var isCategory = axis.type === 'category';
	            axis.onBand = isCategory && axisModel.get('boundaryGap');
	            axis.inverse = axisModel.get('inverse');

	            axis.onZero = axisModel.get('axisLine.onZero');

	            // Inject axis into axisModel
	            axisModel.axis = axis;

	            // Inject axisModel into axis
	            axis.model = axisModel;

	            // Inject grid info axis
	            axis.grid = this;

	            // Index of axis, can be used as key
	            axis.index = idx;

	            this._axesList.push(axis);

	            axesMap[axisType][idx] = axis;
	            axesCount[axisType]++;
	        };
	    }
	};

	/**
	 * Update cartesian properties from series
	 * @param  {module:echarts/model/Option} option
	 * @private
	 */
	gridProto._updateScale = function (ecModel, gridModel) {
	    // Reset scale
	    zrUtil.each(this._axesList, function (axis) {
	        axis.scale.setExtent(Infinity, -Infinity);
	    });
	    ecModel.eachSeries(function (seriesModel) {
	        if (isCartesian2D(seriesModel)) {
	            var axesModels = findAxesModels(seriesModel, ecModel);
	            var xAxisModel = axesModels[0];
	            var yAxisModel = axesModels[1];

	            if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)) {
	                return;
	            }

	            var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	            var data = seriesModel.getData();
	            var xAxis = cartesian.getAxis('x');
	            var yAxis = cartesian.getAxis('y');

	            if (data.type === 'list') {
	                unionExtent(data, xAxis, seriesModel);
	                unionExtent(data, yAxis, seriesModel);
	            }
	        }
	    }, this);

	    function unionExtent(data, axis, seriesModel) {
	        each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
	            axis.scale.unionExtentFromData(data, dim);
	        });
	    }
	};

	/**
	 * @inner
	 */
	function updateAxisTransfrom(axis, coordBase) {
	    var axisExtent = axis.getExtent();
	    var axisExtentSum = axisExtent[0] + axisExtent[1];

	    // Fast transform
	    axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
	        return coord + coordBase;
	    } : function (coord) {
	        return axisExtentSum - coord + coordBase;
	    };
	    axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
	        return coord - coordBase;
	    } : function (coord) {
	        return axisExtentSum - coord + coordBase;
	    };
	}

	var axesTypes = ['xAxis', 'yAxis'];
	/**
	 * @inner
	 */
	function findAxesModels(seriesModel, ecModel) {
	    return zrUtil.map(axesTypes, function (axisType) {
	        var axisModel = seriesModel.getReferringComponents(axisType)[0];

	        if (__DEV__) {
	            if (!axisModel) {
	                throw new Error(axisType + ' "' + zrUtil.retrieve(seriesModel.get(axisType + 'Index'), seriesModel.get(axisType + 'Id'), 0) + '" not found');
	            }
	        }
	        return axisModel;
	    });
	}

	/**
	 * @inner
	 */
	function isCartesian2D(seriesModel) {
	    return seriesModel.get('coordinateSystem') === 'cartesian2d';
	}

	Grid.create = function (ecModel, api) {
	    var grids = [];
	    ecModel.eachComponent('grid', function (gridModel, idx) {
	        var grid = new Grid(gridModel, ecModel, api);
	        grid.name = 'grid_' + idx;
	        grid.resize(gridModel, api);

	        gridModel.coordinateSystem = grid;

	        grids.push(grid);
	    });

	    // Inject the coordinateSystems into seriesModel
	    ecModel.eachSeries(function (seriesModel) {
	        if (!isCartesian2D(seriesModel)) {
	            return;
	        }

	        var axesModels = findAxesModels(seriesModel, ecModel);
	        var xAxisModel = axesModels[0];
	        var yAxisModel = axesModels[1];

	        var gridModel = xAxisModel.getCoordSysModel();

	        if (__DEV__) {
	            if (!gridModel) {
	                throw new Error('Grid "' + zrUtil.retrieve(xAxisModel.get('gridIndex'), xAxisModel.get('gridId'), 0) + '" not found');
	            }
	            if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {
	                throw new Error('xAxis and yAxis must use the same grid');
	            }
	        }

	        var grid = gridModel.coordinateSystem;

	        seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	    });

	    return grids;
	};

	// For deciding which dimensions to use when creating list data
	Grid.dimensions = Cartesian2D.prototype.dimensions;

	__webpack_require__(526).register('cartesian2d', Grid);

	module.exports = Grid;

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var OrdinalScale = __webpack_require__(616);
	var IntervalScale = __webpack_require__(618);
	__webpack_require__(619);
	__webpack_require__(620);
	var Scale = __webpack_require__(617);

	var numberUtil = __webpack_require__(507);
	var zrUtil = __webpack_require__(504);
	var textContain = __webpack_require__(508);
	var axisHelper = {};

	/**
	 * Get axis scale extent before niced.
	 * Item of returned array can only be number (including Infinity and NaN).
	 */
	axisHelper.getScaleExtent = function (axis, model) {
	    var scale = axis.scale;
	    var scaleType = scale.type;

	    var min = model.getMin();
	    var max = model.getMax();
	    var fixMin = min != null;
	    var fixMax = max != null;
	    var originalExtent = scale.getExtent();

	    var axisDataLen;
	    var boundaryGap;
	    var span;
	    if (scaleType === 'ordinal') {
	        axisDataLen = (model.get('data') || []).length;
	    } else {
	        boundaryGap = model.get('boundaryGap');
	        if (!zrUtil.isArray(boundaryGap)) {
	            boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	        }
	        boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	        boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	        span = originalExtent[1] - originalExtent[0];
	    }

	    if (min == null) {
	        min = scaleType === 'ordinal' ? axisDataLen ? 0 : NaN : originalExtent[0] - boundaryGap[0] * span;
	    }
	    if (max == null) {
	        max = scaleType === 'ordinal' ? axisDataLen ? axisDataLen - 1 : NaN : originalExtent[1] + boundaryGap[1] * span;
	    }

	    if (min === 'dataMin') {
	        min = originalExtent[0];
	    }
	    if (max === 'dataMax') {
	        max = originalExtent[1];
	    }

	    (min == null || !isFinite(min)) && (min = NaN);
	    (max == null || !isFinite(max)) && (max = NaN);

	    axis.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));

	    // Evaluate if axis needs cross zero
	    if (model.getNeedCrossZero()) {
	        // Axis is over zero and min is not set
	        if (min > 0 && max > 0 && !fixMin) {
	            min = 0;
	        }
	        // Axis is under zero and max is not set
	        if (min < 0 && max < 0 && !fixMax) {
	            max = 0;
	        }
	    }

	    return [min, max];
	};

	axisHelper.niceScaleExtent = function (axis, model) {
	    var scale = axis.scale;
	    var extent = axisHelper.getScaleExtent(axis, model);
	    var fixMin = model.getMin() != null;
	    var fixMax = model.getMax() != null;
	    var splitNumber = model.get('splitNumber');

	    if (scale.type === 'log') {
	        scale.base = model.get('logBase');
	    }

	    scale.setExtent(extent[0], extent[1]);
	    scale.niceExtent(splitNumber, fixMin, fixMax);

	    // Use minInterval to constraint the calculated interval.
	    // If calculated interval is less than minInterval. increase the interval quantity until
	    // it is larger than minInterval.
	    // For example:
	    //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get
	    //  an integer axis.
	    var minInterval = model.get('minInterval');
	    if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {
	        var interval = scale.getInterval();
	        var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;
	        // while (interval < minInterval) {
	        //     var quantity = numberUtil.quantity(interval);
	        //     interval = quantity * 10;
	        //     scaleQuantity *= 10;
	        // }
	        extent = scale.getExtent();
	        var origin = (extent[1] + extent[0]) / 2;
	        scale.setExtent(intervalScale * (extent[0] - origin) + origin, intervalScale * (extent[1] - origin) + origin);
	        scale.niceExtent(splitNumber);
	    }

	    // If some one specified the min, max. And the default calculated interval
	    // is not good enough. He can specify the interval. It is often appeared
	    // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	    // to be 60.
	    // FIXME
	    var interval = model.get('interval');
	    if (interval != null) {
	        scale.setInterval && scale.setInterval(interval);
	    }
	};

	/**
	 * @param {module:echarts/model/Model} model
	 * @param {string} [axisType] Default retrieve from model.type
	 * @return {module:echarts/scale/*}
	 */
	axisHelper.createScaleByModel = function (model, axisType) {
	    axisType = axisType || model.get('type');
	    if (axisType) {
	        switch (axisType) {
	            // Buildin scale
	            case 'category':
	                return new OrdinalScale(model.getCategories(), [Infinity, -Infinity]);
	            case 'value':
	                return new IntervalScale();
	            // Extended scale, like time and log
	            default:
	                return (Scale.getClass(axisType) || IntervalScale).create(model);
	        }
	    }
	};

	/**
	 * Check if the axis corss 0
	 */
	axisHelper.ifAxisCrossZero = function (axis) {
	    var dataExtent = axis.scale.getExtent();
	    var min = dataExtent[0];
	    var max = dataExtent[1];
	    return !(min > 0 && max > 0 || min < 0 && max < 0);
	};

	/**
	 * @param {Array.<number>} tickCoords In axis self coordinate.
	 * @param {Array.<string>} labels
	 * @param {string} font
	 * @param {boolean} isAxisHorizontal
	 * @return {number}
	 */
	axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {
	    // FIXME
	    // 不同角的axis和label，不只是horizontal和vertical.

	    var textSpaceTakenRect;
	    var autoLabelInterval = 0;
	    var accumulatedLabelInterval = 0;

	    var step = 1;
	    if (labels.length > 40) {
	        // Simple optimization for large amount of labels
	        step = Math.floor(labels.length / 40);
	    }

	    for (var i = 0; i < tickCoords.length; i += step) {
	        var tickCoord = tickCoords[i];
	        var rect = textContain.getBoundingRect(labels[i], font, 'center', 'top');
	        rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;
	        // FIXME Magic number 1.5
	        rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;
	        if (!textSpaceTakenRect) {
	            textSpaceTakenRect = rect.clone();
	        }
	        // There is no space for current label;
	        else if (textSpaceTakenRect.intersect(rect)) {
	                accumulatedLabelInterval++;
	                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
	            } else {
	                textSpaceTakenRect.union(rect);
	                // Reset
	                accumulatedLabelInterval = 0;
	            }
	    }
	    if (autoLabelInterval === 0 && step > 1) {
	        return step;
	    }
	    return (autoLabelInterval + 1) * step - 1;
	};

	/**
	 * @param {Object} axis
	 * @param {Function} labelFormatter
	 * @return {Array.<string>}
	 */
	axisHelper.getFormattedLabels = function (axis, labelFormatter) {
	    var scale = axis.scale;
	    var labels = scale.getTicksLabels();
	    var ticks = scale.getTicks();
	    if (typeof labelFormatter === 'string') {
	        labelFormatter = function (tpl) {
	            return function (val) {
	                return tpl.replace('{value}', val != null ? val : '');
	            };
	        }(labelFormatter);
	        // Consider empty array
	        return zrUtil.map(labels, labelFormatter);
	    } else if (typeof labelFormatter === 'function') {
	        return zrUtil.map(ticks, function (tick, idx) {
	            return labelFormatter(axis.type === 'category' ? scale.getLabel(tick) : tick, idx);
	        }, this);
	    } else {
	        return labels;
	    }
	};

	module.exports = axisHelper;

/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */

	// FIXME only one data


	var zrUtil = __webpack_require__(504);
	var Scale = __webpack_require__(617);

	var scaleProto = Scale.prototype;

	var OrdinalScale = Scale.extend({

	    type: 'ordinal',

	    init: function init(data, extent) {
	        this._data = data;
	        this._extent = extent || [0, data.length - 1];
	    },

	    parse: function parse(val) {
	        return typeof val === 'string' ? zrUtil.indexOf(this._data, val)
	        // val might be float.
	        : Math.round(val);
	    },

	    contain: function contain(rank) {
	        rank = this.parse(rank);
	        return scaleProto.contain.call(this, rank) && this._data[rank] != null;
	    },

	    /**
	     * Normalize given rank or name to linear [0, 1]
	     * @param {number|string} [val]
	     * @return {number}
	     */
	    normalize: function normalize(val) {
	        return scaleProto.normalize.call(this, this.parse(val));
	    },

	    scale: function scale(val) {
	        return Math.round(scaleProto.scale.call(this, val));
	    },

	    /**
	     * @return {Array}
	     */
	    getTicks: function getTicks() {
	        var ticks = [];
	        var extent = this._extent;
	        var rank = extent[0];

	        while (rank <= extent[1]) {
	            ticks.push(rank);
	            rank++;
	        }

	        return ticks;
	    },

	    /**
	     * Get item on rank n
	     * @param {number} n
	     * @return {string}
	     */
	    getLabel: function getLabel(n) {
	        return this._data[n];
	    },

	    /**
	     * @return {number}
	     */
	    count: function count() {
	        return this._extent[1] - this._extent[0] + 1;
	    },

	    /**
	     * @override
	     */
	    unionExtentFromData: function unionExtentFromData(data, dim) {
	        this.unionExtent(data.getDataExtent(dim, false));
	    },

	    niceTicks: zrUtil.noop,
	    niceExtent: zrUtil.noop
	});

	/**
	 * @return {module:echarts/scale/Time}
	 */
	OrdinalScale.create = function () {
	    return new OrdinalScale();
	};

	module.exports = OrdinalScale;

/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */

	var clazzUtil = __webpack_require__(513);

	function Scale() {
	    /**
	     * Extent
	     * @type {Array.<number>}
	     * @protected
	     */
	    this._extent = [Infinity, -Infinity];

	    /**
	     * Step is calculated in adjustExtent
	     * @type {Array.<number>}
	     * @protected
	     */
	    this._interval = 0;

	    this.init && this.init.apply(this, arguments);
	}

	var scaleProto = Scale.prototype;

	/**
	 * Parse input val to valid inner number.
	 * @param {*} val
	 * @return {number}
	 */
	scaleProto.parse = function (val) {
	    // Notice: This would be a trap here, If the implementation
	    // of this method depends on extent, and this method is used
	    // before extent set (like in dataZoom), it would be wrong.
	    // Nevertheless, parse does not depend on extent generally.
	    return val;
	};

	scaleProto.contain = function (val) {
	    var extent = this._extent;
	    return val >= extent[0] && val <= extent[1];
	};

	/**
	 * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	 * @param {number} val
	 * @return {number}
	 */
	scaleProto.normalize = function (val) {
	    var extent = this._extent;
	    if (extent[1] === extent[0]) {
	        return 0.5;
	    }
	    return (val - extent[0]) / (extent[1] - extent[0]);
	};

	/**
	 * Scale normalized value
	 * @param {number} val
	 * @return {number}
	 */
	scaleProto.scale = function (val) {
	    var extent = this._extent;
	    return val * (extent[1] - extent[0]) + extent[0];
	};

	/**
	 * Set extent from data
	 * @param {Array.<number>} other
	 */
	scaleProto.unionExtent = function (other) {
	    var extent = this._extent;
	    other[0] < extent[0] && (extent[0] = other[0]);
	    other[1] > extent[1] && (extent[1] = other[1]);
	    // not setExtent because in log axis it may transformed to power
	    // this.setExtent(extent[0], extent[1]);
	};

	/**
	 * Set extent from data
	 * @param {module:echarts/data/List} data
	 * @param {string} dim
	 */
	scaleProto.unionExtentFromData = function (data, dim) {
	    this.unionExtent(data.getDataExtent(dim, true));
	};

	/**
	 * Get extent
	 * @return {Array.<number>}
	 */
	scaleProto.getExtent = function () {
	    return this._extent.slice();
	};

	/**
	 * Set extent
	 * @param {number} start
	 * @param {number} end
	 */
	scaleProto.setExtent = function (start, end) {
	    var thisExtent = this._extent;
	    if (!isNaN(start)) {
	        thisExtent[0] = start;
	    }
	    if (!isNaN(end)) {
	        thisExtent[1] = end;
	    }
	};

	/**
	 * @return {Array.<string>}
	 */
	scaleProto.getTicksLabels = function () {
	    var labels = [];
	    var ticks = this.getTicks();
	    for (var i = 0; i < ticks.length; i++) {
	        labels.push(this.getLabel(ticks[i]));
	    }
	    return labels;
	};

	clazzUtil.enableClassExtend(Scale);
	clazzUtil.enableClassManagement(Scale, {
	    registerWhenExtend: true
	});

	module.exports = Scale;

/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */

	var numberUtil = __webpack_require__(507);
	var formatUtil = __webpack_require__(506);
	var Scale = __webpack_require__(617);

	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;

	var getPrecisionSafe = numberUtil.getPrecisionSafe;
	var roundingErrorFix = numberUtil.round;
	/**
	 * @alias module:echarts/coord/scale/Interval
	 * @constructor
	 */
	var IntervalScale = Scale.extend({

	    type: 'interval',

	    _interval: 0,

	    setExtent: function setExtent(start, end) {
	        var thisExtent = this._extent;
	        //start,end may be a Number like '25',so...
	        if (!isNaN(start)) {
	            thisExtent[0] = parseFloat(start);
	        }
	        if (!isNaN(end)) {
	            thisExtent[1] = parseFloat(end);
	        }
	    },

	    unionExtent: function unionExtent(other) {
	        var extent = this._extent;
	        other[0] < extent[0] && (extent[0] = other[0]);
	        other[1] > extent[1] && (extent[1] = other[1]);

	        // unionExtent may called by it's sub classes
	        IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	    },
	    /**
	     * Get interval
	     */
	    getInterval: function getInterval() {
	        if (!this._interval) {
	            this.niceTicks();
	        }
	        return this._interval;
	    },

	    /**
	     * Set interval
	     */
	    setInterval: function setInterval(interval) {
	        this._interval = interval;
	        // Dropped auto calculated niceExtent and use user setted extent
	        // We assume user wan't to set both interval, min, max to get a better result
	        this._niceExtent = this._extent.slice();
	    },

	    /**
	     * @return {Array.<number>}
	     */
	    getTicks: function getTicks() {
	        if (!this._interval) {
	            this.niceTicks();
	        }
	        var interval = this._interval;
	        var extent = this._extent;
	        var ticks = [];

	        // Consider this case: using dataZoom toolbox, zoom and zoom.
	        var safeLimit = 10000;

	        if (interval) {
	            var niceExtent = this._niceExtent;
	            var precision = getPrecisionSafe(interval) + 2;

	            if (extent[0] < niceExtent[0]) {
	                ticks.push(extent[0]);
	            }
	            var tick = niceExtent[0];

	            while (tick <= niceExtent[1]) {
	                ticks.push(tick);
	                // Avoid rounding error
	                tick = roundingErrorFix(tick + interval, precision);
	                if (ticks.length > safeLimit) {
	                    return [];
	                }
	            }
	            // Consider this case: the last item of ticks is smaller
	            // than niceExtent[1] and niceExtent[1] === extent[1].
	            if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceExtent[1])) {
	                ticks.push(extent[1]);
	            }
	        }

	        return ticks;
	    },

	    /**
	     * @return {Array.<string>}
	     */
	    getTicksLabels: function getTicksLabels() {
	        var labels = [];
	        var ticks = this.getTicks();
	        for (var i = 0; i < ticks.length; i++) {
	            labels.push(this.getLabel(ticks[i]));
	        }
	        return labels;
	    },

	    /**
	     * @param {number} n
	     * @return {number}
	     */
	    getLabel: function getLabel(data) {
	        return formatUtil.addCommas(data);
	    },

	    /**
	     * Update interval and extent of intervals for nice ticks
	     *
	     * @param {number} [splitNumber = 5] Desired number of ticks
	     */
	    niceTicks: function niceTicks(splitNumber) {
	        splitNumber = splitNumber || 5;
	        var extent = this._extent;
	        var span = extent[1] - extent[0];
	        if (!isFinite(span)) {
	            return;
	        }
	        // User may set axis min 0 and data are all negative
	        // FIXME If it needs to reverse ?
	        if (span < 0) {
	            span = -span;
	            extent.reverse();
	        }

	        // From "Nice Numbers for Graph Labels" of Graphic Gems
	        // var niceSpan = numberUtil.nice(span, false);
	        var step = roundingErrorFix(numberUtil.nice(span / splitNumber, true), Math.max(getPrecisionSafe(extent[0]), getPrecisionSafe(extent[1])
	        // extent may be [0, 1], and step should have 1 more digits.
	        // To make it safe we add 2 more digits
	        ) + 2);

	        var precision = getPrecisionSafe(step) + 2;
	        // Niced extent inside original extent
	        var niceExtent = [roundingErrorFix(mathCeil(extent[0] / step) * step, precision), roundingErrorFix(mathFloor(extent[1] / step) * step, precision)];

	        this._interval = step;
	        this._niceExtent = niceExtent;
	    },

	    /**
	     * Nice extent.
	     * @param {number} [splitNumber = 5] Given approx tick number
	     * @param {boolean} [fixMin=false]
	     * @param {boolean} [fixMax=false]
	     */
	    niceExtent: function niceExtent(splitNumber, fixMin, fixMax) {
	        var extent = this._extent;
	        // If extent start and end are same, expand them
	        if (extent[0] === extent[1]) {
	            if (extent[0] !== 0) {
	                // Expand extent
	                var expandSize = extent[0];
	                // In the fowllowing case
	                //      Axis has been fixed max 100
	                //      Plus data are all 100 and axis extent are [100, 100].
	                // Extend to the both side will cause expanded max is larger than fixed max.
	                // So only expand to the smaller side.
	                if (!fixMax) {
	                    extent[1] += expandSize / 2;
	                    extent[0] -= expandSize / 2;
	                } else {
	                    extent[0] -= expandSize / 2;
	                }
	            } else {
	                extent[1] = 1;
	            }
	        }
	        var span = extent[1] - extent[0];
	        // If there are no data and extent are [Infinity, -Infinity]
	        if (!isFinite(span)) {
	            extent[0] = 0;
	            extent[1] = 1;
	        }

	        this.niceTicks(splitNumber);

	        // var extent = this._extent;
	        var interval = this._interval;

	        if (!fixMin) {
	            extent[0] = roundingErrorFix(mathFloor(extent[0] / interval) * interval);
	        }
	        if (!fixMax) {
	            extent[1] = roundingErrorFix(mathCeil(extent[1] / interval) * interval);
	        }
	    }
	});

	/**
	 * @return {module:echarts/scale/Time}
	 */
	IntervalScale.create = function () {
	    return new IntervalScale();
	};

	module.exports = IntervalScale;

/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Interval scale
	 * @module echarts/coord/scale/Time
	 */

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var formatUtil = __webpack_require__(506);

	var IntervalScale = __webpack_require__(618);

	var intervalScaleProto = IntervalScale.prototype;

	var mathCeil = Math.ceil;
	var mathFloor = Math.floor;
	var ONE_SECOND = 1000;
	var ONE_MINUTE = ONE_SECOND * 60;
	var ONE_HOUR = ONE_MINUTE * 60;
	var ONE_DAY = ONE_HOUR * 24;

	// FIXME 公用？
	var bisect = function bisect(a, x, lo, hi) {
	    while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (a[mid][2] < x) {
	            lo = mid + 1;
	        } else {
	            hi = mid;
	        }
	    }
	    return lo;
	};

	/**
	 * @alias module:echarts/coord/scale/Time
	 * @constructor
	 */
	var TimeScale = IntervalScale.extend({
	    type: 'time',

	    // Overwrite
	    getLabel: function getLabel(val) {
	        var stepLvl = this._stepLvl;

	        var date = new Date(val);

	        return formatUtil.formatTime(stepLvl[0], date);
	    },

	    // Overwrite
	    niceExtent: function niceExtent(approxTickNum, fixMin, fixMax) {
	        var extent = this._extent;
	        // If extent start and end are same, expand them
	        if (extent[0] === extent[1]) {
	            // Expand extent
	            extent[0] -= ONE_DAY;
	            extent[1] += ONE_DAY;
	        }
	        // If there are no data and extent are [Infinity, -Infinity]
	        if (extent[1] === -Infinity && extent[0] === Infinity) {
	            var d = new Date();
	            extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
	            extent[0] = extent[1] - ONE_DAY;
	        }

	        this.niceTicks(approxTickNum);

	        // var extent = this._extent;
	        var interval = this._interval;

	        if (!fixMin) {
	            extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	        }
	        if (!fixMax) {
	            extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	        }
	    },

	    // Overwrite
	    niceTicks: function niceTicks(approxTickNum) {
	        approxTickNum = approxTickNum || 10;

	        var extent = this._extent;
	        var span = extent[1] - extent[0];
	        var approxInterval = span / approxTickNum;
	        var scaleLevelsLen = scaleLevels.length;
	        var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);

	        var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	        var interval = level[2];
	        // Same with interval scale if span is much larger than 1 year
	        if (level[0] === 'year') {
	            var yearSpan = span / interval;

	            // From "Nice Numbers for Graph Labels" of Graphic Gems
	            // var niceYearSpan = numberUtil.nice(yearSpan, false);
	            var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);

	            interval *= yearStep;
	        }

	        var niceExtent = [mathCeil(extent[0] / interval) * interval, mathFloor(extent[1] / interval) * interval];

	        this._stepLvl = level;
	        // Interval will be used in getTicks
	        this._interval = interval;
	        this._niceExtent = niceExtent;
	    },

	    parse: function parse(val) {
	        // val might be float.
	        return +numberUtil.parseDate(val);
	    }
	});

	zrUtil.each(['contain', 'normalize'], function (methodName) {
	    TimeScale.prototype[methodName] = function (val) {
	        return intervalScaleProto[methodName].call(this, this.parse(val));
	    };
	});

	// Steps from d3
	var scaleLevels = [
	// Format       step    interval
	['hh:mm:ss', 1, ONE_SECOND], // 1s
	['hh:mm:ss', 5, ONE_SECOND * 5], // 5s
	['hh:mm:ss', 10, ONE_SECOND * 10], // 10s
	['hh:mm:ss', 15, ONE_SECOND * 15], // 15s
	['hh:mm:ss', 30, ONE_SECOND * 30], // 30s
	['hh:mm\nMM-dd', 1, ONE_MINUTE], // 1m
	['hh:mm\nMM-dd', 5, ONE_MINUTE * 5], // 5m
	['hh:mm\nMM-dd', 10, ONE_MINUTE * 10], // 10m
	['hh:mm\nMM-dd', 15, ONE_MINUTE * 15], // 15m
	['hh:mm\nMM-dd', 30, ONE_MINUTE * 30], // 30m
	['hh:mm\nMM-dd', 1, ONE_HOUR], // 1h
	['hh:mm\nMM-dd', 2, ONE_HOUR * 2], // 2h
	['hh:mm\nMM-dd', 6, ONE_HOUR * 6], // 6h
	['hh:mm\nMM-dd', 12, ONE_HOUR * 12], // 12h
	['MM-dd\nyyyy', 1, ONE_DAY], // 1d
	['week', 7, ONE_DAY * 7], // 7d
	['month', 1, ONE_DAY * 31], // 1M
	['quarter', 3, ONE_DAY * 380 / 4], // 3M
	['half-year', 6, ONE_DAY * 380 / 2], // 6M
	['year', 1, ONE_DAY * 380] // 1Y
	];

	/**
	 * @return {module:echarts/scale/Time}
	 */
	TimeScale.create = function () {
	    return new TimeScale();
	};

	module.exports = TimeScale;

/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */

	var zrUtil = __webpack_require__(504);
	var Scale = __webpack_require__(617);
	var numberUtil = __webpack_require__(507);

	// Use some method of IntervalScale
	var IntervalScale = __webpack_require__(618);

	var scaleProto = Scale.prototype;
	var intervalScaleProto = IntervalScale.prototype;

	var getPrecisionSafe = numberUtil.getPrecisionSafe;
	var roundingErrorFix = numberUtil.round;

	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;
	var mathPow = Math.pow;

	var mathLog = Math.log;

	var LogScale = Scale.extend({

	    type: 'log',

	    base: 10,

	    $constructor: function $constructor() {
	        Scale.apply(this, arguments);
	        this._originalScale = new IntervalScale();
	    },

	    /**
	     * @return {Array.<number>}
	     */
	    getTicks: function getTicks() {
	        var originalScale = this._originalScale;
	        var extent = this._extent;
	        var originalExtent = originalScale.getExtent();

	        return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	            var powVal = numberUtil.round(mathPow(this.base, val));

	            // Fix #4158
	            powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;
	            powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;

	            return powVal;
	        }, this);
	    },

	    /**
	     * @param {number} val
	     * @return {string}
	     */
	    getLabel: intervalScaleProto.getLabel,

	    /**
	     * @param  {number} val
	     * @return {number}
	     */
	    scale: function scale(val) {
	        val = scaleProto.scale.call(this, val);
	        return mathPow(this.base, val);
	    },

	    /**
	     * @param {number} start
	     * @param {number} end
	     */
	    setExtent: function setExtent(start, end) {
	        var base = this.base;
	        start = mathLog(start) / mathLog(base);
	        end = mathLog(end) / mathLog(base);
	        intervalScaleProto.setExtent.call(this, start, end);
	    },

	    /**
	     * @return {number} end
	     */
	    getExtent: function getExtent() {
	        var base = this.base;
	        var extent = scaleProto.getExtent.call(this);
	        extent[0] = mathPow(base, extent[0]);
	        extent[1] = mathPow(base, extent[1]);

	        // Fix #4158
	        var originalScale = this._originalScale;
	        var originalExtent = originalScale.getExtent();
	        originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
	        originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));

	        return extent;
	    },

	    /**
	     * @param  {Array.<number>} extent
	     */
	    unionExtent: function unionExtent(extent) {
	        this._originalScale.unionExtent(extent);

	        var base = this.base;
	        extent[0] = mathLog(extent[0]) / mathLog(base);
	        extent[1] = mathLog(extent[1]) / mathLog(base);
	        scaleProto.unionExtent.call(this, extent);
	    },

	    /**
	     * @override
	     */
	    unionExtentFromData: function unionExtentFromData(data, dim) {
	        this.unionExtent(data.getDataExtent(dim, true, function (val) {
	            return val > 0;
	        }));
	    },

	    /**
	     * Update interval and extent of intervals for nice ticks
	     * @param  {number} [approxTickNum = 10] Given approx tick number
	     */
	    niceTicks: function niceTicks(approxTickNum) {
	        approxTickNum = approxTickNum || 10;
	        var extent = this._extent;
	        var span = extent[1] - extent[0];
	        if (span === Infinity || span <= 0) {
	            return;
	        }

	        var interval = numberUtil.quantity(span);
	        var err = approxTickNum / span * interval;

	        // Filter ticks to get closer to the desired count.
	        if (err <= 0.5) {
	            interval *= 10;
	        }

	        // Interval should be integer
	        while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
	            interval *= 10;
	        }

	        var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];

	        this._interval = interval;
	        this._niceExtent = niceExtent;
	    },

	    /**
	     * Nice extent.
	     * @param {number} [approxTickNum = 10] Given approx tick number
	     * @param {boolean} [fixMin=false]
	     * @param {boolean} [fixMax=false]
	     */
	    niceExtent: function niceExtent(splitNumber, fixMin, fixMax) {
	        intervalScaleProto.niceExtent.call(this, splitNumber, fixMin, fixMax);

	        var originalScale = this._originalScale;
	        originalScale.__fixMin = fixMin;
	        originalScale.__fixMax = fixMax;
	    }

	});

	zrUtil.each(['contain', 'normalize'], function (methodName) {
	    LogScale.prototype[methodName] = function (val) {
	        val = mathLog(val) / mathLog(this.base);
	        return scaleProto[methodName].call(this, val);
	    };
	});

	LogScale.create = function () {
	    return new LogScale();
	};

	function fixRoundingError(val, originalVal) {
	    return roundingErrorFix(val, getPrecisionSafe(originalVal));
	}

	module.exports = LogScale;

/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Cartesian = __webpack_require__(622);

	function Cartesian2D(name) {

	    Cartesian.call(this, name);
	}

	Cartesian2D.prototype = {

	    constructor: Cartesian2D,

	    type: 'cartesian2d',

	    /**
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: ['x', 'y'],

	    /**
	     * Base axis will be used on stacking.
	     *
	     * @return {module:echarts/coord/cartesian/Axis2D}
	     */
	    getBaseAxis: function getBaseAxis() {
	        return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
	    },

	    /**
	     * If contain point
	     * @param {Array.<number>} point
	     * @return {boolean}
	     */
	    containPoint: function containPoint(point) {
	        var axisX = this.getAxis('x');
	        var axisY = this.getAxis('y');
	        return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
	    },

	    /**
	     * If contain data
	     * @param {Array.<number>} data
	     * @return {boolean}
	     */
	    containData: function containData(data) {
	        return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
	    },

	    /**
	     * Convert series data to an array of points
	     * @param {module:echarts/data/List} data
	     * @param {boolean} stack
	     * @return {Array}
	     *  Return array of points. For example:
	     *  `[[10, 10], [20, 20], [30, 30]]`
	     */
	    dataToPoints: function dataToPoints(data, stack) {
	        return data.mapArray(['x', 'y'], function (x, y) {
	            return this.dataToPoint([x, y]);
	        }, stack, this);
	    },

	    /**
	     * @param {Array.<number>} data
	     * @param {boolean} [clamp=false]
	     * @return {Array.<number>}
	     */
	    dataToPoint: function dataToPoint(data, clamp) {
	        var xAxis = this.getAxis('x');
	        var yAxis = this.getAxis('y');
	        return [xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)), yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))];
	    },

	    /**
	     * @param {Array.<number>} point
	     * @param {boolean} [clamp=false]
	     * @return {Array.<number>}
	     */
	    pointToData: function pointToData(point, clamp) {
	        var xAxis = this.getAxis('x');
	        var yAxis = this.getAxis('y');
	        return [xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp), yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)];
	    },

	    /**
	     * Get other axis
	     * @param {module:echarts/coord/cartesian/Axis2D} axis
	     */
	    getOtherAxis: function getOtherAxis(axis) {
	        return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	    }
	};

	zrUtil.inherits(Cartesian2D, Cartesian);

	module.exports = Cartesian2D;

/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */

	var zrUtil = __webpack_require__(504);

	function dimAxisMapper(dim) {
	    return this._axes[dim];
	}

	/**
	 * @alias module:echarts/coord/Cartesian
	 * @constructor
	 */
	var Cartesian = function Cartesian(name) {
	    this._axes = {};

	    this._dimList = [];

	    /**
	     * @type {string}
	     */
	    this.name = name || '';
	};

	Cartesian.prototype = {

	    constructor: Cartesian,

	    type: 'cartesian',

	    /**
	     * Get axis
	     * @param  {number|string} dim
	     * @return {module:echarts/coord/Cartesian~Axis}
	     */
	    getAxis: function getAxis(dim) {
	        return this._axes[dim];
	    },

	    /**
	     * Get axes list
	     * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	     */
	    getAxes: function getAxes() {
	        return zrUtil.map(this._dimList, dimAxisMapper, this);
	    },

	    /**
	     * Get axes list by given scale type
	     */
	    getAxesByScale: function getAxesByScale(scaleType) {
	        scaleType = scaleType.toLowerCase();
	        return zrUtil.filter(this.getAxes(), function (axis) {
	            return axis.scale.type === scaleType;
	        });
	    },

	    /**
	     * Add axis
	     * @param {module:echarts/coord/Cartesian.Axis}
	     */
	    addAxis: function addAxis(axis) {
	        var dim = axis.dim;

	        this._axes[dim] = axis;

	        this._dimList.push(dim);
	    },

	    /**
	     * Convert data to coord in nd space
	     * @param {Array.<number>|Object.<string, number>} val
	     * @return {Array.<number>|Object.<string, number>}
	     */
	    dataToCoord: function dataToCoord(val) {
	        return this._dataCoordConvert(val, 'dataToCoord');
	    },

	    /**
	     * Convert coord in nd space to data
	     * @param  {Array.<number>|Object.<string, number>} val
	     * @return {Array.<number>|Object.<string, number>}
	     */
	    coordToData: function coordToData(val) {
	        return this._dataCoordConvert(val, 'coordToData');
	    },

	    _dataCoordConvert: function _dataCoordConvert(input, method) {
	        var dimList = this._dimList;

	        var output = input instanceof Array ? [] : {};

	        for (var i = 0; i < dimList.length; i++) {
	            var dim = dimList[i];
	            var axis = this._axes[dim];

	            output[dim] = axis[method](input[dim]);
	        }

	        return output;
	    }
	};

	module.exports = Cartesian;

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Axis = __webpack_require__(624);
	var axisLabelInterval = __webpack_require__(625);

	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var Axis2D = function Axis2D(dim, scale, coordExtent, axisType, position) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */
	  this.type = axisType || 'value';

	  /**
	   * Axis position
	   *  - 'top'
	   *  - 'bottom'
	   *  - 'left'
	   *  - 'right'
	   */
	  this.position = position || 'bottom';
	};

	Axis2D.prototype = {

	  constructor: Axis2D,

	  /**
	   * Index of axis, can be used as key
	   */
	  index: 0,
	  /**
	   * If axis is on the zero position of the other axis
	   * @type {boolean}
	   */
	  onZero: false,

	  /**
	   * Axis model
	   * @param {module:echarts/coord/cartesian/AxisModel}
	   */
	  model: null,

	  isHorizontal: function isHorizontal() {
	    var position = this.position;
	    return position === 'top' || position === 'bottom';
	  },

	  getGlobalExtent: function getGlobalExtent() {
	    var ret = this.getExtent();
	    ret[0] = this.toGlobalCoord(ret[0]);
	    ret[1] = this.toGlobalCoord(ret[1]);
	    return ret;
	  },

	  /**
	   * @return {number}
	   */
	  getLabelInterval: function getLabelInterval() {
	    var labelInterval = this._labelInterval;
	    if (!labelInterval) {
	      labelInterval = this._labelInterval = axisLabelInterval(this);
	    }
	    return labelInterval;
	  },

	  /**
	   * If label is ignored.
	   * Automatically used when axis is category and label can not be all shown
	   * @param  {number}  idx
	   * @return {boolean}
	   */
	  isLabelIgnored: function isLabelIgnored(idx) {
	    if (this.type === 'category') {
	      var labelInterval = this.getLabelInterval();
	      return typeof labelInterval === 'function' && !labelInterval(idx, this.scale.getLabel(idx)) || idx % (labelInterval + 1);
	    }
	  },

	  /**
	   * Transform global coord to local coord,
	   * i.e. var localCoord = axis.toLocalCoord(80);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toLocalCoord: null,

	  /**
	   * Transform global coord to local coord,
	   * i.e. var globalCoord = axis.toLocalCoord(40);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toGlobalCoord: null

	};
	zrUtil.inherits(Axis2D, Axis);

	module.exports = Axis2D;

/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var numberUtil = __webpack_require__(507);
	var linearMap = numberUtil.linearMap;
	var zrUtil = __webpack_require__(504);

	function fixExtentWithBands(extent, nTick) {
	    var size = extent[1] - extent[0];
	    var len = nTick;
	    var margin = size / len / 2;
	    extent[0] += margin;
	    extent[1] -= margin;
	}

	var normalizedExtent = [0, 1];
	/**
	 * @name module:echarts/coord/CartesianAxis
	 * @constructor
	 */
	var Axis = function Axis(dim, scale, extent) {

	    /**
	     * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
	     * @type {string}
	     */
	    this.dim = dim;

	    /**
	     * Axis scale
	     * @type {module:echarts/coord/scale/*}
	     */
	    this.scale = scale;

	    /**
	     * @type {Array.<number>}
	     * @private
	     */
	    this._extent = extent || [0, 0];

	    /**
	     * @type {boolean}
	     */
	    this.inverse = false;

	    /**
	     * Usually true when axis has a ordinal scale
	     * @type {boolean}
	     */
	    this.onBand = false;
	};

	Axis.prototype = {

	    constructor: Axis,

	    /**
	     * If axis extent contain given coord
	     * @param {number} coord
	     * @return {boolean}
	     */
	    contain: function contain(coord) {
	        var extent = this._extent;
	        var min = Math.min(extent[0], extent[1]);
	        var max = Math.max(extent[0], extent[1]);
	        return coord >= min && coord <= max;
	    },

	    /**
	     * If axis extent contain given data
	     * @param {number} data
	     * @return {boolean}
	     */
	    containData: function containData(data) {
	        return this.contain(this.dataToCoord(data));
	    },

	    /**
	     * Get coord extent.
	     * @return {Array.<number>}
	     */
	    getExtent: function getExtent() {
	        var ret = this._extent.slice();
	        return ret;
	    },

	    /**
	     * Get precision used for formatting
	     * @param {Array.<number>} [dataExtent]
	     * @return {number}
	     */
	    getPixelPrecision: function getPixelPrecision(dataExtent) {
	        return numberUtil.getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);
	    },

	    /**
	     * Set coord extent
	     * @param {number} start
	     * @param {number} end
	     */
	    setExtent: function setExtent(start, end) {
	        var extent = this._extent;
	        extent[0] = start;
	        extent[1] = end;
	    },

	    /**
	     * Convert data to coord. Data is the rank if it has a ordinal scale
	     * @param {number} data
	     * @param  {boolean} clamp
	     * @return {number}
	     */
	    dataToCoord: function dataToCoord(data, clamp) {
	        var extent = this._extent;
	        var scale = this.scale;
	        data = scale.normalize(data);

	        if (this.onBand && scale.type === 'ordinal') {
	            extent = extent.slice();
	            fixExtentWithBands(extent, scale.count());
	        }

	        return linearMap(data, normalizedExtent, extent, clamp);
	    },

	    /**
	     * Convert coord to data. Data is the rank if it has a ordinal scale
	     * @param {number} coord
	     * @param  {boolean} clamp
	     * @return {number}
	     */
	    coordToData: function coordToData(coord, clamp) {
	        var extent = this._extent;
	        var scale = this.scale;

	        if (this.onBand && scale.type === 'ordinal') {
	            extent = extent.slice();
	            fixExtentWithBands(extent, scale.count());
	        }

	        var t = linearMap(coord, extent, normalizedExtent, clamp);

	        return this.scale.scale(t);
	    },
	    /**
	     * @return {Array.<number>}
	     */
	    getTicksCoords: function getTicksCoords(alignWithLabel) {
	        if (this.onBand && !alignWithLabel) {
	            var bands = this.getBands();
	            var coords = [];
	            for (var i = 0; i < bands.length; i++) {
	                coords.push(bands[i][0]);
	            }
	            if (bands[i - 1]) {
	                coords.push(bands[i - 1][1]);
	            }
	            return coords;
	        } else {
	            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	        }
	    },

	    /**
	     * Coords of labels are on the ticks or on the middle of bands
	     * @return {Array.<number>}
	     */
	    getLabelsCoords: function getLabelsCoords() {
	        return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	    },

	    /**
	     * Get bands.
	     *
	     * If axis has labels [1, 2, 3, 4]. Bands on the axis are
	     * |---1---|---2---|---3---|---4---|.
	     *
	     * @return {Array}
	     */
	    // FIXME Situation when labels is on ticks
	    getBands: function getBands() {
	        var extent = this.getExtent();
	        var bands = [];
	        var len = this.scale.count();
	        var start = extent[0];
	        var end = extent[1];
	        var span = end - start;

	        for (var i = 0; i < len; i++) {
	            bands.push([span * i / len + start, span * (i + 1) / len + start]);
	        }
	        return bands;
	    },

	    /**
	     * Get width of band
	     * @return {number}
	     */
	    getBandWidth: function getBandWidth() {
	        var axisExtent = this._extent;
	        var dataExtent = this.scale.getExtent();

	        var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
	        // Fix #2728, avoid NaN when only one data.
	        len === 0 && (len = 1);

	        var size = Math.abs(axisExtent[1] - axisExtent[0]);

	        return Math.abs(size) / len;
	    },

	    /**
	     * When axis extent depends on data and no data exists,
	     * axis ticks should not be drawn, which is named 'blank'.
	     */
	    isBlank: function isBlank() {
	        return this._isBlank;
	    },

	    /**
	     * When axis extent depends on data and no data exists,
	     * axis ticks should not be drawn, which is named 'blank'.
	     */
	    setBlank: function setBlank(isBlank) {
	        this._isBlank = isBlank;
	    }

	};

	module.exports = Axis;

/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Helper function for axisLabelInterval calculation
	 */

	var zrUtil = __webpack_require__(504);
	var axisHelper = __webpack_require__(615);

	module.exports = function (axis) {
	    var axisModel = axis.model;
	    var labelModel = axisModel.getModel('axisLabel');
	    var labelInterval = labelModel.get('interval');
	    if (!(axis.type === 'category' && labelInterval === 'auto')) {
	        return labelInterval === 'auto' ? 0 : labelInterval;
	    }

	    return axisHelper.getAxisLabelInterval(zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis), axisModel.getFormattedLabels(), labelModel.getModel('textStyle').getFont(), axis.isHorizontal());
	};

/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖


	__webpack_require__(627);
	var ComponentModel = __webpack_require__(519);

	module.exports = ComponentModel.extend({

	    type: 'grid',

	    dependencies: ['xAxis', 'yAxis'],

	    layoutMode: 'box',

	    /**
	     * @type {module:echarts/coord/cartesian/Grid}
	     */
	    coordinateSystem: null,

	    defaultOption: {
	        show: false,
	        zlevel: 0,
	        z: 0,
	        left: '10%',
	        top: 60,
	        right: '10%',
	        bottom: 60,
	        // If grid size contain label
	        containLabel: false,
	        // width: {totalWidth} - left - right,
	        // height: {totalHeight} - top - bottom,
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderWidth: 1,
	        borderColor: '#ccc'
	    }
	});

/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ComponentModel = __webpack_require__(519);
	var zrUtil = __webpack_require__(504);
	var axisModelCreator = __webpack_require__(628);

	var AxisModel = ComponentModel.extend({

	    type: 'cartesian2dAxis',

	    /**
	     * @type {module:echarts/coord/cartesian/Axis2D}
	     */
	    axis: null,

	    /**
	     * @override
	     */
	    init: function init() {
	        AxisModel.superApply(this, 'init', arguments);
	        this.resetRange();
	    },

	    /**
	     * @override
	     */
	    mergeOption: function mergeOption() {
	        AxisModel.superApply(this, 'mergeOption', arguments);
	        this.resetRange();
	    },

	    /**
	     * @override
	     */
	    restoreData: function restoreData() {
	        AxisModel.superApply(this, 'restoreData', arguments);
	        this.resetRange();
	    },

	    /**
	     * @override
	     * @return {module:echarts/model/Component}
	     */
	    getCoordSysModel: function getCoordSysModel() {
	        return this.ecModel.queryComponents({
	            mainType: 'grid',
	            index: this.option.gridIndex,
	            id: this.option.gridId
	        })[0];
	    }

	});

	function getAxisType(axisDim, option) {
	    // Default axis with data is category axis
	    return option.type || (option.data ? 'category' : 'value');
	}

	zrUtil.merge(AxisModel.prototype, __webpack_require__(630));

	var extraOption = {
	    // gridIndex: 0,
	    // gridId: '',

	    // Offset is for multiple axis on the same position
	    offset: 0
	};

	axisModelCreator('x', AxisModel, getAxisType, extraOption);
	axisModelCreator('y', AxisModel, getAxisType, extraOption);

	module.exports = AxisModel;

/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var axisDefault = __webpack_require__(629);
	var zrUtil = __webpack_require__(504);
	var ComponentModel = __webpack_require__(519);
	var layout = __webpack_require__(521);

	// FIXME axisType is fixed ?
	var AXIS_TYPES = ['value', 'category', 'time', 'log'];

	/**
	 * Generate sub axis model class
	 * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	 * @param {module:echarts/model/Component} BaseAxisModelClass
	 * @param {Function} axisTypeDefaulter
	 * @param {Object} [extraDefaultOption]
	 */
	module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {

	    zrUtil.each(AXIS_TYPES, function (axisType) {

	        BaseAxisModelClass.extend({

	            type: axisName + 'Axis.' + axisType,

	            mergeDefaultAndTheme: function mergeDefaultAndTheme(option, ecModel) {
	                var layoutMode = this.layoutMode;
	                var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};

	                var themeModel = ecModel.getTheme();
	                zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	                zrUtil.merge(option, this.getDefaultOption());

	                option.type = axisTypeDefaulter(axisName, option);

	                if (layoutMode) {
	                    layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	                }
	            },

	            defaultOption: zrUtil.mergeAll([{}, axisDefault[axisType + 'Axis'], extraDefaultOption], true)
	        });
	    });

	    ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', zrUtil.curry(axisTypeDefaulter, axisName));
	};

/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var defaultOption = {
	    show: true,
	    zlevel: 0, // 一级层叠
	    z: 0, // 二级层叠
	    // 反向坐标轴
	    inverse: false,

	    // 坐标轴名字，默认为空
	    name: '',
	    // 坐标轴名字位置，支持'start' | 'middle' | 'end'
	    nameLocation: 'end',
	    // 坐标轴名字旋转，degree。
	    nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.
	    nameTruncate: {
	        maxWidth: null,
	        ellipsis: '...',
	        placeholder: '.'
	    },
	    // 坐标轴文字样式，默认取全局样式
	    nameTextStyle: {},
	    // 文字与轴线距离
	    nameGap: 15,

	    silent: false, // Default false to support tooltip.
	    triggerEvent: false, // Default false to avoid legacy user event listener fail.

	    tooltip: {
	        show: false
	    },

	    // 坐标轴线
	    axisLine: {
	        // 默认显示，属性show控制显示与否
	        show: true,
	        onZero: true,
	        // 属性lineStyle控制线条样式
	        lineStyle: {
	            color: '#333',
	            width: 1,
	            type: 'solid'
	        }
	    },
	    // 坐标轴小标记
	    axisTick: {
	        // 属性show控制显示与否，默认显示
	        show: true,
	        // 控制小标记是否在grid里
	        inside: false,
	        // 属性length控制线长
	        length: 5,
	        // 属性lineStyle控制线条样式
	        lineStyle: {
	            width: 1
	        }
	    },
	    // 坐标轴文本标签，详见axis.axisLabel
	    axisLabel: {
	        show: true,
	        // 控制文本标签是否在grid里
	        inside: false,
	        rotate: 0,
	        margin: 8,
	        // formatter: null,
	        // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	        textStyle: {
	            fontSize: 12
	        }
	    },
	    // 分隔线
	    splitLine: {
	        // 默认显示，属性show控制显示与否
	        show: true,
	        // 属性lineStyle（详见lineStyle）控制线条样式
	        lineStyle: {
	            color: ['#ccc'],
	            width: 1,
	            type: 'solid'
	        }
	    },
	    // 分隔区域
	    splitArea: {
	        // 默认不显示，属性show控制显示与否
	        show: false,
	        // 属性areaStyle（详见areaStyle）控制区域样式
	        areaStyle: {
	            color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']
	        }
	    }
	};

	var categoryAxis = zrUtil.merge({
	    // 类目起始和结束两端空白策略
	    boundaryGap: true,
	    // splitArea: {
	    // show: false
	    // },
	    splitLine: {
	        show: false
	    },
	    // 坐标轴小标记
	    axisTick: {
	        // If tick is align with label when boundaryGap is true
	        // Default with axisTick
	        alignWithLabel: false,
	        interval: 'auto'
	    },
	    // 坐标轴文本标签，详见axis.axisLabel
	    axisLabel: {
	        interval: 'auto'
	    }
	}, defaultOption);

	var valueAxis = zrUtil.merge({
	    // 数值起始和结束两端空白策略
	    boundaryGap: [0, 0],
	    // 最小值, 设置成 'dataMin' 则从数据中计算最小值
	    // min: null,
	    // 最大值，设置成 'dataMax' 则从数据中计算最大值
	    // max: null,
	    // Readonly prop, specifies start value of the range when using data zoom.
	    // rangeStart: null
	    // Readonly prop, specifies end value of the range when using data zoom.
	    // rangeEnd: null
	    // 脱离0值比例，放大聚焦到最终_min，_max区间
	    // scale: false,
	    // 分割段数，默认为5
	    splitNumber: 5
	    // Minimum interval
	    // minInterval: null
	}, defaultOption);

	// FIXME
	var timeAxis = zrUtil.defaults({
	    scale: true,
	    min: 'dataMin',
	    max: 'dataMax'
	}, valueAxis);
	var logAxis = zrUtil.defaults({
	    logBase: 10
	}, valueAxis);
	logAxis.scale = true;

	module.exports = {
	    categoryAxis: categoryAxis,
	    valueAxis: valueAxis,
	    timeAxis: timeAxis,
	    logAxis: logAxis
	};

/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var axisHelper = __webpack_require__(615);

	function getName(obj) {
	    if (zrUtil.isObject(obj) && obj.value != null) {
	        return obj.value;
	    } else {
	        return obj;
	    }
	}

	module.exports = {

	    /**
	     * Format labels
	     * @return {Array.<string>}
	     */
	    getFormattedLabels: function getFormattedLabels() {
	        return axisHelper.getFormattedLabels(this.axis, this.get('axisLabel.formatter'));
	    },

	    /**
	     * Get categories
	     */
	    getCategories: function getCategories() {
	        return this.get('type') === 'category' && zrUtil.map(this.get('data'), getName);
	    },

	    /**
	     * @param {boolean} origin
	     * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
	     */
	    getMin: function getMin(origin) {
	        var option = this.option;
	        var min = !origin && option.rangeStart != null ? option.rangeStart : option.min;

	        if (min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {
	            min = this.axis.scale.parse(min);
	        }
	        return min;
	    },

	    /**
	     * @param {boolean} origin
	     * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
	     */
	    getMax: function getMax(origin) {
	        var option = this.option;
	        var max = !origin && option.rangeEnd != null ? option.rangeEnd : option.max;

	        if (max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {
	            max = this.axis.scale.parse(max);
	        }
	        return max;
	    },

	    /**
	     * @return {boolean}
	     */
	    getNeedCrossZero: function getNeedCrossZero() {
	        var option = this.option;
	        return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
	    },

	    /**
	     * Should be implemented by each axis model if necessary.
	     * @return {module:echarts/model/Component} coordinate system model
	     */
	    getCoordSysModel: zrUtil.noop,

	    /**
	     * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
	     * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
	     */
	    setRange: function setRange(rangeStart, rangeEnd) {
	        this.option.rangeStart = rangeStart;
	        this.option.rangeEnd = rangeEnd;
	    },

	    /**
	     * Reset range
	     */
	    resetRange: function resetRange() {
	        // rangeStart and rangeEnd is readonly.
	        this.option.rangeStart = this.option.rangeEnd = null;
	    }
	};

/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// TODO boundaryGap


	__webpack_require__(627);

	__webpack_require__(632);

/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var AxisBuilder = __webpack_require__(633);
	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	var getInterval = AxisBuilder.getInterval;

	var axisBuilderAttrs = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];
	var selfBuilderAttrs = ['splitArea', 'splitLine'];

	// function getAlignWithLabel(model, axisModel) {
	//     var alignWithLabel = model.get('alignWithLabel');
	//     if (alignWithLabel === 'auto') {
	//         alignWithLabel = axisModel.get('axisTick.alignWithLabel');
	//     }
	//     return alignWithLabel;
	// }

	var AxisView = __webpack_require__(501).extendComponentView({

	    type: 'axis',

	    render: function render(axisModel, ecModel) {

	        this.group.removeAll();

	        var oldAxisGroup = this._axisGroup;
	        this._axisGroup = new graphic.Group();

	        this.group.add(this._axisGroup);

	        if (!axisModel.get('show')) {
	            return;
	        }

	        var gridModel = axisModel.getCoordSysModel();

	        var layout = layoutAxis(gridModel, axisModel);

	        var axisBuilder = new AxisBuilder(axisModel, layout);

	        zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

	        this._axisGroup.add(axisBuilder.getGroup());

	        zrUtil.each(selfBuilderAttrs, function (name) {
	            if (axisModel.get(name + '.show')) {
	                this['_' + name](axisModel, gridModel, layout.labelInterval);
	            }
	        }, this);

	        graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	    },

	    /**
	     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {number|Function} labelInterval
	     * @private
	     */
	    _splitLine: function _splitLine(axisModel, gridModel, labelInterval) {
	        var axis = axisModel.axis;

	        if (axis.isBlank()) {
	            return;
	        }

	        var splitLineModel = axisModel.getModel('splitLine');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var lineColors = lineStyleModel.get('color');

	        var lineInterval = getInterval(splitLineModel, labelInterval);

	        lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];

	        var gridRect = gridModel.coordinateSystem.getRect();
	        var isHorizontal = axis.isHorizontal();

	        var lineCount = 0;

	        var ticksCoords = axis.getTicksCoords();
	        var ticks = axis.scale.getTicks();

	        var p1 = [];
	        var p2 = [];
	        // Simple optimization
	        // Batching the lines if color are the same
	        var lineStyle = lineStyleModel.getLineStyle();
	        for (var i = 0; i < ticksCoords.length; i++) {
	            if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                continue;
	            }

	            var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	            if (isHorizontal) {
	                p1[0] = tickCoord;
	                p1[1] = gridRect.y;
	                p2[0] = tickCoord;
	                p2[1] = gridRect.y + gridRect.height;
	            } else {
	                p1[0] = gridRect.x;
	                p1[1] = tickCoord;
	                p2[0] = gridRect.x + gridRect.width;
	                p2[1] = tickCoord;
	            }

	            var colorIndex = lineCount++ % lineColors.length;
	            this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({
	                anid: 'line_' + ticks[i],

	                shape: {
	                    x1: p1[0],
	                    y1: p1[1],
	                    x2: p2[0],
	                    y2: p2[1]
	                },
	                style: zrUtil.defaults({
	                    stroke: lineColors[colorIndex]
	                }, lineStyle),
	                silent: true
	            })));
	        }
	    },

	    /**
	     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {number|Function} labelInterval
	     * @private
	     */
	    _splitArea: function _splitArea(axisModel, gridModel, labelInterval) {
	        var axis = axisModel.axis;

	        if (axis.isBlank()) {
	            return;
	        }

	        var splitAreaModel = axisModel.getModel('splitArea');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');
	        var areaColors = areaStyleModel.get('color');

	        var gridRect = gridModel.coordinateSystem.getRect();

	        var ticksCoords = axis.getTicksCoords();
	        var ticks = axis.scale.getTicks();

	        var prevX = axis.toGlobalCoord(ticksCoords[0]);
	        var prevY = axis.toGlobalCoord(ticksCoords[0]);

	        var count = 0;

	        var areaInterval = getInterval(splitAreaModel, labelInterval);

	        var areaStyle = areaStyleModel.getAreaStyle();
	        areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];

	        for (var i = 1; i < ticksCoords.length; i++) {
	            if (ifIgnoreOnTick(axis, i, areaInterval)) {
	                continue;
	            }

	            var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	            var x;
	            var y;
	            var width;
	            var height;
	            if (axis.isHorizontal()) {
	                x = prevX;
	                y = gridRect.y;
	                width = tickCoord - x;
	                height = gridRect.height;
	            } else {
	                x = gridRect.x;
	                y = prevY;
	                width = gridRect.width;
	                height = tickCoord - y;
	            }

	            var colorIndex = count++ % areaColors.length;
	            this._axisGroup.add(new graphic.Rect({
	                anid: 'area_' + ticks[i],

	                shape: {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                },
	                style: zrUtil.defaults({
	                    fill: areaColors[colorIndex]
	                }, areaStyle),
	                silent: true
	            }));

	            prevX = x + width;
	            prevY = y + height;
	        }
	    }
	});

	AxisView.extend({
	    type: 'xAxis'
	});
	AxisView.extend({
	    type: 'yAxis'
	});

	/**
	 * @inner
	 */
	function layoutAxis(gridModel, axisModel) {
	    var grid = gridModel.coordinateSystem;
	    var axis = axisModel.axis;
	    var layout = {};

	    var rawAxisPosition = axis.position;
	    var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
	    var axisDim = axis.dim;

	    // [left, right, top, bottom]
	    var rect = grid.getRect();
	    var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];

	    var axisOffset = axisModel.get('offset') || 0;

	    var posMap = {
	        x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },
	        y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }
	    };

	    posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);
	    posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);

	    function getZero(dim, val) {
	        var theAxis = grid.getAxis(dim);
	        return theAxis.toGlobalCoord(theAxis.dataToCoord(0));
	    }

	    // Axis position
	    layout.position = [axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0], axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]];

	    // Axis rotation
	    layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);

	    // Tick and label direction, x y is axisDim
	    var dirMap = { top: -1, bottom: 1, left: -1, right: 1 };

	    layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	    if (axis.onZero) {
	        layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;
	    }

	    if (axisModel.getModel('axisTick').get('inside')) {
	        layout.tickDirection = -layout.tickDirection;
	    }
	    if (axisModel.getModel('axisLabel').get('inside')) {
	        layout.labelDirection = -layout.labelDirection;
	    }

	    // Special label rotation
	    var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	    layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;

	    // label interval when auto mode.
	    layout.labelInterval = axis.getLabelInterval();

	    // Over splitLine and splitArea
	    layout.z2 = 1;

	    return layout;
	}

/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var formatUtil = __webpack_require__(506);
	var graphic = __webpack_require__(543);
	var Model = __webpack_require__(512);
	var numberUtil = __webpack_require__(507);
	var remRadian = numberUtil.remRadian;
	var isRadianAroundZero = numberUtil.isRadianAroundZero;
	var vec2 = __webpack_require__(510);
	var v2ApplyTransform = vec2.applyTransform;
	var retrieve = zrUtil.retrieve;

	var PI = Math.PI;

	function makeAxisEventDataBase(axisModel) {
	    var eventData = {
	        componentType: axisModel.mainType
	    };
	    eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	    return eventData;
	}

	/**
	 * A final axis is translated and rotated from a "standard axis".
	 * So opt.position and opt.rotation is required.
	 *
	 * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	 * for example: (0, 0) ------------> (0, 50)
	 *
	 * nameDirection or tickDirection or labelDirection is 1 means tick
	 * or label is below the standard axis, whereas is -1 means above
	 * the standard axis. labelOffset means offset between label and axis,
	 * which is useful when 'onZero', where axisLabel is in the grid and
	 * label in outside grid.
	 *
	 * Tips: like always,
	 * positive rotation represents anticlockwise, and negative rotation
	 * represents clockwise.
	 * The direction of position coordinate is the same as the direction
	 * of screen coordinate.
	 *
	 * Do not need to consider axis 'inverse', which is auto processed by
	 * axis extent.
	 *
	 * @param {module:zrender/container/Group} group
	 * @param {Object} axisModel
	 * @param {Object} opt Standard axis parameters.
	 * @param {Array.<number>} opt.position [x, y]
	 * @param {number} opt.rotation by radian
	 * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.
	 * @param {number} [opt.tickDirection=1] 1 or -1
	 * @param {number} [opt.labelDirection=1] 1 or -1
	 * @param {number} [opt.labelOffset=0] Usefull when onZero.
	 * @param {string} [opt.axisLabelShow] default get from axisModel.
	 * @param {string} [opt.axisName] default get from axisModel.
	 * @param {number} [opt.axisNameAvailableWidth]
	 * @param {number} [opt.labelRotation] by degree, default get from axisModel.
	 * @param {number} [opt.labelInterval] Default label interval when label
	 *                                     interval from model is null or 'auto'.
	 * @param {number} [opt.strokeContainThreshold] Default label interval when label
	 */
	var AxisBuilder = function AxisBuilder(axisModel, opt) {

	    /**
	     * @readOnly
	     */
	    this.opt = opt;

	    /**
	     * @readOnly
	     */
	    this.axisModel = axisModel;

	    // Default value
	    zrUtil.defaults(opt, {
	        labelOffset: 0,
	        nameDirection: 1,
	        tickDirection: 1,
	        labelDirection: 1,
	        silent: true
	    });

	    /**
	     * @readOnly
	     */
	    this.group = new graphic.Group();

	    // FIXME Not use a seperate text group?
	    var dumbGroup = new graphic.Group({
	        position: opt.position.slice(),
	        rotation: opt.rotation
	    });

	    // this.group.add(dumbGroup);
	    // this._dumbGroup = dumbGroup;

	    dumbGroup.updateTransform();
	    this._transform = dumbGroup.transform;

	    this._dumbGroup = dumbGroup;
	};

	AxisBuilder.prototype = {

	    constructor: AxisBuilder,

	    hasBuilder: function hasBuilder(name) {
	        return !!builders[name];
	    },

	    add: function add(name) {
	        builders[name].call(this);
	    },

	    getGroup: function getGroup() {
	        return this.group;
	    }

	};

	var builders = {

	    /**
	     * @private
	     */
	    axisLine: function axisLine() {
	        var opt = this.opt;
	        var axisModel = this.axisModel;

	        if (!axisModel.get('axisLine.show')) {
	            return;
	        }

	        var extent = this.axisModel.axis.getExtent();

	        var matrix = this._transform;
	        var pt1 = [extent[0], 0];
	        var pt2 = [extent[1], 0];
	        if (matrix) {
	            v2ApplyTransform(pt1, pt1, matrix);
	            v2ApplyTransform(pt2, pt2, matrix);
	        }

	        this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({

	            // Id for animation
	            anid: 'line',

	            shape: {
	                x1: pt1[0],
	                y1: pt1[1],
	                x2: pt2[0],
	                y2: pt2[1]
	            },
	            style: zrUtil.extend({ lineCap: 'round' }, axisModel.getModel('axisLine.lineStyle').getLineStyle()),
	            strokeContainThreshold: opt.strokeContainThreshold || 5,
	            silent: true,
	            z2: 1
	        })));
	    },

	    /**
	     * @private
	     */
	    axisTick: function axisTick() {
	        var axisModel = this.axisModel;
	        var axis = axisModel.axis;

	        if (!axisModel.get('axisTick.show') || axis.isBlank()) {
	            return;
	        }

	        var tickModel = axisModel.getModel('axisTick');
	        var opt = this.opt;

	        var lineStyleModel = tickModel.getModel('lineStyle');
	        var tickLen = tickModel.get('length');

	        var tickInterval = getInterval(tickModel, opt.labelInterval);
	        var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));
	        var ticks = axis.scale.getTicks();

	        var pt1 = [];
	        var pt2 = [];
	        var matrix = this._transform;

	        for (var i = 0; i < ticksCoords.length; i++) {
	            // Only ordinal scale support tick interval
	            if (ifIgnoreOnTick(axis, i, tickInterval)) {
	                continue;
	            }

	            var tickCoord = ticksCoords[i];

	            pt1[0] = tickCoord;
	            pt1[1] = 0;
	            pt2[0] = tickCoord;
	            pt2[1] = opt.tickDirection * tickLen;

	            if (matrix) {
	                v2ApplyTransform(pt1, pt1, matrix);
	                v2ApplyTransform(pt2, pt2, matrix);
	            }
	            // Tick line, Not use group transform to have better line draw
	            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({

	                // Id for animation
	                anid: 'tick_' + ticks[i],

	                shape: {
	                    x1: pt1[0],
	                    y1: pt1[1],
	                    x2: pt2[0],
	                    y2: pt2[1]
	                },
	                style: zrUtil.defaults(lineStyleModel.getLineStyle(), {
	                    stroke: axisModel.get('axisLine.lineStyle.color')
	                }),
	                z2: 2,
	                silent: true
	            })));
	        }
	    },

	    /**
	     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @private
	     */
	    axisLabel: function axisLabel() {
	        var opt = this.opt;
	        var axisModel = this.axisModel;
	        var axis = axisModel.axis;
	        var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));

	        if (!show || axis.isBlank()) {
	            return;
	        }

	        var labelModel = axisModel.getModel('axisLabel');
	        var textStyleModel = labelModel.getModel('textStyle');
	        var labelMargin = labelModel.get('margin');
	        var ticks = axis.scale.getTicks();
	        var labels = axisModel.getFormattedLabels();

	        // Special label rotate.
	        var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;
	        // To radian.
	        labelRotation = labelRotation * PI / 180;

	        var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);
	        var categoryData = axisModel.get('data');

	        var textEls = [];
	        var silent = isSilent(axisModel);
	        var triggerEvent = axisModel.get('triggerEvent');

	        zrUtil.each(ticks, function (tickVal, index) {
	            if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {
	                return;
	            }

	            var itemTextStyleModel = textStyleModel;
	            if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {
	                itemTextStyleModel = new Model(categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel);
	            }
	            var textColor = itemTextStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color');

	            var tickCoord = axis.dataToCoord(tickVal);
	            var pos = [tickCoord, opt.labelOffset + opt.labelDirection * labelMargin];
	            var labelBeforeFormat = axis.scale.getLabel(tickVal);

	            var textEl = new graphic.Text({

	                // Id for animation
	                anid: 'label_' + tickVal,

	                style: {
	                    text: labels[index],
	                    textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,
	                    textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,
	                    textFont: itemTextStyleModel.getFont(),
	                    fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor
	                },
	                position: pos,
	                rotation: labelLayout.rotation,
	                silent: silent,
	                z2: 10
	            });

	            // Pack data for mouse event
	            if (triggerEvent) {
	                textEl.eventData = makeAxisEventDataBase(axisModel);
	                textEl.eventData.targetType = 'axisLabel';
	                textEl.eventData.value = labelBeforeFormat;
	            }

	            // FIXME
	            this._dumbGroup.add(textEl);
	            textEl.updateTransform();

	            textEls.push(textEl);
	            this.group.add(textEl);

	            textEl.decomposeTransform();
	        }, this);

	        function isTwoLabelOverlapped(current, next) {
	            var firstRect = current && current.getBoundingRect().clone();
	            var nextRect = next && next.getBoundingRect().clone();
	            if (firstRect && nextRect) {
	                firstRect.applyTransform(current.getLocalTransform());
	                nextRect.applyTransform(next.getLocalTransform());
	                return firstRect.intersect(nextRect);
	            }
	        }

	        // If min or max are user set, we need to check
	        // If the tick on min(max) are overlap on their neighbour tick
	        // If they are overlapped, we need to hide the min(max) tick label
	        if (axisModel.getMin() != null) {
	            var firstLabel = textEls[0];
	            var nextLabel = textEls[1];
	            if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	                firstLabel.ignore = true;
	            }
	        }
	        if (axisModel.getMax() != null) {
	            var lastLabel = textEls[textEls.length - 1];
	            var prevLabel = textEls[textEls.length - 2];
	            if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	                lastLabel.ignore = true;
	            }
	        }
	    },

	    /**
	     * @private
	     */
	    axisName: function axisName() {
	        var opt = this.opt;
	        var axisModel = this.axisModel;
	        var name = retrieve(opt.axisName, axisModel.get('name'));

	        if (!name) {
	            return;
	        }

	        var nameLocation = axisModel.get('nameLocation');
	        var nameDirection = opt.nameDirection;
	        var textStyleModel = axisModel.getModel('nameTextStyle');
	        var gap = axisModel.get('nameGap') || 0;

	        var extent = this.axisModel.axis.getExtent();
	        var gapSignal = extent[0] > extent[1] ? -1 : 1;
	        var pos = [nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2, // 'middle'
	        // Reuse labelOffset.
	        nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0];

	        var labelLayout;

	        var nameRotation = axisModel.get('nameRotate');
	        if (nameRotation != null) {
	            nameRotation = nameRotation * PI / 180; // To radian.
	        }

	        var axisNameAvailableWidth;

	        if (nameLocation === 'middle') {
	            labelLayout = innerTextLayout(opt, nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
	            nameDirection);
	        } else {
	            labelLayout = endTextLayout(opt, nameLocation, nameRotation || 0, extent);

	            axisNameAvailableWidth = opt.axisNameAvailableWidth;
	            if (axisNameAvailableWidth != null) {
	                axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
	                !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
	            }
	        }

	        var textFont = textStyleModel.getFont();

	        var truncateOpt = axisModel.get('nameTruncate', true) || {};
	        var ellipsis = truncateOpt.ellipsis;
	        var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);
	        var truncatedText = ellipsis != null && maxWidth != null ? formatUtil.truncateText(name, maxWidth, textFont, ellipsis, { minChar: 2, placeholder: truncateOpt.placeholder }) : name;

	        var tooltipOpt = axisModel.get('tooltip', true);

	        var mainType = axisModel.mainType;
	        var formatterParams = {
	            componentType: mainType,
	            name: name,
	            $vars: ['name']
	        };
	        formatterParams[mainType + 'Index'] = axisModel.componentIndex;

	        var textEl = new graphic.Text({

	            // Id for animation
	            anid: 'name',

	            __fullText: name,
	            __truncatedText: truncatedText,

	            style: {
	                text: truncatedText,
	                textFont: textFont,
	                fill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
	                textAlign: labelLayout.textAlign,
	                textVerticalAlign: labelLayout.verticalAlign
	            },
	            position: pos,
	            rotation: labelLayout.rotation,
	            silent: isSilent(axisModel),
	            z2: 1,
	            tooltip: tooltipOpt && tooltipOpt.show ? zrUtil.extend({
	                content: name,
	                formatter: function formatter() {
	                    return name;
	                },
	                formatterParams: formatterParams
	            }, tooltipOpt) : null
	        });

	        if (axisModel.get('triggerEvent')) {
	            textEl.eventData = makeAxisEventDataBase(axisModel);
	            textEl.eventData.targetType = 'axisName';
	            textEl.eventData.name = name;
	        }

	        // FIXME
	        this._dumbGroup.add(textEl);
	        textEl.updateTransform();

	        this.group.add(textEl);

	        textEl.decomposeTransform();
	    }

	};

	/**
	 * @inner
	 */
	function innerTextLayout(opt, textRotation, direction) {
	    var rotationDiff = remRadian(textRotation - opt.rotation);
	    var textAlign;
	    var verticalAlign;

	    if (isRadianAroundZero(rotationDiff)) {
	        // Label is parallel with axis line.
	        verticalAlign = direction > 0 ? 'top' : 'bottom';
	        textAlign = 'center';
	    } else if (isRadianAroundZero(rotationDiff - PI)) {
	        // Label is inverse parallel with axis line.
	        verticalAlign = direction > 0 ? 'bottom' : 'top';
	        textAlign = 'center';
	    } else {
	        verticalAlign = 'middle';

	        if (rotationDiff > 0 && rotationDiff < PI) {
	            textAlign = direction > 0 ? 'right' : 'left';
	        } else {
	            textAlign = direction > 0 ? 'left' : 'right';
	        }
	    }

	    return {
	        rotation: rotationDiff,
	        textAlign: textAlign,
	        verticalAlign: verticalAlign
	    };
	}

	/**
	 * @inner
	 */
	function endTextLayout(opt, textPosition, textRotate, extent) {
	    var rotationDiff = remRadian(textRotate - opt.rotation);
	    var textAlign;
	    var verticalAlign;
	    var inverse = extent[0] > extent[1];
	    var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;

	    if (isRadianAroundZero(rotationDiff - PI / 2)) {
	        verticalAlign = onLeft ? 'bottom' : 'top';
	        textAlign = 'center';
	    } else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	        verticalAlign = onLeft ? 'top' : 'bottom';
	        textAlign = 'center';
	    } else {
	        verticalAlign = 'middle';
	        if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	            textAlign = onLeft ? 'left' : 'right';
	        } else {
	            textAlign = onLeft ? 'right' : 'left';
	        }
	    }

	    return {
	        rotation: rotationDiff,
	        textAlign: textAlign,
	        verticalAlign: verticalAlign
	    };
	}

	/**
	 * @inner
	 */
	function isSilent(axisModel) {
	    var tooltipOpt = axisModel.get('tooltip');
	    return axisModel.get('silent')
	    // Consider mouse cursor, add these restrictions.
	    || !(axisModel.get('triggerEvent') || tooltipOpt && tooltipOpt.show);
	}

	/**
	 * @static
	 */
	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {
	    var rawTick;
	    var scale = axis.scale;
	    return scale.type === 'ordinal' && (typeof interval === 'function' ? (rawTick = scale.getTicks()[i], !interval(rawTick, scale.getLabel(rawTick))) : i % (interval + 1));
	};

	/**
	 * @static
	 */
	var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
	    var interval = model.get('interval');
	    if (interval == null || interval == 'auto') {
	        interval = labelInterval;
	    }
	    return interval;
	};

	module.exports = AxisBuilder;

/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	__webpack_require__(614);

	__webpack_require__(635);
	__webpack_require__(637);

	var barLayoutGrid = __webpack_require__(640);
	var echarts = __webpack_require__(501);

	echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));
	// Visual coding for legend
	echarts.registerVisual(function (ecModel) {
	    ecModel.eachSeriesByType('bar', function (seriesModel) {
	        var data = seriesModel.getData();
	        data.setVisual('legendSymbol', 'roundRect');
	    });
	});

	// In case developer forget to include grid component
	__webpack_require__(613);

/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(636).extend({

	    type: 'series.bar',

	    dependencies: ['grid', 'polar'],

	    brushSelector: 'rect'
	});

/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SeriesModel = __webpack_require__(528);
	var createListFromArray = __webpack_require__(602);

	module.exports = SeriesModel.extend({

	    type: 'series.__base_bar__',

	    getInitialData: function getInitialData(option, ecModel) {
	        if (__DEV__) {
	            var coordSys = option.coordinateSystem;
	            if (coordSys !== 'cartesian2d') {
	                throw new Error('Bar only support cartesian2d coordinateSystem');
	            }
	        }
	        return createListFromArray(option.data, this, ecModel);
	    },

	    getMarkerPosition: function getMarkerPosition(value) {
	        var coordSys = this.coordinateSystem;
	        if (coordSys) {
	            // PENDING if clamp ?
	            var pt = coordSys.dataToPoint(value, true);
	            var data = this.getData();
	            var offset = data.getLayout('offset');
	            var size = data.getLayout('size');
	            var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	            pt[offsetIndex] += offset + size / 2;
	            return pt;
	        }
	        return [NaN, NaN];
	    },

	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,
	        // stack: null

	        // Cartesian coordinate system
	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        // 最小高度改为0
	        barMinHeight: 0,

	        // barMaxWidth: null,
	        // 默认自适应
	        // barWidth: null,
	        // 柱间距离，默认为柱形宽度的30%，可设固定值
	        // barGap: '30%',
	        // 类目间柱形距离，默认为类目间距的20%，可设固定值
	        // barCategoryGap: '20%',
	        // label: {
	        //     normal: {
	        //         show: false
	        //     }
	        // },
	        itemStyle: {
	            normal: {
	                // color: '各异'
	            },
	            emphasis: {}
	        }
	    }
	});

/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var helper = __webpack_require__(638);

	var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];

	// FIXME
	// Just for compatible with ec2.
	zrUtil.extend(__webpack_require__(512).prototype, __webpack_require__(639));

	var BarView = __webpack_require__(501).extendChartView({

	    type: 'bar',

	    render: function render(seriesModel, ecModel, api) {
	        var coordinateSystemType = seriesModel.get('coordinateSystem');

	        if (coordinateSystemType === 'cartesian2d') {
	            this._renderOnCartesian(seriesModel, ecModel, api);
	        }

	        return this.group;
	    },

	    dispose: zrUtil.noop,

	    _renderOnCartesian: function _renderOnCartesian(seriesModel, ecModel, api) {
	        var group = this.group;
	        var data = seriesModel.getData();
	        var oldData = this._data;

	        var cartesian = seriesModel.coordinateSystem;
	        var baseAxis = cartesian.getBaseAxis();
	        var isHorizontal = baseAxis.isHorizontal();
	        var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;

	        data.diff(oldData).add(function (dataIndex) {
	            if (!data.hasValue(dataIndex)) {
	                return;
	            }

	            var itemModel = data.getItemModel(dataIndex);
	            var layout = getRectItemLayout(data, dataIndex, itemModel);
	            var el = createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel);
	            data.setItemGraphicEl(dataIndex, el);
	            group.add(el);

	            updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal);
	        }).update(function (newIndex, oldIndex) {
	            var el = oldData.getItemGraphicEl(oldIndex);

	            if (!data.hasValue(newIndex)) {
	                group.remove(el);
	                return;
	            }

	            var itemModel = data.getItemModel(newIndex);
	            var layout = getRectItemLayout(data, newIndex, itemModel);

	            if (el) {
	                graphic.updateProps(el, { shape: layout }, animationModel, newIndex);
	            } else {
	                el = createRect(data, newIndex, itemModel, layout, isHorizontal, animationModel, true);
	            }

	            data.setItemGraphicEl(newIndex, el);
	            // Add back
	            group.add(el);

	            updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontal);
	        }).remove(function (dataIndex) {
	            var el = oldData.getItemGraphicEl(dataIndex);
	            el && removeRect(dataIndex, animationModel, el);
	        }).execute();

	        this._data = data;
	    },

	    remove: function remove(ecModel, api) {
	        var group = this.group;
	        var data = this._data;
	        if (ecModel.get('animation')) {
	            if (data) {
	                data.eachItemGraphicEl(function (el) {
	                    removeRect(el.dataIndex, ecModel, el);
	                });
	            }
	        } else {
	            group.removeAll();
	        }
	    }
	});

	function createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {
	    var rect = new graphic.Rect({ shape: zrUtil.extend({}, layout) });

	    // Animation
	    if (animationModel) {
	        var rectShape = rect.shape;
	        var animateProperty = isHorizontal ? 'height' : 'width';
	        var animateTarget = {};
	        rectShape[animateProperty] = 0;
	        animateTarget[animateProperty] = layout[animateProperty];
	        graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
	            shape: animateTarget
	        }, animationModel, dataIndex);
	    }

	    return rect;
	}

	function removeRect(dataIndex, animationModel, el) {
	    // Not show text when animating
	    el.style.text = '';
	    graphic.updateProps(el, {
	        shape: {
	            width: 0
	        }
	    }, animationModel, dataIndex, function () {
	        el.parent && el.parent.remove(el);
	    });
	}

	function getRectItemLayout(data, dataIndex, itemModel) {
	    var layout = data.getItemLayout(dataIndex);
	    var fixedLineWidth = getLineWidth(itemModel, layout);

	    // fix layout with lineWidth
	    var signX = layout.width > 0 ? 1 : -1;
	    var signY = layout.height > 0 ? 1 : -1;
	    return {
	        x: layout.x + signX * fixedLineWidth / 2,
	        y: layout.y + signY * fixedLineWidth / 2,
	        width: layout.width - signX * fixedLineWidth,
	        height: layout.height - signY * fixedLineWidth
	    };
	}

	function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal) {
	    var color = data.getItemVisual(dataIndex, 'color');
	    var opacity = data.getItemVisual(dataIndex, 'opacity');
	    var itemStyleModel = itemModel.getModel('itemStyle.normal');
	    var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();

	    el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);

	    el.useStyle(zrUtil.defaults({
	        fill: color,
	        opacity: opacity
	    }, itemStyleModel.getBarItemStyle()));

	    var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';

	    helper.setLabel(el.style, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside);

	    graphic.setHoverStyle(el, hoverStyle);
	}

	// In case width or height are too small.
	function getLineWidth(itemModel, rawLayout) {
	    var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
	    return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));
	}

	module.exports = BarView;

/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);

	var helper = {};

	helper.setLabel = function (normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside) {
	    var labelModel = itemModel.getModel('label.normal');
	    var hoverLabelModel = itemModel.getModel('label.emphasis');

	    if (labelModel.get('show')) {
	        setLabel(normalStyle, labelModel, color, zrUtil.retrieve(seriesModel.getFormattedLabel(dataIndex, 'normal'), seriesModel.getRawValue(dataIndex)), labelPositionOutside);
	    } else {
	        normalStyle.text = '';
	    }

	    if (hoverLabelModel.get('show')) {
	        setLabel(hoverStyle, hoverLabelModel, color, zrUtil.retrieve(seriesModel.getFormattedLabel(dataIndex, 'emphasis'), seriesModel.getRawValue(dataIndex)), labelPositionOutside);
	    } else {
	        hoverStyle.text = '';
	    }
	};

	function setLabel(style, model, color, labelText, labelPositionOutside) {
	    graphic.setText(style, model, color);
	    style.text = labelText;
	    if (style.textPosition === 'outside') {
	        style.textPosition = labelPositionOutside;
	    }
	}

	module.exports = helper;

/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _getBarItemStyle = __webpack_require__(515)([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'],
	// Compatitable with 2
	['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	module.exports = {
	    getBarItemStyle: function getBarItemStyle(excludes) {
	        var style = _getBarItemStyle.call(this, excludes);
	        if (this.getBorderLineDash) {
	            var lineDash = this.getBorderLineDash();
	            lineDash && (style.lineDash = lineDash);
	        }
	        return style;
	    }
	};

/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var parsePercent = numberUtil.parsePercent;

	function getSeriesStackId(seriesModel) {
	    return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
	}

	function getAxisKey(axis) {
	    return axis.dim + axis.index;
	}

	function calBarWidthAndOffset(barSeries, api) {
	    // Columns info on each category axis. Key is cartesian name
	    var columnsMap = {};

	    zrUtil.each(barSeries, function (seriesModel, idx) {
	        var data = seriesModel.getData();
	        var cartesian = seriesModel.coordinateSystem;

	        var baseAxis = cartesian.getBaseAxis();
	        var axisExtent = baseAxis.getExtent();
	        var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();

	        var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {
	            bandWidth: bandWidth,
	            remainedWidth: bandWidth,
	            autoWidthCount: 0,
	            categoryGap: '20%',
	            gap: '30%',
	            stacks: {}
	        };
	        var stacks = columnsOnAxis.stacks;
	        columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;

	        var stackId = getSeriesStackId(seriesModel);

	        if (!stacks[stackId]) {
	            columnsOnAxis.autoWidthCount++;
	        }
	        stacks[stackId] = stacks[stackId] || {
	            width: 0,
	            maxWidth: 0
	        };

	        var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);
	        var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);
	        var barGap = seriesModel.get('barGap');
	        var barCategoryGap = seriesModel.get('barCategoryGap');

	        // Caution: In a single coordinate system, these barGrid attributes
	        // will be shared by series. Consider that they have default values,
	        // only the attributes set on the last series will work.
	        // Do not change this fact unless there will be a break change.

	        // TODO
	        if (barWidth && !stacks[stackId].width) {
	            barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	            stacks[stackId].width = barWidth;
	            columnsOnAxis.remainedWidth -= barWidth;
	        }

	        barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	        barGap != null && (columnsOnAxis.gap = barGap);
	        barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
	    });

	    var result = {};

	    zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {

	        result[coordSysName] = {};

	        var stacks = columnsOnAxis.stacks;
	        var bandWidth = columnsOnAxis.bandWidth;
	        var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	        var barGapPercent = parsePercent(columnsOnAxis.gap, 1);

	        var remainedWidth = columnsOnAxis.remainedWidth;
	        var autoWidthCount = columnsOnAxis.autoWidthCount;
	        var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	        autoWidth = Math.max(autoWidth, 0);

	        // Find if any auto calculated bar exceeded maxBarWidth
	        zrUtil.each(stacks, function (column, stack) {
	            var maxWidth = column.maxWidth;
	            if (!column.width && maxWidth && maxWidth < autoWidth) {
	                maxWidth = Math.min(maxWidth, remainedWidth);
	                remainedWidth -= maxWidth;
	                column.width = maxWidth;
	                autoWidthCount--;
	            }
	        });

	        // Recalculate width again
	        autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	        autoWidth = Math.max(autoWidth, 0);

	        var widthSum = 0;
	        var lastColumn;
	        zrUtil.each(stacks, function (column, idx) {
	            if (!column.width) {
	                column.width = autoWidth;
	            }
	            lastColumn = column;
	            widthSum += column.width * (1 + barGapPercent);
	        });
	        if (lastColumn) {
	            widthSum -= lastColumn.width * barGapPercent;
	        }

	        var offset = -widthSum / 2;
	        zrUtil.each(stacks, function (column, stackId) {
	            result[coordSysName][stackId] = result[coordSysName][stackId] || {
	                offset: offset,
	                width: column.width
	            };

	            offset += column.width * (1 + barGapPercent);
	        });
	    });

	    return result;
	}

	/**
	 * @param {string} seriesType
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function barLayoutGrid(seriesType, ecModel, api) {

	    var barWidthAndOffset = calBarWidthAndOffset(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {
	        return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
	    }));

	    var lastStackCoords = {};
	    var lastStackCoordsOrigin = {};

	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {

	        var data = seriesModel.getData();
	        var cartesian = seriesModel.coordinateSystem;
	        var baseAxis = cartesian.getBaseAxis();

	        var stackId = getSeriesStackId(seriesModel);
	        var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	        var columnOffset = columnLayoutInfo.offset;
	        var columnWidth = columnLayoutInfo.width;
	        var valueAxis = cartesian.getOtherAxis(baseAxis);

	        var barMinHeight = seriesModel.get('barMinHeight') || 0;

	        var valueAxisStart = baseAxis.onZero ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];

	        var coords = cartesian.dataToPoints(data, true);
	        lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	        lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243

	        data.setLayout({
	            offset: columnOffset,
	            size: columnWidth
	        });

	        data.each(valueAxis.dim, function (value, idx) {
	            if (isNaN(value)) {
	                return;
	            }

	            if (!lastStackCoords[stackId][idx]) {
	                lastStackCoords[stackId][idx] = {
	                    p: valueAxisStart, // Positive stack
	                    n: valueAxisStart // Negative stack
	                };
	                lastStackCoordsOrigin[stackId][idx] = {
	                    p: valueAxisStart, // Positive stack
	                    n: valueAxisStart // Negative stack
	                };
	            }
	            var sign = value >= 0 ? 'p' : 'n';
	            var coord = coords[idx];
	            var lastCoord = lastStackCoords[stackId][idx][sign];
	            var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];
	            var x;
	            var y;
	            var width;
	            var height;

	            if (valueAxis.isHorizontal()) {
	                x = lastCoord;
	                y = coord[1] + columnOffset;
	                width = coord[0] - lastCoordOrigin;
	                height = columnWidth;

	                lastStackCoordsOrigin[stackId][idx][sign] += width;
	                if (Math.abs(width) < barMinHeight) {
	                    width = (width < 0 ? -1 : 1) * barMinHeight;
	                }
	                lastStackCoords[stackId][idx][sign] += width;
	            } else {
	                x = coord[0] + columnOffset;
	                y = lastCoord;
	                width = columnWidth;
	                height = coord[1] - lastCoordOrigin;

	                lastStackCoordsOrigin[stackId][idx][sign] += height;
	                if (Math.abs(height) < barMinHeight) {
	                    // Include zero to has a positive bar
	                    height = (height <= 0 ? -1 : 1) * barMinHeight;
	                }
	                lastStackCoords[stackId][idx][sign] += height;
	            }

	            data.setItemLayout(idx, {
	                x: x,
	                y: y,
	                width: width,
	                height: height
	            });
	        }, true);
	    }, this);
	}

	module.exports = barLayoutGrid;

/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var echarts = __webpack_require__(501);

	__webpack_require__(642);
	__webpack_require__(644);

	__webpack_require__(645)('pie', [{
	    type: 'pieToggleSelect',
	    event: 'pieselectchanged',
	    method: 'toggleSelected'
	}, {
	    type: 'pieSelect',
	    event: 'pieselected',
	    method: 'select'
	}, {
	    type: 'pieUnSelect',
	    event: 'pieunselected',
	    method: 'unSelect'
	}]);

	echarts.registerVisual(zrUtil.curry(__webpack_require__(646), 'pie'));

	echarts.registerLayout(zrUtil.curry(__webpack_require__(647), 'pie'));

	echarts.registerProcessor(zrUtil.curry(__webpack_require__(649), 'pie'));

/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);
	var completeDimensions = __webpack_require__(603);

	var dataSelectableMixin = __webpack_require__(643);

	var PieSeries = __webpack_require__(501).extendSeriesModel({

	    type: 'series.pie',

	    // Overwrite
	    init: function init(option) {
	        PieSeries.superApply(this, 'init', arguments);

	        // Enable legend selection for each data item
	        // Use a function instead of direct access because data reference may changed
	        this.legendDataProvider = function () {
	            return this.getRawData();
	        };

	        this.updateSelectedMap(option.data);

	        this._defaultLabelLine(option);
	    },

	    // Overwrite
	    mergeOption: function mergeOption(newOption) {
	        PieSeries.superCall(this, 'mergeOption', newOption);
	        this.updateSelectedMap(this.option.data);
	    },

	    getInitialData: function getInitialData(option, ecModel) {
	        var dimensions = completeDimensions(['value'], option.data);
	        var list = new List(dimensions, this);
	        list.initData(option.data);
	        return list;
	    },

	    // Overwrite
	    getDataParams: function getDataParams(dataIndex) {
	        var data = this.getData();
	        var params = PieSeries.superCall(this, 'getDataParams', dataIndex);
	        var sum = data.getSum('value');
	        // FIXME toFixed?
	        //
	        // Percent is 0 if sum is 0
	        params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);

	        params.$vars.push('percent');
	        return params;
	    },

	    _defaultLabelLine: function _defaultLabelLine(option) {
	        // Extend labelLine emphasis
	        modelUtil.defaultEmphasis(option.labelLine, ['show']);

	        var labelLineNormalOpt = option.labelLine.normal;
	        var labelLineEmphasisOpt = option.labelLine.emphasis;
	        // Not show label line if `label.normal.show = false`
	        labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.normal.show;
	        labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.label.emphasis.show;
	    },

	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,

	        hoverAnimation: true,
	        // 默认全局居中
	        center: ['50%', '50%'],
	        radius: [0, '75%'],
	        // 默认顺时针
	        clockwise: true,
	        startAngle: 90,
	        // 最小角度改为0
	        minAngle: 0,
	        // 选中是扇区偏移量
	        selectedOffset: 10,

	        // If use strategy to avoid label overlapping
	        avoidLabelOverlap: true,
	        // 选择模式，默认关闭，可选single，multiple
	        // selectedMode: false,
	        // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
	        // roseType: null,

	        // If still show when all data zero.
	        stillShowZeroSum: true,

	        label: {
	            normal: {
	                // If rotate around circle
	                rotate: false,
	                show: true,
	                // 'outer', 'inside', 'center'
	                position: 'outer'
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数
	            },
	            emphasis: {}
	        },
	        // Enabled when label.normal.position is 'outer'
	        labelLine: {
	            normal: {
	                show: true,
	                // 引导线两段中的第一段长度
	                length: 15,
	                // 引导线两段中的第二段长度
	                length2: 15,
	                smooth: false,
	                lineStyle: {
	                    // color: 各异,
	                    width: 1,
	                    type: 'solid'
	                }
	            }
	        },
	        itemStyle: {
	            normal: {
	                borderWidth: 1
	            },
	            emphasis: {}
	        },

	        // Animation type canbe expansion, scale
	        animationType: 'expansion',

	        animationEasing: 'cubicOut',

	        data: []
	    }
	});

	zrUtil.mixin(PieSeries, dataSelectableMixin);

	module.exports = PieSeries;

/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Data selectable mixin for chart series.
	 * To eanble data select, option of series must have `selectedMode`.
	 * And each data item will use `selected` to toggle itself selected status
	 *
	 * @module echarts/chart/helper/DataSelectable
	 */

	var zrUtil = __webpack_require__(504);

	module.exports = {

	    updateSelectedMap: function updateSelectedMap(targetList) {
	        this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {
	            targetMap[target.name] = target;
	            return targetMap;
	        }, {});
	    },
	    /**
	     * @param {string} name
	     */
	    // PENGING If selectedMode is null ?
	    select: function select(name) {
	        var targetMap = this._selectTargetMap;
	        var target = targetMap[name];
	        var selectedMode = this.get('selectedMode');
	        if (selectedMode === 'single') {
	            zrUtil.each(targetMap, function (target) {
	                target.selected = false;
	            });
	        }
	        target && (target.selected = true);
	    },

	    /**
	     * @param {string} name
	     */
	    unSelect: function unSelect(name) {
	        var target = this._selectTargetMap[name];
	        // var selectedMode = this.get('selectedMode');
	        // selectedMode !== 'single' && target && (target.selected = false);
	        target && (target.selected = false);
	    },

	    /**
	     * @param {string} name
	     */
	    toggleSelected: function toggleSelected(name) {
	        var target = this._selectTargetMap[name];
	        if (target != null) {
	            this[target.selected ? 'unSelect' : 'select'](name);
	            return target.selected;
	        }
	    },

	    /**
	     * @param {string} name
	     */
	    isSelected: function isSelected(name) {
	        var target = this._selectTargetMap[name];
	        return target && target.selected;
	    }
	};

/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);

	/**
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {boolean} hasAnimation
	 * @inner
	 */
	function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	    var data = seriesModel.getData();
	    var dataIndex = this.dataIndex;
	    var name = data.getName(dataIndex);
	    var selectedOffset = seriesModel.get('selectedOffset');

	    api.dispatchAction({
	        type: 'pieToggleSelect',
	        from: uid,
	        name: name,
	        seriesId: seriesModel.id
	    });

	    data.each(function (idx) {
	        toggleItemSelected(data.getItemGraphicEl(idx), data.getItemLayout(idx), seriesModel.isSelected(data.getName(idx)), selectedOffset, hasAnimation);
	    });
	}

	/**
	 * @param {module:zrender/graphic/Sector} el
	 * @param {Object} layout
	 * @param {boolean} isSelected
	 * @param {number} selectedOffset
	 * @param {boolean} hasAnimation
	 * @inner
	 */
	function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	    var midAngle = (layout.startAngle + layout.endAngle) / 2;

	    var dx = Math.cos(midAngle);
	    var dy = Math.sin(midAngle);

	    var offset = isSelected ? selectedOffset : 0;
	    var position = [dx * offset, dy * offset];

	    hasAnimation
	    // animateTo will stop revious animation like update transition
	    ? el.animate().when(200, {
	        position: position
	    }).start('bounceOut') : el.attr('position', position);
	}

	/**
	 * Piece of pie including Sector, Label, LabelLine
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 */
	function PiePiece(data, idx) {

	    graphic.Group.call(this);

	    var sector = new graphic.Sector({
	        z2: 2
	    });
	    var polyline = new graphic.Polyline();
	    var text = new graphic.Text();
	    this.add(sector);
	    this.add(polyline);
	    this.add(text);

	    this.updateData(data, idx, true);

	    // Hover to change label and labelLine
	    function onEmphasis() {
	        polyline.ignore = polyline.hoverIgnore;
	        text.ignore = text.hoverIgnore;
	    }
	    function onNormal() {
	        polyline.ignore = polyline.normalIgnore;
	        text.ignore = text.normalIgnore;
	    }
	    this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	}

	var piePieceProto = PiePiece.prototype;

	function getLabelStyle(data, idx, state, labelModel, labelPosition) {
	    var textStyleModel = labelModel.getModel('textStyle');
	    var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	    return {
	        fill: textStyleModel.getTextColor() || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	        opacity: data.getItemVisual(idx, 'opacity'),
	        textFont: textStyleModel.getFont(),
	        text: zrUtil.retrieve(data.hostModel.getFormattedLabel(idx, state), data.getName(idx))
	    };
	}

	piePieceProto.updateData = function (data, idx, firstCreate) {

	    var sector = this.childAt(0);

	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var sectorShape = zrUtil.extend({}, layout);
	    sectorShape.label = null;

	    if (firstCreate) {
	        sector.setShape(sectorShape);

	        var animationType = seriesModel.getShallow('animationType');
	        if (animationType === 'scale') {
	            sector.shape.r = layout.r0;
	            graphic.initProps(sector, {
	                shape: {
	                    r: layout.r
	                }
	            }, seriesModel, idx);
	        }
	        // Expansion
	        else {
	                sector.shape.endAngle = layout.startAngle;
	                graphic.updateProps(sector, {
	                    shape: {
	                        endAngle: layout.endAngle
	                    }
	                }, seriesModel, idx);
	            }
	    } else {
	        graphic.updateProps(sector, {
	            shape: sectorShape
	        }, seriesModel, idx);
	    }

	    // Update common style
	    var itemStyleModel = itemModel.getModel('itemStyle');
	    var visualColor = data.getItemVisual(idx, 'color');

	    sector.useStyle(zrUtil.defaults({
	        lineJoin: 'bevel',
	        fill: visualColor
	    }, itemStyleModel.getModel('normal').getItemStyle()));
	    sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

	    // Toggle selected
	    toggleItemSelected(this, data.getItemLayout(idx), itemModel.get('selected'), seriesModel.get('selectedOffset'), seriesModel.get('animation'));

	    function onEmphasis() {
	        // Sector may has animation of updating data. Force to move to the last frame
	        // Or it may stopped on the wrong shape
	        sector.stopAnimation(true);
	        sector.animateTo({
	            shape: {
	                r: layout.r + 10
	            }
	        }, 300, 'elasticOut');
	    }
	    function onNormal() {
	        sector.stopAnimation(true);
	        sector.animateTo({
	            shape: {
	                r: layout.r
	            }
	        }, 300, 'elasticOut');
	    }
	    sector.off('mouseover').off('mouseout').off('emphasis').off('normal');
	    if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {
	        sector.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	    }

	    this._updateLabel(data, idx);

	    graphic.setHoverStyle(this);
	};

	piePieceProto._updateLabel = function (data, idx) {

	    var labelLine = this.childAt(1);
	    var labelText = this.childAt(2);

	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var labelLayout = layout.label;
	    var visualColor = data.getItemVisual(idx, 'color');

	    graphic.updateProps(labelLine, {
	        shape: {
	            points: labelLayout.linePoints || [[labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]]
	        }
	    }, seriesModel, idx);

	    graphic.updateProps(labelText, {
	        style: {
	            x: labelLayout.x,
	            y: labelLayout.y
	        }
	    }, seriesModel, idx);
	    labelText.attr({
	        style: {
	            textVerticalAlign: labelLayout.verticalAlign,
	            textAlign: labelLayout.textAlign,
	            textFont: labelLayout.font
	        },
	        rotation: labelLayout.rotation,
	        origin: [labelLayout.x, labelLayout.y],
	        z2: 10
	    });

	    var labelModel = itemModel.getModel('label.normal');
	    var labelHoverModel = itemModel.getModel('label.emphasis');
	    var labelLineModel = itemModel.getModel('labelLine.normal');
	    var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	    var labelPosition = labelModel.get('position') || labelHoverModel.get('position');

	    labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));

	    labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	    labelText.hoverIgnore = !labelHoverModel.get('show');

	    labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	    labelLine.hoverIgnore = !labelLineHoverModel.get('show');

	    // Default use item visual color
	    labelLine.setStyle({
	        stroke: visualColor,
	        opacity: data.getItemVisual(idx, 'opacity')
	    });
	    labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());

	    labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);
	    labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();

	    var smooth = labelLineModel.get('smooth');
	    if (smooth && smooth === true) {
	        smooth = 0.4;
	    }
	    labelLine.setShape({
	        smooth: smooth
	    });
	};

	zrUtil.inherits(PiePiece, graphic.Group);

	// Pie view
	var Pie = __webpack_require__(542).extend({

	    type: 'pie',

	    init: function init() {
	        var sectorGroup = new graphic.Group();
	        this._sectorGroup = sectorGroup;
	    },

	    render: function render(seriesModel, ecModel, api, payload) {
	        if (payload && payload.from === this.uid) {
	            return;
	        }

	        var data = seriesModel.getData();
	        var oldData = this._data;
	        var group = this.group;

	        var hasAnimation = ecModel.get('animation');
	        var isFirstRender = !oldData;
	        var animationType = seriesModel.get('animationType');

	        var onSectorClick = zrUtil.curry(updateDataSelected, this.uid, seriesModel, hasAnimation, api);

	        var selectedMode = seriesModel.get('selectedMode');

	        data.diff(oldData).add(function (idx) {
	            var piePiece = new PiePiece(data, idx);
	            // Default expansion animation
	            if (isFirstRender && animationType !== 'scale') {
	                piePiece.eachChild(function (child) {
	                    child.stopAnimation(true);
	                });
	            }

	            selectedMode && piePiece.on('click', onSectorClick);

	            data.setItemGraphicEl(idx, piePiece);

	            group.add(piePiece);
	        }).update(function (newIdx, oldIdx) {
	            var piePiece = oldData.getItemGraphicEl(oldIdx);

	            piePiece.updateData(data, newIdx);

	            piePiece.off('click');
	            selectedMode && piePiece.on('click', onSectorClick);
	            group.add(piePiece);
	            data.setItemGraphicEl(newIdx, piePiece);
	        }).remove(function (idx) {
	            var piePiece = oldData.getItemGraphicEl(idx);
	            group.remove(piePiece);
	        }).execute();

	        if (hasAnimation && isFirstRender && data.count() > 0
	        // Default expansion animation
	        && animationType !== 'scale') {
	            var shape = data.getItemLayout(0);
	            var r = Math.max(api.getWidth(), api.getHeight()) / 2;

	            var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	            group.setClipPath(this._createClipPath(shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel));
	        }

	        this._data = data;
	    },

	    dispose: function dispose() {},

	    _createClipPath: function _createClipPath(cx, cy, r, startAngle, clockwise, cb, seriesModel) {
	        var clipPath = new graphic.Sector({
	            shape: {
	                cx: cx,
	                cy: cy,
	                r0: 0,
	                r: r,
	                startAngle: startAngle,
	                endAngle: startAngle,
	                clockwise: clockwise
	            }
	        });

	        graphic.initProps(clipPath, {
	            shape: {
	                endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
	            }
	        }, seriesModel, cb);

	        return clipPath;
	    },

	    /**
	     * @implement
	     */
	    containPoint: function containPoint(point, seriesModel) {
	        var data = seriesModel.getData();
	        var itemLayout = data.getItemLayout(0);
	        if (itemLayout) {
	            var dx = point[0] - itemLayout.cx;
	            var dy = point[1] - itemLayout.cy;
	            var radius = Math.sqrt(dx * dx + dy * dy);
	            return radius <= itemLayout.r && radius >= itemLayout.r0;
	        }
	    }

	});

	module.exports = Pie;

/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);
	module.exports = function (seriesType, actionInfos) {
	    zrUtil.each(actionInfos, function (actionInfo) {
	        actionInfo.update = 'updateView';
	        /**
	         * @payload
	         * @property {string} seriesName
	         * @property {string} name
	         */
	        echarts.registerAction(actionInfo, function (payload, ecModel) {
	            var selected = {};
	            ecModel.eachComponent({ mainType: 'series', subType: seriesType, query: payload }, function (seriesModel) {
	                if (seriesModel[actionInfo.method]) {
	                    seriesModel[actionInfo.method](payload.name);
	                }
	                var data = seriesModel.getData();
	                // Create selected map
	                data.each(function (idx) {
	                    var name = data.getName(idx);
	                    selected[name] = seriesModel.isSelected(name) || false;
	                });
	            });
	            return {
	                name: payload.name,
	                selected: selected
	            };
	        });
	    });
	};

/***/ },
/* 646 */
/***/ function(module, exports) {

	'use strict';

	// Pick color from palette for each data item.
	// Applicable for charts that require applying color palette
	// in data level (like pie, funnel, chord).


	module.exports = function (seriesType, ecModel) {
	    // Pie and funnel may use diferrent scope
	    var paletteScope = {};
	    ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	        var dataAll = seriesModel.getRawData();
	        var idxMap = {};
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            var data = seriesModel.getData();
	            data.each(function (idx) {
	                var rawIdx = data.getRawIndex(idx);
	                idxMap[rawIdx] = idx;
	            });
	            dataAll.each(function (rawIdx) {
	                var filteredIdx = idxMap[rawIdx];

	                // If series.itemStyle.normal.color is a function. itemVisual may be encoded
	                var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);

	                if (!singleDataColor) {
	                    // FIXME Performance
	                    var itemModel = dataAll.getItemModel(rawIdx);
	                    var color = itemModel.get('itemStyle.normal.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);
	                    // Legend may use the visual info in data before processed
	                    dataAll.setItemVisual(rawIdx, 'color', color);

	                    // Data is not filtered
	                    if (filteredIdx != null) {
	                        data.setItemVisual(filteredIdx, 'color', color);
	                    }
	                } else {
	                    // Set data all color for legend
	                    dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	                }
	            });
	        }
	    });
	};

/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO minAngle


	var numberUtil = __webpack_require__(507);
	var parsePercent = numberUtil.parsePercent;
	var labelLayout = __webpack_require__(648);
	var zrUtil = __webpack_require__(504);

	var PI2 = Math.PI * 2;
	var RADIAN = Math.PI / 180;

	module.exports = function (seriesType, ecModel, api, payload) {
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        var center = seriesModel.get('center');
	        var radius = seriesModel.get('radius');

	        if (!zrUtil.isArray(radius)) {
	            radius = [0, radius];
	        }
	        if (!zrUtil.isArray(center)) {
	            center = [center, center];
	        }

	        var width = api.getWidth();
	        var height = api.getHeight();
	        var size = Math.min(width, height);
	        var cx = parsePercent(center[0], width);
	        var cy = parsePercent(center[1], height);
	        var r0 = parsePercent(radius[0], size / 2);
	        var r = parsePercent(radius[1], size / 2);

	        var data = seriesModel.getData();

	        var startAngle = -seriesModel.get('startAngle') * RADIAN;

	        var minAngle = seriesModel.get('minAngle') * RADIAN;

	        var sum = data.getSum('value');
	        // Sum may be 0
	        var unitRadian = Math.PI / (sum || data.count()) * 2;

	        var clockwise = seriesModel.get('clockwise');

	        var roseType = seriesModel.get('roseType');
	        var stillShowZeroSum = seriesModel.get('stillShowZeroSum');

	        // [0...max]
	        var extent = data.getDataExtent('value');
	        extent[0] = 0;

	        // In the case some sector angle is smaller than minAngle
	        var restAngle = PI2;
	        var valueSumLargerThanMinAngle = 0;

	        var currentAngle = startAngle;

	        var dir = clockwise ? 1 : -1;
	        data.each('value', function (value, idx) {
	            var angle;
	            if (isNaN(value)) {
	                data.setItemLayout(idx, {
	                    angle: NaN,
	                    startAngle: NaN,
	                    endAngle: NaN,
	                    clockwise: clockwise,
	                    cx: cx,
	                    cy: cy,
	                    r0: r0,
	                    r: roseType ? NaN : r
	                });
	                return;
	            }

	            // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？
	            if (roseType !== 'area') {
	                angle = sum === 0 && stillShowZeroSum ? unitRadian : value * unitRadian;
	            } else {
	                angle = PI2 / (data.count() || 1);
	            }

	            if (angle < minAngle) {
	                angle = minAngle;
	                restAngle -= minAngle;
	            } else {
	                valueSumLargerThanMinAngle += value;
	            }

	            var endAngle = currentAngle + dir * angle;
	            data.setItemLayout(idx, {
	                angle: angle,
	                startAngle: currentAngle,
	                endAngle: endAngle,
	                clockwise: clockwise,
	                cx: cx,
	                cy: cy,
	                r0: r0,
	                r: roseType ? numberUtil.linearMap(value, extent, [r0, r]) : r
	            });

	            currentAngle = endAngle;
	        }, true);

	        // Some sector is constrained by minAngle
	        // Rest sectors needs recalculate angle
	        if (restAngle < PI2) {
	            // Average the angle if rest angle is not enough after all angles is
	            // Constrained by minAngle
	            if (restAngle <= 1e-3) {
	                var angle = PI2 / data.count();
	                data.each(function (idx) {
	                    var layout = data.getItemLayout(idx);
	                    layout.startAngle = startAngle + dir * idx * angle;
	                    layout.endAngle = startAngle + dir * (idx + 1) * angle;
	                });
	            } else {
	                unitRadian = restAngle / valueSumLargerThanMinAngle;
	                currentAngle = startAngle;
	                data.each('value', function (value, idx) {
	                    var layout = data.getItemLayout(idx);
	                    var angle = layout.angle === minAngle ? minAngle : value * unitRadian;
	                    layout.startAngle = currentAngle;
	                    layout.endAngle = currentAngle + dir * angle;
	                    currentAngle += dir * angle;
	                });
	            }
	        }

	        labelLayout(seriesModel, r, width, height);
	    });
	};

/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME emphasis label position is not same with normal label position


	var textContain = __webpack_require__(508);

	function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	    list.sort(function (a, b) {
	        return a.y - b.y;
	    });

	    // 压
	    function shiftDown(start, end, delta, dir) {
	        for (var j = start; j < end; j++) {
	            list[j].y += delta;
	            if (j > start && j + 1 < end && list[j + 1].y > list[j].y + list[j].height) {
	                shiftUp(j, delta / 2);
	                return;
	            }
	        }

	        shiftUp(end - 1, delta / 2);
	    }

	    // 弹
	    function shiftUp(end, delta) {
	        for (var j = end; j >= 0; j--) {
	            list[j].y -= delta;
	            if (j > 0 && list[j].y > list[j - 1].y + list[j - 1].height) {
	                break;
	            }
	        }
	    }

	    function changeX(list, isDownList, cx, cy, r, dir) {
	        var lastDeltaX = dir > 0 ? isDownList // 右侧
	        ? Number.MAX_VALUE // 下
	        : 0 // 上
	        : isDownList // 左侧
	        ? Number.MAX_VALUE // 下
	        : 0; // 上

	        for (var i = 0, l = list.length; i < l; i++) {
	            // Not change x for center label
	            if (list[i].position === 'center') {
	                continue;
	            }
	            var deltaY = Math.abs(list[i].y - cy);
	            var length = list[i].len;
	            var length2 = list[i].len2;
	            var deltaX = deltaY < r + length ? Math.sqrt((r + length + length2) * (r + length + length2) - deltaY * deltaY) : Math.abs(list[i].x - cx);
	            if (isDownList && deltaX >= lastDeltaX) {
	                // 右下，左下
	                deltaX = lastDeltaX - 10;
	            }
	            if (!isDownList && deltaX <= lastDeltaX) {
	                // 右上，左上
	                deltaX = lastDeltaX + 10;
	            }

	            list[i].x = cx + deltaX * dir;
	            lastDeltaX = deltaX;
	        }
	    }

	    var lastY = 0;
	    var delta;
	    var len = list.length;
	    var upList = [];
	    var downList = [];
	    for (var i = 0; i < len; i++) {
	        delta = list[i].y - lastY;
	        if (delta < 0) {
	            shiftDown(i, len, -delta, dir);
	        }
	        lastY = list[i].y + list[i].height;
	    }
	    if (viewHeight - lastY < 0) {
	        shiftUp(len - 1, lastY - viewHeight);
	    }
	    for (var i = 0; i < len; i++) {
	        if (list[i].y >= cy) {
	            downList.push(list[i]);
	        } else {
	            upList.push(list[i]);
	        }
	    }
	    changeX(upList, false, cx, cy, r, dir);
	    changeX(downList, true, cx, cy, r, dir);
	}

	function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	    var leftList = [];
	    var rightList = [];
	    for (var i = 0; i < labelLayoutList.length; i++) {
	        if (labelLayoutList[i].x < cx) {
	            leftList.push(labelLayoutList[i]);
	        } else {
	            rightList.push(labelLayoutList[i]);
	        }
	    }

	    adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	    adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);

	    for (var i = 0; i < labelLayoutList.length; i++) {
	        var linePoints = labelLayoutList[i].linePoints;
	        if (linePoints) {
	            var dist = linePoints[1][0] - linePoints[2][0];
	            if (labelLayoutList[i].x < cx) {
	                linePoints[2][0] = labelLayoutList[i].x + 3;
	            } else {
	                linePoints[2][0] = labelLayoutList[i].x - 3;
	            }
	            linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	            linePoints[1][0] = linePoints[2][0] + dist;
	        }
	    }
	}

	module.exports = function (seriesModel, r, viewWidth, viewHeight) {
	    var data = seriesModel.getData();
	    var labelLayoutList = [];
	    var cx;
	    var cy;
	    var hasLabelRotate = false;

	    data.each(function (idx) {
	        var layout = data.getItemLayout(idx);

	        var itemModel = data.getItemModel(idx);
	        var labelModel = itemModel.getModel('label.normal');
	        // Use position in normal or emphasis
	        var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');

	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineLen = labelLineModel.get('length');
	        var labelLineLen2 = labelLineModel.get('length2');

	        var midAngle = (layout.startAngle + layout.endAngle) / 2;
	        var dx = Math.cos(midAngle);
	        var dy = Math.sin(midAngle);

	        var textX;
	        var textY;
	        var linePoints;
	        var textAlign;

	        cx = layout.cx;
	        cy = layout.cy;

	        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	        if (labelPosition === 'center') {
	            textX = layout.cx;
	            textY = layout.cy;
	            textAlign = 'center';
	        } else {
	            var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
	            var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;

	            textX = x1 + dx * 3;
	            textY = y1 + dy * 3;

	            if (!isLabelInside) {
	                // For roseType
	                var x2 = x1 + dx * (labelLineLen + r - layout.r);
	                var y2 = y1 + dy * (labelLineLen + r - layout.r);
	                var x3 = x2 + (dx < 0 ? -1 : 1) * labelLineLen2;
	                var y3 = y2;

	                textX = x3 + (dx < 0 ? -5 : 5);
	                textY = y3;
	                linePoints = [[x1, y1], [x2, y2], [x3, y3]];
	            }

	            textAlign = isLabelInside ? 'center' : dx > 0 ? 'left' : 'right';
	        }
	        var font = labelModel.getModel('textStyle').getFont();

	        var labelRotate = labelModel.get('rotate') ? dx < 0 ? -midAngle + Math.PI : -midAngle : 0;
	        var text = seriesModel.getFormattedLabel(idx, 'normal') || data.getName(idx);
	        var textRect = textContain.getBoundingRect(text, font, textAlign, 'top');
	        hasLabelRotate = !!labelRotate;
	        layout.label = {
	            x: textX,
	            y: textY,
	            position: labelPosition,
	            height: textRect.height,
	            len: labelLineLen,
	            len2: labelLineLen2,
	            linePoints: linePoints,
	            textAlign: textAlign,
	            verticalAlign: 'middle',
	            font: font,
	            rotation: labelRotate
	        };

	        // Not layout the inside label
	        if (!isLabelInside) {
	            labelLayoutList.push(layout.label);
	        }
	    });
	    if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	        avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	    }
	};

/***/ },
/* 649 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (seriesType, ecModel) {
	    var legendModels = ecModel.findComponents({
	        mainType: 'legend'
	    });
	    if (!legendModels || !legendModels.length) {
	        return;
	    }
	    ecModel.eachSeriesByType(seriesType, function (series) {
	        var data = series.getData();
	        data.filterSelf(function (idx) {
	            var name = data.getName(idx);
	            // If in any legend component the status is not selected.
	            for (var i = 0; i < legendModels.length; i++) {
	                if (!legendModels[i].isSelected(name)) {
	                    return false;
	                }
	            }
	            return true;
	        }, this);
	    }, this);
	};

/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var echarts = __webpack_require__(501);

	__webpack_require__(651);
	__webpack_require__(652);

	echarts.registerVisual(zrUtil.curry(__webpack_require__(610), 'scatter', 'circle', null));
	echarts.registerLayout(zrUtil.curry(__webpack_require__(611), 'scatter'));

	// In case developer forget to include grid component
	__webpack_require__(613);

/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createListFromArray = __webpack_require__(602);
	var SeriesModel = __webpack_require__(528);

	module.exports = SeriesModel.extend({

	    type: 'series.scatter',

	    dependencies: ['grid', 'polar'],

	    getInitialData: function getInitialData(option, ecModel) {
	        var list = createListFromArray(option.data, this, ecModel);
	        return list;
	    },

	    brushSelector: 'point',

	    defaultOption: {
	        coordinateSystem: 'cartesian2d',
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,

	        hoverAnimation: true,
	        // Cartesian coordinate system
	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        // Polar coordinate system
	        // polarIndex: 0,

	        // Geo coordinate system
	        // geoIndex: 0,

	        // symbol: null,        // 图形类型
	        symbolSize: 10, // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	        // symbolRotate: null,  // 图形旋转控制

	        large: false,
	        // Available when large is true
	        largeThreshold: 2000,

	        // label: {
	        // normal: {
	        // show: false
	        // distance: 5,
	        // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	        // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	        //           'inside'|'left'|'right'|'top'|'bottom'
	        // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	        //     }
	        // },
	        itemStyle: {
	            normal: {
	                opacity: 0.8
	                // color: 各异
	            }
	        }
	    }

	});

/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SymbolDraw = __webpack_require__(605);
	var LargeSymbolDraw = __webpack_require__(653);

	__webpack_require__(501).extendChartView({

	    type: 'scatter',

	    init: function init() {
	        this._normalSymbolDraw = new SymbolDraw();
	        this._largeSymbolDraw = new LargeSymbolDraw();
	    },

	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var largeSymbolDraw = this._largeSymbolDraw;
	        var normalSymbolDraw = this._normalSymbolDraw;
	        var group = this.group;

	        var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold') ? largeSymbolDraw : normalSymbolDraw;

	        this._symbolDraw = symbolDraw;
	        symbolDraw.updateData(data);
	        group.add(symbolDraw.group);

	        group.remove(symbolDraw === largeSymbolDraw ? normalSymbolDraw.group : largeSymbolDraw.group);
	    },

	    updateLayout: function updateLayout(seriesModel) {
	        this._symbolDraw.updateLayout(seriesModel);
	    },

	    remove: function remove(ecModel, api) {
	        this._symbolDraw && this._symbolDraw.remove(api, true);
	    },

	    dispose: function dispose() {}
	});

/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO Batch by color


	var graphic = __webpack_require__(543);
	var symbolUtil = __webpack_require__(607);

	var LargeSymbolPath = graphic.extendShape({

	    shape: {
	        points: null,
	        sizes: null
	    },

	    symbolProxy: null,

	    buildPath: function buildPath(path, shape) {
	        var points = shape.points;
	        var sizes = shape.sizes;

	        var symbolProxy = this.symbolProxy;
	        var symbolProxyShape = symbolProxy.shape;
	        for (var i = 0; i < points.length; i++) {
	            var pt = points[i];
	            var size = sizes[i];
	            if (size[0] < 4) {
	                // Optimize for small symbol
	                path.rect(pt[0] - size[0] / 2, pt[1] - size[1] / 2, size[0], size[1]);
	            } else {
	                symbolProxyShape.x = pt[0] - size[0] / 2;
	                symbolProxyShape.y = pt[1] - size[1] / 2;
	                symbolProxyShape.width = size[0];
	                symbolProxyShape.height = size[1];

	                symbolProxy.buildPath(path, symbolProxyShape, true);
	            }
	        }
	    },

	    findDataIndex: function findDataIndex(x, y) {
	        var shape = this.shape;
	        var points = shape.points;
	        var sizes = shape.sizes;

	        // Not consider transform
	        // Treat each element as a rect
	        // top down traverse
	        for (var i = points.length - 1; i >= 0; i--) {
	            var pt = points[i];
	            var size = sizes[i];
	            var x0 = pt[0] - size[0] / 2;
	            var y0 = pt[1] - size[1] / 2;
	            if (x >= x0 && y >= y0 && x <= x0 + size[0] && y <= y0 + size[1]) {
	                // i is dataIndex
	                return i;
	            }
	        }

	        return -1;
	    }
	});

	function LargeSymbolDraw() {
	    this.group = new graphic.Group();

	    this._symbolEl = new LargeSymbolPath({
	        // rectHover: true,
	        // cursor: 'default'
	    });
	}

	var largeSymbolProto = LargeSymbolDraw.prototype;

	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */
	largeSymbolProto.updateData = function (data) {
	    this.group.removeAll();

	    var symbolEl = this._symbolEl;

	    var seriesModel = data.hostModel;

	    symbolEl.setShape({
	        points: data.mapArray(data.getItemLayout),
	        sizes: data.mapArray(function (idx) {
	            var size = data.getItemVisual(idx, 'symbolSize');
	            if (!(size instanceof Array)) {
	                size = [size, size];
	            }
	            return size;
	        })
	    });

	    // Create symbolProxy to build path for each data
	    symbolEl.symbolProxy = symbolUtil.createSymbol(data.getVisual('symbol'), 0, 0, 0, 0);
	    // Use symbolProxy setColor method
	    symbolEl.setColor = symbolEl.symbolProxy.setColor;

	    symbolEl.useStyle(seriesModel.getModel('itemStyle.normal').getItemStyle(['color']));

	    var visualColor = data.getVisual('color');
	    if (visualColor) {
	        symbolEl.setColor(visualColor);
	    }

	    // Enable tooltip
	    // PENDING May have performance issue when path is extremely large
	    symbolEl.seriesIndex = seriesModel.seriesIndex;
	    symbolEl.on('mousemove', function (e) {
	        symbolEl.dataIndex = null;
	        var dataIndex = symbolEl.findDataIndex(e.offsetX, e.offsetY);
	        if (dataIndex > 0) {
	            // Provide dataIndex for tooltip
	            symbolEl.dataIndex = dataIndex;
	        }
	    });

	    // Add back
	    this.group.add(symbolEl);
	};

	largeSymbolProto.updateLayout = function (seriesModel) {
	    var data = seriesModel.getData();
	    this._symbolEl.setShape({
	        points: data.mapArray(data.getItemLayout)
	    });
	};

	largeSymbolProto.remove = function () {
	    this.group.removeAll();
	};

	module.exports = LargeSymbolDraw;

/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var echarts = __webpack_require__(501);

	// Must use radar component
	__webpack_require__(655);

	__webpack_require__(660);
	__webpack_require__(661);

	echarts.registerVisual(zrUtil.curry(__webpack_require__(646), 'radar'));
	echarts.registerVisual(zrUtil.curry(__webpack_require__(610), 'radar', 'circle', null));
	echarts.registerLayout(__webpack_require__(662));

	echarts.registerProcessor(zrUtil.curry(__webpack_require__(649), 'radar'));

	echarts.registerPreprocessor(__webpack_require__(663));

/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(656);
	__webpack_require__(658);

	__webpack_require__(659);

/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO clockwise


	var zrUtil = __webpack_require__(504);
	var IndicatorAxis = __webpack_require__(657);
	var IntervalScale = __webpack_require__(618);
	var numberUtil = __webpack_require__(507);
	var axisHelper = __webpack_require__(615);

	function Radar(radarModel, ecModel, api) {

	    this._model = radarModel;
	    /**
	     * Radar dimensions
	     * @type {Array.<string>}
	     */
	    this.dimensions = [];

	    this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {
	        var dim = 'indicator_' + idx;
	        var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());
	        indicatorAxis.name = indicatorModel.get('name');
	        // Inject model and axis
	        indicatorAxis.model = indicatorModel;
	        indicatorModel.axis = indicatorAxis;
	        this.dimensions.push(dim);
	        return indicatorAxis;
	    }, this);

	    this.resize(radarModel, api);

	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.cx;
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.cy;
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.r;
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.startAngle;
	}

	Radar.prototype.getIndicatorAxes = function () {
	    return this._indicatorAxes;
	};

	Radar.prototype.dataToPoint = function (value, indicatorIndex) {
	    var indicatorAxis = this._indicatorAxes[indicatorIndex];

	    return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);
	};

	Radar.prototype.coordToPoint = function (coord, indicatorIndex) {
	    var indicatorAxis = this._indicatorAxes[indicatorIndex];
	    var angle = indicatorAxis.angle;
	    var x = this.cx + coord * Math.cos(angle);
	    var y = this.cy - coord * Math.sin(angle);
	    return [x, y];
	};

	Radar.prototype.pointToData = function (pt) {
	    var dx = pt[0] - this.cx;
	    var dy = pt[1] - this.cy;
	    var radius = Math.sqrt(dx * dx + dy * dy);
	    dx /= radius;
	    dy /= radius;

	    var radian = Math.atan2(-dy, dx);

	    // Find the closest angle
	    // FIXME index can calculated directly
	    var minRadianDiff = Infinity;
	    var closestAxis;
	    var closestAxisIdx = -1;
	    for (var i = 0; i < this._indicatorAxes.length; i++) {
	        var indicatorAxis = this._indicatorAxes[i];
	        var diff = Math.abs(radian - indicatorAxis.angle);
	        if (diff < minRadianDiff) {
	            closestAxis = indicatorAxis;
	            closestAxisIdx = i;
	            minRadianDiff = diff;
	        }
	    }

	    return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];
	};

	Radar.prototype.resize = function (radarModel, api) {
	    var center = radarModel.get('center');
	    var viewWidth = api.getWidth();
	    var viewHeight = api.getHeight();
	    var viewSize = Math.min(viewWidth, viewHeight) / 2;
	    this.cx = numberUtil.parsePercent(center[0], viewWidth);
	    this.cy = numberUtil.parsePercent(center[1], viewHeight);

	    this.startAngle = radarModel.get('startAngle') * Math.PI / 180;

	    this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);

	    zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {
	        indicatorAxis.setExtent(0, this.r);
	        var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length;
	        // Normalize to [-PI, PI]
	        angle = Math.atan2(Math.sin(angle), Math.cos(angle));
	        indicatorAxis.angle = angle;
	    }, this);
	};

	Radar.prototype.update = function (ecModel, api) {
	    var indicatorAxes = this._indicatorAxes;
	    var radarModel = this._model;
	    zrUtil.each(indicatorAxes, function (indicatorAxis) {
	        indicatorAxis.scale.setExtent(Infinity, -Infinity);
	    });
	    ecModel.eachSeriesByType('radar', function (radarSeries, idx) {
	        if (radarSeries.get('coordinateSystem') !== 'radar' || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {
	            return;
	        }
	        var data = radarSeries.getData();
	        zrUtil.each(indicatorAxes, function (indicatorAxis) {
	            indicatorAxis.scale.unionExtentFromData(data, indicatorAxis.dim);
	        });
	    }, this);

	    var splitNumber = radarModel.get('splitNumber');

	    function increaseInterval(interval) {
	        var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));
	        // Increase interval
	        var f = interval / exp10;
	        if (f === 2) {
	            f = 5;
	        } else {
	            // f is 2 or 5
	            f *= 2;
	        }
	        return f * exp10;
	    }
	    // Force all the axis fixing the maxSplitNumber.
	    zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {
	        var rawExtent = axisHelper.getScaleExtent(indicatorAxis, indicatorAxis.model);
	        axisHelper.niceScaleExtent(indicatorAxis, indicatorAxis.model);

	        var axisModel = indicatorAxis.model;
	        var scale = indicatorAxis.scale;
	        var fixedMin = axisModel.getMin();
	        var fixedMax = axisModel.getMax();
	        var interval = scale.getInterval();

	        if (fixedMin != null && fixedMax != null) {
	            // User set min, max, divide to get new interval
	            // FIXME precision
	            scale.setInterval((fixedMax - fixedMin) / splitNumber);
	        } else if (fixedMin != null) {
	            var max;
	            // User set min, expand extent on the other side
	            do {
	                max = fixedMin + interval * splitNumber;
	                scale.setExtent(+fixedMin, max);
	                // Interval must been set after extent
	                // FIXME
	                scale.setInterval(interval);

	                interval = increaseInterval(interval);
	            } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));
	        } else if (fixedMax != null) {
	            var min;
	            // User set min, expand extent on the other side
	            do {
	                min = fixedMax - interval * splitNumber;
	                scale.setExtent(min, +fixedMax);
	                scale.setInterval(interval);
	                interval = increaseInterval(interval);
	            } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));
	        } else {
	            var nicedSplitNumber = scale.getTicks().length - 1;
	            if (nicedSplitNumber > splitNumber) {
	                interval = increaseInterval(interval);
	            }
	            // PENDING
	            var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;
	            var halfSplitNumber = Math.round(splitNumber / 2);
	            scale.setExtent(numberUtil.round(center - halfSplitNumber * interval), numberUtil.round(center + (splitNumber - halfSplitNumber) * interval));
	            scale.setInterval(interval);
	        }
	    });
	};

	/**
	 * Radar dimensions is based on the data
	 * @type {Array}
	 */
	Radar.dimensions = [];

	Radar.create = function (ecModel, api) {
	    var radarList = [];
	    ecModel.eachComponent('radar', function (radarModel) {
	        var radar = new Radar(radarModel, ecModel, api);
	        radarList.push(radar);
	        radarModel.coordinateSystem = radar;
	    });
	    ecModel.eachSeriesByType('radar', function (radarSeries) {
	        if (radarSeries.get('coordinateSystem') === 'radar') {
	            // Inject coordinate system
	            radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];
	        }
	    });
	    return radarList;
	};

	__webpack_require__(526).register('radar', Radar);
	module.exports = Radar;

/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Axis = __webpack_require__(624);

	function IndicatorAxis(dim, scale, radiusExtent) {
	  Axis.call(this, dim, scale, radiusExtent);

	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */
	  this.type = 'value';

	  this.angle = 0;

	  /**
	   * Indicator name
	   * @type {string}
	   */
	  this.name = '';
	  /**
	   * @type {module:echarts/model/Model}
	   */
	  this.model;
	}

	zrUtil.inherits(IndicatorAxis, Axis);

	module.exports = IndicatorAxis;

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var axisDefault = __webpack_require__(629);
	var valueAxisDefault = axisDefault.valueAxis;
	var Model = __webpack_require__(512);
	var zrUtil = __webpack_require__(504);

	var axisModelCommonMixin = __webpack_require__(630);

	function defaultsShow(opt, show) {
	    return zrUtil.defaults({
	        show: show
	    }, opt);
	}

	var RadarModel = __webpack_require__(501).extendComponentModel({

	    type: 'radar',

	    optionUpdated: function optionUpdated() {
	        var boundaryGap = this.get('boundaryGap');
	        var splitNumber = this.get('splitNumber');
	        var scale = this.get('scale');
	        var axisLine = this.get('axisLine');
	        var axisTick = this.get('axisTick');
	        var axisLabel = this.get('axisLabel');
	        var nameTextStyle = this.get('name.textStyle');
	        var showName = this.get('name.show');
	        var nameFormatter = this.get('name.formatter');
	        var nameGap = this.get('nameGap');
	        var triggerEvent = this.get('triggerEvent');

	        var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {
	            // PENDING
	            if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {
	                indicatorOpt.min = 0;
	            } else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {
	                indicatorOpt.max = 0;
	            }
	            // Use same configuration
	            indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {
	                boundaryGap: boundaryGap,
	                splitNumber: splitNumber,
	                scale: scale,
	                axisLine: axisLine,
	                axisTick: axisTick,
	                axisLabel: axisLabel,
	                // Competitable with 2 and use text
	                name: indicatorOpt.text,
	                nameLocation: 'end',
	                nameGap: nameGap,
	                // min: 0,
	                nameTextStyle: nameTextStyle,
	                triggerEvent: triggerEvent
	            }, false);
	            if (!showName) {
	                indicatorOpt.name = '';
	            }
	            if (typeof nameFormatter === 'string') {
	                var indName = indicatorOpt.name;
	                indicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');
	            } else if (typeof nameFormatter === 'function') {
	                indicatorOpt.name = nameFormatter(indicatorOpt.name, indicatorOpt);
	            }
	            var model = zrUtil.extend(new Model(indicatorOpt, null, this.ecModel), axisModelCommonMixin);

	            // For triggerEvent.
	            model.mainType = 'radar';
	            model.componentIndex = this.componentIndex;

	            return model;
	        }, this);

	        this.getIndicatorModels = function () {
	            return indicatorModels;
	        };
	    },

	    defaultOption: {

	        zlevel: 0,

	        z: 0,

	        center: ['50%', '50%'],

	        radius: '75%',

	        startAngle: 90,

	        name: {
	            show: true
	            // formatter: null
	            // textStyle: {}
	        },

	        boundaryGap: [0, 0],

	        splitNumber: 5,

	        nameGap: 15,

	        scale: false,

	        // Polygon or circle
	        shape: 'polygon',

	        axisLine: zrUtil.merge({
	            lineStyle: {
	                color: '#bbb'
	            }
	        }, valueAxisDefault.axisLine),
	        axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),
	        axisTick: defaultsShow(valueAxisDefault.axisTick, false),
	        splitLine: defaultsShow(valueAxisDefault.splitLine, true),
	        splitArea: defaultsShow(valueAxisDefault.splitArea, true),

	        // {text, min, max}
	        indicator: []
	    }
	});

	module.exports = RadarModel;

/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AxisBuilder = __webpack_require__(633);
	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);

	var axisBuilderAttrs = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];

	module.exports = __webpack_require__(501).extendComponentView({

	    type: 'radar',

	    render: function render(radarModel, ecModel, api) {
	        var group = this.group;
	        group.removeAll();

	        this._buildAxes(radarModel);
	        this._buildSplitLineAndArea(radarModel);
	    },

	    _buildAxes: function _buildAxes(radarModel) {
	        var radar = radarModel.coordinateSystem;
	        var indicatorAxes = radar.getIndicatorAxes();
	        var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {
	            var axisBuilder = new AxisBuilder(indicatorAxis.model, {
	                position: [radar.cx, radar.cy],
	                rotation: indicatorAxis.angle,
	                labelDirection: -1,
	                tickDirection: -1,
	                nameDirection: 1
	            });
	            return axisBuilder;
	        });

	        zrUtil.each(axisBuilders, function (axisBuilder) {
	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	            this.group.add(axisBuilder.getGroup());
	        }, this);
	    },

	    _buildSplitLineAndArea: function _buildSplitLineAndArea(radarModel) {
	        var radar = radarModel.coordinateSystem;
	        var indicatorAxes = radar.getIndicatorAxes();
	        if (!indicatorAxes.length) {
	            return;
	        }
	        var shape = radarModel.get('shape');
	        var splitLineModel = radarModel.getModel('splitLine');
	        var splitAreaModel = radarModel.getModel('splitArea');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');

	        var showSplitLine = splitLineModel.get('show');
	        var showSplitArea = splitAreaModel.get('show');
	        var splitLineColors = lineStyleModel.get('color');
	        var splitAreaColors = areaStyleModel.get('color');

	        splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];
	        splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];

	        var splitLines = [];
	        var splitAreas = [];

	        function getColorIndex(areaOrLine, areaOrLineColorList, idx) {
	            var colorIndex = idx % areaOrLineColorList.length;
	            areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];
	            return colorIndex;
	        }

	        if (shape === 'circle') {
	            var ticksRadius = indicatorAxes[0].getTicksCoords();
	            var cx = radar.cx;
	            var cy = radar.cy;
	            for (var i = 0; i < ticksRadius.length; i++) {
	                if (showSplitLine) {
	                    var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                    splitLines[colorIndex].push(new graphic.Circle({
	                        shape: {
	                            cx: cx,
	                            cy: cy,
	                            r: ticksRadius[i]
	                        }
	                    }));
	                }
	                if (showSplitArea && i < ticksRadius.length - 1) {
	                    var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);
	                    splitAreas[colorIndex].push(new graphic.Ring({
	                        shape: {
	                            cx: cx,
	                            cy: cy,
	                            r0: ticksRadius[i],
	                            r: ticksRadius[i + 1]
	                        }
	                    }));
	                }
	            }
	        }
	        // Polyyon
	        else {
	                var realSplitNumber = -1;
	                var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {
	                    var ticksCoords = indicatorAxis.getTicksCoords();
	                    realSplitNumber = Math.max(ticksCoords.length - 1, realSplitNumber);
	                    return zrUtil.map(ticksCoords, function (tickCoord) {
	                        return radar.coordToPoint(tickCoord, idx);
	                    });
	                });

	                var prevPoints = [];
	                for (var i = 0; i <= realSplitNumber; i++) {
	                    var points = [];
	                    for (var j = 0; j < indicatorAxes.length; j++) {
	                        points.push(axesTicksPoints[j][i]);
	                    }
	                    // Close
	                    if (points[0]) {
	                        points.push(points[0].slice());
	                    } else {
	                        if (__DEV__) {
	                            console.error('Can\'t draw value axis ' + i);
	                        }
	                    }
	                    if (showSplitLine) {
	                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                        splitLines[colorIndex].push(new graphic.Polyline({
	                            shape: {
	                                points: points
	                            }
	                        }));
	                    }
	                    if (showSplitArea && prevPoints) {
	                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);
	                        splitAreas[colorIndex].push(new graphic.Polygon({
	                            shape: {
	                                points: points.concat(prevPoints)
	                            }
	                        }));
	                    }
	                    prevPoints = points.slice().reverse();
	                }
	            }

	        var lineStyle = lineStyleModel.getLineStyle();
	        var areaStyle = areaStyleModel.getAreaStyle();
	        // Add splitArea before splitLine
	        zrUtil.each(splitAreas, function (splitAreas, idx) {
	            this.group.add(graphic.mergePath(splitAreas, {
	                style: zrUtil.defaults({
	                    stroke: 'none',
	                    fill: splitAreaColors[idx % splitAreaColors.length]
	                }, areaStyle),
	                silent: true
	            }));
	        }, this);

	        zrUtil.each(splitLines, function (splitLines, idx) {
	            this.group.add(graphic.mergePath(splitLines, {
	                style: zrUtil.defaults({
	                    fill: 'none',
	                    stroke: splitLineColors[idx % splitLineColors.length]
	                }, lineStyle),
	                silent: true
	            }));
	        }, this);
	    }
	});

/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SeriesModel = __webpack_require__(528);
	var List = __webpack_require__(598);
	var completeDimensions = __webpack_require__(603);
	var zrUtil = __webpack_require__(504);
	var encodeHTML = __webpack_require__(506).encodeHTML;

	var RadarSeries = SeriesModel.extend({

	    type: 'series.radar',

	    dependencies: ['radar'],

	    // Overwrite
	    init: function init(option) {
	        RadarSeries.superApply(this, 'init', arguments);

	        // Enable legend selection for each data item
	        // Use a function instead of direct access because data reference may changed
	        this.legendDataProvider = function () {
	            return this.getRawData();
	        };
	    },

	    getInitialData: function getInitialData(option, ecModel) {
	        var data = option.data || [];
	        var dimensions = completeDimensions([], data, [], 'indicator_');
	        var list = new List(dimensions, this);
	        list.initData(data);
	        return list;
	    },

	    formatTooltip: function formatTooltip(dataIndex) {
	        var value = this.getRawValue(dataIndex);
	        var coordSys = this.coordinateSystem;
	        var indicatorAxes = coordSys.getIndicatorAxes();
	        var name = this.getData().getName(dataIndex);
	        return encodeHTML(name === '' ? this.name : name) + '<br/>' + zrUtil.map(indicatorAxes, function (axis, idx) {
	            return encodeHTML(axis.name + ' : ' + value[idx]);
	        }).join('<br />');
	    },

	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	        coordinateSystem: 'radar',
	        legendHoverLink: true,
	        radarIndex: 0,
	        lineStyle: {
	            normal: {
	                width: 2,
	                type: 'solid'
	            }
	        },
	        label: {
	            normal: {
	                position: 'top'
	            }
	        },
	        // areaStyle: {
	        // },
	        // itemStyle: {}
	        symbol: 'emptyCircle',
	        symbolSize: 4
	        // symbolRotate: null
	    }
	});

	module.exports = RadarSeries;

/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);
	var symbolUtil = __webpack_require__(607);

	function normalizeSymbolSize(symbolSize) {
	    if (!zrUtil.isArray(symbolSize)) {
	        symbolSize = [+symbolSize, +symbolSize];
	    }
	    return symbolSize;
	}
	module.exports = __webpack_require__(501).extendChartView({
	    type: 'radar',

	    render: function render(seriesModel, ecModel, api) {
	        var polar = seriesModel.coordinateSystem;
	        var group = this.group;

	        var data = seriesModel.getData();
	        var oldData = this._data;

	        function createSymbol(data, idx) {
	            var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	            var color = data.getItemVisual(idx, 'color');
	            if (symbolType === 'none') {
	                return;
	            }
	            var symbolPath = symbolUtil.createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	            symbolPath.attr({
	                style: {
	                    strokeNoScale: true
	                },
	                z2: 100,
	                scale: normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'))
	            });
	            return symbolPath;
	        }

	        function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {
	            // Simply rerender all
	            symbolGroup.removeAll();
	            for (var i = 0; i < newPoints.length - 1; i++) {
	                var symbolPath = createSymbol(data, idx);
	                if (symbolPath) {
	                    symbolPath.__dimIdx = i;
	                    if (oldPoints[i]) {
	                        symbolPath.attr('position', oldPoints[i]);
	                        graphic[isInit ? 'initProps' : 'updateProps'](symbolPath, {
	                            position: newPoints[i]
	                        }, seriesModel, idx);
	                    } else {
	                        symbolPath.attr('position', newPoints[i]);
	                    }
	                    symbolGroup.add(symbolPath);
	                }
	            }
	        }

	        function getInitialPoints(points) {
	            return zrUtil.map(points, function (pt) {
	                return [polar.cx, polar.cy];
	            });
	        }
	        data.diff(oldData).add(function (idx) {
	            var points = data.getItemLayout(idx);
	            if (!points) {
	                return;
	            }
	            var polygon = new graphic.Polygon();
	            var polyline = new graphic.Polyline();
	            var target = {
	                shape: {
	                    points: points
	                }
	            };
	            polygon.shape.points = getInitialPoints(points);
	            polyline.shape.points = getInitialPoints(points);
	            graphic.initProps(polygon, target, seriesModel, idx);
	            graphic.initProps(polyline, target, seriesModel, idx);

	            var itemGroup = new graphic.Group();
	            var symbolGroup = new graphic.Group();
	            itemGroup.add(polyline);
	            itemGroup.add(polygon);
	            itemGroup.add(symbolGroup);

	            updateSymbols(polyline.shape.points, points, symbolGroup, data, idx, true);

	            data.setItemGraphicEl(idx, itemGroup);
	        }).update(function (newIdx, oldIdx) {
	            var itemGroup = oldData.getItemGraphicEl(oldIdx);
	            var polyline = itemGroup.childAt(0);
	            var polygon = itemGroup.childAt(1);
	            var symbolGroup = itemGroup.childAt(2);
	            var target = {
	                shape: {
	                    points: data.getItemLayout(newIdx)
	                }
	            };
	            if (!target.shape.points) {
	                return;
	            }
	            updateSymbols(polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false);

	            graphic.updateProps(polyline, target, seriesModel);
	            graphic.updateProps(polygon, target, seriesModel);

	            data.setItemGraphicEl(newIdx, itemGroup);
	        }).remove(function (idx) {
	            group.remove(oldData.getItemGraphicEl(idx));
	        }).execute();

	        data.eachItemGraphicEl(function (itemGroup, idx) {
	            var itemModel = data.getItemModel(idx);
	            var polyline = itemGroup.childAt(0);
	            var polygon = itemGroup.childAt(1);
	            var symbolGroup = itemGroup.childAt(2);
	            var color = data.getItemVisual(idx, 'color');

	            group.add(itemGroup);

	            polyline.useStyle(zrUtil.defaults(itemModel.getModel('lineStyle.normal').getLineStyle(), {
	                fill: 'none',
	                stroke: color
	            }));
	            polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();

	            var areaStyleModel = itemModel.getModel('areaStyle.normal');
	            var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');
	            var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();
	            var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();

	            hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;
	            polygon.ignore = polygonIgnore;

	            polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	                fill: color,
	                opacity: 0.7
	            }));
	            polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();

	            var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	            var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	            var labelModel = itemModel.getModel('label.normal');
	            var labelHoverModel = itemModel.getModel('label.emphasis');
	            symbolGroup.eachChild(function (symbolPath) {
	                symbolPath.setStyle(itemStyle);
	                symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);

	                var defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);
	                graphic.setText(symbolPath.style, labelModel, color);
	                symbolPath.setStyle({
	                    text: labelModel.get('show') ? zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal', null, symbolPath.__dimIdx), defaultText) : ''
	                });

	                graphic.setText(symbolPath.hoverStyle, labelHoverModel, color);
	                symbolPath.hoverStyle.text = labelHoverModel.get('show') ? zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis', null, symbolPath.__dimIdx), defaultText) : '';
	            });

	            function onEmphasis() {
	                polygon.attr('ignore', hoverPolygonIgnore);
	            }

	            function onNormal() {
	                polygon.attr('ignore', polygonIgnore);
	            }

	            itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');
	            itemGroup.on('emphasis', onEmphasis).on('mouseover', onEmphasis).on('normal', onNormal).on('mouseout', onNormal);

	            graphic.setHoverStyle(itemGroup);
	        });

	        this._data = data;
	    },

	    remove: function remove() {
	        this.group.removeAll();
	        this._data = null;
	    },

	    dispose: function dispose() {}
	});

/***/ },
/* 662 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('radar', function (seriesModel) {
	        var data = seriesModel.getData();
	        var points = [];
	        var coordSys = seriesModel.coordinateSystem;
	        if (!coordSys) {
	            return;
	        }

	        function pointsConverter(val, idx) {
	            points[idx] = points[idx] || [];
	            points[idx][i] = coordSys.dataToPoint(val, i);
	        }
	        for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {
	            var dim = data.dimensions[i];
	            data.each(dim, pointsConverter);
	        }

	        data.each(function (idx) {
	            // Close polygon
	            points[idx][0] && points[idx].push(points[idx][0].slice());
	            data.setItemLayout(idx, points[idx]);
	        });
	    });
	};

/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Backward compat for radar chart in 2


	var zrUtil = __webpack_require__(504);

	module.exports = function (option) {
	    var polarOptArr = option.polar;
	    if (polarOptArr) {
	        if (!zrUtil.isArray(polarOptArr)) {
	            polarOptArr = [polarOptArr];
	        }
	        var polarNotRadar = [];
	        zrUtil.each(polarOptArr, function (polarOpt, idx) {
	            if (polarOpt.indicator) {
	                if (polarOpt.type && !polarOpt.shape) {
	                    polarOpt.shape = polarOpt.type;
	                }
	                option.radar = option.radar || [];
	                if (!zrUtil.isArray(option.radar)) {
	                    option.radar = [option.radar];
	                }
	                option.radar.push(polarOpt);
	            } else {
	                polarNotRadar.push(polarOpt);
	            }
	        });
	        option.polar = polarNotRadar;
	    }
	    zrUtil.each(option.series, function (seriesOpt) {
	        if (seriesOpt.type === 'radar' && seriesOpt.polarIndex) {
	            seriesOpt.radarIndex = seriesOpt.polarIndex;
	        }
	    });
	};

/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);
	var PRIORITY = echarts.PRIORITY;

	__webpack_require__(665);

	__webpack_require__(675);

	__webpack_require__(679);

	__webpack_require__(666);

	echarts.registerLayout(__webpack_require__(681));

	echarts.registerVisual(__webpack_require__(682));

	echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, __webpack_require__(683));

	echarts.registerPreprocessor(__webpack_require__(684));

	__webpack_require__(645)('map', [{
	    type: 'mapToggleSelect',
	    event: 'mapselectchanged',
	    method: 'toggleSelected'
	}, {
	    type: 'mapSelect',
	    event: 'mapselected',
	    method: 'select'
	}, {
	    type: 'mapUnSelect',
	    event: 'mapunselected',
	    method: 'unSelect'
	}]);

/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var SeriesModel = __webpack_require__(528);
	var zrUtil = __webpack_require__(504);
	var completeDimensions = __webpack_require__(603);

	var formatUtil = __webpack_require__(506);
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;

	var dataSelectableMixin = __webpack_require__(643);

	var geoCreator = __webpack_require__(666);

	var MapSeries = SeriesModel.extend({

	    type: 'series.map',

	    dependencies: ['geo'],

	    layoutMode: 'box',

	    /**
	     * Only first map series of same mapType will drawMap
	     * @type {boolean}
	     */
	    needsDrawMap: false,

	    /**
	     * Group of all map series with same mapType
	     * @type {boolean}
	     */
	    seriesGroup: [],

	    init: function init(option) {

	        option = this._fillOption(option, this.getMapType());
	        this.option = option;

	        MapSeries.superApply(this, 'init', arguments);

	        this.updateSelectedMap(option.data);
	    },

	    getInitialData: function getInitialData(option) {
	        var dimensions = completeDimensions(['value'], option.data || []);

	        var list = new List(dimensions, this);

	        list.initData(option.data);

	        return list;
	    },

	    mergeOption: function mergeOption(newOption) {
	        if (newOption.data) {
	            newOption = this._fillOption(newOption, this.getMapType());
	        }

	        MapSeries.superCall(this, 'mergeOption', newOption);

	        this.updateSelectedMap(this.option.data);
	    },

	    /**
	     * If no host geo model, return null, which means using a
	     * inner exclusive geo model.
	     */
	    getHostGeoModel: function getHostGeoModel() {
	        var geoIndex = this.option.geoIndex;
	        return geoIndex != null ? this.dependentModels.geo[geoIndex] : null;
	    },

	    getMapType: function getMapType() {
	        return (this.getHostGeoModel() || this).option.map;
	    },

	    _fillOption: function _fillOption(option, mapName) {
	        // Shallow clone
	        option = zrUtil.extend({}, option);

	        option.data = geoCreator.getFilledRegions(option.data, mapName);

	        return option;
	    },

	    getRawValue: function getRawValue(dataIndex) {
	        // Use value stored in data instead because it is calculated from multiple series
	        // FIXME Provide all value of multiple series ?
	        return this.getData().get('value', dataIndex);
	    },

	    /**
	     * Get model of region
	     * @param  {string} name
	     * @return {module:echarts/model/Model}
	     */
	    getRegionModel: function getRegionModel(regionName) {
	        var data = this.getData();
	        return data.getItemModel(data.indexOfName(regionName));
	    },

	    /**
	     * Map tooltip formatter
	     *
	     * @param {number} dataIndex
	     */
	    formatTooltip: function formatTooltip(dataIndex) {
	        // FIXME orignalData and data is a bit confusing
	        var data = this.getData();
	        var formattedValue = addCommas(this.getRawValue(dataIndex));
	        var name = data.getName(dataIndex);

	        var seriesGroup = this.seriesGroup;
	        var seriesNames = [];
	        for (var i = 0; i < seriesGroup.length; i++) {
	            var otherIndex = seriesGroup[i].originalData.indexOfName(name);
	            if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {
	                seriesNames.push(encodeHTML(seriesGroup[i].name));
	            }
	        }

	        return seriesNames.join(', ') + '<br />' + encodeHTML(name + ' : ' + formattedValue);
	    },

	    /**
	     * @implement
	     */
	    getTooltipPosition: function getTooltipPosition(dataIndex) {
	        if (dataIndex != null) {
	            var name = this.getData().getName(dataIndex);
	            var geo = this.coordinateSystem;
	            var region = geo.getRegion(name);

	            return region && geo.dataToPoint(region.center);
	        }
	    },

	    setZoom: function setZoom(zoom) {
	        this.option.zoom = zoom;
	    },

	    setCenter: function setCenter(center) {
	        this.option.center = center;
	    },

	    defaultOption: {
	        // 一级层叠
	        zlevel: 0,
	        // 二级层叠
	        z: 2,

	        coordinateSystem: 'geo',

	        // map should be explicitly specified since ec3.
	        map: '',

	        // If `geoIndex` is not specified, a exclusive geo will be
	        // created. Otherwise use the specified geo component, and
	        // `map` and `mapType` are ignored.
	        // geoIndex: 0,

	        // 'center' | 'left' | 'right' | 'x%' | {number}
	        left: 'center',
	        // 'center' | 'top' | 'bottom' | 'x%' | {number}
	        top: 'center',
	        // right
	        // bottom
	        // width:
	        // height

	        // Aspect is width / height. Inited to be geoJson bbox aspect
	        // This parameter is used for scale this aspect
	        aspectScale: 0.75,

	        ///// Layout with center and size
	        // If you wan't to put map in a fixed size box with right aspect ratio
	        // This two properties may more conveninet
	        // layoutCenter: [50%, 50%]
	        // layoutSize: 100


	        // 数值合并方式，默认加和，可选为：
	        // 'sum' | 'average' | 'max' | 'min'
	        // mapValueCalculation: 'sum',
	        // 地图数值计算结果小数精度
	        // mapValuePrecision: 0,


	        // 显示图例颜色标识（系列标识的小圆点），图例开启时有效
	        showLegendSymbol: true,
	        // 选择模式，默认关闭，可选single，multiple
	        // selectedMode: false,
	        dataRangeHoverLink: true,
	        // 是否开启缩放及漫游模式
	        // roam: false,

	        // Default on center of map
	        center: null,

	        zoom: 1,

	        scaleLimit: null,

	        label: {
	            normal: {
	                show: false,
	                textStyle: {
	                    color: '#000'
	                }
	            },
	            emphasis: {
	                show: true,
	                textStyle: {
	                    color: 'rgb(100,0,0)'
	                }
	            }
	        },
	        // scaleLimit: null,
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                borderWidth: 0.5,
	                borderColor: '#444',
	                areaColor: '#eee'
	            },
	            // 也是选中样式
	            emphasis: {
	                areaColor: 'rgba(255,215,0,0.8)'
	            }
	        }
	    }

	});

	zrUtil.mixin(MapSeries, dataSelectableMixin);

	module.exports = MapSeries;

/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Geo = __webpack_require__(667);

	var layout = __webpack_require__(521);
	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);

	var mapDataStores = {};

	/**
	 * Resize method bound to the geo
	 * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function resizeGeo(geoModel, api) {
	    var rect = this.getBoundingRect();

	    var boxLayoutOption;

	    var center = geoModel.get('layoutCenter');
	    var size = geoModel.get('layoutSize');

	    var viewWidth = api.getWidth();
	    var viewHeight = api.getHeight();

	    var aspectScale = geoModel.get('aspectScale') || 0.75;
	    var aspect = rect.width / rect.height * aspectScale;

	    var useCenterAndSize = false;
	    if (center && size) {
	        center = [numberUtil.parsePercent(center[0], viewWidth), numberUtil.parsePercent(center[1], viewHeight)];
	        size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));

	        if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {
	            useCenterAndSize = true;
	        } else {
	            if (__DEV__) {
	                console.warn('Given layoutCenter or layoutSize data are invalid. Use left/top/width/height instead.');
	            }
	        }
	    }

	    var viewRect;
	    if (useCenterAndSize) {
	        var viewRect = {};
	        if (aspect > 1) {
	            // Width is same with size
	            viewRect.width = size;
	            viewRect.height = size / aspect;
	        } else {
	            viewRect.height = size;
	            viewRect.width = size * aspect;
	        }
	        viewRect.y = center[1] - viewRect.height / 2;
	        viewRect.x = center[0] - viewRect.width / 2;
	    } else {
	        // Use left/top/width/height
	        boxLayoutOption = geoModel.getBoxLayoutParams();

	        // 0.75 rate
	        boxLayoutOption.aspect = aspect;

	        viewRect = layout.getLayoutRect(boxLayoutOption, {
	            width: viewWidth,
	            height: viewHeight
	        });
	    }

	    this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);

	    this.setCenter(geoModel.get('center'));
	    this.setZoom(geoModel.get('zoom'));
	}

	/**
	 * @param {module:echarts/coord/Geo} geo
	 * @param {module:echarts/model/Model} model
	 * @inner
	 */
	function setGeoCoords(geo, model) {
	    zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {
	        geo.addGeoCoord(name, geoCoord);
	    });
	}

	if (__DEV__) {
	    var mapNotExistsError = function mapNotExistsError(name) {
	        console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
	    };
	}

	var geoCreator = {

	    // For deciding which dimensions to use when creating list data
	    dimensions: Geo.prototype.dimensions,

	    create: function create(ecModel, api) {
	        var geoList = [];

	        // FIXME Create each time may be slow
	        ecModel.eachComponent('geo', function (geoModel, idx) {
	            var name = geoModel.get('map');
	            var mapData = mapDataStores[name];
	            if (__DEV__) {
	                if (!mapData) {
	                    mapNotExistsError(name);
	                }
	            }
	            var geo = new Geo(name + idx, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, geoModel.get('nameMap'));
	            geo.zoomLimit = geoModel.get('scaleLimit');
	            geoList.push(geo);

	            setGeoCoords(geo, geoModel);

	            geoModel.coordinateSystem = geo;
	            geo.model = geoModel;

	            // Inject resize method
	            geo.resize = resizeGeo;

	            geo.resize(geoModel, api);
	        });

	        ecModel.eachSeries(function (seriesModel) {
	            var coordSys = seriesModel.get('coordinateSystem');
	            if (coordSys === 'geo') {
	                var geoIndex = seriesModel.get('geoIndex') || 0;
	                seriesModel.coordinateSystem = geoList[geoIndex];
	            }
	        });

	        // If has map series
	        var mapModelGroupBySeries = {};

	        ecModel.eachSeriesByType('map', function (seriesModel) {
	            if (!seriesModel.getHostGeoModel()) {
	                var mapType = seriesModel.getMapType();
	                mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];
	                mapModelGroupBySeries[mapType].push(seriesModel);
	            }
	        });

	        zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {
	            var mapData = mapDataStores[mapType];
	            if (__DEV__) {
	                if (!mapData) {
	                    mapNotExistsError(mapSeries[0].get('map'));
	                }
	            }

	            var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {
	                return singleMapSeries.get('nameMap');
	            });
	            var geo = new Geo(mapType, mapType, mapData && mapData.geoJson, mapData && mapData.specialAreas, zrUtil.mergeAll(nameMapList));
	            geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {
	                return singleMapSeries.get('scaleLimit');
	            }));
	            geoList.push(geo);

	            // Inject resize method
	            geo.resize = resizeGeo;

	            geo.resize(mapSeries[0], api);

	            zrUtil.each(mapSeries, function (singleMapSeries) {
	                singleMapSeries.coordinateSystem = geo;

	                setGeoCoords(geo, singleMapSeries);
	            });
	        });

	        return geoList;
	    },

	    /**
	     * @param {string} mapName
	     * @param {Object|string} geoJson
	     * @param {Object} [specialAreas]
	     *
	     * @example
	     *     $.get('USA.json', function (geoJson) {
	     *         echarts.registerMap('USA', geoJson);
	     *         // Or
	     *         echarts.registerMap('USA', {
	     *             geoJson: geoJson,
	     *             specialAreas: {}
	     *         })
	     *     });
	     */
	    registerMap: function registerMap(mapName, geoJson, specialAreas) {
	        if (geoJson.geoJson && !geoJson.features) {
	            specialAreas = geoJson.specialAreas;
	            geoJson = geoJson.geoJson;
	        }
	        if (typeof geoJson === 'string') {
	            geoJson = typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(geoJson) : new Function('return (' + geoJson + ');')();
	        }
	        mapDataStores[mapName] = {
	            geoJson: geoJson,
	            specialAreas: specialAreas
	        };
	    },

	    /**
	     * @param {string} mapName
	     * @return {Object}
	     */
	    getMap: function getMap(mapName) {
	        return mapDataStores[mapName];
	    },

	    /**
	     * Fill given regions array
	     * @param  {Array.<Object>} originRegionArr
	     * @param  {string} mapName
	     * @return {Array}
	     */
	    getFilledRegions: function getFilledRegions(originRegionArr, mapName) {
	        // Not use the original
	        var regionsArr = (originRegionArr || []).slice();

	        var map = geoCreator.getMap(mapName);
	        var geoJson = map && map.geoJson;
	        if (!geoJson) {
	            if (__DEV__) {
	                mapNotExistsError(mapName);
	            }
	            return originRegionArr;
	        }

	        var dataNameMap = {};
	        var features = geoJson.features;
	        for (var i = 0; i < regionsArr.length; i++) {
	            dataNameMap[regionsArr[i].name] = regionsArr[i];
	        }

	        for (var i = 0; i < features.length; i++) {
	            var name = features[i].properties.name;
	            if (!dataNameMap[name]) {
	                regionsArr.push({
	                    name: name
	                });
	            }
	        }
	        return regionsArr;
	    }
	};

	// Inject methods into echarts
	var echarts = __webpack_require__(501);

	echarts.registerMap = geoCreator.registerMap;

	echarts.getMap = geoCreator.getMap;

	// TODO
	echarts.loadMap = function () {};

	echarts.registerCoordinateSystem('geo', geoCreator);

	module.exports = geoCreator;

/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseGeoJson = __webpack_require__(668);

	var zrUtil = __webpack_require__(504);

	var BoundingRect = __webpack_require__(509);

	var View = __webpack_require__(671);

	// Geo fix functions
	var geoFixFuncs = [__webpack_require__(672), __webpack_require__(673), __webpack_require__(674)];

	/**
	 * [Geo description]
	 * @param {string} name Geo name
	 * @param {string} map Map type
	 * @param {Object} geoJson
	 * @param {Object} [specialAreas]
	 *        Specify the positioned areas by left, top, width, height
	 * @param {Object.<string, string>} [nameMap]
	 *        Specify name alias
	 */
	function Geo(name, map, geoJson, specialAreas, nameMap) {

	    View.call(this, name);

	    /**
	     * Map type
	     * @type {string}
	     */
	    this.map = map;

	    this._nameCoordMap = {};

	    this.loadGeoJson(geoJson, specialAreas, nameMap);
	}

	Geo.prototype = {

	    constructor: Geo,

	    type: 'geo',

	    /**
	     * @param {Array.<string>}
	     * @readOnly
	     */
	    dimensions: ['lng', 'lat'],

	    /**
	     * If contain given lng,lat coord
	     * @param {Array.<number>}
	     * @readOnly
	     */
	    containCoord: function containCoord(coord) {
	        var regions = this.regions;
	        for (var i = 0; i < regions.length; i++) {
	            if (regions[i].contain(coord)) {
	                return true;
	            }
	        }
	        return false;
	    },
	    /**
	     * @param {Object} geoJson
	     * @param {Object} [specialAreas]
	     *        Specify the positioned areas by left, top, width, height
	     * @param {Object.<string, string>} [nameMap]
	     *        Specify name alias
	     */
	    loadGeoJson: function loadGeoJson(geoJson, specialAreas, nameMap) {
	        // https://jsperf.com/try-catch-performance-overhead
	        try {
	            this.regions = geoJson ? parseGeoJson(geoJson) : [];
	        } catch (e) {
	            throw 'Invalid geoJson format\n' + e;
	        }
	        specialAreas = specialAreas || {};
	        nameMap = nameMap || {};
	        var regions = this.regions;
	        var regionsMap = {};
	        for (var i = 0; i < regions.length; i++) {
	            var regionName = regions[i].name;
	            // Try use the alias in nameMap
	            regionName = nameMap[regionName] || regionName;
	            regions[i].name = regionName;

	            regionsMap[regionName] = regions[i];
	            // Add geoJson
	            this.addGeoCoord(regionName, regions[i].center);

	            // Some area like Alaska in USA map needs to be tansformed
	            // to look better
	            var specialArea = specialAreas[regionName];
	            if (specialArea) {
	                regions[i].transformTo(specialArea.left, specialArea.top, specialArea.width, specialArea.height);
	            }
	        }

	        this._regionsMap = regionsMap;

	        this._rect = null;

	        zrUtil.each(geoFixFuncs, function (fixFunc) {
	            fixFunc(this);
	        }, this);
	    },

	    // Overwrite
	    transformTo: function transformTo(x, y, width, height) {
	        var rect = this.getBoundingRect();

	        rect = rect.clone();
	        // Longitute is inverted
	        rect.y = -rect.y - rect.height;

	        var viewTransform = this._viewTransform;

	        viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));

	        viewTransform.decomposeTransform();

	        var scale = viewTransform.scale;
	        scale[1] = -scale[1];

	        viewTransform.updateTransform();

	        this._updateTransform();
	    },

	    /**
	     * @param {string} name
	     * @return {module:echarts/coord/geo/Region}
	     */
	    getRegion: function getRegion(name) {
	        return this._regionsMap[name];
	    },

	    getRegionByCoord: function getRegionByCoord(coord) {
	        var regions = this.regions;
	        for (var i = 0; i < regions.length; i++) {
	            if (regions[i].contain(coord)) {
	                return regions[i];
	            }
	        }
	    },

	    /**
	     * Add geoCoord for indexing by name
	     * @param {string} name
	     * @param {Array.<number>} geoCoord
	     */
	    addGeoCoord: function addGeoCoord(name, geoCoord) {
	        this._nameCoordMap[name] = geoCoord;
	    },

	    /**
	     * Get geoCoord by name
	     * @param {string} name
	     * @return {Array.<number>}
	     */
	    getGeoCoord: function getGeoCoord(name) {
	        return this._nameCoordMap[name];
	    },

	    // Overwrite
	    getBoundingRect: function getBoundingRect() {
	        if (this._rect) {
	            return this._rect;
	        }
	        var rect;

	        var regions = this.regions;
	        for (var i = 0; i < regions.length; i++) {
	            var regionRect = regions[i].getBoundingRect();
	            rect = rect || regionRect.clone();
	            rect.union(regionRect);
	        }
	        // FIXME Always return new ?
	        return this._rect = rect || new BoundingRect(0, 0, 0, 0);
	    },

	    /**
	     * Convert series data to a list of points
	     * @param {module:echarts/data/List} data
	     * @param {boolean} stack
	     * @return {Array}
	     *  Return list of points. For example:
	     *  `[[10, 10], [20, 20], [30, 30]]`
	     */
	    dataToPoints: function dataToPoints(data) {
	        var item = [];
	        return data.mapArray(['lng', 'lat'], function (lon, lat) {
	            item[0] = lon;
	            item[1] = lat;
	            return this.dataToPoint(item);
	        }, this);
	    },

	    // Overwrite
	    /**
	     * @param {string|Array.<number>} data
	     * @return {Array.<number>}
	     */
	    dataToPoint: function dataToPoint(data) {
	        if (typeof data === 'string') {
	            // Map area name to geoCoord
	            data = this.getGeoCoord(data);
	        }
	        if (data) {
	            return View.prototype.dataToPoint.call(this, data);
	        }
	    },

	    /**
	     * @override
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),

	    /**
	     * @override
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    convertFromPixel: zrUtil.curry(doConvert, 'pointToData')

	};

	zrUtil.mixin(Geo, View);

	function doConvert(methodName, ecModel, finder, value) {
	    var geoModel = finder.geoModel;
	    var seriesModel = finder.seriesModel;

	    var coordSys = geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem // For map.
	    || (seriesModel.getReferringComponents('geo')[0] || {}).coordinateSystem : null;

	    return coordSys === this ? coordSys[methodName](value) : null;
	}

	module.exports = Geo;

/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Parse and decode geo json
	 * @module echarts/coord/geo/parseGeoJson
	 */

	var zrUtil = __webpack_require__(504);

	var Region = __webpack_require__(669);

	function decode(json) {
	    if (!json.UTF8Encoding) {
	        return json;
	    }
	    var features = json.features;

	    for (var f = 0; f < features.length; f++) {
	        var feature = features[f];
	        var geometry = feature.geometry;
	        var coordinates = geometry.coordinates;
	        var encodeOffsets = geometry.encodeOffsets;

	        for (var c = 0; c < coordinates.length; c++) {
	            var coordinate = coordinates[c];

	            if (geometry.type === 'Polygon') {
	                coordinates[c] = decodePolygon(coordinate, encodeOffsets[c]);
	            } else if (geometry.type === 'MultiPolygon') {
	                for (var c2 = 0; c2 < coordinate.length; c2++) {
	                    var polygon = coordinate[c2];
	                    coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2]);
	                }
	            }
	        }
	    }
	    // Has been decoded
	    json.UTF8Encoding = false;
	    return json;
	}

	function decodePolygon(coordinate, encodeOffsets) {
	    var result = [];
	    var prevX = encodeOffsets[0];
	    var prevY = encodeOffsets[1];

	    for (var i = 0; i < coordinate.length; i += 2) {
	        var x = coordinate.charCodeAt(i) - 64;
	        var y = coordinate.charCodeAt(i + 1) - 64;
	        // ZigZag decoding
	        x = x >> 1 ^ -(x & 1);
	        y = y >> 1 ^ -(y & 1);
	        // Delta deocding
	        x += prevX;
	        y += prevY;

	        prevX = x;
	        prevY = y;
	        // Dequantize
	        result.push([x / 1024, y / 1024]);
	    }

	    return result;
	}

	/**
	 * @inner
	 */
	function flattern2D(array) {
	    var ret = [];
	    for (var i = 0; i < array.length; i++) {
	        for (var k = 0; k < array[i].length; k++) {
	            ret.push(array[i][k]);
	        }
	    }
	    return ret;
	}

	/**
	 * @alias module:echarts/coord/geo/parseGeoJson
	 * @param {Object} geoJson
	 * @return {module:zrender/container/Group}
	 */
	module.exports = function (geoJson) {

	    decode(geoJson);

	    return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
	        // Output of mapshaper may have geometry null
	        return featureObj.geometry && featureObj.properties;
	    }), function (featureObj) {
	        var properties = featureObj.properties;
	        var geometry = featureObj.geometry;

	        var coordinates = geometry.coordinates;

	        if (geometry.type === 'MultiPolygon') {
	            coordinates = flattern2D(coordinates);
	        }

	        return new Region(properties.name, coordinates, properties.cp);
	    });
	};

/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/coord/geo/Region
	 */

	var polygonContain = __webpack_require__(670);

	var BoundingRect = __webpack_require__(509);

	var bbox = __webpack_require__(551);
	var vec2 = __webpack_require__(510);

	/**
	 * @param {string} name
	 * @param {Array} contours
	 * @param {Array.<number>} cp
	 */
	function Region(name, contours, cp) {

	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.name = name;

	    /**
	     * @type {Array.<Array>}
	     * @readOnly
	     */
	    this.contours = contours;

	    if (!cp) {
	        var rect = this.getBoundingRect();
	        cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	    } else {
	        cp = [cp[0], cp[1]];
	    }
	    /**
	     * @type {Array.<number>}
	     */
	    this.center = cp;
	}

	Region.prototype = {

	    constructor: Region,

	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getBoundingRect: function getBoundingRect() {
	        var rect = this._rect;
	        if (rect) {
	            return rect;
	        }

	        var MAX_NUMBER = Number.MAX_VALUE;
	        var min = [MAX_NUMBER, MAX_NUMBER];
	        var max = [-MAX_NUMBER, -MAX_NUMBER];
	        var min2 = [];
	        var max2 = [];
	        var contours = this.contours;
	        for (var i = 0; i < contours.length; i++) {
	            bbox.fromPoints(contours[i], min2, max2);
	            vec2.min(min, min, min2);
	            vec2.max(max, max, max2);
	        }
	        // No data
	        if (i === 0) {
	            min[0] = min[1] = max[0] = max[1] = 0;
	        }

	        return this._rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	    },

	    /**
	     * @param {<Array.<number>} coord
	     * @return {boolean}
	     */
	    contain: function contain(coord) {
	        var rect = this.getBoundingRect();
	        var contours = this.contours;
	        if (rect.contain(coord[0], coord[1])) {
	            for (var i = 0, len = contours.length; i < len; i++) {
	                if (polygonContain.contain(contours[i], coord[0], coord[1])) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    },

	    transformTo: function transformTo(x, y, width, height) {
	        var rect = this.getBoundingRect();
	        var aspect = rect.width / rect.height;
	        if (!width) {
	            width = aspect * height;
	        } else if (!height) {
	            height = width / aspect;
	        }
	        var target = new BoundingRect(x, y, width, height);
	        var transform = rect.calculateTransform(target);
	        var contours = this.contours;
	        for (var i = 0; i < contours.length; i++) {
	            for (var p = 0; p < contours[i].length; p++) {
	                vec2.applyTransform(contours[i][p], contours[i][p], transform);
	            }
	        }
	        rect = this._rect;
	        rect.copy(target);
	        // Update center
	        this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	    }
	};

	module.exports = Region;

/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var windingLine = __webpack_require__(558);

	var EPSILON = 1e-8;

	function isAroundEqual(a, b) {
	    return Math.abs(a - b) < EPSILON;
	}

	function contain(points, x, y) {
	    var w = 0;
	    var p = points[0];

	    if (!p) {
	        return false;
	    }

	    for (var i = 1; i < points.length; i++) {
	        var p2 = points[i];
	        w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
	        p = p2;
	    }

	    // Close polygon
	    var p0 = points[0];
	    if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
	        w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
	    }

	    return w !== 0;
	}

	module.exports = {
	    contain: contain
	};

/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Simple view coordinate system
	 * Mapping given x, y to transformd view x, y
	 */

	var vector = __webpack_require__(510);
	var matrix = __webpack_require__(511);

	var Transformable = __webpack_require__(534);
	var zrUtil = __webpack_require__(504);

	var BoundingRect = __webpack_require__(509);

	var v2ApplyTransform = vector.applyTransform;

	// Dummy transform node
	function TransformDummy() {
	    Transformable.call(this);
	}
	zrUtil.mixin(TransformDummy, Transformable);

	function View(name) {
	    /**
	     * @type {string}
	     */
	    this.name = name;

	    /**
	     * @type {Object}
	     */
	    this.zoomLimit;

	    Transformable.call(this);

	    this._roamTransform = new TransformDummy();

	    this._viewTransform = new TransformDummy();

	    this._center;
	    this._zoom;
	}

	View.prototype = {

	    constructor: View,

	    type: 'view',

	    /**
	     * @param {Array.<string>}
	     * @readOnly
	     */
	    dimensions: ['x', 'y'],

	    /**
	     * Set bounding rect
	     * @param {number} x
	     * @param {number} y
	     * @param {number} width
	     * @param {number} height
	     */

	    // PENDING to getRect
	    setBoundingRect: function setBoundingRect(x, y, width, height) {
	        this._rect = new BoundingRect(x, y, width, height);
	        return this._rect;
	    },

	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    // PENDING to getRect
	    getBoundingRect: function getBoundingRect() {
	        return this._rect;
	    },

	    /**
	     * @param {number} x
	     * @param {number} y
	     * @param {number} width
	     * @param {number} height
	     */
	    setViewRect: function setViewRect(x, y, width, height) {
	        this.transformTo(x, y, width, height);
	        this._viewRect = new BoundingRect(x, y, width, height);
	    },

	    /**
	     * Transformed to particular position and size
	     * @param {number} x
	     * @param {number} y
	     * @param {number} width
	     * @param {number} height
	     */
	    transformTo: function transformTo(x, y, width, height) {
	        var rect = this.getBoundingRect();
	        var viewTransform = this._viewTransform;

	        viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));

	        viewTransform.decomposeTransform();

	        this._updateTransform();
	    },

	    /**
	     * Set center of view
	     * @param {Array.<number>} [centerCoord]
	     */
	    setCenter: function setCenter(centerCoord) {
	        if (!centerCoord) {
	            return;
	        }
	        this._center = centerCoord;

	        this._updateCenterAndZoom();
	    },

	    /**
	     * @param {number} zoom
	     */
	    setZoom: function setZoom(zoom) {
	        zoom = zoom || 1;

	        var zoomLimit = this.zoomLimit;
	        if (zoomLimit) {
	            if (zoomLimit.max != null) {
	                zoom = Math.min(zoomLimit.max, zoom);
	            }
	            if (zoomLimit.min != null) {
	                zoom = Math.max(zoomLimit.min, zoom);
	            }
	        }
	        this._zoom = zoom;

	        this._updateCenterAndZoom();
	    },

	    /**
	     * Get default center without roam
	     */
	    getDefaultCenter: function getDefaultCenter() {
	        // Rect before any transform
	        var rawRect = this.getBoundingRect();
	        var cx = rawRect.x + rawRect.width / 2;
	        var cy = rawRect.y + rawRect.height / 2;

	        return [cx, cy];
	    },

	    getCenter: function getCenter() {
	        return this._center || this.getDefaultCenter();
	    },

	    getZoom: function getZoom() {
	        return this._zoom || 1;
	    },

	    /**
	     * @return {Array.<number}
	     */
	    getRoamTransform: function getRoamTransform() {
	        return this._roamTransform;
	    },

	    _updateCenterAndZoom: function _updateCenterAndZoom() {
	        // Must update after view transform updated
	        var viewTransformMatrix = this._viewTransform.getLocalTransform();
	        var roamTransform = this._roamTransform;
	        var defaultCenter = this.getDefaultCenter();
	        var center = this.getCenter();
	        var zoom = this.getZoom();

	        center = vector.applyTransform([], center, viewTransformMatrix);
	        defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);

	        roamTransform.origin = center;
	        roamTransform.position = [defaultCenter[0] - center[0], defaultCenter[1] - center[1]];
	        roamTransform.scale = [zoom, zoom];

	        this._updateTransform();
	    },

	    /**
	     * Update transform from roam and mapLocation
	     * @private
	     */
	    _updateTransform: function _updateTransform() {
	        var roamTransform = this._roamTransform;
	        var viewTransform = this._viewTransform;

	        viewTransform.parent = roamTransform;
	        roamTransform.updateTransform();
	        viewTransform.updateTransform();

	        viewTransform.transform && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);

	        if (this.transform) {
	            this.invTransform = this.invTransform || [];
	            matrix.invert(this.invTransform, this.transform);
	        } else {
	            this.invTransform = null;
	        }
	        this.decomposeTransform();
	    },

	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getViewRect: function getViewRect() {
	        return this._viewRect;
	    },

	    /**
	     * Get view rect after roam transform
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getViewRectAfterRoam: function getViewRectAfterRoam() {
	        var rect = this.getBoundingRect().clone();
	        rect.applyTransform(this.transform);
	        return rect;
	    },

	    /**
	     * Convert a single (lon, lat) data item to (x, y) point.
	     * @param {Array.<number>} data
	     * @return {Array.<number>}
	     */
	    dataToPoint: function dataToPoint(data) {
	        var transform = this.transform;
	        return transform ? v2ApplyTransform([], data, transform) : [data[0], data[1]];
	    },

	    /**
	     * Convert a (x, y) point to (lon, lat) data
	     * @param {Array.<number>} point
	     * @return {Array.<number>}
	     */
	    pointToData: function pointToData(point) {
	        var invTransform = this.invTransform;
	        return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];
	    },

	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),

	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),

	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    containPoint: function containPoint(point) {
	        return this.getViewRectAfterRoam().contain(point[0], point[1]);
	    }

	    /**
	     * @return {number}
	     */
	    // getScalarScale: function () {
	    //     // Use determinant square root of transform to mutiply scalar
	    //     var m = this.transform;
	    //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));
	    //     return det;
	    // }
	};

	zrUtil.mixin(View, Transformable);

	function doConvert(methodName, ecModel, finder, value) {
	    var seriesModel = finder.seriesModel;
	    var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.
	    return coordSys === this ? coordSys[methodName](value) : null;
	}

	module.exports = View;

/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Fix for 南海诸岛


	var Region = __webpack_require__(669);

	var geoCoord = [126, 25];

	var points = [[[0, 3.5], [7, 11.2], [15, 11.9], [30, 7], [42, 0.7], [52, 0.7], [56, 7.7], [59, 0.7], [64, 0.7], [64, 0], [5, 0], [0, 3.5]], [[13, 16.1], [19, 14.7], [16, 21.7], [11, 23.1], [13, 16.1]], [[12, 32.2], [14, 38.5], [15, 38.5], [13, 32.2], [12, 32.2]], [[16, 47.6], [12, 53.2], [13, 53.2], [18, 47.6], [16, 47.6]], [[6, 64.4], [8, 70], [9, 70], [8, 64.4], [6, 64.4]], [[23, 82.6], [29, 79.8], [30, 79.8], [25, 82.6], [23, 82.6]], [[37, 70.7], [43, 62.3], [44, 62.3], [39, 70.7], [37, 70.7]], [[48, 51.1], [51, 45.5], [53, 45.5], [50, 51.1], [48, 51.1]], [[51, 35], [51, 28.7], [53, 28.7], [53, 35], [51, 35]], [[52, 22.4], [55, 17.5], [56, 17.5], [53, 22.4], [52, 22.4]], [[58, 12.6], [62, 7], [63, 7], [60, 12.6], [58, 12.6]], [[0, 3.5], [0, 93.1], [64, 93.1], [64, 0], [63, 0], [63, 92.4], [1, 92.4], [1, 3.5], [0, 3.5]]];
	for (var i = 0; i < points.length; i++) {
	    for (var k = 0; k < points[i].length; k++) {
	        points[i][k][0] /= 10.5;
	        points[i][k][1] /= -10.5 / 0.75;

	        points[i][k][0] += geoCoord[0];
	        points[i][k][1] += geoCoord[1];
	    }
	}
	module.exports = function (geo) {
	    if (geo.map === 'china') {
	        geo.regions.push(new Region('南海诸岛', points, geoCoord));
	    }
	};

/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var coordsOffsetMap = {
	    '南海诸岛': [32, 80],
	    // 全国
	    '广东': [0, -10],
	    '香港': [10, 5],
	    '澳门': [-10, 10],
	    //'北京': [-10, 0],
	    '天津': [5, 5]
	};

	module.exports = function (geo) {
	    zrUtil.each(geo.regions, function (region) {
	        var coordFix = coordsOffsetMap[region.name];
	        if (coordFix) {
	            var cp = region.center;
	            cp[0] += coordFix[0] / 10.5;
	            cp[1] += -coordFix[1] / (10.5 / 0.75);
	        }
	    });
	};

/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var geoCoordMap = {
	    'Russia': [100, 60],
	    'United States of America': [-99, 38]
	};

	module.exports = function (geo) {
	    zrUtil.each(geo.regions, function (region) {
	        var geoCoord = geoCoordMap[region.name];
	        if (geoCoord) {
	            var cp = region.center;
	            cp[0] = geoCoord[0];
	            cp[1] = geoCoord[1];
	        }
	    });
	};

/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// var zrUtil = require('zrender/lib/core/util');
	var graphic = __webpack_require__(543);

	var MapDraw = __webpack_require__(676);

	__webpack_require__(501).extendChartView({

	    type: 'map',

	    render: function render(mapModel, ecModel, api, payload) {
	        // Not render if it is an toggleSelect action from self
	        if (payload && payload.type === 'mapToggleSelect' && payload.from === this.uid) {
	            return;
	        }

	        var group = this.group;
	        group.removeAll();

	        if (mapModel.getHostGeoModel()) {
	            return;
	        }

	        // Not update map if it is an roam action from self
	        if (!(payload && payload.type === 'geoRoam' && payload.componentType === 'series' && payload.seriesId === mapModel.id)) {
	            if (mapModel.needsDrawMap) {
	                var mapDraw = this._mapDraw || new MapDraw(api, true);
	                group.add(mapDraw.group);

	                mapDraw.draw(mapModel, ecModel, api, this, payload);

	                this._mapDraw = mapDraw;
	            } else {
	                // Remove drawed map
	                this._mapDraw && this._mapDraw.remove();
	                this._mapDraw = null;
	            }
	        } else {
	            var mapDraw = this._mapDraw;
	            mapDraw && group.add(mapDraw.group);
	        }

	        mapModel.get('showLegendSymbol') && ecModel.getComponent('legend') && this._renderSymbols(mapModel, ecModel, api);
	    },

	    remove: function remove() {
	        this._mapDraw && this._mapDraw.remove();
	        this._mapDraw = null;
	        this.group.removeAll();
	    },

	    dispose: function dispose() {
	        this._mapDraw && this._mapDraw.remove();
	        this._mapDraw = null;
	    },

	    _renderSymbols: function _renderSymbols(mapModel, ecModel, api) {
	        var originalData = mapModel.originalData;
	        var group = this.group;

	        originalData.each('value', function (value, idx) {
	            if (isNaN(value)) {
	                return;
	            }

	            var layout = originalData.getItemLayout(idx);

	            if (!layout || !layout.point) {
	                // Not exists in map
	                return;
	            }

	            var point = layout.point;
	            var offset = layout.offset;

	            var circle = new graphic.Circle({
	                style: {
	                    // Because the special of map draw.
	                    // Which needs statistic of multiple series and draw on one map.
	                    // And each series also need a symbol with legend color
	                    //
	                    // Layout and visual are put one the different data
	                    fill: mapModel.getData().getVisual('color')
	                },
	                shape: {
	                    cx: point[0] + offset * 9,
	                    cy: point[1],
	                    r: 3
	                },
	                silent: true,
	                z2: 10
	            });

	            // First data on the same region
	            if (!offset) {
	                var fullData = mapModel.mainSeries.getData();
	                var name = originalData.getName(idx);
	                var labelText = name;
	                var fullIndex = fullData.indexOfName(name);

	                var itemModel = originalData.getItemModel(idx);
	                var labelModel = itemModel.getModel('label.normal');
	                var hoverLabelModel = itemModel.getModel('label.emphasis');

	                var textStyleModel = labelModel.getModel('textStyle');
	                var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');

	                var polygonGroups = fullData.getItemGraphicEl(fullIndex);
	                circle.setStyle({
	                    textPosition: 'bottom'
	                });

	                var onEmphasis = function onEmphasis() {
	                    circle.setStyle({
	                        text: hoverLabelModel.get('show') ? labelText : '',
	                        textFill: hoverTextStyleModel.getTextColor(),
	                        textFont: hoverTextStyleModel.getFont()
	                    });
	                };

	                var onNormal = function onNormal() {
	                    circle.setStyle({
	                        text: labelModel.get('show') ? labelText : '',
	                        textFill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont()
	                    });
	                };

	                polygonGroups.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);

	                onNormal();
	            }

	            group.add(circle);
	        });
	    }
	});

/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/component/helper/MapDraw
	 */

	var RoamController = __webpack_require__(677);
	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);

	function getFixedItemStyle(model, scale) {
	    var itemStyle = model.getItemStyle();
	    var areaColor = model.get('areaColor');

	    // If user want the color not to be changed when hover,
	    // they should both set areaColor and color to be null.
	    if (areaColor != null) {
	        itemStyle.fill = areaColor;
	    }

	    return itemStyle;
	}

	function updateMapSelectHandler(mapDraw, mapOrGeoModel, group, api, fromView) {
	    group.off('click');
	    group.off('mousedown');

	    if (mapOrGeoModel.get('selectedMode')) {

	        group.on('mousedown', function () {
	            mapDraw._mouseDownFlag = true;
	        });

	        group.on('click', function (e) {
	            if (!mapDraw._mouseDownFlag) {
	                return;
	            }
	            mapDraw._mouseDownFlag = false;

	            var el = e.target;
	            while (!el.__region) {
	                el = el.parent;
	            }
	            if (!el) {
	                return;
	            }

	            var region = el.__region;
	            var action = {
	                type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',
	                name: region.name,
	                from: fromView.uid
	            };
	            action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;

	            api.dispatchAction(action);

	            updateMapSelected(mapOrGeoModel, group);
	        });
	    }
	}

	function updateMapSelected(mapOrGeoModel, group) {
	    // FIXME
	    group.eachChild(function (otherRegionEl) {
	        if (otherRegionEl.__region) {
	            otherRegionEl.trigger(mapOrGeoModel.isSelected(otherRegionEl.__region.name) ? 'emphasis' : 'normal');
	        }
	    });
	}

	/**
	 * @alias module:echarts/component/helper/MapDraw
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {boolean} updateGroup
	 */
	function MapDraw(api, updateGroup) {

	    var group = new graphic.Group();

	    /**
	     * @type {module:echarts/component/helper/RoamController}
	     * @private
	     */
	    this._controller = new RoamController(api.getZr(), updateGroup ? group : null, null);

	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = group;

	    /**
	     * @type {boolean}
	     * @private
	     */
	    this._updateGroup = updateGroup;

	    /**
	     * This flag is used to make sure that only one among
	     * `pan`, `zoom`, `click` can occurs, otherwise 'selected'
	     * action may be triggered when `pan`, which is unexpected.
	     * @type {booelan}
	     */
	    this._mouseDownFlag;
	}

	MapDraw.prototype = {

	    constructor: MapDraw,

	    draw: function draw(mapOrGeoModel, ecModel, api, fromView, payload) {

	        var isGeo = mapOrGeoModel.mainType === 'geo';

	        // map series has data, geo model that controlled by map series
	        // has no data, otherwise data exists.
	        var data = mapOrGeoModel.getData && mapOrGeoModel.getData();
	        isGeo && ecModel.eachComponent({ mainType: 'series', subType: 'map' }, function (mapSeries) {
	            if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {
	                data = mapSeries.getData();
	            }
	        });

	        var geo = mapOrGeoModel.coordinateSystem;

	        var group = this.group;

	        var scale = geo.scale;
	        var groupNewProp = {
	            position: geo.position,
	            scale: scale
	        };

	        // No animation when first draw or in action
	        if (!group.childAt(0) || payload) {
	            group.attr(groupNewProp);
	        } else {
	            graphic.updateProps(group, groupNewProp, mapOrGeoModel);
	        }

	        group.removeAll();

	        var itemStyleAccessPath = ['itemStyle', 'normal'];
	        var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];
	        var labelAccessPath = ['label', 'normal'];
	        var hoverLabelAccessPath = ['label', 'emphasis'];

	        zrUtil.each(geo.regions, function (region) {

	            var regionGroup = new graphic.Group();
	            var compoundPath = new graphic.CompoundPath({
	                shape: {
	                    paths: []
	                }
	            });
	            regionGroup.add(compoundPath);

	            var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;

	            var itemStyleModel = regionModel.getModel(itemStyleAccessPath);
	            var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);
	            var itemStyle = getFixedItemStyle(itemStyleModel, scale);
	            var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);

	            var labelModel = regionModel.getModel(labelAccessPath);
	            var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);

	            var dataIdx;
	            // Use the itemStyle in data if has data
	            if (data) {
	                dataIdx = data.indexOfName(region.name);
	                // Only visual color of each item will be used. It can be encoded by dataRange
	                // But visual color of series is used in symbol drawing
	                //
	                // Visual color for each series is for the symbol draw
	                var visualColor = data.getItemVisual(dataIdx, 'color', true);
	                if (visualColor) {
	                    itemStyle.fill = visualColor;
	                }
	            }

	            var textStyleModel = labelModel.getModel('textStyle');
	            var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');

	            zrUtil.each(region.contours, function (contour) {

	                var polygon = new graphic.Polygon({
	                    shape: {
	                        points: contour
	                    }
	                });

	                compoundPath.shape.paths.push(polygon);
	            });

	            compoundPath.setStyle(itemStyle);
	            compoundPath.style.strokeNoScale = true;
	            compoundPath.culling = true;
	            // Label
	            var showLabel = labelModel.get('show');
	            var hoverShowLabel = hoverLabelModel.get('show');

	            var isDataNaN = data && isNaN(data.get('value', dataIdx));
	            var itemLayout = data && data.getItemLayout(dataIdx);
	            // In the following cases label will be drawn
	            // 1. In map series and data value is NaN
	            // 2. In geo component
	            // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout
	            if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {
	                var query = data ? dataIdx : region.name;
	                var formattedStr = mapOrGeoModel.getFormattedLabel(query, 'normal');
	                var hoverFormattedStr = mapOrGeoModel.getFormattedLabel(query, 'emphasis');
	                var text = new graphic.Text({
	                    style: {
	                        text: showLabel ? formattedStr || region.name : '',
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont(),
	                        textAlign: 'center',
	                        textVerticalAlign: 'middle'
	                    },
	                    hoverStyle: {
	                        text: hoverShowLabel ? hoverFormattedStr || region.name : '',
	                        fill: hoverTextStyleModel.getTextColor(),
	                        textFont: hoverTextStyleModel.getFont()
	                    },
	                    position: region.center.slice(),
	                    scale: [1 / scale[0], 1 / scale[1]],
	                    z2: 10,
	                    silent: true
	                });

	                regionGroup.add(text);
	            }

	            // setItemGraphicEl, setHoverStyle after all polygons and labels
	            // are added to the rigionGroup
	            if (data) {
	                data.setItemGraphicEl(dataIdx, regionGroup);
	            } else {
	                var regionModel = mapOrGeoModel.getRegionModel(region.name);
	                // Package custom mouse event for geo component
	                compoundPath.eventData = {
	                    componentType: 'geo',
	                    geoIndex: mapOrGeoModel.componentIndex,
	                    name: region.name,
	                    region: regionModel && regionModel.option || {}
	                };
	            }

	            regionGroup.__region = region;

	            graphic.setHoverStyle(regionGroup, hoverItemStyle, { hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode') });

	            group.add(regionGroup);
	        });

	        this._updateController(mapOrGeoModel, ecModel, api);

	        updateMapSelectHandler(this, mapOrGeoModel, group, api, fromView);

	        updateMapSelected(mapOrGeoModel, group);
	    },

	    remove: function remove() {
	        this.group.removeAll();
	        this._controller.dispose();
	    },

	    _updateController: function _updateController(mapOrGeoModel, ecModel, api) {
	        var geo = mapOrGeoModel.coordinateSystem;
	        var controller = this._controller;
	        controller.zoomLimit = mapOrGeoModel.get('scaleLimit');
	        // Update zoom from model
	        controller.zoom = geo.getZoom();
	        // roamType is will be set default true if it is null
	        controller.enable(mapOrGeoModel.get('roam') || false);
	        var mainType = mapOrGeoModel.mainType;

	        function makeActionBase() {
	            var action = {
	                type: 'geoRoam',
	                componentType: mainType
	            };
	            action[mainType + 'Id'] = mapOrGeoModel.id;
	            return action;
	        }

	        controller.off('pan').on('pan', function (dx, dy) {
	            this._mouseDownFlag = false;

	            api.dispatchAction(zrUtil.extend(makeActionBase(), {
	                dx: dx,
	                dy: dy
	            }));
	        }, this);

	        controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {
	            this._mouseDownFlag = false;

	            api.dispatchAction(zrUtil.extend(makeActionBase(), {
	                zoom: zoom,
	                originX: mouseX,
	                originY: mouseY
	            }));

	            if (this._updateGroup) {
	                var group = this.group;
	                var scale = group.scale;
	                group.traverse(function (el) {
	                    if (el.type === 'text') {
	                        el.attr('scale', [1 / scale[0], 1 / scale[1]]);
	                    }
	                });
	            }
	        }, this);

	        controller.setContainsPoint(function (x, y) {
	            return geo.getViewRectAfterRoam().contain(x, y);
	        });
	    }
	};

	module.exports = MapDraw;

/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/component/helper/RoamController
	 */

	var Eventful = __webpack_require__(533);
	var zrUtil = __webpack_require__(504);
	var eventTool = __webpack_require__(588);
	var interactionMutex = __webpack_require__(678);

	function mousedown(e) {
	    if (e.target && e.target.draggable) {
	        return;
	    }

	    var x = e.offsetX;
	    var y = e.offsetY;

	    if (this.containsPoint && this.containsPoint(x, y)) {
	        this._x = x;
	        this._y = y;
	        this._dragging = true;
	    }
	}

	function mousemove(e) {
	    if (!this._dragging) {
	        return;
	    }

	    eventTool.stop(e.event);

	    if (e.gestureEvent !== 'pinch') {

	        if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	            return;
	        }

	        var x = e.offsetX;
	        var y = e.offsetY;

	        var oldX = this._x;
	        var oldY = this._y;

	        var dx = x - oldX;
	        var dy = y - oldY;

	        this._x = x;
	        this._y = y;

	        var target = this.target;

	        if (target) {
	            var pos = target.position;
	            pos[0] += dx;
	            pos[1] += dy;
	            target.dirty();
	        }

	        eventTool.stop(e.event);
	        this.trigger('pan', dx, dy, oldX, oldY, x, y);
	    }
	}

	function mouseup(e) {
	    this._dragging = false;
	}

	function mousewheel(e) {
	    // Convenience:
	    // Mac and VM Windows on Mac: scroll up: zoom out.
	    // Windows: scroll up: zoom in.
	    var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;
	    zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);
	}

	function pinch(e) {
	    if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	        return;
	    }
	    var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
	    zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);
	}

	function zoom(e, zoomDelta, zoomX, zoomY) {
	    if (this.containsPoint && this.containsPoint(zoomX, zoomY)) {
	        // When mouse is out of roamController rect,
	        // default befavoius should be be disabled, otherwise
	        // page sliding is disabled, contrary to expectation.
	        eventTool.stop(e.event);

	        var target = this.target;
	        var zoomLimit = this.zoomLimit;

	        if (target) {
	            var pos = target.position;
	            var scale = target.scale;

	            var newZoom = this.zoom = this.zoom || 1;
	            newZoom *= zoomDelta;
	            if (zoomLimit) {
	                var zoomMin = zoomLimit.min || 0;
	                var zoomMax = zoomLimit.max || Infinity;
	                newZoom = Math.max(Math.min(zoomMax, newZoom), zoomMin);
	            }
	            var zoomScale = newZoom / this.zoom;
	            this.zoom = newZoom;
	            // Keep the mouse center when scaling
	            pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);
	            pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);
	            scale[0] *= zoomScale;
	            scale[1] *= zoomScale;

	            target.dirty();
	        }

	        this.trigger('zoom', zoomDelta, zoomX, zoomY);
	    }
	}

	/**
	 * @alias module:echarts/component/helper/RoamController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 *
	 * @param {module:zrender/zrender~ZRender} zr
	 * @param {module:zrender/Element} target
	 */
	function RoamController(zr, target) {

	    /**
	     * @type {module:zrender/Element}
	     */
	    this.target = target;

	    /**
	     * @type {Function}
	     */
	    this.containsPoint;

	    /**
	     * { min: 1, max: 2 }
	     * @type {Object}
	     */
	    this.zoomLimit;

	    /**
	     * @type {number}
	     */
	    this.zoom;
	    /**
	     * @type {module:zrender}
	     */
	    this._zr = zr;

	    // Avoid two roamController bind the same handler
	    var bind = zrUtil.bind;
	    var mousedownHandler = bind(mousedown, this);
	    var mousemoveHandler = bind(mousemove, this);
	    var mouseupHandler = bind(mouseup, this);
	    var mousewheelHandler = bind(mousewheel, this);
	    var pinchHandler = bind(pinch, this);

	    Eventful.call(this);

	    /**
	     * @param {Function} containsPoint
	     *                   input: x, y
	     *                   output: boolean
	     */
	    this.setContainsPoint = function (containsPoint) {
	        this.containsPoint = containsPoint;
	    };

	    /**
	     * Notice: only enable needed types. For example, if 'zoom'
	     * is not needed, 'zoom' should not be enabled, otherwise
	     * default mousewheel behaviour (scroll page) will be disabled.
	     *
	     * @param  {boolean|string} [controlType=true] Specify the control type,
	     *                          which can be null/undefined or true/false
	     *                          or 'pan/move' or 'zoom'/'scale'
	     */
	    this.enable = function (controlType) {
	        // Disable previous first
	        this.disable();

	        if (controlType == null) {
	            controlType = true;
	        }

	        if (controlType === true || controlType === 'move' || controlType === 'pan') {
	            zr.on('mousedown', mousedownHandler);
	            zr.on('mousemove', mousemoveHandler);
	            zr.on('mouseup', mouseupHandler);
	        }
	        if (controlType === true || controlType === 'scale' || controlType === 'zoom') {
	            zr.on('mousewheel', mousewheelHandler);
	            zr.on('pinch', pinchHandler);
	        }
	    };

	    this.disable = function () {
	        zr.off('mousedown', mousedownHandler);
	        zr.off('mousemove', mousemoveHandler);
	        zr.off('mouseup', mouseupHandler);
	        zr.off('mousewheel', mousewheelHandler);
	        zr.off('pinch', pinchHandler);
	    };

	    this.dispose = this.disable;

	    this.isDragging = function () {
	        return this._dragging;
	    };

	    this.isPinching = function () {
	        return this._pinching;
	    };
	}

	zrUtil.mixin(RoamController, Eventful);

	module.exports = RoamController;

/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ATTR = '\0_ec_interaction_mutex';

	var interactionMutex = {

	    take: function take(zr, resourceKey, userKey) {
	        var store = getStore(zr);
	        store[resourceKey] = userKey;
	    },

	    release: function release(zr, resourceKey, userKey) {
	        var store = getStore(zr);
	        var uKey = store[resourceKey];

	        if (uKey === userKey) {
	            store[resourceKey] = null;
	        }
	    },

	    isTaken: function isTaken(zr, resourceKey) {
	        return !!getStore(zr)[resourceKey];
	    }
	};

	function getStore(zr) {
	    return zr[ATTR] || (zr[ATTR] = {});
	}

	/**
	 * payload: {
	 *     type: 'takeGlobalCursor',
	 *     key: 'dataZoomSelect', or 'brush', or ...,
	 *         If no userKey, release global cursor.
	 * }
	 */
	__webpack_require__(501).registerAction({ type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update' }, function () {});

	module.exports = interactionMutex;

/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var roamHelper = __webpack_require__(680);

	var echarts = __webpack_require__(501);

	/**
	 * @payload
	 * @property {string} [componentType=series]
	 * @property {number} [dx]
	 * @property {number} [dy]
	 * @property {number} [zoom]
	 * @property {number} [originX]
	 * @property {number} [originY]
	 */
	echarts.registerAction({
	    type: 'geoRoam',
	    event: 'geoRoam',
	    update: 'updateLayout'
	}, function (payload, ecModel) {
	    var componentType = payload.componentType || 'series';

	    ecModel.eachComponent({ mainType: componentType, query: payload }, function (componentModel) {
	        var geo = componentModel.coordinateSystem;
	        if (geo.type !== 'geo') {
	            return;
	        }

	        var res = roamHelper.updateCenterAndZoom(geo, payload, componentModel.get('scaleLimit'));

	        componentModel.setCenter && componentModel.setCenter(res.center);

	        componentModel.setZoom && componentModel.setZoom(res.zoom);

	        // All map series with same `map` use the same geo coordinate system
	        // So the center and zoom must be in sync. Include the series not selected by legend
	        if (componentType === 'series') {
	            zrUtil.each(componentModel.seriesGroup, function (seriesModel) {
	                seriesModel.setCenter(res.center);
	                seriesModel.setZoom(res.zoom);
	            });
	        }
	    });
	});

/***/ },
/* 680 */
/***/ function(module, exports) {

	"use strict";

	var roamHelper = {};

	/**
	 * @param {module:echarts/coord/View} view
	 * @param {Object} payload
	 * @param {Object} [zoomLimit]
	 */
	roamHelper.updateCenterAndZoom = function (view, payload, zoomLimit) {
	    var previousZoom = view.getZoom();
	    var center = view.getCenter();
	    var zoom = payload.zoom;

	    var point = view.dataToPoint(center);

	    if (payload.dx != null && payload.dy != null) {
	        point[0] -= payload.dx;
	        point[1] -= payload.dy;

	        var center = view.pointToData(point);
	        view.setCenter(center);
	    }
	    if (zoom != null) {
	        if (zoomLimit) {
	            var zoomMin = zoomLimit.min || 0;
	            var zoomMax = zoomLimit.max || Infinity;
	            zoom = Math.max(Math.min(previousZoom * zoom, zoomMax), zoomMin) / previousZoom;
	        }

	        // Zoom on given point(originX, originY)
	        view.scale[0] *= zoom;
	        view.scale[1] *= zoom;
	        var position = view.position;
	        var fixX = (payload.originX - position[0]) * (zoom - 1);
	        var fixY = (payload.originY - position[1]) * (zoom - 1);

	        position[0] -= fixX;
	        position[1] -= fixY;

	        view.updateTransform();
	        // Get the new center
	        var center = view.pointToData(point);
	        view.setCenter(center);
	        view.setZoom(zoom * previousZoom);
	    }

	    return {
	        center: view.getCenter(),
	        zoom: view.getZoom()
	    };
	};

	module.exports = roamHelper;

/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	module.exports = function (ecModel) {

	    var processedMapType = {};

	    ecModel.eachSeriesByType('map', function (mapSeries) {
	        var mapType = mapSeries.getMapType();
	        if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {
	            return;
	        }

	        var mapSymbolOffsets = {};

	        zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {
	            var geo = subMapSeries.coordinateSystem;
	            var data = subMapSeries.originalData;
	            if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {
	                data.each('value', function (value, idx) {
	                    var name = data.getName(idx);
	                    var region = geo.getRegion(name);

	                    // If input series.data is [11, 22, '-'/null/undefined, 44],
	                    // it will be filled with NaN: [11, 22, NaN, 44] and NaN will
	                    // not be drawn. So here must validate if value is NaN.
	                    if (!region || isNaN(value)) {
	                        return;
	                    }

	                    var offset = mapSymbolOffsets[name] || 0;

	                    var point = geo.dataToPoint(region.center);

	                    mapSymbolOffsets[name] = offset + 1;

	                    data.setItemLayout(idx, {
	                        point: point,
	                        offset: offset
	                    });
	                });
	            }
	        });

	        // Show label of those region not has legendSymbol(which is offset 0)
	        var data = mapSeries.getData();
	        data.each(function (idx) {
	            var name = data.getName(idx);
	            var layout = data.getItemLayout(idx) || {};
	            layout.showLabel = !mapSymbolOffsets[name];
	            data.setItemLayout(idx, layout);
	        });

	        processedMapType[mapType] = true;
	    });
	};

/***/ },
/* 682 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('map', function (seriesModel) {
	        var colorList = seriesModel.get('color');
	        var itemStyleModel = seriesModel.getModel('itemStyle.normal');

	        var areaColor = itemStyleModel.get('areaColor');
	        var color = itemStyleModel.get('color') || colorList[seriesModel.seriesIndex % colorList.length];

	        seriesModel.getData().setVisual({
	            'areaColor': areaColor,
	            'color': color
	        });
	    });
	};

/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	// FIXME 公用？
	/**
	 * @param {Array.<module:echarts/data/List>} datas
	 * @param {string} statisticType 'average' 'sum'
	 * @inner
	 */
	function dataStatistics(datas, statisticType) {
	    var dataNameMap = {};
	    var dims = ['value'];

	    zrUtil.each(datas, function (data) {
	        data.each(dims, function (value, idx) {
	            var name = data.getName(idx);
	            dataNameMap[name] = dataNameMap[name] || [];
	            if (!isNaN(value)) {
	                dataNameMap[name].push(value);
	            }
	        });
	    });

	    return datas[0].map(dims, function (value, idx) {
	        var name = datas[0].getName(idx);
	        var sum = 0;
	        var min = Infinity;
	        var max = -Infinity;
	        var len = dataNameMap[name].length;
	        for (var i = 0; i < len; i++) {
	            min = Math.min(min, dataNameMap[name][i]);
	            max = Math.max(max, dataNameMap[name][i]);
	            sum += dataNameMap[name][i];
	        }
	        var result;
	        if (statisticType === 'min') {
	            result = min;
	        } else if (statisticType === 'max') {
	            result = max;
	        } else if (statisticType === 'average') {
	            result = sum / len;
	        } else {
	            result = sum;
	        }
	        return len === 0 ? NaN : result;
	    });
	}

	module.exports = function (ecModel) {
	    var seriesGroups = {};
	    ecModel.eachSeriesByType('map', function (seriesModel) {
	        var hostGeoModel = seriesModel.getHostGeoModel();
	        var key = hostGeoModel ? 'o' + hostGeoModel.id : 'i' + seriesModel.getMapType();
	        (seriesGroups[key] = seriesGroups[key] || []).push(seriesModel);
	    });

	    zrUtil.each(seriesGroups, function (seriesList, key) {
	        var data = dataStatistics(zrUtil.map(seriesList, function (seriesModel) {
	            return seriesModel.getData();
	        }), seriesList[0].get('mapValueCalculation'));

	        for (var i = 0; i < seriesList.length; i++) {
	            seriesList[i].originalData = seriesList[i].getData();
	        }

	        // FIXME Put where?
	        for (var i = 0; i < seriesList.length; i++) {
	            seriesList[i].seriesGroup = seriesList;
	            seriesList[i].needsDrawMap = i === 0 && !seriesList[i].getHostGeoModel();

	            seriesList[i].setData(data.cloneShallow());
	            seriesList[i].mainSeries = seriesList[0];
	        }
	    });
	};

/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	module.exports = function (option) {
	    // Save geoCoord
	    var mapSeries = [];
	    zrUtil.each(option.series, function (seriesOpt) {
	        if (seriesOpt.type === 'map') {
	            mapSeries.push(seriesOpt);
	        }
	    });

	    zrUtil.each(mapSeries, function (seriesOpt) {
	        seriesOpt.map = seriesOpt.map || seriesOpt.mapType;
	        // Put x, y, width, height, x2, y2 in the top level
	        zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);
	    });
	};

/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);

	__webpack_require__(686);
	__webpack_require__(690);
	__webpack_require__(693);

	echarts.registerVisual(__webpack_require__(694));

	echarts.registerLayout(__webpack_require__(696));

/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SeriesModel = __webpack_require__(528);
	var Tree = __webpack_require__(687);
	var zrUtil = __webpack_require__(504);
	var Model = __webpack_require__(512);
	var formatUtil = __webpack_require__(506);
	var helper = __webpack_require__(689);
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;

	module.exports = SeriesModel.extend({

	    type: 'series.treemap',

	    layoutMode: 'box',

	    dependencies: ['grid', 'polar'],

	    /**
	     * @type {module:echarts/data/Tree~Node}
	     */
	    _viewRoot: null,

	    defaultOption: {
	        // Disable progressive rendering
	        progressive: 0,
	        hoverLayerThreshold: Infinity,
	        // center: ['50%', '50%'],          // not supported in ec3.
	        // size: ['80%', '80%'],            // deprecated, compatible with ec2.
	        left: 'center',
	        top: 'middle',
	        right: null,
	        bottom: null,
	        width: '80%',
	        height: '80%',
	        sort: true, // Can be null or false or true
	        // (order by desc default, asc not supported yet (strange effect))
	        clipWindow: 'origin', // Size of clipped window when zooming. 'origin' or 'fullscreen'
	        squareRatio: 0.5 * (1 + Math.sqrt(5)), // golden ratio
	        leafDepth: null, // Nodes on depth from root are regarded as leaves.
	        // Count from zero (zero represents only view root).
	        drillDownIcon: '▶', // Use html character temporarily because it is complicated
	        // to align specialized icon. ▷▶❒❐▼✚

	        zoomToNodeRatio: 0.32 * 0.32, // Be effective when using zoomToNode. Specify the proportion of the
	        // target node area in the view area.
	        roam: true, // true, false, 'scale' or 'zoom', 'move'.
	        nodeClick: 'zoomToNode', // Leaf node click behaviour: 'zoomToNode', 'link', false.
	        // If leafDepth is set and clicking a node which has children but
	        // be on left depth, the behaviour would be changing root. Otherwise
	        // use behavious defined above.
	        animation: true,
	        animationDurationUpdate: 900,
	        animationEasing: 'quinticInOut',
	        breadcrumb: {
	            show: true,
	            height: 22,
	            left: 'center',
	            top: 'bottom',
	            // right
	            // bottom
	            emptyItemWidth: 25, // Width of empty node.
	            itemStyle: {
	                normal: {
	                    color: 'rgba(0,0,0,0.7)', //'#5793f3',
	                    borderColor: 'rgba(255,255,255,0.7)',
	                    borderWidth: 1,
	                    shadowColor: 'rgba(150,150,150,1)',
	                    shadowBlur: 3,
	                    shadowOffsetX: 0,
	                    shadowOffsetY: 0,
	                    textStyle: {
	                        color: '#fff'
	                    }
	                },
	                emphasis: {
	                    textStyle: {}
	                }
	            }
	        },
	        label: {
	            normal: {
	                show: true,
	                position: 'inside', // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...
	                textStyle: {
	                    color: '#fff',
	                    ellipsis: true
	                }
	            }
	        },
	        itemStyle: {
	            normal: {
	                color: null, // Can be 'none' if not necessary.
	                colorAlpha: null, // Can be 'none' if not necessary.
	                colorSaturation: null, // Can be 'none' if not necessary.
	                borderWidth: 0,
	                gapWidth: 0,
	                borderColor: '#fff',
	                borderColorSaturation: null // If specified, borderColor will be ineffective, and the
	                // border color is evaluated by color of current node and
	                // borderColorSaturation.
	            },
	            emphasis: {}
	        },

	        visualDimension: 0, // Can be 0, 1, 2, 3.
	        visualMin: null,
	        visualMax: null,

	        color: [], // + treemapSeries.color should not be modified. Please only modified
	        // level[n].color (if necessary).
	        // + Specify color list of each level. level[0].color would be global
	        // color list if not specified. (see method `setDefault`).
	        // + But set as a empty array to forbid fetch color from global palette
	        // when using nodeModel.get('color'), otherwise nodes on deep level
	        // will always has color palette set and are not able to inherit color
	        // from parent node.
	        // + TreemapSeries.color can not be set as 'none', otherwise effect
	        // legend color fetching (see seriesColor.js).
	        colorAlpha: null, // Array. Specify color alpha range of each level, like [0.2, 0.8]
	        colorSaturation: null, // Array. Specify color saturation of each level, like [0.2, 0.5]
	        colorMappingBy: 'index', // 'value' or 'index' or 'id'.
	        visibleMin: 10, // If area less than this threshold (unit: pixel^2), node will not
	        // be rendered. Only works when sort is 'asc' or 'desc'.
	        childrenVisibleMin: null, // If area of a node less than this threshold (unit: pixel^2),
	        // grandchildren will not show.
	        // Why grandchildren? If not grandchildren but children,
	        // some siblings show children and some not,
	        // the appearance may be mess and not consistent,
	        levels: [] // Each item: {
	        //     visibleMin, itemStyle, visualDimension, label
	        // }
	        // data: {
	        //      value: [],
	        //      children: [],
	        //      link: 'http://xxx.xxx.xxx',
	        //      target: 'blank' or 'self'
	        // }
	    },

	    /**
	     * @override
	     */
	    getInitialData: function getInitialData(option, ecModel) {
	        var data = option.data || [];
	        var rootName = option.name;
	        rootName == null && (rootName = option.name);

	        // Create a virtual root.
	        var root = { name: rootName, children: option.data };
	        var value0 = (data[0] || {}).value;

	        completeTreeValue(root, zrUtil.isArray(value0) ? value0.length : -1);

	        // FIXME
	        // sereis.mergeOption 的 getInitData是否放在merge后，从而能直接获取merege后的结果而非手动判断。
	        var levels = option.levels || [];

	        levels = option.levels = setDefault(levels, ecModel);

	        // Make sure always a new tree is created when setOption,
	        // in TreemapView, we check whether oldTree === newTree
	        // to choose mappings approach among old shapes and new shapes.
	        return Tree.createTree(root, this, levels).data;
	    },

	    optionUpdated: function optionUpdated() {
	        this.resetViewRoot();
	    },

	    /**
	     * @override
	     * @param {number} dataIndex
	     * @param {boolean} [mutipleSeries=false]
	     */
	    formatTooltip: function formatTooltip(dataIndex) {
	        var data = this.getData();
	        var value = this.getRawValue(dataIndex);
	        var formattedValue = zrUtil.isArray(value) ? addCommas(value[0]) : addCommas(value);
	        var name = data.getName(dataIndex);

	        return encodeHTML(name + ': ' + formattedValue);
	    },

	    /**
	     * Add tree path to tooltip param
	     *
	     * @override
	     * @param {number} dataIndex
	     * @return {Object}
	     */
	    getDataParams: function getDataParams(dataIndex) {
	        var params = SeriesModel.prototype.getDataParams.apply(this, arguments);

	        var node = this.getData().tree.getNodeByDataIndex(dataIndex);
	        params.treePathInfo = helper.wrapTreePathInfo(node, this);

	        return params;
	    },

	    /**
	     * @public
	     * @param {Object} layoutInfo {
	     *                                x: containerGroup x
	     *                                y: containerGroup y
	     *                                width: containerGroup width
	     *                                height: containerGroup height
	     *                            }
	     */
	    setLayoutInfo: function setLayoutInfo(layoutInfo) {
	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        this.layoutInfo = this.layoutInfo || {};
	        zrUtil.extend(this.layoutInfo, layoutInfo);
	    },

	    /**
	     * @param  {string} id
	     * @return {number} index
	     */
	    mapIdToIndex: function mapIdToIndex(id) {
	        // A feature is implemented:
	        // index is monotone increasing with the sequence of
	        // input id at the first time.
	        // This feature can make sure that each data item and its
	        // mapped color have the same index between data list and
	        // color list at the beginning, which is useful for user
	        // to adjust data-color mapping.

	        /**
	         * @private
	         * @type {Object}
	         */
	        var idIndexMap = this._idIndexMap;

	        if (!idIndexMap) {
	            idIndexMap = this._idIndexMap = {};
	            /**
	             * @private
	             * @type {number}
	             */
	            this._idIndexMapCount = 0;
	        }

	        var index = idIndexMap[id];
	        if (index == null) {
	            idIndexMap[id] = index = this._idIndexMapCount++;
	        }

	        return index;
	    },

	    getViewRoot: function getViewRoot() {
	        return this._viewRoot;
	    },

	    /**
	     * @param {module:echarts/data/Tree~Node} [viewRoot]
	     */
	    resetViewRoot: function resetViewRoot(viewRoot) {
	        viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;

	        var root = this.getData().tree.root;

	        if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {
	            this._viewRoot = root;
	        }
	    }
	});

	/**
	 * @param {Object} dataNode
	 */
	function completeTreeValue(dataNode, arrValueLength) {
	    // Postorder travel tree.
	    // If value of none-leaf node is not set,
	    // calculate it by suming up the value of all children.
	    var sum = 0;

	    zrUtil.each(dataNode.children, function (child) {

	        completeTreeValue(child, arrValueLength);

	        var childValue = child.value;
	        zrUtil.isArray(childValue) && (childValue = childValue[0]);

	        sum += childValue;
	    });

	    var thisValue = dataNode.value;

	    if (arrValueLength >= 0) {
	        if (!zrUtil.isArray(thisValue)) {
	            dataNode.value = new Array(arrValueLength);
	        } else {
	            thisValue = thisValue[0];
	        }
	    }

	    if (thisValue == null || isNaN(thisValue)) {
	        thisValue = sum;
	    }
	    // Value should not less than 0.
	    if (thisValue < 0) {
	        thisValue = 0;
	    }

	    arrValueLength >= 0 ? dataNode.value[0] = thisValue : dataNode.value = thisValue;
	}

	/**
	 * set default to level configuration
	 */
	function setDefault(levels, ecModel) {
	    var globalColorList = ecModel.get('color');

	    if (!globalColorList) {
	        return;
	    }

	    levels = levels || [];
	    var hasColorDefine;
	    zrUtil.each(levels, function (levelDefine) {
	        var model = new Model(levelDefine);
	        var modelColor = model.get('color');

	        if (model.get('itemStyle.normal.color') || modelColor && modelColor !== 'none') {
	            hasColorDefine = true;
	        }
	    });

	    if (!hasColorDefine) {
	        var level0 = levels[0] || (levels[0] = {});
	        level0.color = globalColorList.slice();
	    }

	    return levels;
	}

/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Tree data structure
	 *
	 * @module echarts/data/Tree
	 */

	var zrUtil = __webpack_require__(504);
	var Model = __webpack_require__(512);
	var List = __webpack_require__(598);
	var linkList = __webpack_require__(688);
	var completeDimensions = __webpack_require__(603);

	/**
	 * @constructor module:echarts/data/Tree~TreeNode
	 * @param {string} name
	 * @param {module:echarts/data/Tree} hostTree
	 */
	var TreeNode = function TreeNode(name, hostTree) {
	    /**
	     * @type {string}
	     */
	    this.name = name || '';

	    /**
	     * Depth of node
	     *
	     * @type {number}
	     * @readOnly
	     */
	    this.depth = 0;

	    /**
	     * Height of the subtree rooted at this node.
	     * @type {number}
	     * @readOnly
	     */
	    this.height = 0;

	    /**
	     * @type {module:echarts/data/Tree~TreeNode}
	     * @readOnly
	     */
	    this.parentNode = null;

	    /**
	     * Reference to list item.
	     * Do not persistent dataIndex outside,
	     * besause it may be changed by list.
	     * If dataIndex -1,
	     * this node is logical deleted (filtered) in list.
	     *
	     * @type {Object}
	     * @readOnly
	     */
	    this.dataIndex = -1;

	    /**
	     * @type {Array.<module:echarts/data/Tree~TreeNode>}
	     * @readOnly
	     */
	    this.children = [];

	    /**
	     * @type {Array.<module:echarts/data/Tree~TreeNode>}
	     * @pubilc
	     */
	    this.viewChildren = [];

	    /**
	     * @type {moduel:echarts/data/Tree}
	     * @readOnly
	     */
	    this.hostTree = hostTree;
	};

	TreeNode.prototype = {

	    constructor: TreeNode,

	    /**
	     * The node is removed.
	     * @return {boolean} is removed.
	     */
	    isRemoved: function isRemoved() {
	        return this.dataIndex < 0;
	    },

	    /**
	     * Travel this subtree (include this node).
	     * Usage:
	     *    node.eachNode(function () { ... }); // preorder
	     *    node.eachNode('preorder', function () { ... }); // preorder
	     *    node.eachNode('postorder', function () { ... }); // postorder
	     *    node.eachNode(
	     *        {order: 'postorder', attr: 'viewChildren'},
	     *        function () { ... }
	     *    ); // postorder
	     *
	     * @param {(Object|string)} options If string, means order.
	     * @param {string=} options.order 'preorder' or 'postorder'
	     * @param {string=} options.attr 'children' or 'viewChildren'
	     * @param {Function} cb If in preorder and return false,
	     *                      its subtree will not be visited.
	     * @param {Object} [context]
	     */
	    eachNode: function eachNode(options, cb, context) {
	        if (typeof options === 'function') {
	            context = cb;
	            cb = options;
	            options = null;
	        }

	        options = options || {};
	        if (zrUtil.isString(options)) {
	            options = { order: options };
	        }

	        var order = options.order || 'preorder';
	        var children = this[options.attr || 'children'];

	        var suppressVisitSub;
	        order === 'preorder' && (suppressVisitSub = cb.call(context, this));

	        for (var i = 0; !suppressVisitSub && i < children.length; i++) {
	            children[i].eachNode(options, cb, context);
	        }

	        order === 'postorder' && cb.call(context, this);
	    },

	    /**
	     * Update depth and height of this subtree.
	     *
	     * @param  {number} depth
	     */
	    updateDepthAndHeight: function updateDepthAndHeight(depth) {
	        var height = 0;
	        this.depth = depth;
	        for (var i = 0; i < this.children.length; i++) {
	            var child = this.children[i];
	            child.updateDepthAndHeight(depth + 1);
	            if (child.height > height) {
	                height = child.height;
	            }
	        }
	        this.height = height + 1;
	    },

	    /**
	     * @param  {string} id
	     * @return {module:echarts/data/Tree~TreeNode}
	     */
	    getNodeById: function getNodeById(id) {
	        if (this.getId() === id) {
	            return this;
	        }
	        for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	            var res = children[i].getNodeById(id);
	            if (res) {
	                return res;
	            }
	        }
	    },

	    /**
	     * @param {module:echarts/data/Tree~TreeNode} node
	     * @return {boolean}
	     */
	    contains: function contains(node) {
	        if (node === this) {
	            return true;
	        }
	        for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	            var res = children[i].contains(node);
	            if (res) {
	                return res;
	            }
	        }
	    },

	    /**
	     * @param {boolean} includeSelf Default false.
	     * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]
	     */
	    getAncestors: function getAncestors(includeSelf) {
	        var ancestors = [];
	        var node = includeSelf ? this : this.parentNode;
	        while (node) {
	            ancestors.push(node);
	            node = node.parentNode;
	        }
	        ancestors.reverse();
	        return ancestors;
	    },

	    /**
	     * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3
	     * @return {number} Value.
	     */
	    getValue: function getValue(dimension) {
	        var data = this.hostTree.data;
	        return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	    },

	    /**
	     * @param {Object} layout
	     * @param {boolean=} [merge=false]
	     */
	    setLayout: function setLayout(layout, merge) {
	        this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);
	    },

	    /**
	     * @return {Object} layout
	     */
	    getLayout: function getLayout() {
	        return this.hostTree.data.getItemLayout(this.dataIndex);
	    },

	    /**
	     * @param {string} path
	     * @return {module:echarts/model/Model}
	     */
	    getModel: function getModel(path) {
	        if (this.dataIndex < 0) {
	            return;
	        }
	        var hostTree = this.hostTree;
	        var itemModel = hostTree.data.getItemModel(this.dataIndex);
	        var levelModel = this.getLevelModel();

	        return itemModel.getModel(path, (levelModel || hostTree.hostModel).getModel(path));
	    },

	    /**
	     * @return {module:echarts/model/Model}
	     */
	    getLevelModel: function getLevelModel() {
	        return (this.hostTree.levelModels || [])[this.depth];
	    },

	    /**
	     * @example
	     *  setItemVisual('color', color);
	     *  setItemVisual({
	     *      'color': color
	     *  });
	     */
	    setVisual: function setVisual(key, value) {
	        this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);
	    },

	    /**
	     * Get item visual
	     */
	    getVisual: function getVisual(key, ignoreParent) {
	        return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);
	    },

	    /**
	     * @public
	     * @return {number}
	     */
	    getRawIndex: function getRawIndex() {
	        return this.hostTree.data.getRawIndex(this.dataIndex);
	    },

	    /**
	     * @public
	     * @return {string}
	     */
	    getId: function getId() {
	        return this.hostTree.data.getId(this.dataIndex);
	    }
	};

	/**
	 * @constructor
	 * @alias module:echarts/data/Tree
	 * @param {module:echarts/model/Model} hostModel
	 * @param {Array.<Object>} levelOptions
	 */
	function Tree(hostModel, levelOptions) {
	    /**
	     * @type {module:echarts/data/Tree~TreeNode}
	     * @readOnly
	     */
	    this.root;

	    /**
	     * @type {module:echarts/data/List}
	     * @readOnly
	     */
	    this.data;

	    /**
	     * Index of each item is the same as the raw index of coresponding list item.
	     * @private
	     * @type {Array.<module:echarts/data/Tree~TreeNode}
	     */
	    this._nodes = [];

	    /**
	     * @private
	     * @readOnly
	     * @type {module:echarts/model/Model}
	     */
	    this.hostModel = hostModel;

	    /**
	     * @private
	     * @readOnly
	     * @type {Array.<module:echarts/model/Model}
	     */
	    this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {
	        return new Model(levelDefine, hostModel, hostModel.ecModel);
	    });
	}

	Tree.prototype = {

	    constructor: Tree,

	    type: 'tree',

	    /**
	     * Travel this subtree (include this node).
	     * Usage:
	     *    node.eachNode(function () { ... }); // preorder
	     *    node.eachNode('preorder', function () { ... }); // preorder
	     *    node.eachNode('postorder', function () { ... }); // postorder
	     *    node.eachNode(
	     *        {order: 'postorder', attr: 'viewChildren'},
	     *        function () { ... }
	     *    ); // postorder
	     *
	     * @param {(Object|string)} options If string, means order.
	     * @param {string=} options.order 'preorder' or 'postorder'
	     * @param {string=} options.attr 'children' or 'viewChildren'
	     * @param {Function} cb
	     * @param {Object}   [context]
	     */
	    eachNode: function eachNode(options, cb, context) {
	        this.root.eachNode(options, cb, context);
	    },

	    /**
	     * @param {number} dataIndex
	     * @return {module:echarts/data/Tree~TreeNode}
	     */
	    getNodeByDataIndex: function getNodeByDataIndex(dataIndex) {
	        var rawIndex = this.data.getRawIndex(dataIndex);
	        return this._nodes[rawIndex];
	    },

	    /**
	     * @param {string} name
	     * @return {module:echarts/data/Tree~TreeNode}
	     */
	    getNodeByName: function getNodeByName(name) {
	        return this.root.getNodeByName(name);
	    },

	    /**
	     * Update item available by list,
	     * when list has been performed options like 'filterSelf' or 'map'.
	     */
	    update: function update() {
	        var data = this.data;
	        var nodes = this._nodes;

	        for (var i = 0, len = nodes.length; i < len; i++) {
	            nodes[i].dataIndex = -1;
	        }

	        for (var i = 0, len = data.count(); i < len; i++) {
	            nodes[data.getRawIndex(i)].dataIndex = i;
	        }
	    },

	    /**
	     * Clear all layouts
	     */
	    clearLayouts: function clearLayouts() {
	        this.data.clearItemLayouts();
	    }
	};

	/**
	 * data node format:
	 * {
	 *     name: ...
	 *     value: ...
	 *     children: [
	 *         {
	 *             name: ...
	 *             value: ...
	 *             children: ...
	 *         },
	 *         ...
	 *     ]
	 * }
	 *
	 * @static
	 * @param {Objec} dataRoot Root node.
	 * @param {module:echarts/model/Model} hostModel
	 * @param {Array.<Object>} levelOptions
	 * @return module:echarts/data/Tree
	 */
	Tree.createTree = function (dataRoot, hostModel, levelOptions) {

	    var tree = new Tree(hostModel, levelOptions);
	    var listData = [];

	    buildHierarchy(dataRoot);

	    function buildHierarchy(dataNode, parentNode) {
	        listData.push(dataNode);

	        var node = new TreeNode(dataNode.name, tree);
	        parentNode ? addChild(node, parentNode) : tree.root = node;

	        tree._nodes.push(node);

	        var children = dataNode.children;
	        if (children) {
	            for (var i = 0; i < children.length; i++) {
	                buildHierarchy(children[i], node);
	            }
	        }
	    }

	    tree.root.updateDepthAndHeight(0);

	    var dimensions = completeDimensions([{ name: 'value' }], listData);
	    var list = new List(dimensions, hostModel);
	    list.initData(listData);

	    linkList({
	        mainData: list,
	        struct: tree,
	        structAttr: 'tree'
	    });

	    tree.update();

	    return tree;
	};

	/**
	 * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,
	 * so this function is not ready and not necessary to be public.
	 *
	 * @param {(module:echarts/data/Tree~TreeNode|Object)} child
	 */
	function addChild(child, node) {
	    var children = node.children;
	    if (child.parentNode === node) {
	        return;
	    }

	    children.push(child);
	    child.parentNode = node;
	}

	module.exports = Tree;

/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Link lists and struct (graph or tree)
	 */

	var zrUtil = __webpack_require__(504);
	var each = zrUtil.each;

	var DATAS = '\0__link_datas';
	var MAIN_DATA = '\0__link_mainData';

	// Caution:
	// In most case, either list or its shallow clones (see list.cloneShallow)
	// is active in echarts process. So considering heap memory consumption,
	// we do not clone tree or graph, but share them among list and its shallow clones.
	// But in some rare case, we have to keep old list (like do animation in chart). So
	// please take care that both the old list and the new list share the same tree/graph.

	/**
	 * @param {Object} opt
	 * @param {module:echarts/data/List} opt.mainData
	 * @param {Object} [opt.struct] For example, instance of Graph or Tree.
	 * @param {string} [opt.structAttr] designation: list[structAttr] = struct;
	 * @param {Object} [opt.datas] {dataType: data},
	 *                 like: {node: nodeList, edge: edgeList}.
	 *                 Should contain mainData.
	 * @param {Object} [opt.datasAttr] {dataType: attr},
	 *                 designation: struct[datasAttr[dataType]] = list;
	 */
	function linkList(opt) {
	    var mainData = opt.mainData;
	    var datas = opt.datas;

	    if (!datas) {
	        datas = { main: mainData };
	        opt.datasAttr = { main: 'data' };
	    }
	    opt.datas = opt.mainData = null;

	    linkAll(mainData, datas, opt);

	    // Porxy data original methods.
	    each(datas, function (data) {
	        each(mainData.TRANSFERABLE_METHODS, function (methodName) {
	            data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));
	        });
	    });

	    // Beyond transfer, additional features should be added to `cloneShallow`.
	    mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt));

	    // Only mainData trigger change, because struct.update may trigger
	    // another changable methods, which may bring about dead lock.
	    each(mainData.CHANGABLE_METHODS, function (methodName) {
	        mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));
	    });

	    // Make sure datas contains mainData.
	    zrUtil.assert(datas[mainData.dataType] === mainData);
	}

	function transferInjection(opt, res) {
	    if (isMainData(this)) {
	        // Transfer datas to new main data.
	        var datas = zrUtil.extend({}, this[DATAS]);
	        datas[this.dataType] = res;
	        linkAll(res, datas, opt);
	    } else {
	        // Modify the reference in main data to point newData.
	        linkSingle(res, this.dataType, this[MAIN_DATA], opt);
	    }
	    return res;
	}

	function changeInjection(opt, res) {
	    opt.struct && opt.struct.update(this);
	    return res;
	}

	function cloneShallowInjection(opt, res) {
	    // cloneShallow, which brings about some fragilities, may be inappropriate
	    // to be exposed as an API. So for implementation simplicity we can make
	    // the restriction that cloneShallow of not-mainData should not be invoked
	    // outside, but only be invoked here.
	    each(res[DATAS], function (data, dataType) {
	        data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);
	    });
	    return res;
	}

	/**
	 * Supplement method to List.
	 *
	 * @public
	 * @param {string} [dataType] If not specified, return mainData.
	 * @return {module:echarts/data/List}
	 */
	function getLinkedData(dataType) {
	    var mainData = this[MAIN_DATA];
	    return dataType == null || mainData == null ? mainData : mainData[DATAS][dataType];
	}

	function isMainData(data) {
	    return data[MAIN_DATA] === data;
	}

	function linkAll(mainData, datas, opt) {
	    mainData[DATAS] = {};
	    each(datas, function (data, dataType) {
	        linkSingle(data, dataType, mainData, opt);
	    });
	}

	function linkSingle(data, dataType, mainData, opt) {
	    mainData[DATAS][dataType] = data;
	    data[MAIN_DATA] = mainData;
	    data.dataType = dataType;

	    if (opt.struct) {
	        data[opt.structAttr] = opt.struct;
	        opt.struct[opt.datasAttr[dataType]] = data;
	    }

	    // Supplement method.
	    data.getLinkedData = getLinkedData;
	}

	module.exports = linkList;

/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	var helper = {

	    retrieveTargetInfo: function retrieveTargetInfo(payload, seriesModel) {
	        if (payload && (payload.type === 'treemapZoomToNode' || payload.type === 'treemapRootToNode')) {
	            var root = seriesModel.getData().tree.root;
	            var targetNode = payload.targetNode;
	            if (targetNode && root.contains(targetNode)) {
	                return { node: targetNode };
	            }

	            var targetNodeId = payload.targetNodeId;
	            if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {
	                return { node: targetNode };
	            }
	        }
	    },

	    // Not includes the given node at the last item.
	    getPathToRoot: function getPathToRoot(node) {
	        var path = [];
	        while (node) {
	            node = node.parentNode;
	            node && path.push(node);
	        }
	        return path.reverse();
	    },

	    aboveViewRoot: function aboveViewRoot(viewRoot, node) {
	        var viewPath = helper.getPathToRoot(viewRoot);
	        return zrUtil.indexOf(viewPath, node) >= 0;
	    },

	    // From root to the input node (the input node will be included).
	    wrapTreePathInfo: function wrapTreePathInfo(node, seriesModel) {
	        var treePathInfo = [];

	        while (node) {
	            var nodeDataIndex = node.dataIndex;
	            treePathInfo.push({
	                name: node.name,
	                dataIndex: nodeDataIndex,
	                value: seriesModel.getRawValue(nodeDataIndex)
	            });
	            node = node.parentNode;
	        }

	        treePathInfo.reverse();

	        return treePathInfo;
	    }
	};

	module.exports = helper;

/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var DataDiffer = __webpack_require__(599);
	var helper = __webpack_require__(689);
	var Breadcrumb = __webpack_require__(691);
	var RoamController = __webpack_require__(677);
	var BoundingRect = __webpack_require__(509);
	var matrix = __webpack_require__(511);
	var animationUtil = __webpack_require__(692);
	var bind = zrUtil.bind;
	var Group = graphic.Group;
	var Rect = graphic.Rect;
	var each = zrUtil.each;

	var DRAG_THRESHOLD = 3;
	var PATH_LABEL_NORMAL = ['label', 'normal'];
	var PATH_LABEL_EMPHASIS = ['label', 'emphasis'];
	var Z_BASE = 10; // Should bigger than every z.
	var Z_BG = 1;
	var Z_CONTENT = 2;

	module.exports = __webpack_require__(501).extendChartView({

	    type: 'treemap',

	    /**
	     * @override
	     */
	    init: function init(o, api) {

	        /**
	         * @private
	         * @type {module:zrender/container/Group}
	         */
	        this._containerGroup;

	        /**
	         * @private
	         * @type {Object.<string, Array.<module:zrender/container/Group>>}
	         */
	        this._storage = createStorage();

	        /**
	         * @private
	         * @type {module:echarts/data/Tree}
	         */
	        this._oldTree;

	        /**
	         * @private
	         * @type {module:echarts/chart/treemap/Breadcrumb}
	         */
	        this._breadcrumb;

	        /**
	         * @private
	         * @type {module:echarts/component/helper/RoamController}
	         */
	        this._controller;

	        /**
	         * 'ready', 'animating'
	         * @private
	         */
	        this._state = 'ready';

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._mayClick;
	    },

	    /**
	     * @override
	     */
	    render: function render(seriesModel, ecModel, api, payload) {

	        var models = ecModel.findComponents({
	            mainType: 'series', subType: 'treemap', query: payload
	        });
	        if (zrUtil.indexOf(models, seriesModel) < 0) {
	            return;
	        }

	        this.seriesModel = seriesModel;
	        this.api = api;
	        this.ecModel = ecModel;

	        var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	        var payloadType = payload && payload.type;
	        var layoutInfo = seriesModel.layoutInfo;
	        var isInit = !this._oldTree;
	        var thisStorage = this._storage;

	        // Mark new root when action is treemapRootToNode.
	        var reRoot = payloadType === 'treemapRootToNode' && targetInfo && thisStorage ? {
	            rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],
	            direction: payload.direction
	        } : null;

	        var containerGroup = this._giveContainerGroup(layoutInfo);

	        var renderResult = this._doRender(containerGroup, seriesModel, reRoot);
	        !isInit && (!payloadType || payloadType === 'treemapZoomToNode' || payloadType === 'treemapRootToNode') ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot) : renderResult.renderFinally();

	        this._resetController(api);

	        this._renderBreadcrumb(seriesModel, api, targetInfo);
	    },

	    /**
	     * @private
	     */
	    _giveContainerGroup: function _giveContainerGroup(layoutInfo) {
	        var containerGroup = this._containerGroup;
	        if (!containerGroup) {
	            // FIXME
	            // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。
	            containerGroup = this._containerGroup = new Group();
	            this._initEvents(containerGroup);
	            this.group.add(containerGroup);
	        }
	        containerGroup.attr('position', [layoutInfo.x, layoutInfo.y]);

	        return containerGroup;
	    },

	    /**
	     * @private
	     */
	    _doRender: function _doRender(containerGroup, seriesModel, reRoot) {
	        var thisTree = seriesModel.getData().tree;
	        var oldTree = this._oldTree;

	        // Clear last shape records.
	        var lastsForAnimation = createStorage();
	        var thisStorage = createStorage();
	        var oldStorage = this._storage;
	        var willInvisibleEls = [];
	        var doRenderNode = zrUtil.curry(renderNode, seriesModel, thisStorage, oldStorage, reRoot, lastsForAnimation, willInvisibleEls);

	        // Notice: when thisTree and oldTree are the same tree (see list.cloneShadow),
	        // the oldTree is actually losted, so we can not find all of the old graphic
	        // elements from tree. So we use this stragegy: make element storage, move
	        // from old storage to new storage, clear old storage.

	        dualTravel(thisTree.root ? [thisTree.root] : [], oldTree && oldTree.root ? [oldTree.root] : [], containerGroup, thisTree === oldTree || !oldTree, 0);

	        // Process all removing.
	        var willDeleteEls = clearStorage(oldStorage);

	        this._oldTree = thisTree;
	        this._storage = thisStorage;

	        return {
	            lastsForAnimation: lastsForAnimation,
	            willDeleteEls: willDeleteEls,
	            renderFinally: renderFinally
	        };

	        function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, depth) {
	            // When 'render' is triggered by action,
	            // 'this' and 'old' may be the same tree,
	            // we use rawIndex in that case.
	            if (sameTree) {
	                oldViewChildren = thisViewChildren;
	                each(thisViewChildren, function (child, index) {
	                    !child.isRemoved() && processNode(index, index);
	                });
	            }
	            // Diff hierarchically (diff only in each subtree, but not whole).
	            // because, consistency of view is important.
	            else {
	                    new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey).add(processNode).update(processNode).remove(zrUtil.curry(processNode, null)).execute();
	                }

	            function getKey(node) {
	                // Identify by name or raw index.
	                return node.getId();
	            }

	            function processNode(newIndex, oldIndex) {
	                var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;
	                var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;

	                var group = doRenderNode(thisNode, oldNode, parentGroup, depth);

	                group && dualTravel(thisNode && thisNode.viewChildren || [], oldNode && oldNode.viewChildren || [], group, sameTree, depth + 1);
	            }
	        }

	        function clearStorage(storage) {
	            var willDeleteEls = createStorage();
	            storage && each(storage, function (store, storageName) {
	                var delEls = willDeleteEls[storageName];
	                each(store, function (el) {
	                    el && (delEls.push(el), el.__tmWillDelete = 1);
	                });
	            });
	            return willDeleteEls;
	        }

	        function renderFinally() {
	            each(willDeleteEls, function (els) {
	                each(els, function (el) {
	                    el.parent && el.parent.remove(el);
	                });
	            });
	            each(willInvisibleEls, function (el) {
	                el.invisible = true;
	                // Setting invisible is for optimizing, so no need to set dirty,
	                // just mark as invisible.
	                el.dirty();
	            });
	        }
	    },

	    /**
	     * @private
	     */
	    _doAnimation: function _doAnimation(containerGroup, renderResult, seriesModel, reRoot) {
	        if (!seriesModel.get('animation')) {
	            return;
	        }

	        var duration = seriesModel.get('animationDurationUpdate');
	        var easing = seriesModel.get('animationEasing');
	        var animationWrap = animationUtil.createWrap();

	        // Make delete animations.
	        each(renderResult.willDeleteEls, function (store, storageName) {
	            each(store, function (el, rawIndex) {
	                if (el.invisible) {
	                    return;
	                }

	                var parent = el.parent; // Always has parent, and parent is nodeGroup.
	                var target;

	                if (reRoot && reRoot.direction === 'drillDown') {
	                    target = parent === reRoot.rootNodeGroup
	                    // This is the content element of view root.
	                    // Only `content` will enter this branch, because
	                    // `background` and `nodeGroup` will not be deleted.
	                    ? {
	                        shape: {
	                            x: 0,
	                            y: 0,
	                            width: parent.__tmNodeWidth,
	                            height: parent.__tmNodeHeight
	                        },
	                        style: {
	                            opacity: 0
	                        }
	                    }
	                    // Others.
	                    : { style: { opacity: 0 } };
	                } else {
	                    var targetX = 0;
	                    var targetY = 0;

	                    if (!parent.__tmWillDelete) {
	                        // Let node animate to right-bottom corner, cooperating with fadeout,
	                        // which is appropriate for user understanding.
	                        // Divided by 2 for reRoot rolling up effect.
	                        targetX = parent.__tmNodeWidth / 2;
	                        targetY = parent.__tmNodeHeight / 2;
	                    }

	                    target = storageName === 'nodeGroup' ? { position: [targetX, targetY], style: { opacity: 0 } } : {
	                        shape: { x: targetX, y: targetY, width: 0, height: 0 },
	                        style: { opacity: 0 }
	                    };
	                }

	                target && animationWrap.add(el, target, duration, easing);
	            });
	        });

	        // Make other animations
	        each(this._storage, function (store, storageName) {
	            each(store, function (el, rawIndex) {
	                var last = renderResult.lastsForAnimation[storageName][rawIndex];
	                var target = {};

	                if (!last) {
	                    return;
	                }

	                if (storageName === 'nodeGroup') {
	                    if (last.old) {
	                        target.position = el.position.slice();
	                        el.attr('position', last.old);
	                    }
	                } else {
	                    if (last.old) {
	                        target.shape = zrUtil.extend({}, el.shape);
	                        el.setShape(last.old);
	                    }

	                    if (last.fadein) {
	                        el.setStyle('opacity', 0);
	                        target.style = { opacity: 1 };
	                    }
	                    // When animation is stopped for succedent animation starting,
	                    // el.style.opacity might not be 1
	                    else if (el.style.opacity !== 1) {
	                            target.style = { opacity: 1 };
	                        }
	                }

	                animationWrap.add(el, target, duration, easing);
	            });
	        }, this);

	        this._state = 'animating';

	        animationWrap.done(bind(function () {
	            this._state = 'ready';
	            renderResult.renderFinally();
	        }, this)).start();
	    },

	    /**
	     * @private
	     */
	    _resetController: function _resetController(api) {
	        var controller = this._controller;

	        // Init controller.
	        if (!controller) {
	            controller = this._controller = new RoamController(api.getZr());
	            controller.enable(this.seriesModel.get('roam'));
	            controller.on('pan', bind(this._onPan, this));
	            controller.on('zoom', bind(this._onZoom, this));
	        }

	        var rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());
	        controller.setContainsPoint(function (x, y) {
	            return rect.contain(x, y);
	        });
	    },

	    /**
	     * @private
	     */
	    _clearController: function _clearController() {
	        var controller = this._controller;
	        if (controller) {
	            controller.dispose();
	            controller = null;
	        }
	    },

	    /**
	     * @private
	     */
	    _onPan: function _onPan(dx, dy) {
	        this._mayClick = false;

	        if (this._state !== 'animating' && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)) {
	            // These param must not be cached.
	            var root = this.seriesModel.getData().tree.root;

	            if (!root) {
	                return;
	            }

	            var rootLayout = root.getLayout();

	            if (!rootLayout) {
	                return;
	            }

	            this.api.dispatchAction({
	                type: 'treemapMove',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                rootRect: {
	                    x: rootLayout.x + dx, y: rootLayout.y + dy,
	                    width: rootLayout.width, height: rootLayout.height
	                }
	            });
	        }
	    },

	    /**
	     * @private
	     */
	    _onZoom: function _onZoom(scale, mouseX, mouseY) {
	        this._mayClick = false;

	        if (this._state !== 'animating') {
	            // These param must not be cached.
	            var root = this.seriesModel.getData().tree.root;

	            if (!root) {
	                return;
	            }

	            var rootLayout = root.getLayout();

	            if (!rootLayout) {
	                return;
	            }

	            var rect = new BoundingRect(rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height);
	            var layoutInfo = this.seriesModel.layoutInfo;

	            // Transform mouse coord from global to containerGroup.
	            mouseX -= layoutInfo.x;
	            mouseY -= layoutInfo.y;

	            // Scale root bounding rect.
	            var m = matrix.create();
	            matrix.translate(m, m, [-mouseX, -mouseY]);
	            matrix.scale(m, m, [scale, scale]);
	            matrix.translate(m, m, [mouseX, mouseY]);

	            rect.applyTransform(m);

	            this.api.dispatchAction({
	                type: 'treemapRender',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                rootRect: {
	                    x: rect.x, y: rect.y,
	                    width: rect.width, height: rect.height
	                }
	            });
	        }
	    },

	    /**
	     * @private
	     */
	    _initEvents: function _initEvents(containerGroup) {
	        // FIXME
	        // 不用click以及silent的原因是，animate时视图设置silent true来避免click生效，
	        // 但是animate中，按下鼠标，animate结束后（silent设回为false）松开鼠标，
	        // 还是会触发click，期望是不触发。

	        // Mousedown occurs when drag start, and mouseup occurs when drag end,
	        // click event should not be triggered in that case.

	        containerGroup.on('mousedown', function (e) {
	            this._state === 'ready' && (this._mayClick = true);
	        }, this);
	        containerGroup.on('mouseup', function (e) {
	            if (this._mayClick) {
	                this._mayClick = false;
	                this._state === 'ready' && onClick.call(this, e);
	            }
	        }, this);

	        function onClick(e) {
	            var nodeClick = this.seriesModel.get('nodeClick', true);

	            if (!nodeClick) {
	                return;
	            }

	            var targetInfo = this.findTarget(e.offsetX, e.offsetY);

	            if (!targetInfo) {
	                return;
	            }

	            var node = targetInfo.node;
	            if (node.getLayout().isLeafRoot) {
	                this._rootToNode(targetInfo);
	            } else {
	                if (nodeClick === 'zoomToNode') {
	                    this._zoomToNode(targetInfo);
	                } else if (nodeClick === 'link') {
	                    var itemModel = node.hostTree.data.getItemModel(node.dataIndex);
	                    var link = itemModel.get('link', true);
	                    var linkTarget = itemModel.get('target', true) || 'blank';
	                    link && window.open(link, linkTarget);
	                }
	            }
	        }
	    },

	    /**
	     * @private
	     */
	    _renderBreadcrumb: function _renderBreadcrumb(seriesModel, api, targetInfo) {
	        if (!targetInfo) {
	            targetInfo = seriesModel.get('leafDepth', true) != null ? { node: seriesModel.getViewRoot() }
	            // FIXME
	            // better way?
	            // Find breadcrumb tail on center of containerGroup.
	            : this.findTarget(api.getWidth() / 2, api.getHeight() / 2);

	            if (!targetInfo) {
	                targetInfo = { node: seriesModel.getData().tree.root };
	            }
	        }

	        (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group))).render(seriesModel, api, targetInfo.node, bind(onSelect, this));

	        function onSelect(node) {
	            if (this._state !== 'animating') {
	                helper.aboveViewRoot(seriesModel.getViewRoot(), node) ? this._rootToNode({ node: node }) : this._zoomToNode({ node: node });
	            }
	        }
	    },

	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._clearController();
	        this._containerGroup && this._containerGroup.removeAll();
	        this._storage = createStorage();
	        this._state = 'ready';
	        this._breadcrumb && this._breadcrumb.remove();
	    },

	    dispose: function dispose() {
	        this._clearController();
	    },

	    /**
	     * @private
	     */
	    _zoomToNode: function _zoomToNode(targetInfo) {
	        this.api.dispatchAction({
	            type: 'treemapZoomToNode',
	            from: this.uid,
	            seriesId: this.seriesModel.id,
	            targetNode: targetInfo.node
	        });
	    },

	    /**
	     * @private
	     */
	    _rootToNode: function _rootToNode(targetInfo) {
	        this.api.dispatchAction({
	            type: 'treemapRootToNode',
	            from: this.uid,
	            seriesId: this.seriesModel.id,
	            targetNode: targetInfo.node
	        });
	    },

	    /**
	     * @public
	     * @param {number} x Global coord x.
	     * @param {number} y Global coord y.
	     * @return {Object} info If not found, return undefined;
	     * @return {number} info.node Target node.
	     * @return {number} info.offsetX x refer to target node.
	     * @return {number} info.offsetY y refer to target node.
	     */
	    findTarget: function findTarget(x, y) {
	        var targetInfo;
	        var viewRoot = this.seriesModel.getViewRoot();

	        viewRoot.eachNode({ attr: 'viewChildren', order: 'preorder' }, function (node) {
	            var bgEl = this._storage.background[node.getRawIndex()];
	            // If invisible, there might be no element.
	            if (bgEl) {
	                var point = bgEl.transformCoordToLocal(x, y);
	                var shape = bgEl.shape;

	                // For performance consideration, dont use 'getBoundingRect'.
	                if (shape.x <= point[0] && point[0] <= shape.x + shape.width && shape.y <= point[1] && point[1] <= shape.y + shape.height) {
	                    targetInfo = { node: node, offsetX: point[0], offsetY: point[1] };
	                } else {
	                    return false; // Suppress visit subtree.
	                }
	            }
	        }, this);

	        return targetInfo;
	    }

	});

	/**
	 * @inner
	 */
	function createStorage() {
	    return { nodeGroup: [], background: [], content: [] };
	}

	/**
	 * @inner
	 * @return Return undefined means do not travel further.
	 */
	function renderNode(seriesModel, thisStorage, oldStorage, reRoot, lastsForAnimation, willInvisibleEls, thisNode, oldNode, parentGroup, depth) {
	    // Whether under viewRoot.
	    if (!thisNode) {
	        // Deleting nodes will be performed finally. This method just find
	        // element from old storage, or create new element, set them to new
	        // storage, and set styles.
	        return;
	    }

	    var thisLayout = thisNode.getLayout();

	    if (!thisLayout || !thisLayout.isInView) {
	        return;
	    }

	    var thisWidth = thisLayout.width;
	    var thisHeight = thisLayout.height;
	    var thisInvisible = thisLayout.invisible;

	    var thisRawIndex = thisNode.getRawIndex();
	    var oldRawIndex = oldNode && oldNode.getRawIndex();

	    // Node group
	    var group = giveGraphic('nodeGroup', Group);

	    if (!group) {
	        return;
	    }

	    parentGroup.add(group);
	    // x,y are not set when el is above view root.
	    group.attr('position', [thisLayout.x || 0, thisLayout.y || 0]);
	    group.__tmNodeWidth = thisWidth;
	    group.__tmNodeHeight = thisHeight;

	    if (thisLayout.isAboveViewRoot) {
	        return group;
	    }

	    // Background
	    var bg = giveGraphic('background', Rect, depth, Z_BG);
	    if (bg) {
	        bg.setShape({ x: 0, y: 0, width: thisWidth, height: thisHeight });
	        updateStyle(bg, function () {
	            bg.setStyle('fill', thisNode.getVisual('borderColor', true));
	        });
	        group.add(bg);
	    }

	    var thisViewChildren = thisNode.viewChildren;

	    // No children, render content.
	    if (!thisViewChildren || !thisViewChildren.length) {
	        var content = giveGraphic('content', Rect, depth, Z_CONTENT);
	        content && renderContent(group);
	    }

	    return group;

	    // ----------------------------
	    // | Procedures in renderNode |
	    // ----------------------------

	    function renderContent(group) {
	        // For tooltip.
	        content.dataIndex = thisNode.dataIndex;
	        content.seriesIndex = seriesModel.seriesIndex;

	        var borderWidth = thisLayout.borderWidth;
	        var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);
	        var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);

	        content.culling = true;
	        content.setShape({
	            x: borderWidth,
	            y: borderWidth,
	            width: contentWidth,
	            height: contentHeight
	        });

	        var visualColor = thisNode.getVisual('color', true);
	        updateStyle(content, function () {
	            var normalStyle = { fill: visualColor };
	            var emphasisStyle = thisNode.getModel('itemStyle.emphasis').getItemStyle();

	            prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight);

	            content.setStyle(normalStyle);
	            graphic.setHoverStyle(content, emphasisStyle);
	        });

	        group.add(content);
	    }

	    function updateStyle(element, cb) {
	        if (!thisInvisible) {
	            // If invisible, do not set visual, otherwise the element will
	            // change immediately before animation. We think it is OK to
	            // remain its origin color when moving out of the view window.
	            cb();

	            if (!element.__tmWillVisible) {
	                element.invisible = false;
	            }
	        } else {
	            // Delay invisible setting utill animation finished,
	            // avoid element vanish suddenly before animation.
	            !element.invisible && willInvisibleEls.push(element);
	        }
	    }

	    function prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight) {
	        var nodeModel = thisNode.getModel();
	        var text = nodeModel.get('name');
	        if (thisLayout.isLeafRoot) {
	            var iconChar = seriesModel.get('drillDownIcon', true);
	            text = iconChar ? iconChar + ' ' + text : text;
	        }

	        setText(text, normalStyle, nodeModel, PATH_LABEL_NORMAL, visualColor, contentWidth, contentHeight);
	        setText(text, emphasisStyle, nodeModel, PATH_LABEL_EMPHASIS, visualColor, contentWidth, contentHeight);
	    }

	    function setText(text, style, nodeModel, labelPath, visualColor, contentWidth, contentHeight) {
	        var labelModel = nodeModel.getModel(labelPath);
	        var labelTextStyleModel = labelModel.getModel('textStyle');

	        graphic.setText(style, labelModel, visualColor);

	        // text.align and text.baseline is not included by graphic.setText,
	        // because in most cases the two attributes are not exposed to user,
	        // except in treemap.
	        style.textAlign = labelTextStyleModel.get('align');
	        style.textVerticalAlign = labelTextStyleModel.get('baseline');

	        var textRect = labelTextStyleModel.getTextRect(text);
	        if (!labelModel.getShallow('show') || textRect.height > contentHeight) {
	            style.text = '';
	        } else if (textRect.width > contentWidth) {
	            style.text = labelTextStyleModel.get('ellipsis') ? labelTextStyleModel.truncateText(text, contentWidth, null, { minChar: 2 }) : '';
	        } else {
	            style.text = text;
	        }
	    }

	    function giveGraphic(storageName, Ctor, depth, z) {
	        var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];
	        var lasts = lastsForAnimation[storageName];

	        if (element) {
	            // Remove from oldStorage
	            oldStorage[storageName][oldRawIndex] = null;
	            prepareAnimationWhenHasOld(lasts, element, storageName);
	        }
	        // If invisible and no old element, do not create new element (for optimizing).
	        else if (!thisInvisible) {
	                element = new Ctor({ z: calculateZ(depth, z) });
	                element.__tmDepth = depth;
	                element.__tmStorageName = storageName;
	                prepareAnimationWhenNoOld(lasts, element, storageName);
	            }

	        // Set to thisStorage
	        return thisStorage[storageName][thisRawIndex] = element;
	    }

	    function prepareAnimationWhenHasOld(lasts, element, storageName) {
	        var lastCfg = lasts[thisRawIndex] = {};
	        lastCfg.old = storageName === 'nodeGroup' ? element.position.slice() : zrUtil.extend({}, element.shape);
	    }

	    // If a element is new, we need to find the animation start point carefully,
	    // otherwise it will looks strange when 'zoomToNode'.
	    function prepareAnimationWhenNoOld(lasts, element, storageName) {
	        var lastCfg = lasts[thisRawIndex] = {};
	        var parentNode = thisNode.parentNode;

	        if (parentNode && (!reRoot || reRoot.direction === 'drillDown')) {
	            var parentOldX = 0;
	            var parentOldY = 0;

	            // New nodes appear from right-bottom corner in 'zoomToNode' animation.
	            // For convenience, get old bounding rect from background.
	            var parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];
	            if (!reRoot && parentOldBg && parentOldBg.old) {
	                parentOldX = parentOldBg.old.width;
	                parentOldY = parentOldBg.old.height;
	            }

	            // When no parent old shape found, its parent is new too,
	            // so we can just use {x:0, y:0}.
	            lastCfg.old = storageName === 'nodeGroup' ? [0, parentOldY] : { x: parentOldX, y: parentOldY, width: 0, height: 0 };
	        }

	        // Fade in, user can be aware that these nodes are new.
	        lastCfg.fadein = storageName !== 'nodeGroup';
	    }
	}

	// We can not set all backgroud with the same z, Because the behaviour of
	// drill down and roll up differ background creation sequence from tree
	// hierarchy sequence, which cause that lowser background element overlap
	// upper ones. So we calculate z based on depth.
	// Moreover, we try to shrink down z interval to [0, 1] to avoid that
	// treemap with large z overlaps other components.
	function calculateZ(depth, zInLevel) {
	    var zb = depth * Z_BASE + zInLevel;
	    return (zb - 1) / zb;
	}

/***/ },
/* 691 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var layout = __webpack_require__(521);
	var zrUtil = __webpack_require__(504);
	var helper = __webpack_require__(689);

	var TEXT_PADDING = 8;
	var ITEM_GAP = 8;
	var ARRAY_LENGTH = 5;

	function Breadcrumb(containerGroup) {
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */
	    this.group = new graphic.Group();

	    containerGroup.add(this.group);
	}

	Breadcrumb.prototype = {

	    constructor: Breadcrumb,

	    render: function render(seriesModel, api, targetNode, onSelect) {
	        var model = seriesModel.getModel('breadcrumb');
	        var thisGroup = this.group;

	        thisGroup.removeAll();

	        if (!model.get('show') || !targetNode) {
	            return;
	        }

	        var normalStyleModel = model.getModel('itemStyle.normal');
	        // var emphasisStyleModel = model.getModel('itemStyle.emphasis');
	        var textStyleModel = normalStyleModel.getModel('textStyle');

	        var layoutParam = {
	            pos: {
	                left: model.get('left'),
	                right: model.get('right'),
	                top: model.get('top'),
	                bottom: model.get('bottom')
	            },
	            box: {
	                width: api.getWidth(),
	                height: api.getHeight()
	            },
	            emptyItemWidth: model.get('emptyItemWidth'),
	            totalWidth: 0,
	            renderList: []
	        };

	        this._prepare(targetNode, layoutParam, textStyleModel);
	        this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);

	        layout.positionElement(thisGroup, layoutParam.pos, layoutParam.box);
	    },

	    /**
	     * Prepare render list and total width
	     * @private
	     */
	    _prepare: function _prepare(targetNode, layoutParam, textStyleModel) {
	        for (var node = targetNode; node; node = node.parentNode) {
	            var text = node.getModel().get('name');
	            var textRect = textStyleModel.getTextRect(text);
	            var itemWidth = Math.max(textRect.width + TEXT_PADDING * 2, layoutParam.emptyItemWidth);
	            layoutParam.totalWidth += itemWidth + ITEM_GAP;
	            layoutParam.renderList.push({ node: node, text: text, width: itemWidth });
	        }
	    },

	    /**
	     * @private
	     */
	    _renderContent: function _renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect) {
	        // Start rendering.
	        var lastX = 0;
	        var emptyItemWidth = layoutParam.emptyItemWidth;
	        var height = seriesModel.get('breadcrumb.height');
	        var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);
	        var totalWidth = layoutParam.totalWidth;
	        var renderList = layoutParam.renderList;

	        for (var i = renderList.length - 1; i >= 0; i--) {
	            var item = renderList[i];
	            var itemNode = item.node;
	            var itemWidth = item.width;
	            var text = item.text;

	            // Hdie text and shorten width if necessary.
	            if (totalWidth > availableSize.width) {
	                totalWidth -= itemWidth - emptyItemWidth;
	                itemWidth = emptyItemWidth;
	                text = '';
	            }

	            var el = new graphic.Polygon({
	                shape: {
	                    points: makeItemPoints(lastX, 0, itemWidth, height, i === renderList.length - 1, i === 0)
	                },
	                style: zrUtil.defaults(normalStyleModel.getItemStyle(), {
	                    lineJoin: 'bevel',
	                    text: text,
	                    textFill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont()
	                }),
	                z: 10,
	                onclick: zrUtil.curry(onSelect, itemNode)
	            });
	            this.group.add(el);

	            packEventData(el, seriesModel, itemNode);

	            lastX += itemWidth + ITEM_GAP;
	        }
	    },

	    /**
	     * @override
	     */
	    remove: function remove() {
	        this.group.removeAll();
	    }
	};

	function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {
	    var points = [[head ? x : x - ARRAY_LENGTH, y], [x + itemWidth, y], [x + itemWidth, y + itemHeight], [head ? x : x - ARRAY_LENGTH, y + itemHeight]];
	    !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);
	    !head && points.push([x, y + itemHeight / 2]);
	    return points;
	}

	// Package custom mouse event.
	function packEventData(el, seriesModel, itemNode) {
	    el.eventData = {
	        componentType: 'series',
	        componentSubType: 'treemap',
	        seriesIndex: seriesModel.componentIndex,
	        seriesName: seriesModel.name,
	        seriesType: 'treemap',
	        selfType: 'breadcrumb', // Distinguish with click event on treemap node.
	        nodeData: {
	            dataIndex: itemNode && itemNode.dataIndex,
	            name: itemNode && itemNode.name
	        },
	        treePathInfo: itemNode && helper.wrapTreePathInfo(itemNode, seriesModel)
	    };
	}

	module.exports = Breadcrumb;

/***/ },
/* 692 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	/**
	 * @param {number} [time=500] Time in ms
	 * @param {string} [easing='linear']
	 * @param {number} [delay=0]
	 * @param {Function} [callback]
	 *
	 * @example
	 *  // Animate position
	 *  animation
	 *      .createWrap()
	 *      .add(el1, {position: [10, 10]})
	 *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)
	 *      .done(function () { // done })
	 *      .start('cubicOut');
	 */
	function createWrap() {

	    var storage = [];
	    var elExistsMap = {};
	    var doneCallback;

	    return {

	        /**
	         * Caution: a el can only be added once, otherwise 'done'
	         * might not be called. This method checks this (by el.id),
	         * suppresses adding and returns false when existing el found.
	         *
	         * @param {modele:zrender/Element} el
	         * @param {Object} target
	         * @param {number} [time=500]
	         * @param {number} [delay=0]
	         * @param {string} [easing='linear']
	         * @return {boolean} Whether adding succeeded.
	         *
	         * @example
	         *     add(el, target, time, delay, easing);
	         *     add(el, target, time, easing);
	         *     add(el, target, time);
	         *     add(el, target);
	         */
	        add: function add(el, target, time, delay, easing) {
	            if (zrUtil.isString(delay)) {
	                easing = delay;
	                delay = 0;
	            }

	            if (elExistsMap[el.id]) {
	                return false;
	            }
	            elExistsMap[el.id] = 1;

	            storage.push({ el: el, target: target, time: time, delay: delay, easing: easing });

	            return true;
	        },

	        /**
	         * Only execute when animation finished. Will not execute when any
	         * of 'stop' or 'stopAnimation' called.
	         *
	         * @param {Function} callback
	         */
	        done: function done(callback) {
	            doneCallback = callback;
	            return this;
	        },

	        /**
	         * Will stop exist animation firstly.
	         */
	        start: function start() {
	            var count = storage.length;

	            for (var i = 0, len = storage.length; i < len; i++) {
	                var item = storage[i];
	                item.el.animateTo(item.target, item.time, item.delay, item.easing, done);
	            }

	            return this;

	            function done() {
	                count--;
	                if (!count) {
	                    storage.length = 0;
	                    elExistsMap = {};
	                    doneCallback && doneCallback();
	                }
	            }
	        }
	    };
	}

	module.exports = { createWrap: createWrap };

/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Treemap action
	 */

	var echarts = __webpack_require__(501);
	var helper = __webpack_require__(689);

	var noop = function noop() {};

	var actionTypes = ['treemapZoomToNode', 'treemapRender', 'treemapMove'];

	for (var i = 0; i < actionTypes.length; i++) {
	    echarts.registerAction({ type: actionTypes[i], update: 'updateView' }, noop);
	}

	echarts.registerAction({ type: 'treemapRootToNode', update: 'updateView' }, function (payload, ecModel) {

	    ecModel.eachComponent({ mainType: 'series', subType: 'treemap', query: payload }, handleRootToNode);

	    function handleRootToNode(model, index) {
	        var targetInfo = helper.retrieveTargetInfo(payload, model);

	        if (targetInfo) {
	            var originViewRoot = model.getViewRoot();
	            if (originViewRoot) {
	                payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node) ? 'rollUp' : 'drillDown';
	            }
	            model.resetViewRoot(targetInfo.node);
	        }
	    }
	});

/***/ },
/* 694 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var VisualMapping = __webpack_require__(695);
	var zrColor = __webpack_require__(539);
	var zrUtil = __webpack_require__(504);
	var isArray = zrUtil.isArray;

	var ITEM_STYLE_NORMAL = 'itemStyle.normal';

	module.exports = function (ecModel, api, payload) {

	    var condition = { mainType: 'series', subType: 'treemap', query: payload };
	    ecModel.eachComponent(condition, function (seriesModel) {

	        var tree = seriesModel.getData().tree;
	        var root = tree.root;
	        var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);

	        if (root.isRemoved()) {
	            return;
	        }

	        var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {
	            return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;
	        });

	        travelTree(root, // Visual should calculate from tree root but not view root.
	        {}, levelItemStyles, seriesItemStyleModel, seriesModel.getViewRoot().getAncestors(), seriesModel);
	    });
	};

	function travelTree(node, designatedVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel) {
	    var nodeModel = node.getModel();
	    var nodeLayout = node.getLayout();

	    // Optimize
	    if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {
	        return;
	    }

	    var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);
	    var levelItemStyle = levelItemStyles[node.depth];
	    var visuals = buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel);

	    // calculate border color
	    var borderColor = nodeItemStyleModel.get('borderColor');
	    var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');
	    var thisNodeColor;
	    if (borderColorSaturation != null) {
	        // For performance, do not always execute 'calculateColor'.
	        thisNodeColor = calculateColor(visuals, node);
	        borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);
	    }
	    node.setVisual('borderColor', borderColor);

	    var viewChildren = node.viewChildren;
	    if (!viewChildren || !viewChildren.length) {
	        thisNodeColor = calculateColor(visuals, node);
	        // Apply visual to this node.
	        node.setVisual('color', thisNodeColor);
	    } else {
	        var mapping = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren);

	        // Designate visual to children.
	        zrUtil.each(viewChildren, function (child, index) {
	            // If higher than viewRoot, only ancestors of viewRoot is needed to visit.
	            if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {
	                var childVisual = mapVisual(nodeModel, visuals, child, index, mapping, seriesModel);
	                travelTree(child, childVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel);
	            }
	        });
	    }
	}

	function buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel) {
	    var visuals = zrUtil.extend({}, designatedVisual);

	    zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {
	        // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel
	        var val = nodeItemStyleModel.get(visualName, true); // Ignore parent
	        val == null && levelItemStyle && (val = levelItemStyle[visualName]);
	        val == null && (val = designatedVisual[visualName]);
	        val == null && (val = seriesItemStyleModel.get(visualName));

	        val != null && (visuals[visualName] = val);
	    });

	    return visuals;
	}

	function calculateColor(visuals) {
	    var color = getValueVisualDefine(visuals, 'color');

	    if (color) {
	        var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');
	        var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');
	        if (colorSaturation) {
	            color = zrColor.modifyHSL(color, null, null, colorSaturation);
	        }
	        if (colorAlpha) {
	            color = zrColor.modifyAlpha(color, colorAlpha);
	        }

	        return color;
	    }
	}

	function calculateBorderColor(borderColorSaturation, thisNodeColor) {
	    return thisNodeColor != null ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;
	}

	function getValueVisualDefine(visuals, name) {
	    var value = visuals[name];
	    if (value != null && value !== 'none') {
	        return value;
	    }
	}

	function buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {
	    if (!viewChildren || !viewChildren.length) {
	        return;
	    }

	    var rangeVisual = getRangeVisual(nodeModel, 'color') || visuals.color != null && visuals.color !== 'none' && (getRangeVisual(nodeModel, 'colorAlpha') || getRangeVisual(nodeModel, 'colorSaturation'));

	    if (!rangeVisual) {
	        return;
	    }

	    var visualMin = nodeModel.get('visualMin');
	    var visualMax = nodeModel.get('visualMax');
	    var dataExtent = nodeLayout.dataExtent.slice();
	    visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);
	    visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);

	    var colorMappingBy = nodeModel.get('colorMappingBy');
	    var opt = {
	        type: rangeVisual.name,
	        dataExtent: dataExtent,
	        visual: rangeVisual.range
	    };
	    if (opt.type === 'color' && (colorMappingBy === 'index' || colorMappingBy === 'id')) {
	        opt.mappingMethod = 'category';
	        opt.loop = true;
	        // categories is ordinal, so do not set opt.categories.
	    } else {
	        opt.mappingMethod = 'linear';
	    }

	    var mapping = new VisualMapping(opt);
	    mapping.__drColorMappingBy = colorMappingBy;

	    return mapping;
	}

	// Notice: If we dont have the attribute 'colorRange', but only use
	// attribute 'color' to represent both concepts of 'colorRange' and 'color',
	// (It means 'colorRange' when 'color' is Array, means 'color' when not array),
	// this problem will be encountered:
	// If a level-1 node dont have children, and its siblings has children,
	// and colorRange is set on level-1, then the node can not be colored.
	// So we separate 'colorRange' and 'color' to different attributes.
	function getRangeVisual(nodeModel, name) {
	    // 'colorRange', 'colorARange', 'colorSRange'.
	    // If not exsits on this node, fetch from levels and series.
	    var range = nodeModel.get(name);
	    return isArray(range) && range.length ? { name: name, range: range } : null;
	}

	function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {
	    var childVisuals = zrUtil.extend({}, visuals);

	    if (mapping) {
	        var mappingType = mapping.type;
	        var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;
	        var value = colorMappingBy === 'index' ? index : colorMappingBy === 'id' ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get('visualDimension'));

	        childVisuals[mappingType] = mapping.mapValueToVisual(value);
	    }

	    return childVisuals;
	}

/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Visual mapping.
	 */

	var zrUtil = __webpack_require__(504);
	var zrColor = __webpack_require__(539);
	var linearMap = __webpack_require__(507).linearMap;
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;

	var CATEGORY_DEFAULT_VISUAL_INDEX = -1;

	/**
	 * @param {Object} option
	 * @param {string} [option.type] See visualHandlers.
	 * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'
	 * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],
	 *                                              required when mappingMethod is 'linear'
	 * @param {Array.<Object>=} [option.pieceList] [
	 *                                             {value: someValue},
	 *                                             {interval: [min1, max1], visual: {...}},
	 *                                             {interval: [min2, max2]}
	 *                                             ],
	 *                                            required when mappingMethod is 'piecewise'.
	 *                                            Visual for only each piece can be specified.
	 * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']
	 *                                            required when mappingMethod is 'category'.
	 *                                            If no option.categories, categories is set
	 *                                            as [0, 1, 2, ...].
	 * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.
	 * @param {(Array|Object|*)} [option.visual]  Visual data.
	 *                                            when mappingMethod is 'category',
	 *                                            visual data can be array or object
	 *                                            (like: {cate1: '#222', none: '#fff'})
	 *                                            or primary types (which represents
	 *                                            defualt category visual), otherwise visual
	 *                                            can be array or primary (which will be
	 *                                            normalized to array).
	 *
	 */
	var VisualMapping = function VisualMapping(option) {
	    var mappingMethod = option.mappingMethod;
	    var visualType = option.type;

	    /**
	     * @readOnly
	     * @type {Object}
	     */
	    var thisOption = this.option = zrUtil.clone(option);

	    /**
	     * @readOnly
	     * @type {string}
	     */
	    this.type = visualType;

	    /**
	     * @readOnly
	     * @type {string}
	     */
	    this.mappingMethod = mappingMethod;

	    /**
	     * @private
	     * @type {Function}
	     */
	    this._normalizeData = normalizers[mappingMethod];

	    var visualHandler = visualHandlers[visualType];

	    /**
	     * @public
	     * @type {Function}
	     */
	    this.applyVisual = visualHandler.applyVisual;

	    /**
	     * @public
	     * @type {Function}
	     */
	    this.getColorMapper = visualHandler.getColorMapper;

	    /**
	     * @private
	     * @type {Function}
	     */
	    this._doMap = visualHandler._doMap[mappingMethod];

	    if (mappingMethod === 'piecewise') {
	        normalizeVisualRange(thisOption);
	        preprocessForPiecewise(thisOption);
	    } else if (mappingMethod === 'category') {
	        thisOption.categories ? preprocessForSpecifiedCategory(thisOption)
	        // categories is ordinal when thisOption.categories not specified,
	        // which need no more preprocess except normalize visual.
	        : normalizeVisualRange(thisOption, true);
	    } else {
	        // mappingMethod === 'linear' or 'fixed'
	        zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);
	        normalizeVisualRange(thisOption);
	    }
	};

	VisualMapping.prototype = {

	    constructor: VisualMapping,

	    mapValueToVisual: function mapValueToVisual(value) {
	        var normalized = this._normalizeData(value);
	        return this._doMap(normalized, value);
	    },

	    getNormalizer: function getNormalizer() {
	        return zrUtil.bind(this._normalizeData, this);
	    }
	};

	var visualHandlers = VisualMapping.visualHandlers = {

	    color: {

	        applyVisual: makeApplyVisual('color'),

	        /**
	         * Create a mapper function
	         * @return {Function}
	         */
	        getColorMapper: function getColorMapper() {
	            var thisOption = this.option;
	            var parsedVisual = zrUtil.map(thisOption.visual, zrColor.parse);

	            return zrUtil.bind(thisOption.mappingMethod === 'category' ? function (value, isNormalized) {
	                !isNormalized && (value = this._normalizeData(value));
	                return doMapCategory.call(this, value);
	            } : function (value, isNormalized, out) {
	                // If output rgb array
	                // which will be much faster and useful in pixel manipulation
	                var returnRGBArray = !!out;
	                !isNormalized && (value = this._normalizeData(value));
	                out = zrColor.fastMapToColor(value, parsedVisual, out);
	                return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');
	            }, this);
	        },

	        _doMap: {
	            linear: function linear(normalized) {
	                return zrColor.mapToColor(normalized, this.option.visual);
	            },
	            category: doMapCategory,
	            piecewise: function piecewise(normalized, value) {
	                var result = getSpecifiedVisual.call(this, value);
	                if (result == null) {
	                    result = zrColor.mapToColor(normalized, this.option.visual);
	                }
	                return result;
	            },
	            fixed: doMapFixed
	        }
	    },

	    colorHue: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyHSL(color, value);
	    }),

	    colorSaturation: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyHSL(color, null, value);
	    }),

	    colorLightness: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyHSL(color, null, null, value);
	    }),

	    colorAlpha: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyAlpha(color, value);
	    }),

	    opacity: {
	        applyVisual: makeApplyVisual('opacity'),
	        _doMap: makeDoMap([0, 1])
	    },

	    symbol: {
	        applyVisual: function applyVisual(value, getter, setter) {
	            var symbolCfg = this.mapValueToVisual(value);
	            if (zrUtil.isString(symbolCfg)) {
	                setter('symbol', symbolCfg);
	            } else if (isObject(symbolCfg)) {
	                for (var name in symbolCfg) {
	                    if (symbolCfg.hasOwnProperty(name)) {
	                        setter(name, symbolCfg[name]);
	                    }
	                }
	            }
	        },
	        _doMap: {
	            linear: doMapToArray,
	            category: doMapCategory,
	            piecewise: function piecewise(normalized, value) {
	                var result = getSpecifiedVisual.call(this, value);
	                if (result == null) {
	                    result = doMapToArray.call(this, normalized);
	                }
	                return result;
	            },
	            fixed: doMapFixed
	        }
	    },

	    symbolSize: {
	        applyVisual: makeApplyVisual('symbolSize'),
	        _doMap: makeDoMap([0, 1])
	    }
	};

	function preprocessForPiecewise(thisOption) {
	    var pieceList = thisOption.pieceList;
	    thisOption.hasSpecialVisual = false;

	    zrUtil.each(pieceList, function (piece, index) {
	        piece.originIndex = index;
	        // piece.visual is "result visual value" but not
	        // a visual range, so it does not need to be normalized.
	        if (piece.visual != null) {
	            thisOption.hasSpecialVisual = true;
	        }
	    });
	}

	function preprocessForSpecifiedCategory(thisOption) {
	    // Hash categories.
	    var categories = thisOption.categories;
	    var visual = thisOption.visual;

	    var categoryMap = thisOption.categoryMap = {};
	    each(categories, function (cate, index) {
	        categoryMap[cate] = index;
	    });

	    // Process visual map input.
	    if (!zrUtil.isArray(visual)) {
	        var visualArr = [];

	        if (zrUtil.isObject(visual)) {
	            each(visual, function (v, cate) {
	                var index = categoryMap[cate];
	                visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;
	            });
	        } else {
	            // Is primary type, represents default visual.
	            visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
	        }

	        visual = thisOption.visual = visualArr;
	    }

	    // Remove categories that has no visual,
	    // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.
	    for (var i = categories.length - 1; i >= 0; i--) {
	        if (visual[i] == null) {
	            delete categoryMap[categories[i]];
	            categories.pop();
	        }
	    }
	}

	function normalizeVisualRange(thisOption, isCategory) {
	    var visual = thisOption.visual;
	    var visualArr = [];

	    if (zrUtil.isObject(visual)) {
	        each(visual, function (v) {
	            visualArr.push(v);
	        });
	    } else if (visual != null) {
	        visualArr.push(visual);
	    }

	    var doNotNeedPair = { color: 1, symbol: 1 };

	    if (!isCategory && visualArr.length === 1 && !doNotNeedPair.hasOwnProperty(thisOption.type)) {
	        // Do not care visualArr.length === 0, which is illegal.
	        visualArr[1] = visualArr[0];
	    }

	    thisOption.visual = visualArr;
	}

	function makePartialColorVisualHandler(applyValue) {
	    return {
	        applyVisual: function applyVisual(value, getter, setter) {
	            value = this.mapValueToVisual(value);
	            // Must not be array value
	            setter('color', applyValue(getter('color'), value));
	        },
	        _doMap: makeDoMap([0, 1])
	    };
	}

	function doMapToArray(normalized) {
	    var visual = this.option.visual;
	    return visual[Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))] || {};
	}

	function makeApplyVisual(visualType) {
	    return function (value, getter, setter) {
	        setter(visualType, this.mapValueToVisual(value));
	    };
	}

	function doMapCategory(normalized) {
	    var visual = this.option.visual;
	    return visual[this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX ? normalized % visual.length : normalized];
	}

	function doMapFixed() {
	    return this.option.visual[0];
	}

	function makeDoMap(sourceExtent) {
	    return {
	        linear: function linear(normalized) {
	            return linearMap(normalized, sourceExtent, this.option.visual, true);
	        },
	        category: doMapCategory,
	        piecewise: function piecewise(normalized, value) {
	            var result = getSpecifiedVisual.call(this, value);
	            if (result == null) {
	                result = linearMap(normalized, sourceExtent, this.option.visual, true);
	            }
	            return result;
	        },
	        fixed: doMapFixed
	    };
	}

	function getSpecifiedVisual(value) {
	    var thisOption = this.option;
	    var pieceList = thisOption.pieceList;
	    if (thisOption.hasSpecialVisual) {
	        var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
	        var piece = pieceList[pieceIndex];
	        if (piece && piece.visual) {
	            return piece.visual[this.type];
	        }
	    }
	}

	/**
	 * Normalizers by mapping methods.
	 */
	var normalizers = {

	    linear: function linear(value) {
	        return linearMap(value, this.option.dataExtent, [0, 1], true);
	    },

	    piecewise: function piecewise(value) {
	        var pieceList = this.option.pieceList;
	        var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);
	        if (pieceIndex != null) {
	            return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
	        }
	    },

	    category: function category(value) {
	        var index = this.option.categories ? this.option.categoryMap[value] : value; // ordinal
	        return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
	    },

	    fixed: zrUtil.noop
	};

	/**
	 * List available visual types.
	 *
	 * @public
	 * @return {Array.<string>}
	 */
	VisualMapping.listVisualTypes = function () {
	    var visualTypes = [];
	    zrUtil.each(visualHandlers, function (handler, key) {
	        visualTypes.push(key);
	    });
	    return visualTypes;
	};

	/**
	 * @public
	 */
	VisualMapping.addVisualHandler = function (name, handler) {
	    visualHandlers[name] = handler;
	};

	/**
	 * @public
	 */
	VisualMapping.isValidType = function (visualType) {
	    return visualHandlers.hasOwnProperty(visualType);
	};

	/**
	 * Convinent method.
	 * Visual can be Object or Array or primary type.
	 *
	 * @public
	 */
	VisualMapping.eachVisual = function (visual, callback, context) {
	    if (zrUtil.isObject(visual)) {
	        zrUtil.each(visual, callback, context);
	    } else {
	        callback.call(context, visual);
	    }
	};

	VisualMapping.mapVisual = function (visual, callback, context) {
	    var isPrimary;
	    var newVisual = zrUtil.isArray(visual) ? [] : zrUtil.isObject(visual) ? {} : (isPrimary = true, null);

	    VisualMapping.eachVisual(visual, function (v, key) {
	        var newVal = callback.call(context, v, key);
	        isPrimary ? newVisual = newVal : newVisual[key] = newVal;
	    });
	    return newVisual;
	};

	/**
	 * @public
	 * @param {Object} obj
	 * @return {Oject} new object containers visual values.
	 *                 If no visuals, return null.
	 */
	VisualMapping.retrieveVisuals = function (obj) {
	    var ret = {};
	    var hasVisual;

	    obj && each(visualHandlers, function (h, visualType) {
	        if (obj.hasOwnProperty(visualType)) {
	            ret[visualType] = obj[visualType];
	            hasVisual = true;
	        }
	    });

	    return hasVisual ? ret : null;
	};

	/**
	 * Give order to visual types, considering colorSaturation, colorAlpha depends on color.
	 *
	 * @public
	 * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}
	 *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']
	 * @return {Array.<string>} Sorted visual types.
	 */
	VisualMapping.prepareVisualTypes = function (visualTypes) {
	    if (isObject(visualTypes)) {
	        var types = [];
	        each(visualTypes, function (item, type) {
	            types.push(type);
	        });
	        visualTypes = types;
	    } else if (zrUtil.isArray(visualTypes)) {
	        visualTypes = visualTypes.slice();
	    } else {
	        return [];
	    }

	    visualTypes.sort(function (type1, type2) {
	        // color should be front of colorSaturation, colorAlpha, ...
	        // symbol and symbolSize do not matter.
	        return type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0 ? 1 : -1;
	    });

	    return visualTypes;
	};

	/**
	 * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.
	 * Other visuals are only depends on themself.
	 *
	 * @public
	 * @param {string} visualType1
	 * @param {string} visualType2
	 * @return {boolean}
	 */
	VisualMapping.dependsOn = function (visualType1, visualType2) {
	    return visualType2 === 'color' ? !!(visualType1 && visualType1.indexOf(visualType2) === 0) : visualType1 === visualType2;
	};

	/**
	 * @param {number} value
	 * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]
	 *                         Always from small to big.
	 * @param {boolean} [findClosestWhenOutside=false]
	 * @return {number} index
	 */
	VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {
	    var possibleI;
	    var abs = Infinity;

	    // value has the higher priority.
	    for (var i = 0, len = pieceList.length; i < len; i++) {
	        var pieceValue = pieceList[i].value;
	        if (pieceValue != null) {
	            if (pieceValue === value) {
	                return i;
	            }
	            findClosestWhenOutside && updatePossible(pieceValue, i);
	        }
	    }

	    for (var i = 0, len = pieceList.length; i < len; i++) {
	        var piece = pieceList[i];
	        var interval = piece.interval;
	        var close = piece.close;

	        if (interval) {
	            if (interval[0] === -Infinity) {
	                if (littleThan(close[1], value, interval[1])) {
	                    return i;
	                }
	            } else if (interval[1] === Infinity) {
	                if (littleThan(close[0], interval[0], value)) {
	                    return i;
	                }
	            } else if (littleThan(close[0], interval[0], value) && littleThan(close[1], value, interval[1])) {
	                return i;
	            }
	            findClosestWhenOutside && updatePossible(interval[0], i);
	            findClosestWhenOutside && updatePossible(interval[1], i);
	        }
	    }

	    if (findClosestWhenOutside) {
	        return value === Infinity ? pieceList.length - 1 : value === -Infinity ? 0 : possibleI;
	    }

	    function updatePossible(val, index) {
	        var newAbs = Math.abs(val - value);
	        if (newAbs < abs) {
	            abs = newAbs;
	            possibleI = index;
	        }
	    }
	};

	function littleThan(close, a, b) {
	    return close ? a <= b : a < b;
	}

	module.exports = VisualMapping;

/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var layout = __webpack_require__(521);
	var helper = __webpack_require__(689);
	var BoundingRect = __webpack_require__(509);
	var helper = __webpack_require__(689);

	var mathMax = Math.max;
	var mathMin = Math.min;
	var parsePercent = numberUtil.parsePercent;
	var retrieveValue = zrUtil.retrieve;
	var each = zrUtil.each;

	/**
	 * @public
	 */
	function update(ecModel, api, payload) {
	    // Layout result in each node:
	    // {x, y, width, height, area, borderWidth}
	    var condition = { mainType: 'series', subType: 'treemap', query: payload };
	    ecModel.eachComponent(condition, function (seriesModel) {

	        var ecWidth = api.getWidth();
	        var ecHeight = api.getHeight();
	        var seriesOption = seriesModel.option;

	        var layoutInfo = layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });

	        var size = seriesOption.size || []; // Compatible with ec2.
	        var containerWidth = parsePercent(retrieveValue(layoutInfo.width, size[0]), ecWidth);
	        var containerHeight = parsePercent(retrieveValue(layoutInfo.height, size[1]), ecHeight);

	        // Fetch payload info.
	        var payloadType = payload && payload.type;
	        var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	        var rootRect = payloadType === 'treemapRender' || payloadType === 'treemapMove' ? payload.rootRect : null;
	        var viewRoot = seriesModel.getViewRoot();
	        var viewAbovePath = helper.getPathToRoot(viewRoot);

	        if (payloadType !== 'treemapMove') {
	            var rootSize = payloadType === 'treemapZoomToNode' ? estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) : rootRect ? [rootRect.width, rootRect.height] : [containerWidth, containerHeight];

	            var sort = seriesOption.sort;
	            if (sort && sort !== 'asc' && sort !== 'desc') {
	                sort = 'desc';
	            }
	            var options = {
	                squareRatio: seriesOption.squareRatio,
	                sort: sort,
	                leafDepth: seriesOption.leafDepth
	            };

	            // layout should be cleared because using updateView but not update.
	            viewRoot.hostTree.clearLayouts();

	            // TODO
	            // optimize: if out of view clip, do not layout.
	            // But take care that if do not render node out of view clip,
	            // how to calculate start po

	            var viewRootLayout = {
	                x: 0, y: 0,
	                width: rootSize[0], height: rootSize[1],
	                area: rootSize[0] * rootSize[1]
	            };
	            viewRoot.setLayout(viewRootLayout);

	            squarify(viewRoot, options, false, 0);
	            // Supplement layout.
	            var viewRootLayout = viewRoot.getLayout();
	            each(viewAbovePath, function (node, index) {
	                var childValue = (viewAbovePath[index + 1] || viewRoot).getValue();
	                node.setLayout(zrUtil.extend({ dataExtent: [childValue, childValue], borderWidth: 0 }, viewRootLayout));
	            });
	        }

	        var treeRoot = seriesModel.getData().tree.root;

	        treeRoot.setLayout(calculateRootPosition(layoutInfo, rootRect, targetInfo), true);

	        seriesModel.setLayoutInfo(layoutInfo);

	        // FIXME
	        // 现在没有clip功能，暂时取ec高宽。
	        prunning(treeRoot,
	        // Transform to base element coordinate system.
	        new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight), viewAbovePath, viewRoot, 0);
	    });
	}

	/**
	 * Layout treemap with squarify algorithm.
	 * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf
	 * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js
	 *
	 * @protected
	 * @param {module:echarts/data/Tree~TreeNode} node
	 * @param {Object} options
	 * @param {string} options.sort 'asc' or 'desc'
	 * @param {number} options.squareRatio
	 * @param {boolean} hideChildren
	 * @param {number} depth
	 */
	function squarify(node, options, hideChildren, depth) {
	    var width;
	    var height;

	    if (node.isRemoved()) {
	        return;
	    }

	    var thisLayout = node.getLayout();
	    width = thisLayout.width;
	    height = thisLayout.height;

	    // Considering border and gap
	    var itemStyleModel = node.getModel('itemStyle.normal');
	    var borderWidth = itemStyleModel.get('borderWidth');
	    var halfGapWidth = itemStyleModel.get('gapWidth') / 2;
	    var layoutOffset = borderWidth - halfGapWidth;
	    var nodeModel = node.getModel();

	    node.setLayout({ borderWidth: borderWidth }, true);

	    width = mathMax(width - 2 * layoutOffset, 0);
	    height = mathMax(height - 2 * layoutOffset, 0);

	    var totalArea = width * height;
	    var viewChildren = initChildren(node, nodeModel, totalArea, options, hideChildren, depth);

	    if (!viewChildren.length) {
	        return;
	    }

	    var rect = { x: layoutOffset, y: layoutOffset, width: width, height: height };
	    var rowFixedLength = mathMin(width, height);
	    var best = Infinity; // the best row score so far
	    var row = [];
	    row.area = 0;

	    for (var i = 0, len = viewChildren.length; i < len;) {
	        var child = viewChildren[i];

	        row.push(child);
	        row.area += child.getLayout().area;
	        var score = worst(row, rowFixedLength, options.squareRatio);

	        // continue with this orientation
	        if (score <= best) {
	            i++;
	            best = score;
	        }
	        // abort, and try a different orientation
	        else {
	                row.area -= row.pop().getLayout().area;
	                position(row, rowFixedLength, rect, halfGapWidth, false);
	                rowFixedLength = mathMin(rect.width, rect.height);
	                row.length = row.area = 0;
	                best = Infinity;
	            }
	    }

	    if (row.length) {
	        position(row, rowFixedLength, rect, halfGapWidth, true);
	    }

	    if (!hideChildren) {
	        var childrenVisibleMin = nodeModel.get('childrenVisibleMin');
	        if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {
	            hideChildren = true;
	        }
	    }

	    for (var i = 0, len = viewChildren.length; i < len; i++) {
	        squarify(viewChildren[i], options, hideChildren, depth + 1);
	    }
	}

	/**
	 * Set area to each child, and calculate data extent for visual coding.
	 */
	function initChildren(node, nodeModel, totalArea, options, hideChildren, depth) {
	    var viewChildren = node.children || [];
	    var orderBy = options.sort;
	    orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);

	    var overLeafDepth = options.leafDepth != null && options.leafDepth <= depth;

	    // leafDepth has higher priority.
	    if (hideChildren && !overLeafDepth) {
	        return node.viewChildren = [];
	    }

	    // Sort children, order by desc.
	    viewChildren = zrUtil.filter(viewChildren, function (child) {
	        return !child.isRemoved();
	    });

	    sort(viewChildren, orderBy);

	    var info = statistic(nodeModel, viewChildren, orderBy);

	    if (info.sum === 0) {
	        return node.viewChildren = [];
	    }

	    info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);

	    if (info.sum === 0) {
	        return node.viewChildren = [];
	    }

	    // Set area to each child.
	    for (var i = 0, len = viewChildren.length; i < len; i++) {
	        var area = viewChildren[i].getValue() / info.sum * totalArea;
	        // Do not use setLayout({...}, true), because it is needed to clear last layout.
	        viewChildren[i].setLayout({ area: area });
	    }

	    if (overLeafDepth) {
	        viewChildren.length && node.setLayout({ isLeafRoot: true }, true);
	        viewChildren.length = 0;
	    }

	    node.viewChildren = viewChildren;
	    node.setLayout({ dataExtent: info.dataExtent }, true);

	    return viewChildren;
	}

	/**
	 * Consider 'visibleMin'. Modify viewChildren and get new sum.
	 */
	function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {

	    // visibleMin is not supported yet when no option.sort.
	    if (!orderBy) {
	        return sum;
	    }

	    var visibleMin = nodeModel.get('visibleMin');
	    var len = orderedChildren.length;
	    var deletePoint = len;

	    // Always travel from little value to big value.
	    for (var i = len - 1; i >= 0; i--) {
	        var value = orderedChildren[orderBy === 'asc' ? len - i - 1 : i].getValue();

	        if (value / sum * totalArea < visibleMin) {
	            deletePoint = i;
	            sum -= value;
	        }
	    }

	    orderBy === 'asc' ? orderedChildren.splice(0, len - deletePoint) : orderedChildren.splice(deletePoint, len - deletePoint);

	    return sum;
	}

	/**
	 * Sort
	 */
	function sort(viewChildren, orderBy) {
	    if (orderBy) {
	        viewChildren.sort(function (a, b) {
	            return orderBy === 'asc' ? a.getValue() - b.getValue() : b.getValue() - a.getValue();
	        });
	    }
	    return viewChildren;
	}

	/**
	 * Statistic
	 */
	function statistic(nodeModel, children, orderBy) {
	    // Calculate sum.
	    var sum = 0;
	    for (var i = 0, len = children.length; i < len; i++) {
	        sum += children[i].getValue();
	    }

	    // Statistic data extent for latter visual coding.
	    // Notice: data extent should be calculate based on raw children
	    // but not filtered view children, otherwise visual mapping will not
	    // be stable when zoom (where children is filtered by visibleMin).

	    var dimension = nodeModel.get('visualDimension');
	    var dataExtent;

	    // The same as area dimension.
	    if (!children || !children.length) {
	        dataExtent = [NaN, NaN];
	    } else if (dimension === 'value' && orderBy) {
	        dataExtent = [children[children.length - 1].getValue(), children[0].getValue()];
	        orderBy === 'asc' && dataExtent.reverse();
	    }
	    // Other dimension.
	    else {
	            var dataExtent = [Infinity, -Infinity];
	            each(children, function (child) {
	                var value = child.getValue(dimension);
	                value < dataExtent[0] && (dataExtent[0] = value);
	                value > dataExtent[1] && (dataExtent[1] = value);
	            });
	        }

	    return { sum: sum, dataExtent: dataExtent };
	}

	/**
	 * Computes the score for the specified row,
	 * as the worst aspect ratio.
	 */
	function worst(row, rowFixedLength, ratio) {
	    var areaMax = 0;
	    var areaMin = Infinity;

	    for (var i = 0, area, len = row.length; i < len; i++) {
	        area = row[i].getLayout().area;
	        if (area) {
	            area < areaMin && (areaMin = area);
	            area > areaMax && (areaMax = area);
	        }
	    }

	    var squareArea = row.area * row.area;
	    var f = rowFixedLength * rowFixedLength * ratio;

	    return squareArea ? mathMax(f * areaMax / squareArea, squareArea / (f * areaMin)) : Infinity;
	}

	/**
	 * Positions the specified row of nodes. Modifies `rect`.
	 */
	function position(row, rowFixedLength, rect, halfGapWidth, flush) {
	    // When rowFixedLength === rect.width,
	    // it is horizontal subdivision,
	    // rowFixedLength is the width of the subdivision,
	    // rowOtherLength is the height of the subdivision,
	    // and nodes will be positioned from left to right.

	    // wh[idx0WhenH] means: when horizontal,
	    //      wh[idx0WhenH] => wh[0] => 'width'.
	    //      xy[idx1WhenH] => xy[1] => 'y'.
	    var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;
	    var idx1WhenH = 1 - idx0WhenH;
	    var xy = ['x', 'y'];
	    var wh = ['width', 'height'];

	    var last = rect[xy[idx0WhenH]];
	    var rowOtherLength = rowFixedLength ? row.area / rowFixedLength : 0;

	    if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {
	        rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow
	    }
	    for (var i = 0, rowLen = row.length; i < rowLen; i++) {
	        var node = row[i];
	        var nodeLayout = {};
	        var step = rowOtherLength ? node.getLayout().area / rowOtherLength : 0;

	        var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0);

	        // We use Math.max/min to avoid negative width/height when considering gap width.
	        var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;
	        var modWH = i === rowLen - 1 || remain < step ? remain : step;
	        var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);

	        nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);
	        nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);

	        last += modWH;
	        node.setLayout(nodeLayout, true);
	    }

	    rect[xy[idx1WhenH]] += rowOtherLength;
	    rect[wh[idx1WhenH]] -= rowOtherLength;
	}

	// Return [containerWidth, containerHeight] as defualt.
	function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {
	    // If targetInfo.node exists, we zoom to the node,
	    // so estimate whold width and heigth by target node.
	    var currNode = (targetInfo || {}).node;
	    var defaultSize = [containerWidth, containerHeight];

	    if (!currNode || currNode === viewRoot) {
	        return defaultSize;
	    }

	    var parent;
	    var viewArea = containerWidth * containerHeight;
	    var area = viewArea * seriesModel.option.zoomToNodeRatio;

	    while (parent = currNode.parentNode) {
	        // jshint ignore:line
	        var sum = 0;
	        var siblings = parent.children;

	        for (var i = 0, len = siblings.length; i < len; i++) {
	            sum += siblings[i].getValue();
	        }
	        var currNodeValue = currNode.getValue();
	        if (currNodeValue === 0) {
	            return defaultSize;
	        }
	        area *= sum / currNodeValue;

	        var borderWidth = parent.getModel('itemStyle.normal').get('borderWidth');

	        if (isFinite(borderWidth)) {
	            // Considering border, suppose aspect ratio is 1.
	            area += 4 * borderWidth * borderWidth + 4 * borderWidth * Math.pow(area, 0.5);
	        }

	        area > numberUtil.MAX_SAFE_INTEGER && (area = numberUtil.MAX_SAFE_INTEGER);

	        currNode = parent;
	    }

	    area < viewArea && (area = viewArea);
	    var scale = Math.pow(area / viewArea, 0.5);

	    return [containerWidth * scale, containerHeight * scale];
	}

	// Root postion base on coord of containerGroup
	function calculateRootPosition(layoutInfo, rootRect, targetInfo) {
	    if (rootRect) {
	        return { x: rootRect.x, y: rootRect.y };
	    }

	    var defaultPosition = { x: 0, y: 0 };
	    if (!targetInfo) {
	        return defaultPosition;
	    }

	    // If targetInfo is fetched by 'retrieveTargetInfo',
	    // old tree and new tree are the same tree,
	    // so the node still exists and we can visit it.

	    var targetNode = targetInfo.node;
	    var layout = targetNode.getLayout();

	    if (!layout) {
	        return defaultPosition;
	    }

	    // Transform coord from local to container.
	    var targetCenter = [layout.width / 2, layout.height / 2];
	    var node = targetNode;
	    while (node) {
	        var nodeLayout = node.getLayout();
	        targetCenter[0] += nodeLayout.x;
	        targetCenter[1] += nodeLayout.y;
	        node = node.parentNode;
	    }

	    return {
	        x: layoutInfo.width / 2 - targetCenter[0],
	        y: layoutInfo.height / 2 - targetCenter[1]
	    };
	}

	// Mark nodes visible for prunning when visual coding and rendering.
	// Prunning depends on layout and root position, so we have to do it after layout.
	function prunning(node, clipRect, viewAbovePath, viewRoot, depth) {
	    var nodeLayout = node.getLayout();
	    var nodeInViewAbovePath = viewAbovePath[depth];
	    var isAboveViewRoot = nodeInViewAbovePath && nodeInViewAbovePath === node;

	    if (nodeInViewAbovePath && !isAboveViewRoot || depth === viewAbovePath.length && node !== viewRoot) {
	        return;
	    }

	    node.setLayout({
	        // isInView means: viewRoot sub tree + viewAbovePath
	        isInView: true,
	        // invisible only means: outside view clip so that the node can not
	        // see but still layout for animation preparation but not render.
	        invisible: !isAboveViewRoot && !clipRect.intersect(nodeLayout),
	        isAboveViewRoot: isAboveViewRoot
	    }, true);

	    // Transform to child coordinate.
	    var childClipRect = new BoundingRect(clipRect.x - nodeLayout.x, clipRect.y - nodeLayout.y, clipRect.width, clipRect.height);

	    each(node.viewChildren || [], function (child) {
	        prunning(child, childClipRect, viewAbovePath, viewRoot, depth + 1);
	    });
	}

	module.exports = update;

/***/ },
/* 697 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);

	__webpack_require__(698);
	__webpack_require__(701);

	__webpack_require__(706);

	echarts.registerProcessor(__webpack_require__(707));

	echarts.registerVisual(zrUtil.curry(__webpack_require__(610), 'graph', 'circle', null));
	echarts.registerVisual(__webpack_require__(708));
	echarts.registerVisual(__webpack_require__(709));

	echarts.registerLayout(__webpack_require__(710));
	echarts.registerLayout(__webpack_require__(713));
	echarts.registerLayout(__webpack_require__(715));

	// Graph view coordinate system
	echarts.registerCoordinateSystem('graphView', {
	    create: __webpack_require__(717)
	});

/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);
	var Model = __webpack_require__(512);
	var formatUtil = __webpack_require__(506);

	var createGraphFromNodeEdge = __webpack_require__(699);

	var GraphSeries = __webpack_require__(501).extendSeriesModel({

	    type: 'series.graph',

	    init: function init(option) {
	        GraphSeries.superApply(this, 'init', arguments);

	        // Provide data for legend select
	        this.legendDataProvider = function () {
	            return this._categoriesData;
	        };

	        this.fillDataTextStyle(option.edges || option.links);

	        this._updateCategoriesData();
	    },

	    mergeOption: function mergeOption(option) {
	        GraphSeries.superApply(this, 'mergeOption', arguments);

	        this.fillDataTextStyle(option.edges || option.links);

	        this._updateCategoriesData();
	    },

	    mergeDefaultAndTheme: function mergeDefaultAndTheme(option) {
	        GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);
	        modelUtil.defaultEmphasis(option.edgeLabel, modelUtil.LABEL_OPTIONS);
	    },

	    getInitialData: function getInitialData(option, ecModel) {
	        var edges = option.edges || option.links || [];
	        var nodes = option.data || option.nodes || [];
	        var self = this;

	        if (nodes && edges) {
	            return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;
	        }

	        function beforeLink(nodeData, edgeData) {
	            // Overwrite nodeData.getItemModel to
	            nodeData.wrapMethod('getItemModel', function (model) {
	                var categoriesModels = self._categoriesModels;
	                var categoryIdx = model.getShallow('category');
	                var categoryModel = categoriesModels[categoryIdx];
	                if (categoryModel) {
	                    categoryModel.parentModel = model.parentModel;
	                    model.parentModel = categoryModel;
	                }
	                return model;
	            });

	            var edgeLabelModel = self.getModel('edgeLabel');
	            // For option `edgeLabel` can be found by label.xxx.xxx on item mode.
	            var fakeSeriesModel = new Model({ label: edgeLabelModel.option }, edgeLabelModel.parentModel, ecModel);

	            edgeData.wrapMethod('getItemModel', function (model) {
	                model.customizeGetParent(edgeGetParent);
	                return model;
	            });

	            function edgeGetParent(path) {
	                path = this.parsePath(path);
	                return path && path[0] === 'label' ? fakeSeriesModel : this.parentModel;
	            }
	        }
	    },

	    /**
	     * @return {module:echarts/data/Graph}
	     */
	    getGraph: function getGraph() {
	        return this.getData().graph;
	    },

	    /**
	     * @return {module:echarts/data/List}
	     */
	    getEdgeData: function getEdgeData() {
	        return this.getGraph().edgeData;
	    },

	    /**
	     * @return {module:echarts/data/List}
	     */
	    getCategoriesData: function getCategoriesData() {
	        return this._categoriesData;
	    },

	    /**
	     * @override
	     */
	    formatTooltip: function formatTooltip(dataIndex, multipleSeries, dataType) {
	        if (dataType === 'edge') {
	            var nodeData = this.getData();
	            var params = this.getDataParams(dataIndex, dataType);
	            var edge = nodeData.graph.getEdgeByIndex(dataIndex);
	            var sourceName = nodeData.getName(edge.node1.dataIndex);
	            var targetName = nodeData.getName(edge.node2.dataIndex);

	            var html = [];
	            sourceName != null && html.push(sourceName);
	            targetName != null && html.push(targetName);
	            html = formatUtil.encodeHTML(html.join(' > '));

	            if (params.value) {
	                html += ' : ' + formatUtil.encodeHTML(params.value);
	            }
	            return html;
	        } else {
	            // dataType === 'node' or empty
	            return GraphSeries.superApply(this, 'formatTooltip', arguments);
	        }
	    },

	    _updateCategoriesData: function _updateCategoriesData() {
	        var categories = zrUtil.map(this.option.categories || [], function (category) {
	            // Data must has value
	            return category.value != null ? category : zrUtil.extend({
	                value: 0
	            }, category);
	        });
	        var categoriesData = new List(['value'], this);
	        categoriesData.initData(categories);

	        this._categoriesData = categoriesData;

	        this._categoriesModels = categoriesData.mapArray(function (idx) {
	            return categoriesData.getItemModel(idx, true);
	        });
	    },

	    setZoom: function setZoom(zoom) {
	        this.option.zoom = zoom;
	    },

	    setCenter: function setCenter(center) {
	        this.option.center = center;
	    },

	    isAnimationEnabled: function isAnimationEnabled() {
	        return GraphSeries.superCall(this, 'isAnimationEnabled')
	        // Not enable animation when do force layout
	        && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));
	    },

	    defaultOption: {
	        zlevel: 0,
	        z: 2,

	        coordinateSystem: 'view',

	        // Default option for all coordinate systems
	        // xAxisIndex: 0,
	        // yAxisIndex: 0,
	        // polarIndex: 0,
	        // geoIndex: 0,

	        legendHoverLink: true,

	        hoverAnimation: true,

	        layout: null,

	        focusNodeAdjacency: false,

	        // Configuration of circular layout
	        circular: {
	            rotateLabel: false
	        },
	        // Configuration of force directed layout
	        force: {
	            initLayout: null,
	            // Node repulsion. Can be an array to represent range.
	            repulsion: [0, 50],
	            gravity: 0.1,

	            // Edge length. Can be an array to represent range.
	            edgeLength: 30,

	            layoutAnimation: true
	        },

	        left: 'center',
	        top: 'center',
	        // right: null,
	        // bottom: null,
	        // width: '80%',
	        // height: '80%',

	        symbol: 'circle',
	        symbolSize: 10,

	        edgeSymbol: ['none', 'none'],
	        edgeSymbolSize: 10,
	        edgeLabel: {
	            normal: {
	                position: 'middle'
	            },
	            emphasis: {}
	        },

	        draggable: false,

	        roam: false,

	        // Default on center of graph
	        center: null,

	        zoom: 1,
	        // Symbol size scale ratio in roam
	        nodeScaleRatio: 0.6,

	        // categories: [],

	        // data: []
	        // Or
	        // nodes: []
	        //
	        // links: []
	        // Or
	        // edges: []

	        label: {
	            normal: {
	                show: false,
	                formatter: '{b}'
	            },
	            emphasis: {
	                show: true
	            }
	        },

	        itemStyle: {
	            normal: {},
	            emphasis: {}
	        },

	        lineStyle: {
	            normal: {
	                color: '#aaa',
	                width: 1,
	                curveness: 0,
	                opacity: 0.5
	            },
	            emphasis: {}
	        }
	    }
	});

	module.exports = GraphSeries;

/***/ },
/* 699 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var Graph = __webpack_require__(700);
	var linkList = __webpack_require__(688);
	var completeDimensions = __webpack_require__(603);
	var CoordinateSystem = __webpack_require__(526);
	var zrUtil = __webpack_require__(504);
	var createListFromArray = __webpack_require__(602);

	module.exports = function (nodes, edges, hostModel, directed, beforeLink) {
	    var graph = new Graph(directed);
	    for (var i = 0; i < nodes.length; i++) {
	        graph.addNode(zrUtil.retrieve(
	        // Id, name, dataIndex
	        nodes[i].id, nodes[i].name, i), i);
	    }

	    var linkNameList = [];
	    var validEdges = [];
	    var linkCount = 0;
	    for (var i = 0; i < edges.length; i++) {
	        var link = edges[i];
	        var source = link.source;
	        var target = link.target;
	        // addEdge may fail when source or target not exists
	        if (graph.addEdge(source, target, linkCount)) {
	            validEdges.push(link);
	            linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));
	            linkCount++;
	        }
	    }

	    var coordSys = hostModel.get('coordinateSystem');
	    var nodeData;
	    if (coordSys === 'cartesian2d' || coordSys === 'polar') {
	        nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);
	    } else {
	        // FIXME
	        var coordSysCtor = CoordinateSystem.get(coordSys);
	        // FIXME
	        var dimensionNames = completeDimensions((coordSysCtor && coordSysCtor.type !== 'view' ? coordSysCtor.dimensions || [] : []).concat(['value']), nodes);
	        nodeData = new List(dimensionNames, hostModel);
	        nodeData.initData(nodes);
	    }

	    var edgeData = new List(['value'], hostModel);
	    edgeData.initData(validEdges, linkNameList);

	    beforeLink && beforeLink(nodeData, edgeData);

	    linkList({
	        mainData: nodeData,
	        struct: graph,
	        structAttr: 'graph',
	        datas: { node: nodeData, edge: edgeData },
	        datasAttr: { node: 'data', edge: 'edgeData' }
	    });

	    // Update dataIndex of nodes and edges because invalid edge may be removed
	    graph.update();

	    return graph;
	};

/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Graph data structure
	 *
	 * @module echarts/data/Graph
	 * @author Yi Shen(https://www.github.com/pissang)
	 */

	var zrUtil = __webpack_require__(504);

	/**
	 * @alias module:echarts/data/Graph
	 * @constructor
	 * @param {boolean} directed
	 */
	var Graph = function Graph(directed) {
	    /**
	     * 是否是有向图
	     * @type {boolean}
	     * @private
	     */
	    this._directed = directed || false;

	    /**
	     * @type {Array.<module:echarts/data/Graph.Node>}
	     * @readOnly
	     */
	    this.nodes = [];

	    /**
	     * @type {Array.<module:echarts/data/Graph.Edge>}
	     * @readOnly
	     */
	    this.edges = [];

	    /**
	     * @type {Object.<string, module:echarts/data/Graph.Node>}
	     * @private
	     */
	    this._nodesMap = {};
	    /**
	     * @type {Object.<string, module:echarts/data/Graph.Edge>}
	     * @private
	     */
	    this._edgesMap = {};

	    /**
	     * @type {module:echarts/data/List}
	     * @readOnly
	     */
	    this.data;

	    /**
	     * @type {module:echarts/data/List}
	     * @readOnly
	     */
	    this.edgeData;
	};

	var graphProto = Graph.prototype;
	/**
	 * @type {string}
	 */
	graphProto.type = 'graph';

	/**
	 * If is directed graph
	 * @return {boolean}
	 */
	graphProto.isDirected = function () {
	    return this._directed;
	};

	/**
	 * Add a new node
	 * @param {string} id
	 * @param {number} [dataIndex]
	 */
	graphProto.addNode = function (id, dataIndex) {
	    id = id || '' + dataIndex;

	    var nodesMap = this._nodesMap;

	    if (nodesMap[id]) {
	        return;
	    }

	    var node = new Node(id, dataIndex);
	    node.hostGraph = this;

	    this.nodes.push(node);

	    nodesMap[id] = node;
	    return node;
	};

	/**
	 * Get node by data index
	 * @param  {number} dataIndex
	 * @return {module:echarts/data/Graph~Node}
	 */
	graphProto.getNodeByIndex = function (dataIndex) {
	    var rawIdx = this.data.getRawIndex(dataIndex);
	    return this.nodes[rawIdx];
	};
	/**
	 * Get node by id
	 * @param  {string} id
	 * @return {module:echarts/data/Graph.Node}
	 */
	graphProto.getNodeById = function (id) {
	    return this._nodesMap[id];
	};

	/**
	 * Add a new edge
	 * @param {number|string|module:echarts/data/Graph.Node} n1
	 * @param {number|string|module:echarts/data/Graph.Node} n2
	 * @param {number} [dataIndex=-1]
	 * @return {module:echarts/data/Graph.Edge}
	 */
	graphProto.addEdge = function (n1, n2, dataIndex) {
	    var nodesMap = this._nodesMap;
	    var edgesMap = this._edgesMap;

	    // PNEDING
	    if (typeof n1 === 'number') {
	        n1 = this.nodes[n1];
	    }
	    if (typeof n2 === 'number') {
	        n2 = this.nodes[n2];
	    }

	    if (!(n1 instanceof Node)) {
	        n1 = nodesMap[n1];
	    }
	    if (!(n2 instanceof Node)) {
	        n2 = nodesMap[n2];
	    }
	    if (!n1 || !n2) {
	        return;
	    }

	    var key = n1.id + '-' + n2.id;
	    // PENDING
	    if (edgesMap[key]) {
	        return;
	    }

	    var edge = new Edge(n1, n2, dataIndex);
	    edge.hostGraph = this;

	    if (this._directed) {
	        n1.outEdges.push(edge);
	        n2.inEdges.push(edge);
	    }
	    n1.edges.push(edge);
	    if (n1 !== n2) {
	        n2.edges.push(edge);
	    }

	    this.edges.push(edge);
	    edgesMap[key] = edge;

	    return edge;
	};

	/**
	 * Get edge by data index
	 * @param  {number} dataIndex
	 * @return {module:echarts/data/Graph~Node}
	 */
	graphProto.getEdgeByIndex = function (dataIndex) {
	    var rawIdx = this.edgeData.getRawIndex(dataIndex);
	    return this.edges[rawIdx];
	};
	/**
	 * Get edge by two linked nodes
	 * @param  {module:echarts/data/Graph.Node|string} n1
	 * @param  {module:echarts/data/Graph.Node|string} n2
	 * @return {module:echarts/data/Graph.Edge}
	 */
	graphProto.getEdge = function (n1, n2) {
	    if (n1 instanceof Node) {
	        n1 = n1.id;
	    }
	    if (n2 instanceof Node) {
	        n2 = n2.id;
	    }

	    var edgesMap = this._edgesMap;

	    if (this._directed) {
	        return edgesMap[n1 + '-' + n2];
	    } else {
	        return edgesMap[n1 + '-' + n2] || edgesMap[n2 + '-' + n1];
	    }
	};

	/**
	 * Iterate all nodes
	 * @param  {Function} cb
	 * @param  {*} [context]
	 */
	graphProto.eachNode = function (cb, context) {
	    var nodes = this.nodes;
	    var len = nodes.length;
	    for (var i = 0; i < len; i++) {
	        if (nodes[i].dataIndex >= 0) {
	            cb.call(context, nodes[i], i);
	        }
	    }
	};

	/**
	 * Iterate all edges
	 * @param  {Function} cb
	 * @param  {*} [context]
	 */
	graphProto.eachEdge = function (cb, context) {
	    var edges = this.edges;
	    var len = edges.length;
	    for (var i = 0; i < len; i++) {
	        if (edges[i].dataIndex >= 0 && edges[i].node1.dataIndex >= 0 && edges[i].node2.dataIndex >= 0) {
	            cb.call(context, edges[i], i);
	        }
	    }
	};

	/**
	 * Breadth first traverse
	 * @param {Function} cb
	 * @param {module:echarts/data/Graph.Node} startNode
	 * @param {string} [direction='none'] 'none'|'in'|'out'
	 * @param {*} [context]
	 */
	graphProto.breadthFirstTraverse = function (cb, startNode, direction, context) {
	    if (!(startNode instanceof Node)) {
	        startNode = this._nodesMap[startNode];
	    }
	    if (!startNode) {
	        return;
	    }

	    var edgeType = direction === 'out' ? 'outEdges' : direction === 'in' ? 'inEdges' : 'edges';

	    for (var i = 0; i < this.nodes.length; i++) {
	        this.nodes[i].__visited = false;
	    }

	    if (cb.call(context, startNode, null)) {
	        return;
	    }

	    var queue = [startNode];
	    while (queue.length) {
	        var currentNode = queue.shift();
	        var edges = currentNode[edgeType];

	        for (var i = 0; i < edges.length; i++) {
	            var e = edges[i];
	            var otherNode = e.node1 === currentNode ? e.node2 : e.node1;
	            if (!otherNode.__visited) {
	                if (cb.call(otherNode, otherNode, currentNode)) {
	                    // Stop traversing
	                    return;
	                }
	                queue.push(otherNode);
	                otherNode.__visited = true;
	            }
	        }
	    }
	};

	// TODO
	// graphProto.depthFirstTraverse = function (
	//     cb, startNode, direction, context
	// ) {

	// };

	// Filter update
	graphProto.update = function () {
	    var data = this.data;
	    var edgeData = this.edgeData;
	    var nodes = this.nodes;
	    var edges = this.edges;

	    for (var i = 0, len = nodes.length; i < len; i++) {
	        nodes[i].dataIndex = -1;
	    }
	    for (var i = 0, len = data.count(); i < len; i++) {
	        nodes[data.getRawIndex(i)].dataIndex = i;
	    }

	    edgeData.filterSelf(function (idx) {
	        var edge = edges[edgeData.getRawIndex(idx)];
	        return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
	    });

	    // Update edge
	    for (var i = 0, len = edges.length; i < len; i++) {
	        edges[i].dataIndex = -1;
	    }
	    for (var i = 0, len = edgeData.count(); i < len; i++) {
	        edges[edgeData.getRawIndex(i)].dataIndex = i;
	    }
	};

	/**
	 * @return {module:echarts/data/Graph}
	 */
	graphProto.clone = function () {
	    var graph = new Graph(this._directed);
	    var nodes = this.nodes;
	    var edges = this.edges;
	    for (var i = 0; i < nodes.length; i++) {
	        graph.addNode(nodes[i].id, nodes[i].dataIndex);
	    }
	    for (var i = 0; i < edges.length; i++) {
	        var e = edges[i];
	        graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
	    }
	    return graph;
	};

	/**
	 * @alias module:echarts/data/Graph.Node
	 */
	function Node(id, dataIndex) {
	    /**
	    * @type {string}
	    */
	    this.id = id == null ? '' : id;

	    /**
	    * @type {Array.<module:echarts/data/Graph.Edge>}
	    */
	    this.inEdges = [];
	    /**
	    * @type {Array.<module:echarts/data/Graph.Edge>}
	    */
	    this.outEdges = [];
	    /**
	    * @type {Array.<module:echarts/data/Graph.Edge>}
	    */
	    this.edges = [];
	    /**
	     * @type {module:echarts/data/Graph}
	     */
	    this.hostGraph;

	    /**
	     * @type {number}
	     */
	    this.dataIndex = dataIndex == null ? -1 : dataIndex;
	}

	Node.prototype = {

	    constructor: Node,

	    /**
	     * @return {number}
	     */
	    degree: function degree() {
	        return this.edges.length;
	    },

	    /**
	     * @return {number}
	     */
	    inDegree: function inDegree() {
	        return this.inEdges.length;
	    },

	    /**
	    * @return {number}
	    */
	    outDegree: function outDegree() {
	        return this.outEdges.length;
	    },

	    /**
	     * @param {string} [path]
	     * @return {module:echarts/model/Model}
	     */
	    getModel: function getModel(path) {
	        if (this.dataIndex < 0) {
	            return;
	        }
	        var graph = this.hostGraph;
	        var itemModel = graph.data.getItemModel(this.dataIndex);

	        return itemModel.getModel(path);
	    }
	};

	/**
	 * 图边
	 * @alias module:echarts/data/Graph.Edge
	 * @param {module:echarts/data/Graph.Node} n1
	 * @param {module:echarts/data/Graph.Node} n2
	 * @param {number} [dataIndex=-1]
	 */
	function Edge(n1, n2, dataIndex) {

	    /**
	     * 节点1，如果是有向图则为源节点
	     * @type {module:echarts/data/Graph.Node}
	     */
	    this.node1 = n1;

	    /**
	     * 节点2，如果是有向图则为目标节点
	     * @type {module:echarts/data/Graph.Node}
	     */
	    this.node2 = n2;

	    this.dataIndex = dataIndex == null ? -1 : dataIndex;
	}

	/**
	 * @param {string} [path]
	 * @return {module:echarts/model/Model}
	 */
	Edge.prototype.getModel = function (path) {
	    if (this.dataIndex < 0) {
	        return;
	    }
	    var graph = this.hostGraph;
	    var itemModel = graph.edgeData.getItemModel(this.dataIndex);

	    return itemModel.getModel(path);
	};

	var createGraphDataProxyMixin = function createGraphDataProxyMixin(hostName, dataName) {
	    return {
	        /**
	         * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
	         * @return {number}
	         */
	        getValue: function getValue(dimension) {
	            var data = this[hostName][dataName];
	            return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	        },

	        /**
	         * @param {Object|string} key
	         * @param {*} [value]
	         */
	        setVisual: function setVisual(key, value) {
	            this.dataIndex >= 0 && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
	        },

	        /**
	         * @param {string} key
	         * @return {boolean}
	         */
	        getVisual: function getVisual(key, ignoreParent) {
	            return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
	        },

	        /**
	         * @param {Object} layout
	         * @return {boolean} [merge=false]
	         */
	        setLayout: function setLayout(layout, merge) {
	            this.dataIndex >= 0 && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
	        },

	        /**
	         * @return {Object}
	         */
	        getLayout: function getLayout() {
	            return this[hostName][dataName].getItemLayout(this.dataIndex);
	        },

	        /**
	         * @return {module:zrender/Element}
	         */
	        getGraphicEl: function getGraphicEl() {
	            return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
	        },

	        /**
	         * @return {number}
	         */
	        getRawIndex: function getRawIndex() {
	            return this[hostName][dataName].getRawIndex(this.dataIndex);
	        }
	    };
	};

	zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
	zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));

	Graph.Node = Node;
	Graph.Edge = Edge;

	module.exports = Graph;

/***/ },
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SymbolDraw = __webpack_require__(605);
	var LineDraw = __webpack_require__(702);
	var RoamController = __webpack_require__(677);

	var graphic = __webpack_require__(543);
	var adjustEdge = __webpack_require__(705);
	var zrUtil = __webpack_require__(504);

	var nodeOpacityPath = ['itemStyle', 'normal', 'opacity'];
	var lineOpacityPath = ['lineStyle', 'normal', 'opacity'];

	function getItemOpacity(item, opacityPath) {
	    return item.getVisual('opacity') || item.getModel().get(opacityPath);
	}

	__webpack_require__(501).extendChartView({

	    type: 'graph',

	    init: function init(ecModel, api) {
	        var symbolDraw = new SymbolDraw();
	        var lineDraw = new LineDraw();
	        var group = this.group;

	        var controller = new RoamController(api.getZr(), group);

	        group.add(symbolDraw.group);
	        group.add(lineDraw.group);

	        this._symbolDraw = symbolDraw;
	        this._lineDraw = lineDraw;
	        this._controller = controller;

	        this._firstRender = true;
	    },

	    render: function render(seriesModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;

	        this._model = seriesModel;
	        this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');

	        var symbolDraw = this._symbolDraw;
	        var lineDraw = this._lineDraw;

	        var group = this.group;

	        if (coordSys.type === 'view') {
	            var groupNewProp = {
	                position: coordSys.position,
	                scale: coordSys.scale
	            };
	            if (this._firstRender) {
	                group.attr(groupNewProp);
	            } else {
	                graphic.updateProps(group, groupNewProp, seriesModel);
	            }
	        }
	        // Fix edge contact point with node
	        adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));

	        var data = seriesModel.getData();
	        symbolDraw.updateData(data);

	        var edgeData = seriesModel.getEdgeData();
	        lineDraw.updateData(edgeData);

	        this._updateNodeAndLinkScale();

	        this._updateController(seriesModel, api);

	        clearTimeout(this._layoutTimeout);
	        var forceLayout = seriesModel.forceLayout;
	        var layoutAnimation = seriesModel.get('force.layoutAnimation');
	        if (forceLayout) {
	            this._startForceLayoutIteration(forceLayout, layoutAnimation);
	        }
	        data.eachItemGraphicEl(function (el, idx) {
	            var itemModel = data.getItemModel(idx);
	            // Update draggable
	            el.off('drag').off('dragend');
	            var draggable = data.getItemModel(idx).get('draggable');
	            if (draggable) {
	                el.on('drag', function () {
	                    if (forceLayout) {
	                        forceLayout.warmUp();
	                        !this._layouting && this._startForceLayoutIteration(forceLayout, layoutAnimation);
	                        forceLayout.setFixed(idx);
	                        // Write position back to layout
	                        data.setItemLayout(idx, el.position);
	                    }
	                }, this).on('dragend', function () {
	                    if (forceLayout) {
	                        forceLayout.setUnfixed(idx);
	                    }
	                }, this);
	            }
	            el.setDraggable(draggable && forceLayout);

	            el.off('mouseover', el.__focusNodeAdjacency);
	            el.off('mouseout', el.__unfocusNodeAdjacency);

	            if (itemModel.get('focusNodeAdjacency')) {
	                el.on('mouseover', el.__focusNodeAdjacency = function () {
	                    api.dispatchAction({
	                        type: 'focusNodeAdjacency',
	                        seriesId: seriesModel.id,
	                        dataIndex: el.dataIndex
	                    });
	                });
	                el.on('mouseout', el.__unfocusNodeAdjacency = function () {
	                    api.dispatchAction({
	                        type: 'unfocusNodeAdjacency',
	                        seriesId: seriesModel.id
	                    });
	                });
	            }
	        }, this);

	        var circularRotateLabel = seriesModel.get('layout') === 'circular' && seriesModel.get('circular.rotateLabel');
	        var cx = data.getLayout('cx');
	        var cy = data.getLayout('cy');
	        data.eachItemGraphicEl(function (el, idx) {
	            var symbolPath = el.getSymbolPath();
	            if (circularRotateLabel) {
	                var pos = data.getItemLayout(idx);
	                var rad = Math.atan2(pos[1] - cy, pos[0] - cx);
	                if (rad < 0) {
	                    rad = Math.PI * 2 + rad;
	                }
	                var isLeft = pos[0] < cx;
	                if (isLeft) {
	                    rad = rad - Math.PI;
	                }
	                var textPosition = isLeft ? 'left' : 'right';
	                symbolPath.setStyle({
	                    textRotation: rad,
	                    textPosition: textPosition
	                });
	                symbolPath.hoverStyle && (symbolPath.hoverStyle.textPosition = textPosition);
	            } else {
	                symbolPath.setStyle({
	                    textRotation: 0
	                });
	            }
	        });

	        this._firstRender = false;
	    },

	    dispose: function dispose() {
	        this._controller && this._controller.dispose();
	    },

	    focusNodeAdjacency: function focusNodeAdjacency(seriesModel, ecModel, api, payload) {
	        var data = this._model.getData();
	        var dataIndex = payload.dataIndex;
	        var el = data.getItemGraphicEl(dataIndex);

	        if (!el) {
	            return;
	        }

	        var graph = data.graph;
	        var dataType = el.dataType;

	        function fadeOutItem(item, opacityPath) {
	            var opacity = getItemOpacity(item, opacityPath);
	            var el = item.getGraphicEl();
	            if (opacity == null) {
	                opacity = 1;
	            }

	            el.traverse(function (child) {
	                child.trigger('normal');
	                if (child.type !== 'group') {
	                    child.setStyle('opacity', opacity * 0.1);
	                }
	            });
	        }

	        function fadeInItem(item, opacityPath) {
	            var opacity = getItemOpacity(item, opacityPath);
	            var el = item.getGraphicEl();

	            el.traverse(function (child) {
	                child.trigger('emphasis');
	                if (child.type !== 'group') {
	                    child.setStyle('opacity', opacity);
	                }
	            });
	        }
	        if (dataIndex !== null && dataType !== 'edge') {
	            graph.eachNode(function (node) {
	                fadeOutItem(node, nodeOpacityPath);
	            });
	            graph.eachEdge(function (edge) {
	                fadeOutItem(edge, lineOpacityPath);
	            });

	            var node = graph.getNodeByIndex(dataIndex);
	            fadeInItem(node, nodeOpacityPath);
	            zrUtil.each(node.edges, function (edge) {
	                if (edge.dataIndex < 0) {
	                    return;
	                }
	                fadeInItem(edge, lineOpacityPath);
	                fadeInItem(edge.node1, nodeOpacityPath);
	                fadeInItem(edge.node2, nodeOpacityPath);
	            });
	        }
	    },

	    unfocusNodeAdjacency: function unfocusNodeAdjacency(seriesModel, ecModel, api, payload) {
	        var graph = this._model.getData().graph;
	        graph.eachNode(function (node) {
	            var opacity = getItemOpacity(node, nodeOpacityPath);
	            node.getGraphicEl().traverse(function (child) {
	                child.trigger('normal');
	                if (child.type !== 'group') {
	                    child.setStyle('opacity', opacity);
	                }
	            });
	        });
	        graph.eachEdge(function (edge) {
	            var opacity = getItemOpacity(edge, lineOpacityPath);
	            edge.getGraphicEl().traverse(function (child) {
	                child.trigger('normal');
	                if (child.type !== 'group') {
	                    child.setStyle('opacity', opacity);
	                }
	            });
	        });
	    },

	    _startForceLayoutIteration: function _startForceLayoutIteration(forceLayout, layoutAnimation) {
	        var self = this;
	        (function step() {
	            forceLayout.step(function (stopped) {
	                self.updateLayout(self._model);
	                (self._layouting = !stopped) && (layoutAnimation ? self._layoutTimeout = setTimeout(step, 16) : step());
	            });
	        })();
	    },

	    _updateController: function _updateController(seriesModel, api) {
	        var controller = this._controller;
	        var group = this.group;

	        controller.setContainsPoint(function (x, y) {
	            var rect = group.getBoundingRect();
	            rect.applyTransform(group.transform);
	            return rect.contain(x, y);
	        });

	        if (seriesModel.coordinateSystem.type !== 'view') {
	            controller.disable();
	            return;
	        }
	        controller.enable(seriesModel.get('roam'));
	        controller.zoomLimit = seriesModel.get('scaleLimit');
	        // Update zoom from model
	        controller.zoom = seriesModel.coordinateSystem.getZoom();

	        controller.off('pan').off('zoom').on('pan', function (dx, dy) {
	            api.dispatchAction({
	                seriesId: seriesModel.id,
	                type: 'graphRoam',
	                dx: dx,
	                dy: dy
	            });
	        }).on('zoom', function (zoom, mouseX, mouseY) {
	            api.dispatchAction({
	                seriesId: seriesModel.id,
	                type: 'graphRoam',
	                zoom: zoom,
	                originX: mouseX,
	                originY: mouseY
	            });
	            this._updateNodeAndLinkScale();
	            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));
	            this._lineDraw.updateLayout();
	        }, this);
	    },

	    _updateNodeAndLinkScale: function _updateNodeAndLinkScale() {
	        var seriesModel = this._model;
	        var data = seriesModel.getData();

	        var nodeScale = this._getNodeGlobalScale(seriesModel);
	        var invScale = [nodeScale, nodeScale];

	        data.eachItemGraphicEl(function (el, idx) {
	            el.attr('scale', invScale);
	        });
	    },

	    _getNodeGlobalScale: function _getNodeGlobalScale(seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys.type !== 'view') {
	            return 1;
	        }

	        var nodeScaleRatio = this._nodeScaleRatio;

	        var groupScale = coordSys.scale;
	        var groupZoom = groupScale && groupScale[0] || 1;
	        // Scale node when zoom changes
	        var roamZoom = coordSys.getZoom();
	        var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;

	        return nodeScale / groupZoom;
	    },

	    updateLayout: function updateLayout(seriesModel) {
	        adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));

	        this._symbolDraw.updateLayout();
	        this._lineDraw.updateLayout();
	    },

	    remove: function remove(ecModel, api) {
	        this._symbolDraw && this._symbolDraw.remove();
	        this._lineDraw && this._lineDraw.remove();
	    }
	});

/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/chart/helper/LineDraw
	 */

	var graphic = __webpack_require__(543);
	var LineGroup = __webpack_require__(703);

	function isPointNaN(pt) {
	    return isNaN(pt[0]) || isNaN(pt[1]);
	}
	function lineNeedsDraw(pts) {
	    return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);
	}
	/**
	 * @alias module:echarts/component/marker/LineDraw
	 * @constructor
	 */
	function LineDraw(ctor) {
	    this._ctor = ctor || LineGroup;
	    this.group = new graphic.Group();
	}

	var lineDrawProto = LineDraw.prototype;

	/**
	 * @param {module:echarts/data/List} lineData
	 */
	lineDrawProto.updateData = function (lineData) {

	    var oldLineData = this._lineData;
	    var group = this.group;
	    var LineCtor = this._ctor;

	    var hostModel = lineData.hostModel;

	    var seriesScope = {
	        lineStyle: hostModel.getModel('lineStyle.normal').getLineStyle(),
	        hoverLineStyle: hostModel.getModel('lineStyle.emphasis').getLineStyle(),
	        labelModel: hostModel.getModel('label.normal'),
	        hoverLabelModel: hostModel.getModel('label.emphasis')
	    };

	    lineData.diff(oldLineData).add(function (idx) {
	        if (!lineNeedsDraw(lineData.getItemLayout(idx))) {
	            return;
	        }
	        var lineGroup = new LineCtor(lineData, idx, seriesScope);

	        lineData.setItemGraphicEl(idx, lineGroup);

	        group.add(lineGroup);
	    }).update(function (newIdx, oldIdx) {
	        var lineGroup = oldLineData.getItemGraphicEl(oldIdx);
	        if (!lineNeedsDraw(lineData.getItemLayout(newIdx))) {
	            group.remove(lineGroup);
	            return;
	        }

	        if (!lineGroup) {
	            lineGroup = new LineCtor(lineData, newIdx, seriesScope);
	        } else {
	            lineGroup.updateData(lineData, newIdx, seriesScope);
	        }

	        lineData.setItemGraphicEl(newIdx, lineGroup);

	        group.add(lineGroup);
	    }).remove(function (idx) {
	        group.remove(oldLineData.getItemGraphicEl(idx));
	    }).execute();

	    this._lineData = lineData;
	};

	lineDrawProto.updateLayout = function () {
	    var lineData = this._lineData;
	    lineData.eachItemGraphicEl(function (el, idx) {
	        el.updateLayout(lineData, idx);
	    }, this);
	};

	lineDrawProto.remove = function () {
	    this.group.removeAll();
	};

	module.exports = LineDraw;

/***/ },
/* 703 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/chart/helper/Line
	 */

	var symbolUtil = __webpack_require__(607);
	var vector = __webpack_require__(510);
	// var matrix = require('zrender/lib/core/matrix');
	var LinePath = __webpack_require__(704);
	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);

	var SYMBOL_CATEGORIES = ['fromSymbol', 'toSymbol'];
	function makeSymbolTypeKey(symbolCategory) {
	    return '_' + symbolCategory + 'Type';
	}
	/**
	 * @inner
	 */
	function createSymbol(name, lineData, idx) {
	    var color = lineData.getItemVisual(idx, 'color');
	    var symbolType = lineData.getItemVisual(idx, name);
	    var symbolSize = lineData.getItemVisual(idx, name + 'Size');

	    if (!symbolType || symbolType === 'none') {
	        return;
	    }

	    if (!zrUtil.isArray(symbolSize)) {
	        symbolSize = [symbolSize, symbolSize];
	    }
	    var symbolPath = symbolUtil.createSymbol(symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2, symbolSize[0], symbolSize[1], color);

	    symbolPath.name = name;

	    return symbolPath;
	}

	function createLine(points) {
	    var line = new LinePath({
	        name: 'line'
	    });
	    setLinePoints(line.shape, points);
	    return line;
	}

	function setLinePoints(targetShape, points) {
	    var p1 = points[0];
	    var p2 = points[1];
	    var cp1 = points[2];
	    targetShape.x1 = p1[0];
	    targetShape.y1 = p1[1];
	    targetShape.x2 = p2[0];
	    targetShape.y2 = p2[1];
	    targetShape.percent = 1;

	    if (cp1) {
	        targetShape.cpx1 = cp1[0];
	        targetShape.cpy1 = cp1[1];
	    } else {
	        targetShape.cpx1 = NaN;
	        targetShape.cpy1 = NaN;
	    }
	}

	function updateSymbolAndLabelBeforeLineUpdate() {
	    var lineGroup = this;
	    var symbolFrom = lineGroup.childOfName('fromSymbol');
	    var symbolTo = lineGroup.childOfName('toSymbol');
	    var label = lineGroup.childOfName('label');
	    // Quick reject
	    if (!symbolFrom && !symbolTo && label.ignore) {
	        return;
	    }

	    var invScale = 1;
	    var parentNode = this.parent;
	    while (parentNode) {
	        if (parentNode.scale) {
	            invScale /= parentNode.scale[0];
	        }
	        parentNode = parentNode.parent;
	    }

	    var line = lineGroup.childOfName('line');
	    // If line not changed
	    // FIXME Parent scale changed
	    if (!this.__dirty && !line.__dirty) {
	        return;
	    }

	    var percent = line.shape.percent;
	    var fromPos = line.pointAt(0);
	    var toPos = line.pointAt(percent);

	    var d = vector.sub([], toPos, fromPos);
	    vector.normalize(d, d);

	    if (symbolFrom) {
	        symbolFrom.attr('position', fromPos);
	        var tangent = line.tangentAt(0);
	        symbolFrom.attr('rotation', Math.PI / 2 - Math.atan2(tangent[1], tangent[0]));
	        symbolFrom.attr('scale', [invScale * percent, invScale * percent]);
	    }
	    if (symbolTo) {
	        symbolTo.attr('position', toPos);
	        var tangent = line.tangentAt(1);
	        symbolTo.attr('rotation', -Math.PI / 2 - Math.atan2(tangent[1], tangent[0]));
	        symbolTo.attr('scale', [invScale * percent, invScale * percent]);
	    }

	    if (!label.ignore) {
	        label.attr('position', toPos);

	        var textPosition;
	        var textAlign;
	        var textVerticalAlign;

	        var distance = 5 * invScale;
	        // End
	        if (label.__position === 'end') {
	            textPosition = [d[0] * distance + toPos[0], d[1] * distance + toPos[1]];
	            textAlign = d[0] > 0.8 ? 'left' : d[0] < -0.8 ? 'right' : 'center';
	            textVerticalAlign = d[1] > 0.8 ? 'top' : d[1] < -0.8 ? 'bottom' : 'middle';
	        }
	        // Middle
	        else if (label.__position === 'middle') {
	                var halfPercent = percent / 2;
	                var tangent = line.tangentAt(halfPercent);
	                var n = [tangent[1], -tangent[0]];
	                var cp = line.pointAt(halfPercent);
	                if (n[1] > 0) {
	                    n[0] = -n[0];
	                    n[1] = -n[1];
	                }
	                textPosition = [cp[0] + n[0] * distance, cp[1] + n[1] * distance];
	                textAlign = 'center';
	                textVerticalAlign = 'bottom';
	                var rotation = -Math.atan2(tangent[1], tangent[0]);
	                if (toPos[0] < fromPos[0]) {
	                    rotation = Math.PI + rotation;
	                }
	                label.attr('rotation', rotation);
	            }
	            // Start
	            else {
	                    textPosition = [-d[0] * distance + fromPos[0], -d[1] * distance + fromPos[1]];
	                    textAlign = d[0] > 0.8 ? 'right' : d[0] < -0.8 ? 'left' : 'center';
	                    textVerticalAlign = d[1] > 0.8 ? 'bottom' : d[1] < -0.8 ? 'top' : 'middle';
	                }
	        label.attr({
	            style: {
	                // Use the user specified text align and baseline first
	                textVerticalAlign: label.__verticalAlign || textVerticalAlign,
	                textAlign: label.__textAlign || textAlign
	            },
	            position: textPosition,
	            scale: [invScale, invScale]
	        });
	    }
	}

	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Line}
	 */
	function Line(lineData, idx, seriesScope) {
	    graphic.Group.call(this);

	    this._createLine(lineData, idx, seriesScope);
	}

	var lineProto = Line.prototype;

	// Update symbol position and rotation
	lineProto.beforeUpdate = updateSymbolAndLabelBeforeLineUpdate;

	lineProto._createLine = function (lineData, idx, seriesScope) {
	    var seriesModel = lineData.hostModel;
	    var linePoints = lineData.getItemLayout(idx);

	    var line = createLine(linePoints);
	    line.shape.percent = 0;
	    graphic.initProps(line, {
	        shape: {
	            percent: 1
	        }
	    }, seriesModel, idx);

	    this.add(line);

	    var label = new graphic.Text({
	        name: 'label'
	    });
	    this.add(label);

	    zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	        var symbol = createSymbol(symbolCategory, lineData, idx);
	        // symbols must added after line to make sure
	        // it will be updated after line#update.
	        // Or symbol position and rotation update in line#beforeUpdate will be one frame slow
	        this.add(symbol);
	        this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);
	    }, this);

	    this._updateCommonStl(lineData, idx, seriesScope);
	};

	lineProto.updateData = function (lineData, idx, seriesScope) {
	    var seriesModel = lineData.hostModel;

	    var line = this.childOfName('line');
	    var linePoints = lineData.getItemLayout(idx);
	    var target = {
	        shape: {}
	    };
	    setLinePoints(target.shape, linePoints);
	    graphic.updateProps(line, target, seriesModel, idx);

	    zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	        var symbolType = lineData.getItemVisual(idx, symbolCategory);
	        var key = makeSymbolTypeKey(symbolCategory);
	        // Symbol changed
	        if (this[key] !== symbolType) {
	            this.remove(this.childOfName(symbolCategory));
	            var symbol = createSymbol(symbolCategory, lineData, idx);
	            this.add(symbol);
	        }
	        this[key] = symbolType;
	    }, this);

	    this._updateCommonStl(lineData, idx, seriesScope);
	};

	lineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	    var seriesModel = lineData.hostModel;

	    var line = this.childOfName('line');

	    var lineStyle = seriesScope && seriesScope.lineStyle;
	    var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;
	    var labelModel = seriesScope && seriesScope.labelModel;
	    var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;

	    // Optimization for large dataset
	    if (!seriesScope || lineData.hasItemOption) {
	        var itemModel = lineData.getItemModel(idx);

	        lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	        hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();

	        labelModel = itemModel.getModel('label.normal');
	        hoverLabelModel = itemModel.getModel('label.emphasis');
	    }

	    var visualColor = lineData.getItemVisual(idx, 'color');
	    var visualOpacity = zrUtil.retrieve(lineData.getItemVisual(idx, 'opacity'), lineStyle.opacity, 1);

	    line.useStyle(zrUtil.defaults({
	        strokeNoScale: true,
	        fill: 'none',
	        stroke: visualColor,
	        opacity: visualOpacity
	    }, lineStyle));
	    line.hoverStyle = hoverLineStyle;

	    // Update symbol
	    zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	        var symbol = this.childOfName(symbolCategory);
	        if (symbol) {
	            symbol.setColor(visualColor);
	            symbol.setStyle({
	                opacity: visualOpacity
	            });
	        }
	    }, this);

	    var showLabel = labelModel.getShallow('show');
	    var hoverShowLabel = hoverLabelModel.getShallow('show');

	    var label = this.childOfName('label');
	    var defaultLabelColor;
	    var defaultText;

	    if (showLabel || hoverShowLabel) {
	        var rawVal = seriesModel.getRawValue(idx);
	        defaultText = rawVal == null ? defaultText = lineData.getName(idx) : isFinite(rawVal) ? numberUtil.round(rawVal) : rawVal;
	        defaultLabelColor = visualColor || '#000';
	    }

	    // label.afterUpdate = lineAfterUpdate;
	    if (showLabel) {
	        var textStyleModel = labelModel.getModel('textStyle');
	        label.setStyle({
	            text: zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal', lineData.dataType), defaultText),
	            textFont: textStyleModel.getFont(),
	            fill: textStyleModel.getTextColor() || defaultLabelColor
	        });

	        label.__textAlign = textStyleModel.get('align');
	        label.__verticalAlign = textStyleModel.get('baseline');
	        label.__position = labelModel.get('position');
	    } else {
	        label.setStyle('text', '');
	    }
	    if (hoverShowLabel) {
	        var textStyleHoverModel = hoverLabelModel.getModel('textStyle');

	        label.hoverStyle = {
	            text: zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis', lineData.dataType), defaultText),
	            textFont: textStyleHoverModel.getFont(),
	            fill: textStyleHoverModel.getTextColor() || defaultLabelColor
	        };
	    } else {
	        label.hoverStyle = {
	            text: ''
	        };
	    }

	    label.ignore = !showLabel && !hoverShowLabel;

	    graphic.setHoverStyle(this);
	};

	lineProto.updateLayout = function (lineData, idx) {
	    this.setLinePoints(lineData.getItemLayout(idx));
	};

	lineProto.setLinePoints = function (points) {
	    var linePath = this.childOfName('line');
	    setLinePoints(linePath.shape, points);
	    linePath.dirty();
	};

	zrUtil.inherits(Line, graphic.Group);

	module.exports = Line;

/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Line path for bezier and straight line draw
	 */

	var graphic = __webpack_require__(543);
	var vec2 = __webpack_require__(510);

	var straightLineProto = graphic.Line.prototype;
	var bezierCurveProto = graphic.BezierCurve.prototype;

	function isLine(shape) {
	    return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);
	}

	module.exports = graphic.extendShape({

	    type: 'ec-line',

	    style: {
	        stroke: '#000',
	        fill: null
	    },

	    shape: {
	        x1: 0,
	        y1: 0,
	        x2: 0,
	        y2: 0,
	        percent: 1,
	        cpx1: null,
	        cpy1: null
	    },

	    buildPath: function buildPath(ctx, shape) {
	        (isLine(shape) ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);
	    },

	    pointAt: function pointAt(t) {
	        return isLine(this.shape) ? straightLineProto.pointAt.call(this, t) : bezierCurveProto.pointAt.call(this, t);
	    },

	    tangentAt: function tangentAt(t) {
	        var shape = this.shape;
	        var p = isLine(shape) ? [shape.x2 - shape.x1, shape.y2 - shape.y1] : bezierCurveProto.tangentAt.call(this, t);
	        return vec2.normalize(p, p);
	    }
	});

/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curveTool = __webpack_require__(550);
	var vec2 = __webpack_require__(510);

	var v1 = [];
	var v2 = [];
	var v3 = [];
	var quadraticAt = curveTool.quadraticAt;
	var v2DistSquare = vec2.distSquare;
	var mathAbs = Math.abs;
	function intersectCurveCircle(curvePoints, center, radius) {
	    var p0 = curvePoints[0];
	    var p1 = curvePoints[1];
	    var p2 = curvePoints[2];

	    var d = Infinity;
	    var t;
	    var radiusSquare = radius * radius;
	    var interval = 0.1;

	    for (var _t = 0.1; _t <= 0.9; _t += 0.1) {
	        v1[0] = quadraticAt(p0[0], p1[0], p2[0], _t);
	        v1[1] = quadraticAt(p0[1], p1[1], p2[1], _t);
	        var diff = mathAbs(v2DistSquare(v1, center) - radiusSquare);
	        if (diff < d) {
	            d = diff;
	            t = _t;
	        }
	    }

	    // Assume the segment is monotone，Find root through Bisection method
	    // At most 32 iteration
	    for (var i = 0; i < 32; i++) {
	        // var prev = t - interval;
	        var next = t + interval;
	        // v1[0] = quadraticAt(p0[0], p1[0], p2[0], prev);
	        // v1[1] = quadraticAt(p0[1], p1[1], p2[1], prev);
	        v2[0] = quadraticAt(p0[0], p1[0], p2[0], t);
	        v2[1] = quadraticAt(p0[1], p1[1], p2[1], t);
	        v3[0] = quadraticAt(p0[0], p1[0], p2[0], next);
	        v3[1] = quadraticAt(p0[1], p1[1], p2[1], next);

	        var diff = v2DistSquare(v2, center) - radiusSquare;
	        if (mathAbs(diff) < 1e-2) {
	            break;
	        }

	        // var prevDiff = v2DistSquare(v1, center) - radiusSquare;
	        var nextDiff = v2DistSquare(v3, center) - radiusSquare;

	        interval /= 2;
	        if (diff < 0) {
	            if (nextDiff >= 0) {
	                t = t + interval;
	            } else {
	                t = t - interval;
	            }
	        } else {
	            if (nextDiff >= 0) {
	                t = t - interval;
	            } else {
	                t = t + interval;
	            }
	        }
	    }

	    return t;
	}
	// Adjust edge to avoid
	module.exports = function (graph, scale) {
	    var tmp0 = [];
	    var quadraticSubdivide = curveTool.quadraticSubdivide;
	    var pts = [[], [], []];
	    var pts2 = [[], []];
	    var v = [];
	    scale /= 2;

	    function getSymbolSize(node) {
	        var symbolSize = node.getVisual('symbolSize');
	        if (symbolSize instanceof Array) {
	            symbolSize = (symbolSize[0] + symbolSize[1]) / 2;
	        }
	        return symbolSize;
	    }
	    graph.eachEdge(function (edge, idx) {
	        var linePoints = edge.getLayout();
	        var fromSymbol = edge.getVisual('fromSymbol');
	        var toSymbol = edge.getVisual('toSymbol');

	        if (!linePoints.__original) {
	            linePoints.__original = [vec2.clone(linePoints[0]), vec2.clone(linePoints[1])];
	            if (linePoints[2]) {
	                linePoints.__original.push(vec2.clone(linePoints[2]));
	            }
	        }
	        var originalPoints = linePoints.__original;
	        // Quadratic curve
	        if (linePoints[2] != null) {
	            vec2.copy(pts[0], originalPoints[0]);
	            vec2.copy(pts[1], originalPoints[2]);
	            vec2.copy(pts[2], originalPoints[1]);
	            if (fromSymbol && fromSymbol != 'none') {
	                var symbolSize = getSymbolSize(edge.node1);

	                var t = intersectCurveCircle(pts, originalPoints[0], symbolSize * scale);
	                // Subdivide and get the second
	                quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	                pts[0][0] = tmp0[3];
	                pts[1][0] = tmp0[4];
	                quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	                pts[0][1] = tmp0[3];
	                pts[1][1] = tmp0[4];
	            }
	            if (toSymbol && toSymbol != 'none') {
	                var symbolSize = getSymbolSize(edge.node2);

	                var t = intersectCurveCircle(pts, originalPoints[1], symbolSize * scale);
	                // Subdivide and get the first
	                quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	                pts[1][0] = tmp0[1];
	                pts[2][0] = tmp0[2];
	                quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	                pts[1][1] = tmp0[1];
	                pts[2][1] = tmp0[2];
	            }
	            // Copy back to layout
	            vec2.copy(linePoints[0], pts[0]);
	            vec2.copy(linePoints[1], pts[2]);
	            vec2.copy(linePoints[2], pts[1]);
	        }
	        // Line
	        else {
	                vec2.copy(pts2[0], originalPoints[0]);
	                vec2.copy(pts2[1], originalPoints[1]);

	                vec2.sub(v, pts2[1], pts2[0]);
	                vec2.normalize(v, v);
	                if (fromSymbol && fromSymbol != 'none') {

	                    var symbolSize = getSymbolSize(edge.node1);

	                    vec2.scaleAndAdd(pts2[0], pts2[0], v, symbolSize * scale);
	                }
	                if (toSymbol && toSymbol != 'none') {
	                    var symbolSize = getSymbolSize(edge.node2);

	                    vec2.scaleAndAdd(pts2[1], pts2[1], v, -symbolSize * scale);
	                }
	                vec2.copy(linePoints[0], pts2[0]);
	                vec2.copy(linePoints[1], pts2[1]);
	            }
	    });
	};

/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);
	var roamHelper = __webpack_require__(680);

	var actionInfo = {
	    type: 'graphRoam',
	    event: 'graphRoam',
	    update: 'none'
	};

	/**
	 * @payload
	 * @property {string} name Series name
	 * @property {number} [dx]
	 * @property {number} [dy]
	 * @property {number} [zoom]
	 * @property {number} [originX]
	 * @property {number} [originY]
	 */
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	    ecModel.eachComponent({ mainType: 'series', query: payload }, function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;

	        var res = roamHelper.updateCenterAndZoom(coordSys, payload);

	        seriesModel.setCenter && seriesModel.setCenter(res.center);

	        seriesModel.setZoom && seriesModel.setZoom(res.zoom);
	    });
	});

	/**
	 * @payload
	 * @property {number} [seriesIndex]
	 * @property {string} [seriesId]
	 * @property {string} [seriesName]
	 * @property {number} [dataIndex]
	 */
	echarts.registerAction({
	    type: 'focusNodeAdjacency',
	    event: 'focusNodeAdjacency',
	    update: 'series.graph:focusNodeAdjacency'
	}, function () {});

	/**
	 * @payload
	 * @property {number} [seriesIndex]
	 * @property {string} [seriesId]
	 * @property {string} [seriesName]
	 */
	echarts.registerAction({
	    type: 'unfocusNodeAdjacency',
	    event: 'unfocusNodeAdjacency',
	    update: 'series.graph:unfocusNodeAdjacency'
	}, function () {});

/***/ },
/* 707 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (ecModel) {
	    var legendModels = ecModel.findComponents({
	        mainType: 'legend'
	    });
	    if (!legendModels || !legendModels.length) {
	        return;
	    }
	    ecModel.eachSeriesByType('graph', function (graphSeries) {
	        var categoriesData = graphSeries.getCategoriesData();
	        var graph = graphSeries.getGraph();
	        var data = graph.data;

	        var categoryNames = categoriesData.mapArray(categoriesData.getName);

	        data.filterSelf(function (idx) {
	            var model = data.getItemModel(idx);
	            var category = model.getShallow('category');
	            if (category != null) {
	                if (typeof category === 'number') {
	                    category = categoryNames[category];
	                }
	                // If in any legend component the status is not selected.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(category)) {
	                        return false;
	                    }
	                }
	            }
	            return true;
	        });
	    }, this);
	};

/***/ },
/* 708 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (ecModel) {

	    var paletteScope = {};
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        var categoriesData = seriesModel.getCategoriesData();
	        var data = seriesModel.getData();

	        var categoryNameIdxMap = {};

	        categoriesData.each(function (idx) {
	            var name = categoriesData.getName(idx);
	            categoryNameIdxMap[name] = idx;

	            var itemModel = categoriesData.getItemModel(idx);
	            var color = itemModel.get('itemStyle.normal.color') || seriesModel.getColorFromPalette(name, paletteScope);
	            categoriesData.setItemVisual(idx, 'color', color);
	        });

	        // Assign category color to visual
	        if (categoriesData.count()) {
	            data.each(function (idx) {
	                var model = data.getItemModel(idx);
	                var category = model.getShallow('category');
	                if (category != null) {
	                    if (typeof category === 'string') {
	                        category = categoryNameIdxMap[category];
	                    }
	                    if (!data.getItemVisual(idx, 'color', true)) {
	                        data.setItemVisual(idx, 'color', categoriesData.getItemVisual(category, 'color'));
	                    }
	                }
	            });
	        }
	    });
	};

/***/ },
/* 709 */
/***/ function(module, exports) {

	'use strict';

	function normalize(a) {
	    if (!(a instanceof Array)) {
	        a = [a, a];
	    }
	    return a;
	}
	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        var graph = seriesModel.getGraph();
	        var edgeData = seriesModel.getEdgeData();
	        var symbolType = normalize(seriesModel.get('edgeSymbol'));
	        var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));

	        var colorQuery = 'lineStyle.normal.color'.split('.');
	        var opacityQuery = 'lineStyle.normal.opacity'.split('.');

	        edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);
	        edgeData.setVisual('toSymbol', symbolType && symbolType[1]);
	        edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	        edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	        edgeData.setVisual('color', seriesModel.get(colorQuery));
	        edgeData.setVisual('opacity', seriesModel.get(opacityQuery));

	        edgeData.each(function (idx) {
	            var itemModel = edgeData.getItemModel(idx);
	            var edge = graph.getEdgeByIndex(idx);
	            var symbolType = normalize(itemModel.getShallow('symbol', true));
	            var symbolSize = normalize(itemModel.getShallow('symbolSize', true));
	            // Edge visual must after node visual
	            var color = itemModel.get(colorQuery);
	            var opacity = itemModel.get(opacityQuery);
	            switch (color) {
	                case 'source':
	                    color = edge.node1.getVisual('color');
	                    break;
	                case 'target':
	                    color = edge.node2.getVisual('color');
	                    break;
	            }

	            symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);
	            symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);
	            symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);
	            symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);

	            edge.setVisual('color', color);
	            edge.setVisual('opacity', opacity);
	        });
	    });
	};

/***/ },
/* 710 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var simpleLayoutHelper = __webpack_require__(711);
	var simpleLayoutEdge = __webpack_require__(712);
	module.exports = function (ecModel, api) {
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        var layout = seriesModel.get('layout');
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.type !== 'view') {
	            var data = seriesModel.getData();
	            data.each(coordSys.dimensions, function (x, y, idx) {
	                if (!isNaN(x) && !isNaN(y)) {
	                    data.setItemLayout(idx, coordSys.dataToPoint([x, y]));
	                } else {
	                    // Also {Array.<number>}, not undefined to avoid if...else... statement
	                    data.setItemLayout(idx, [NaN, NaN]);
	                }
	            });

	            simpleLayoutEdge(data.graph);
	        } else if (!layout || layout === 'none') {
	            simpleLayoutHelper(seriesModel);
	        }
	    });
	};

/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var simpleLayoutEdge = __webpack_require__(712);

	module.exports = function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    if (coordSys && coordSys.type !== 'view') {
	        return;
	    }
	    var graph = seriesModel.getGraph();

	    graph.eachNode(function (node) {
	        var model = node.getModel();
	        node.setLayout([+model.get('x'), +model.get('y')]);
	    });

	    simpleLayoutEdge(graph);
	};

/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var vec2 = __webpack_require__(510);
	module.exports = function (graph) {
	    graph.eachEdge(function (edge) {
	        var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	        var p1 = vec2.clone(edge.node1.getLayout());
	        var p2 = vec2.clone(edge.node2.getLayout());
	        var points = [p1, p2];
	        if (+curveness) {
	            points.push([(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness]);
	        }
	        edge.setLayout(points);
	    });
	};

/***/ },
/* 713 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var circularLayoutHelper = __webpack_require__(714);
	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        if (seriesModel.get('layout') === 'circular') {
	            circularLayoutHelper(seriesModel);
	        }
	    });
	};

/***/ },
/* 714 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var vec2 = __webpack_require__(510);
	module.exports = function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    if (coordSys && coordSys.type !== 'view') {
	        return;
	    }

	    var rect = coordSys.getBoundingRect();

	    var nodeData = seriesModel.getData();
	    var graph = nodeData.graph;

	    var angle = 0;
	    var sum = nodeData.getSum('value');
	    var unitAngle = Math.PI * 2 / (sum || nodeData.count());

	    var cx = rect.width / 2 + rect.x;
	    var cy = rect.height / 2 + rect.y;

	    var r = Math.min(rect.width, rect.height) / 2;

	    graph.eachNode(function (node) {
	        var value = node.getValue('value');

	        angle += unitAngle * (sum ? value : 1) / 2;

	        node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);

	        angle += unitAngle * (sum ? value : 1) / 2;
	    });

	    nodeData.setLayout({
	        cx: cx,
	        cy: cy
	    });

	    graph.eachEdge(function (edge) {
	        var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	        var p1 = vec2.clone(edge.node1.getLayout());
	        var p2 = vec2.clone(edge.node2.getLayout());
	        var cp1;
	        var x12 = (p1[0] + p2[0]) / 2;
	        var y12 = (p1[1] + p2[1]) / 2;
	        if (+curveness) {
	            curveness *= 3;
	            cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];
	        }
	        edge.setLayout([p1, p2, cp1]);
	    });
	};

/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var forceHelper = __webpack_require__(716);
	var numberUtil = __webpack_require__(507);
	var simpleLayoutHelper = __webpack_require__(711);
	var circularLayoutHelper = __webpack_require__(714);
	var vec2 = __webpack_require__(510);
	var zrUtil = __webpack_require__(504);

	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('graph', function (graphSeries) {
	        var coordSys = graphSeries.coordinateSystem;
	        if (coordSys && coordSys.type !== 'view') {
	            return;
	        }
	        if (graphSeries.get('layout') === 'force') {
	            var preservedPoints = graphSeries.preservedPoints || {};
	            var graph = graphSeries.getGraph();
	            var nodeData = graph.data;
	            var edgeData = graph.edgeData;
	            var forceModel = graphSeries.getModel('force');
	            var initLayout = forceModel.get('initLayout');
	            if (graphSeries.preservedPoints) {
	                nodeData.each(function (idx) {
	                    var id = nodeData.getId(idx);
	                    nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);
	                });
	            } else if (!initLayout || initLayout === 'none') {
	                simpleLayoutHelper(graphSeries);
	            } else if (initLayout === 'circular') {
	                circularLayoutHelper(graphSeries);
	            }

	            var nodeDataExtent = nodeData.getDataExtent('value');
	            var edgeDataExtent = edgeData.getDataExtent('value');
	            // var edgeDataExtent = edgeData.getDataExtent('value');
	            var repulsion = forceModel.get('repulsion');
	            var edgeLength = forceModel.get('edgeLength');
	            if (!zrUtil.isArray(repulsion)) {
	                repulsion = [repulsion, repulsion];
	            }
	            if (!zrUtil.isArray(edgeLength)) {
	                edgeLength = [edgeLength, edgeLength];
	            }
	            // Larger value has smaller length
	            edgeLength = [edgeLength[1], edgeLength[0]];

	            var nodes = nodeData.mapArray('value', function (value, idx) {
	                var point = nodeData.getItemLayout(idx);
	                // var w = numberUtil.linearMap(value, nodeDataExtent, [0, 50]);
	                var rep = numberUtil.linearMap(value, nodeDataExtent, repulsion);
	                if (isNaN(rep)) {
	                    rep = (repulsion[0] + repulsion[1]) / 2;
	                }
	                return {
	                    w: rep,
	                    rep: rep,
	                    p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point
	                };
	            });
	            var edges = edgeData.mapArray('value', function (value, idx) {
	                var edge = graph.getEdgeByIndex(idx);
	                var d = numberUtil.linearMap(value, edgeDataExtent, edgeLength);
	                if (isNaN(d)) {
	                    d = (edgeLength[0] + edgeLength[1]) / 2;
	                }
	                return {
	                    n1: nodes[edge.node1.dataIndex],
	                    n2: nodes[edge.node2.dataIndex],
	                    d: d,
	                    curveness: edge.getModel().get('lineStyle.normal.curveness') || 0
	                };
	            });

	            var coordSys = graphSeries.coordinateSystem;
	            var rect = coordSys.getBoundingRect();
	            var forceInstance = forceHelper(nodes, edges, {
	                rect: rect,
	                gravity: forceModel.get('gravity')
	            });
	            var oldStep = forceInstance.step;
	            forceInstance.step = function (cb) {
	                for (var i = 0, l = nodes.length; i < l; i++) {
	                    if (nodes[i].fixed) {
	                        // Write back to layout instance
	                        vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());
	                    }
	                }
	                oldStep(function (nodes, edges, stopped) {
	                    for (var i = 0, l = nodes.length; i < l; i++) {
	                        if (!nodes[i].fixed) {
	                            graph.getNodeByIndex(i).setLayout(nodes[i].p);
	                        }
	                        preservedPoints[nodeData.getId(i)] = nodes[i].p;
	                    }
	                    for (var i = 0, l = edges.length; i < l; i++) {
	                        var e = edges[i];
	                        var edge = graph.getEdgeByIndex(i);
	                        var p1 = e.n1.p;
	                        var p2 = e.n2.p;
	                        var points = edge.getLayout();
	                        points = points ? points.slice() : [];
	                        points[0] = points[0] || [];
	                        points[1] = points[1] || [];
	                        vec2.copy(points[0], p1);
	                        vec2.copy(points[1], p2);
	                        if (+e.curveness) {
	                            points[2] = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness];
	                        }
	                        edge.setLayout(points);
	                    }
	                    // Update layout

	                    cb && cb(stopped);
	                });
	            };
	            graphSeries.forceLayout = forceInstance;
	            graphSeries.preservedPoints = preservedPoints;

	            // Step to get the layout
	            forceInstance.step();
	        } else {
	            // Remove prev injected forceLayout instance
	            graphSeries.forceLayout = null;
	        }
	    });
	};

/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var vec2 = __webpack_require__(510);
	var scaleAndAdd = vec2.scaleAndAdd;

	// function adjacentNode(n, e) {
	//     return e.n1 === n ? e.n2 : e.n1;
	// }

	module.exports = function (nodes, edges, opts) {
	    var rect = opts.rect;
	    var width = rect.width;
	    var height = rect.height;
	    var center = [rect.x + width / 2, rect.y + height / 2];
	    // var scale = opts.scale || 1;
	    var gravity = opts.gravity == null ? 0.1 : opts.gravity;

	    // for (var i = 0; i < edges.length; i++) {
	    //     var e = edges[i];
	    //     var n1 = e.n1;
	    //     var n2 = e.n2;
	    //     n1.edges = n1.edges || [];
	    //     n2.edges = n2.edges || [];
	    //     n1.edges.push(e);
	    //     n2.edges.push(e);
	    // }
	    // Init position
	    for (var i = 0; i < nodes.length; i++) {
	        var n = nodes[i];
	        if (!n.p) {
	            // Use the position from first adjecent node with defined position
	            // Or use a random position
	            // From d3
	            // if (n.edges) {
	            //     var j = -1;
	            //     while (++j < n.edges.length) {
	            //         var e = n.edges[j];
	            //         var other = adjacentNode(n, e);
	            //         if (other.p) {
	            //             n.p = vec2.clone(other.p);
	            //             break;
	            //         }
	            //     }
	            // }
	            // if (!n.p) {
	            n.p = vec2.create(width * (Math.random() - 0.5) + center[0], height * (Math.random() - 0.5) + center[1]);
	            // }
	        }
	        n.pp = vec2.clone(n.p);
	        n.edges = null;
	    }

	    // Formula in 'Graph Drawing by Force-directed Placement'
	    // var k = scale * Math.sqrt(width * height / nodes.length);
	    // var k2 = k * k;

	    var friction = 0.6;

	    return {
	        warmUp: function warmUp() {
	            friction = 0.5;
	        },

	        setFixed: function setFixed(idx) {
	            nodes[idx].fixed = true;
	        },

	        setUnfixed: function setUnfixed(idx) {
	            nodes[idx].fixed = false;
	        },

	        step: function step(cb) {
	            var v12 = [];
	            var nLen = nodes.length;
	            for (var i = 0; i < edges.length; i++) {
	                var e = edges[i];
	                var n1 = e.n1;
	                var n2 = e.n2;

	                vec2.sub(v12, n2.p, n1.p);
	                var d = vec2.len(v12) - e.d;
	                var w = n2.w / (n1.w + n2.w);
	                vec2.normalize(v12, v12);

	                !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);
	                !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);
	            }
	            // Gravity
	            for (var i = 0; i < nLen; i++) {
	                var n = nodes[i];
	                if (!n.fixed) {
	                    vec2.sub(v12, center, n.p);
	                    // var d = vec2.len(v12);
	                    // vec2.scale(v12, v12, 1 / d);
	                    // var gravityFactor = gravity;
	                    vec2.scaleAndAdd(n.p, n.p, v12, gravity * friction);
	                }
	            }

	            // Repulsive
	            // PENDING
	            for (var i = 0; i < nLen; i++) {
	                var n1 = nodes[i];
	                for (var j = i + 1; j < nLen; j++) {
	                    var n2 = nodes[j];
	                    vec2.sub(v12, n2.p, n1.p);
	                    var d = vec2.len(v12);
	                    if (d === 0) {
	                        // Random repulse
	                        vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);
	                        d = 1;
	                    }
	                    var repFact = (n1.rep + n2.rep) / d / d;
	                    !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);
	                    !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);
	                }
	            }
	            var v = [];
	            for (var i = 0; i < nLen; i++) {
	                var n = nodes[i];
	                if (!n.fixed) {
	                    vec2.sub(v, n.p, n.pp);
	                    vec2.scaleAndAdd(n.p, n.p, v, friction);
	                    vec2.copy(n.pp, n.p);
	                }
	            }

	            friction = friction * 0.992;

	            cb && cb(nodes, edges, friction < 0.01);
	        }
	    };
	};

/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// FIXME Where to create the simple view coordinate system
	var View = __webpack_require__(671);
	var layout = __webpack_require__(521);
	var bbox = __webpack_require__(551);

	function getViewRect(seriesModel, api, aspect) {
	    var option = seriesModel.getBoxLayoutParams();
	    option.aspect = aspect;
	    return layout.getLayoutRect(option, {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	}

	module.exports = function (ecModel, api) {
	    var viewList = [];
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        var coordSysType = seriesModel.get('coordinateSystem');
	        if (!coordSysType || coordSysType === 'view') {

	            var data = seriesModel.getData();
	            var positions = data.mapArray(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                return [+itemModel.get('x'), +itemModel.get('y')];
	            });

	            var min = [];
	            var max = [];

	            bbox.fromPoints(positions, min, max);

	            // If width or height is 0
	            if (max[0] - min[0] === 0) {
	                max[0] += 1;
	                min[0] -= 1;
	            }
	            if (max[1] - min[1] === 0) {
	                max[1] += 1;
	                min[1] -= 1;
	            }
	            var aspect = (max[0] - min[0]) / (max[1] - min[1]);
	            // FIXME If get view rect after data processed?
	            var viewRect = getViewRect(seriesModel, api, aspect);
	            // Position may be NaN, use view rect instead
	            if (isNaN(aspect)) {
	                min = [viewRect.x, viewRect.y];
	                max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];
	            }

	            var bbWidth = max[0] - min[0];
	            var bbHeight = max[1] - min[1];

	            var viewWidth = viewRect.width;
	            var viewHeight = viewRect.height;

	            var viewCoordSys = seriesModel.coordinateSystem = new View();
	            viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');

	            viewCoordSys.setBoundingRect(min[0], min[1], bbWidth, bbHeight);
	            viewCoordSys.setViewRect(viewRect.x, viewRect.y, viewWidth, viewHeight);

	            // Update roam info
	            viewCoordSys.setCenter(seriesModel.get('center'));
	            viewCoordSys.setZoom(seriesModel.get('zoom'));

	            viewList.push(viewCoordSys);
	        }
	    });
	    return viewList;
	};

/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(719);
	__webpack_require__(720);

/***/ },
/* 719 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var SeriesModel = __webpack_require__(528);
	var zrUtil = __webpack_require__(504);

	var GaugeSeries = SeriesModel.extend({

	    type: 'series.gauge',

	    getInitialData: function getInitialData(option, ecModel) {
	        var list = new List(['value'], this);
	        var dataOpt = option.data || [];
	        if (!zrUtil.isArray(dataOpt)) {
	            dataOpt = [dataOpt];
	        }
	        // Only use the first data item
	        list.initData(dataOpt);
	        return list;
	    },

	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	        // 默认全局居中
	        center: ['50%', '50%'],
	        legendHoverLink: true,
	        radius: '75%',
	        startAngle: 225,
	        endAngle: -45,
	        clockwise: true,
	        // 最小值
	        min: 0,
	        // 最大值
	        max: 100,
	        // 分割段数，默认为10
	        splitNumber: 10,
	        // 坐标轴线
	        axisLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            lineStyle: { // 属性lineStyle控制线条样式
	                color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],
	                width: 30
	            }
	        },
	        // 分隔线
	        splitLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            // 属性length控制线长
	            length: 30,
	            // 属性lineStyle（详见lineStyle）控制线条样式
	            lineStyle: {
	                color: '#eee',
	                width: 2,
	                type: 'solid'
	            }
	        },
	        // 坐标轴小标记
	        axisTick: {
	            // 属性show控制显示与否，默认不显示
	            show: true,
	            // 每份split细分多少段
	            splitNumber: 5,
	            // 属性length控制线长
	            length: 8,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                color: '#eee',
	                width: 1,
	                type: 'solid'
	            }
	        },
	        axisLabel: {
	            show: true,
	            distance: 5,
	            // formatter: null,
	            textStyle: { // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: 'auto'
	            }
	        },
	        pointer: {
	            show: true,
	            length: '80%',
	            width: 8
	        },
	        itemStyle: {
	            normal: {
	                color: 'auto'
	            }
	        },
	        title: {
	            show: true,
	            // x, y，单位px
	            offsetCenter: [0, '-40%'],
	            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            textStyle: {
	                color: '#333',
	                fontSize: 15
	            }
	        },
	        detail: {
	            show: true,
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderWidth: 0,
	            borderColor: '#ccc',
	            width: 100,
	            height: 40,
	            // x, y，单位px
	            offsetCenter: [0, '40%'],
	            // formatter: null,
	            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            textStyle: {
	                color: 'auto',
	                fontSize: 30
	            }
	        }
	    }
	});

	module.exports = GaugeSeries;

/***/ },
/* 720 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PointerPath = __webpack_require__(721);

	var graphic = __webpack_require__(543);
	var numberUtil = __webpack_require__(507);
	var parsePercent = numberUtil.parsePercent;

	function parsePosition(seriesModel, api) {
	    var center = seriesModel.get('center');
	    var width = api.getWidth();
	    var height = api.getHeight();
	    var size = Math.min(width, height);
	    var cx = parsePercent(center[0], api.getWidth());
	    var cy = parsePercent(center[1], api.getHeight());
	    var r = parsePercent(seriesModel.get('radius'), size / 2);

	    return {
	        cx: cx,
	        cy: cy,
	        r: r
	    };
	}

	function formatLabel(label, labelFormatter) {
	    if (labelFormatter) {
	        if (typeof labelFormatter === 'string') {
	            label = labelFormatter.replace('{value}', label != null ? label : '');
	        } else if (typeof labelFormatter === 'function') {
	            label = labelFormatter(label);
	        }
	    }

	    return label;
	}

	var PI2 = Math.PI * 2;

	var GaugeView = __webpack_require__(542).extend({

	    type: 'gauge',

	    render: function render(seriesModel, ecModel, api) {

	        this.group.removeAll();

	        var colorList = seriesModel.get('axisLine.lineStyle.color');
	        var posInfo = parsePosition(seriesModel, api);

	        this._renderMain(seriesModel, ecModel, api, colorList, posInfo);
	    },

	    dispose: function dispose() {},

	    _renderMain: function _renderMain(seriesModel, ecModel, api, colorList, posInfo) {
	        var group = this.group;

	        var axisLineModel = seriesModel.getModel('axisLine');
	        var lineStyleModel = axisLineModel.getModel('lineStyle');

	        var clockwise = seriesModel.get('clockwise');
	        var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;
	        var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;

	        var angleRangeSpan = (endAngle - startAngle) % PI2;

	        var prevEndAngle = startAngle;
	        var axisLineWidth = lineStyleModel.get('width');

	        for (var i = 0; i < colorList.length; i++) {
	            // Clamp
	            var percent = Math.min(Math.max(colorList[i][0], 0), 1);
	            var endAngle = startAngle + angleRangeSpan * percent;
	            var sector = new graphic.Sector({
	                shape: {
	                    startAngle: prevEndAngle,
	                    endAngle: endAngle,
	                    cx: posInfo.cx,
	                    cy: posInfo.cy,
	                    clockwise: clockwise,
	                    r0: posInfo.r - axisLineWidth,
	                    r: posInfo.r
	                },
	                silent: true
	            });

	            sector.setStyle({
	                fill: colorList[i][1]
	            });

	            sector.setStyle(lineStyleModel.getLineStyle(
	            // Because we use sector to simulate arc
	            // so the properties for stroking are useless
	            ['color', 'borderWidth', 'borderColor']));

	            group.add(sector);

	            prevEndAngle = endAngle;
	        }

	        var getColor = function getColor(percent) {
	            // Less than 0
	            if (percent <= 0) {
	                return colorList[0][1];
	            }
	            for (var i = 0; i < colorList.length; i++) {
	                if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {
	                    return colorList[i][1];
	                }
	            }
	            // More than 1
	            return colorList[i - 1][1];
	        };

	        if (!clockwise) {
	            var tmp = startAngle;
	            startAngle = endAngle;
	            endAngle = tmp;
	        }

	        this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);

	        this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);

	        this._renderTitle(seriesModel, ecModel, api, getColor, posInfo);
	        this._renderDetail(seriesModel, ecModel, api, getColor, posInfo);
	    },

	    _renderTicks: function _renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {
	        var group = this.group;
	        var cx = posInfo.cx;
	        var cy = posInfo.cy;
	        var r = posInfo.r;

	        var minVal = +seriesModel.get('min');
	        var maxVal = +seriesModel.get('max');

	        var splitLineModel = seriesModel.getModel('splitLine');
	        var tickModel = seriesModel.getModel('axisTick');
	        var labelModel = seriesModel.getModel('axisLabel');

	        var splitNumber = seriesModel.get('splitNumber');
	        var subSplitNumber = tickModel.get('splitNumber');

	        var splitLineLen = parsePercent(splitLineModel.get('length'), r);
	        var tickLen = parsePercent(tickModel.get('length'), r);

	        var angle = startAngle;
	        var step = (endAngle - startAngle) / splitNumber;
	        var subStep = step / subSplitNumber;

	        var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();
	        var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();
	        var textStyleModel = labelModel.getModel('textStyle');

	        for (var i = 0; i <= splitNumber; i++) {
	            var unitX = Math.cos(angle);
	            var unitY = Math.sin(angle);
	            // Split line
	            if (splitLineModel.get('show')) {
	                var splitLine = new graphic.Line({
	                    shape: {
	                        x1: unitX * r + cx,
	                        y1: unitY * r + cy,
	                        x2: unitX * (r - splitLineLen) + cx,
	                        y2: unitY * (r - splitLineLen) + cy
	                    },
	                    style: splitLineStyle,
	                    silent: true
	                });
	                if (splitLineStyle.stroke === 'auto') {
	                    splitLine.setStyle({
	                        stroke: getColor(i / splitNumber)
	                    });
	                }

	                group.add(splitLine);
	            }

	            // Label
	            if (labelModel.get('show')) {
	                var label = formatLabel(numberUtil.round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));
	                var distance = labelModel.get('distance');

	                var text = new graphic.Text({
	                    style: {
	                        text: label,
	                        x: unitX * (r - splitLineLen - distance) + cx,
	                        y: unitY * (r - splitLineLen - distance) + cy,
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont(),
	                        textVerticalAlign: unitY < -0.4 ? 'top' : unitY > 0.4 ? 'bottom' : 'middle',
	                        textAlign: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'
	                    },
	                    silent: true
	                });
	                if (text.style.fill === 'auto') {
	                    text.setStyle({
	                        fill: getColor(i / splitNumber)
	                    });
	                }

	                group.add(text);
	            }

	            // Axis tick
	            if (tickModel.get('show') && i !== splitNumber) {
	                for (var j = 0; j <= subSplitNumber; j++) {
	                    var unitX = Math.cos(angle);
	                    var unitY = Math.sin(angle);
	                    var tickLine = new graphic.Line({
	                        shape: {
	                            x1: unitX * r + cx,
	                            y1: unitY * r + cy,
	                            x2: unitX * (r - tickLen) + cx,
	                            y2: unitY * (r - tickLen) + cy
	                        },
	                        silent: true,
	                        style: tickLineStyle
	                    });

	                    if (tickLineStyle.stroke === 'auto') {
	                        tickLine.setStyle({
	                            stroke: getColor((i + j / subSplitNumber) / splitNumber)
	                        });
	                    }

	                    group.add(tickLine);
	                    angle += subStep;
	                }
	                angle -= subStep;
	            } else {
	                angle += step;
	            }
	        }
	    },

	    _renderPointer: function _renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {

	        var group = this.group;
	        var oldData = this._data;

	        if (!seriesModel.get('pointer.show')) {
	            // Remove old element
	            oldData.eachItemGraphicEl(function (el) {
	                group.remove(el);
	            });
	            return;
	        }

	        var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];
	        var angleExtent = [startAngle, endAngle];

	        var data = seriesModel.getData();

	        data.diff(oldData).add(function (idx) {
	            var pointer = new PointerPath({
	                shape: {
	                    angle: startAngle
	                }
	            });

	            graphic.updateProps(pointer, {
	                shape: {
	                    angle: numberUtil.linearMap(data.get('value', idx), valueExtent, angleExtent, true)
	                }
	            }, seriesModel);

	            group.add(pointer);
	            data.setItemGraphicEl(idx, pointer);
	        }).update(function (newIdx, oldIdx) {
	            var pointer = oldData.getItemGraphicEl(oldIdx);

	            graphic.updateProps(pointer, {
	                shape: {
	                    angle: numberUtil.linearMap(data.get('value', newIdx), valueExtent, angleExtent, true)
	                }
	            }, seriesModel);

	            group.add(pointer);
	            data.setItemGraphicEl(newIdx, pointer);
	        }).remove(function (idx) {
	            var pointer = oldData.getItemGraphicEl(idx);
	            group.remove(pointer);
	        }).execute();

	        data.eachItemGraphicEl(function (pointer, idx) {
	            var itemModel = data.getItemModel(idx);
	            var pointerModel = itemModel.getModel('pointer');

	            pointer.setShape({
	                x: posInfo.cx,
	                y: posInfo.cy,
	                width: parsePercent(pointerModel.get('width'), posInfo.r),
	                r: parsePercent(pointerModel.get('length'), posInfo.r)
	            });

	            pointer.useStyle(itemModel.getModel('itemStyle.normal').getItemStyle());

	            if (pointer.style.fill === 'auto') {
	                pointer.setStyle('fill', getColor((data.get('value', idx) - valueExtent[0]) / (valueExtent[1] - valueExtent[0])));
	            }

	            graphic.setHoverStyle(pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle());
	        });

	        this._data = data;
	    },

	    _renderTitle: function _renderTitle(seriesModel, ecModel, api, getColor, posInfo) {
	        var titleModel = seriesModel.getModel('title');
	        if (titleModel.get('show')) {
	            var textStyleModel = titleModel.getModel('textStyle');
	            var offsetCenter = titleModel.get('offsetCenter');
	            var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	            var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	            var text = new graphic.Text({
	                style: {
	                    x: x,
	                    y: y,
	                    // FIXME First data name ?
	                    text: seriesModel.getData().getName(0),
	                    fill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont(),
	                    textAlign: 'center',
	                    textVerticalAlign: 'middle'
	                }
	            });
	            this.group.add(text);
	        }
	    },

	    _renderDetail: function _renderDetail(seriesModel, ecModel, api, getColor, posInfo) {
	        var detailModel = seriesModel.getModel('detail');
	        var minVal = +seriesModel.get('min');
	        var maxVal = +seriesModel.get('max');
	        if (detailModel.get('show')) {
	            var textStyleModel = detailModel.getModel('textStyle');
	            var offsetCenter = detailModel.get('offsetCenter');
	            var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	            var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	            var width = parsePercent(detailModel.get('width'), posInfo.r);
	            var height = parsePercent(detailModel.get('height'), posInfo.r);
	            var value = seriesModel.getData().get('value', 0);
	            var rect = new graphic.Rect({
	                shape: {
	                    x: x - width / 2,
	                    y: y - height / 2,
	                    width: width,
	                    height: height
	                },
	                style: {
	                    text: formatLabel(
	                    // FIXME First data name ?
	                    value, detailModel.get('formatter')),
	                    fill: detailModel.get('backgroundColor'),
	                    textFill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont()
	                }
	            });
	            if (rect.style.textFill === 'auto') {
	                rect.setStyle('textFill', getColor(numberUtil.linearMap(value, [minVal, maxVal], [0, 1], true)));
	            }
	            rect.setStyle(detailModel.getItemStyle(['color']));
	            this.group.add(rect);
	        }
	    }
	});

	module.exports = GaugeView;

/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(545).extend({

	    type: 'echartsGaugePointer',

	    shape: {
	        angle: 0,

	        width: 10,

	        r: 10,

	        x: 0,

	        y: 0
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var mathCos = Math.cos;
	        var mathSin = Math.sin;

	        var r = shape.r;
	        var width = shape.width;
	        var angle = shape.angle;
	        var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);
	        var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);

	        angle = shape.angle - Math.PI / 2;
	        ctx.moveTo(x, y);
	        ctx.lineTo(shape.x + mathCos(angle) * width, shape.y + mathSin(angle) * width);
	        ctx.lineTo(shape.x + mathCos(shape.angle) * r, shape.y + mathSin(shape.angle) * r);
	        ctx.lineTo(shape.x - mathCos(angle) * width, shape.y - mathSin(angle) * width);
	        ctx.lineTo(x, y);
	        return;
	    }
	});

/***/ },
/* 722 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var echarts = __webpack_require__(501);

	__webpack_require__(723);
	__webpack_require__(724);

	echarts.registerVisual(zrUtil.curry(__webpack_require__(646), 'funnel'));
	echarts.registerLayout(__webpack_require__(725));

	echarts.registerProcessor(zrUtil.curry(__webpack_require__(649), 'funnel'));

/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var modelUtil = __webpack_require__(505);
	var completeDimensions = __webpack_require__(603);

	var FunnelSeries = __webpack_require__(501).extendSeriesModel({

	    type: 'series.funnel',

	    init: function init(option) {
	        FunnelSeries.superApply(this, 'init', arguments);

	        // Enable legend selection for each data item
	        // Use a function instead of direct access because data reference may changed
	        this.legendDataProvider = function () {
	            return this.getRawData();
	        };
	        // Extend labelLine emphasis
	        this._defaultLabelLine(option);
	    },

	    getInitialData: function getInitialData(option, ecModel) {
	        var dimensions = completeDimensions(['value'], option.data);
	        var list = new List(dimensions, this);
	        list.initData(option.data);
	        return list;
	    },

	    _defaultLabelLine: function _defaultLabelLine(option) {
	        // Extend labelLine emphasis
	        modelUtil.defaultEmphasis(option.labelLine, ['show']);

	        var labelLineNormalOpt = option.labelLine.normal;
	        var labelLineEmphasisOpt = option.labelLine.emphasis;
	        // Not show label line if `label.normal.show = false`
	        labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.normal.show;
	        labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.label.emphasis.show;
	    },

	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        legendHoverLink: true,
	        left: 80,
	        top: 60,
	        right: 80,
	        bottom: 60,
	        // width: {totalWidth} - left - right,
	        // height: {totalHeight} - top - bottom,

	        // 默认取数据最小最大值
	        // min: 0,
	        // max: 100,
	        minSize: '0%',
	        maxSize: '100%',
	        sort: 'descending', // 'ascending', 'descending'
	        gap: 0,
	        funnelAlign: 'center',
	        label: {
	            normal: {
	                show: true,
	                position: 'outer'
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            },
	            emphasis: {
	                show: true
	            }
	        },
	        labelLine: {
	            normal: {
	                show: true,
	                length: 20,
	                lineStyle: {
	                    // color: 各异,
	                    width: 1,
	                    type: 'solid'
	                }
	            },
	            emphasis: {}
	        },
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                borderColor: '#fff',
	                borderWidth: 1
	            },
	            emphasis: {
	                // color: 各异,
	            }
	        }
	    }
	});

	module.exports = FunnelSeries;

/***/ },
/* 724 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);

	/**
	 * Piece of pie including Sector, Label, LabelLine
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 */
	function FunnelPiece(data, idx) {

	    graphic.Group.call(this);

	    var polygon = new graphic.Polygon();
	    var labelLine = new graphic.Polyline();
	    var text = new graphic.Text();
	    this.add(polygon);
	    this.add(labelLine);
	    this.add(text);

	    this.updateData(data, idx, true);

	    // Hover to change label and labelLine
	    function onEmphasis() {
	        labelLine.ignore = labelLine.hoverIgnore;
	        text.ignore = text.hoverIgnore;
	    }
	    function onNormal() {
	        labelLine.ignore = labelLine.normalIgnore;
	        text.ignore = text.normalIgnore;
	    }
	    this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	}

	var funnelPieceProto = FunnelPiece.prototype;

	function getLabelStyle(data, idx, state, labelModel) {
	    var textStyleModel = labelModel.getModel('textStyle');
	    var position = labelModel.get('position');
	    var isLabelInside = position === 'inside' || position === 'inner' || position === 'center';
	    return {
	        fill: textStyleModel.getTextColor() || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	        textFont: textStyleModel.getFont(),
	        text: zrUtil.retrieve(data.hostModel.getFormattedLabel(idx, state), data.getName(idx))
	    };
	}

	var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];
	funnelPieceProto.updateData = function (data, idx, firstCreate) {

	    var polygon = this.childAt(0);

	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var opacity = data.getItemModel(idx).get(opacityAccessPath);
	    opacity = opacity == null ? 1 : opacity;

	    // Reset style
	    polygon.useStyle({});

	    if (firstCreate) {
	        polygon.setShape({
	            points: layout.points
	        });
	        polygon.setStyle({ opacity: 0 });
	        graphic.initProps(polygon, {
	            style: {
	                opacity: opacity
	            }
	        }, seriesModel, idx);
	    } else {
	        graphic.updateProps(polygon, {
	            style: {
	                opacity: opacity
	            },
	            shape: {
	                points: layout.points
	            }
	        }, seriesModel, idx);
	    }

	    // Update common style
	    var itemStyleModel = itemModel.getModel('itemStyle');
	    var visualColor = data.getItemVisual(idx, 'color');

	    polygon.setStyle(zrUtil.defaults({
	        lineJoin: 'round',
	        fill: visualColor
	    }, itemStyleModel.getModel('normal').getItemStyle(['opacity'])));
	    polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

	    this._updateLabel(data, idx);

	    graphic.setHoverStyle(this);
	};

	funnelPieceProto._updateLabel = function (data, idx) {

	    var labelLine = this.childAt(1);
	    var labelText = this.childAt(2);

	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var labelLayout = layout.label;
	    var visualColor = data.getItemVisual(idx, 'color');

	    graphic.updateProps(labelLine, {
	        shape: {
	            points: labelLayout.linePoints || labelLayout.linePoints
	        }
	    }, seriesModel, idx);

	    graphic.updateProps(labelText, {
	        style: {
	            x: labelLayout.x,
	            y: labelLayout.y
	        }
	    }, seriesModel, idx);
	    labelText.attr({
	        style: {
	            textAlign: labelLayout.textAlign,
	            textVerticalAlign: labelLayout.verticalAlign,
	            textFont: labelLayout.font
	        },
	        rotation: labelLayout.rotation,
	        origin: [labelLayout.x, labelLayout.y],
	        z2: 10
	    });

	    var labelModel = itemModel.getModel('label.normal');
	    var labelHoverModel = itemModel.getModel('label.emphasis');
	    var labelLineModel = itemModel.getModel('labelLine.normal');
	    var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');

	    labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel));

	    labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	    labelText.hoverIgnore = !labelHoverModel.get('show');

	    labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	    labelLine.hoverIgnore = !labelLineHoverModel.get('show');

	    // Default use item visual color
	    labelLine.setStyle({
	        stroke: visualColor
	    });
	    labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());

	    labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel);
	    labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	};

	zrUtil.inherits(FunnelPiece, graphic.Group);

	var Funnel = __webpack_require__(542).extend({

	    type: 'funnel',

	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var oldData = this._data;

	        var group = this.group;

	        data.diff(oldData).add(function (idx) {
	            var funnelPiece = new FunnelPiece(data, idx);

	            data.setItemGraphicEl(idx, funnelPiece);

	            group.add(funnelPiece);
	        }).update(function (newIdx, oldIdx) {
	            var piePiece = oldData.getItemGraphicEl(oldIdx);

	            piePiece.updateData(data, newIdx);

	            group.add(piePiece);
	            data.setItemGraphicEl(newIdx, piePiece);
	        }).remove(function (idx) {
	            var piePiece = oldData.getItemGraphicEl(idx);
	            group.remove(piePiece);
	        }).execute();

	        this._data = data;
	    },

	    remove: function remove() {
	        this.group.removeAll();
	        this._data = null;
	    },

	    dispose: function dispose() {}
	});

	module.exports = Funnel;

/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var layout = __webpack_require__(521);
	var number = __webpack_require__(507);

	var parsePercent = number.parsePercent;

	function getViewRect(seriesModel, api) {
	    return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	}

	function getSortedIndices(data, sort) {
	    var valueArr = data.mapArray('value', function (val) {
	        return val;
	    });
	    var indices = [];
	    var isAscending = sort === 'ascending';
	    for (var i = 0, len = data.count(); i < len; i++) {
	        indices[i] = i;
	    }
	    indices.sort(function (a, b) {
	        return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];
	    });
	    return indices;
	}

	function labelLayout(data) {
	    data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var labelModel = itemModel.getModel('label.normal');
	        var labelPosition = labelModel.get('position');

	        var labelLineModel = itemModel.getModel('labelLine.normal');

	        var layout = data.getItemLayout(idx);
	        var points = layout.points;

	        var isLabelInside = labelPosition === 'inner' || labelPosition === 'inside' || labelPosition === 'center';

	        var textAlign;
	        var textX;
	        var textY;
	        var linePoints;

	        if (isLabelInside) {
	            textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;
	            textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;
	            textAlign = 'center';
	            linePoints = [[textX, textY], [textX, textY]];
	        } else {
	            var x1;
	            var y1;
	            var x2;
	            var labelLineLen = labelLineModel.get('length');
	            if (labelPosition === 'left') {
	                // Left side
	                x1 = (points[3][0] + points[0][0]) / 2;
	                y1 = (points[3][1] + points[0][1]) / 2;
	                x2 = x1 - labelLineLen;
	                textX = x2 - 5;
	                textAlign = 'right';
	            } else {
	                // Right side
	                x1 = (points[1][0] + points[2][0]) / 2;
	                y1 = (points[1][1] + points[2][1]) / 2;
	                x2 = x1 + labelLineLen;
	                textX = x2 + 5;
	                textAlign = 'left';
	            }
	            var y2 = y1;

	            linePoints = [[x1, y1], [x2, y2]];
	            textY = y2;
	        }

	        layout.label = {
	            linePoints: linePoints,
	            x: textX,
	            y: textY,
	            verticalAlign: 'middle',
	            textAlign: textAlign,
	            inside: isLabelInside
	        };
	    });
	}

	module.exports = function (ecModel, api, payload) {
	    ecModel.eachSeriesByType('funnel', function (seriesModel) {
	        var data = seriesModel.getData();
	        var sort = seriesModel.get('sort');
	        var viewRect = getViewRect(seriesModel, api);
	        var indices = getSortedIndices(data, sort);

	        var sizeExtent = [parsePercent(seriesModel.get('minSize'), viewRect.width), parsePercent(seriesModel.get('maxSize'), viewRect.width)];
	        var dataExtent = data.getDataExtent('value');
	        var min = seriesModel.get('min');
	        var max = seriesModel.get('max');
	        if (min == null) {
	            min = Math.min(dataExtent[0], 0);
	        }
	        if (max == null) {
	            max = dataExtent[1];
	        }

	        var funnelAlign = seriesModel.get('funnelAlign');
	        var gap = seriesModel.get('gap');
	        var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();

	        var y = viewRect.y;

	        var getLinePoints = function getLinePoints(idx, offY) {
	            // End point index is data.count() and we assign it 0
	            var val = data.get('value', idx) || 0;
	            var itemWidth = number.linearMap(val, [min, max], sizeExtent, true);
	            var x0;
	            switch (funnelAlign) {
	                case 'left':
	                    x0 = viewRect.x;
	                    break;
	                case 'center':
	                    x0 = viewRect.x + (viewRect.width - itemWidth) / 2;
	                    break;
	                case 'right':
	                    x0 = viewRect.x + viewRect.width - itemWidth;
	                    break;
	            }
	            return [[x0, offY], [x0 + itemWidth, offY]];
	        };

	        if (sort === 'ascending') {
	            // From bottom to top
	            itemHeight = -itemHeight;
	            gap = -gap;
	            y += viewRect.height;
	            indices = indices.reverse();
	        }

	        for (var i = 0; i < indices.length; i++) {
	            var idx = indices[i];
	            var nextIdx = indices[i + 1];
	            var start = getLinePoints(idx, y);
	            var end = getLinePoints(nextIdx, y + itemHeight);

	            y += itemHeight + gap;

	            data.setItemLayout(idx, {
	                points: start.concat(end.slice().reverse())
	            });
	        }

	        labelLayout(data);
	    });
	};

/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);

	__webpack_require__(727);

	__webpack_require__(738);
	__webpack_require__(739);

	echarts.registerVisual(__webpack_require__(740));

/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(728);
	__webpack_require__(731);
	__webpack_require__(733);

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);

	var CLICK_THRESHOLD = 5; // > 4

	// Parallel view
	echarts.extendComponentView({
	    type: 'parallel',

	    render: function render(parallelModel, ecModel, api) {
	        var zr = api.getZr();

	        if (!this.__onMouseDown) {
	            // FIXME
	            // click: mousemove check. otherwise confilct with drag brush.
	            var mousedownPoint;
	            zr.on('mousedown', this.__onMouseDown = function (e) {
	                mousedownPoint = [e.offsetX, e.offsetY];
	            });
	            zr.on('mouseup', this.__onMouseUp = function (e) {
	                var point = [e.offsetX, e.offsetY];
	                var dist = Math.pow(mousedownPoint[0] - point[0], 2) + Math.pow(mousedownPoint[1] - point[1], 2);

	                if (!parallelModel.get('axisExpandable') || dist > CLICK_THRESHOLD) {
	                    return;
	                }

	                var coordSys = parallelModel.coordinateSystem;
	                var closestDim = coordSys.findClosestAxisDim(point);
	                if (closestDim) {
	                    var axisIndex = zrUtil.indexOf(coordSys.dimensions, closestDim);
	                    api.dispatchAction({
	                        type: 'parallelAxisExpand',
	                        axisExpandCenter: axisIndex
	                    });
	                }
	            });
	        }
	    },

	    dispose: function dispose(ecModel, api) {
	        api.getZr().off(this.__onMouseDown);
	        api.getZr().off(this.__onMouseUp);
	    }
	});

	echarts.registerPreprocessor(__webpack_require__(737));

/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Parallel coordinate system creater.
	 */

	var Parallel = __webpack_require__(729);

	function create(ecModel, api) {
	    var coordSysList = [];

	    ecModel.eachComponent('parallel', function (parallelModel, idx) {
	        var coordSys = new Parallel(parallelModel, ecModel, api);

	        coordSys.name = 'parallel_' + idx;
	        coordSys.resize(parallelModel, api);

	        parallelModel.coordinateSystem = coordSys;
	        coordSys.model = parallelModel;

	        coordSysList.push(coordSys);
	    });

	    // Inject the coordinateSystems into seriesModel
	    ecModel.eachSeries(function (seriesModel) {
	        if (seriesModel.get('coordinateSystem') === 'parallel') {
	            var parallelModel = ecModel.queryComponents({
	                mainType: 'parallel',
	                index: seriesModel.get('parallelIndex'),
	                id: seriesModel.get('parallelId')
	            })[0];
	            seriesModel.coordinateSystem = parallelModel.coordinateSystem;
	        }
	    });

	    return coordSysList;
	}

	__webpack_require__(526).register('parallel', { create: create });

/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Parallel Coordinates
	 * <https://en.wikipedia.org/wiki/Parallel_coordinates>
	 */

	var layout = __webpack_require__(521);
	var axisHelper = __webpack_require__(615);
	var zrUtil = __webpack_require__(504);
	var ParallelAxis = __webpack_require__(730);
	var graphic = __webpack_require__(543);
	var matrix = __webpack_require__(511);

	var each = zrUtil.each;

	var PI = Math.PI;

	function Parallel(parallelModel, ecModel, api) {

	    /**
	     * key: dimension
	     * @type {Object.<string, module:echarts/coord/parallel/Axis>}
	     * @private
	     */
	    this._axesMap = {};

	    /**
	     * key: dimension
	     * value: {position: [], rotation, }
	     * @type {Object.<string, Object>}
	     * @private
	     */
	    this._axesLayout = {};

	    /**
	     * Always follow axis order.
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    this.dimensions = parallelModel.dimensions;

	    /**
	     * @type {module:zrender/core/BoundingRect}
	     */
	    this._rect;

	    /**
	     * @type {module:echarts/coord/parallel/ParallelModel}
	     */
	    this._model = parallelModel;

	    this._init(parallelModel, ecModel, api);
	}

	Parallel.prototype = {

	    type: 'parallel',

	    constructor: Parallel,

	    /**
	     * Initialize cartesian coordinate systems
	     * @private
	     */
	    _init: function _init(parallelModel, ecModel, api) {

	        var dimensions = parallelModel.dimensions;
	        var parallelAxisIndex = parallelModel.parallelAxisIndex;

	        each(dimensions, function (dim, idx) {

	            var axisIndex = parallelAxisIndex[idx];
	            var axisModel = ecModel.getComponent('parallelAxis', axisIndex);

	            var axis = this._axesMap[dim] = new ParallelAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisIndex);

	            var isCategory = axis.type === 'category';
	            axis.onBand = isCategory && axisModel.get('boundaryGap');
	            axis.inverse = axisModel.get('inverse');

	            // Inject axis into axisModel
	            axisModel.axis = axis;

	            // Inject axisModel into axis
	            axis.model = axisModel;
	        }, this);
	    },

	    /**
	     * Update axis scale after data processed
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    update: function update(ecModel, api) {
	        this._updateAxesFromSeries(this._model, ecModel);
	    },

	    /**
	     * Update properties from series
	     * @private
	     */
	    _updateAxesFromSeries: function _updateAxesFromSeries(parallelModel, ecModel) {
	        ecModel.eachSeries(function (seriesModel) {

	            if (!parallelModel.contains(seriesModel, ecModel)) {
	                return;
	            }

	            var data = seriesModel.getData();

	            each(this.dimensions, function (dim) {
	                var axis = this._axesMap[dim];
	                axis.scale.unionExtentFromData(data, dim);
	                axisHelper.niceScaleExtent(axis, axis.model);
	            }, this);
	        }, this);
	    },

	    /**
	     * Resize the parallel coordinate system.
	     * @param {module:echarts/coord/parallel/ParallelModel} parallelModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    resize: function resize(parallelModel, api) {
	        this._rect = layout.getLayoutRect(parallelModel.getBoxLayoutParams(), {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });

	        this._layoutAxes(parallelModel);
	    },

	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getRect: function getRect() {
	        return this._rect;
	    },

	    /**
	     * @private
	     */
	    _layoutAxes: function _layoutAxes(parallelModel) {
	        var rect = this._rect;
	        var layout = parallelModel.get('layout');
	        var axes = this._axesMap;
	        var dimensions = this.dimensions;

	        var size = [rect.width, rect.height];
	        var sizeIdx = layout === 'horizontal' ? 0 : 1;
	        var layoutLength = size[sizeIdx];
	        var axisLength = size[1 - sizeIdx];
	        var axisExtent = [0, axisLength];

	        each(axes, function (axis) {
	            var idx = axis.inverse ? 1 : 0;
	            axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);
	        });

	        var axisExpandable = parallelModel.get('axisExpandable');
	        var axisExpandWidth = parallelModel.get('axisExpandWidth');
	        var axisExpandCenter = parallelModel.get('axisExpandCenter');
	        var axisExpandCount = parallelModel.get('axisExpandCount') || 0;
	        var axisExpandWindow;

	        if (axisExpandCenter != null) {
	            // Clamp
	            var left = Math.max(0, Math.floor(axisExpandCenter - (axisExpandCount - 1) / 2));
	            var right = left + axisExpandCount - 1;
	            if (right >= dimensions.length) {
	                right = dimensions.length - 1;
	                left = Math.max(0, Math.floor(right - axisExpandCount + 1));
	            }
	            axisExpandWindow = [left, right];
	        }

	        var calcPos = axisExpandable && axisExpandWindow && axisExpandWidth ? function (axisIndex, layoutLength, axisCount) {
	            var peekIntervalCount = axisExpandWindow[1] - axisExpandWindow[0];
	            var otherWidth = (layoutLength - axisExpandWidth * peekIntervalCount) / (axisCount - 1 - peekIntervalCount);

	            var position;

	            if (axisIndex < axisExpandWindow[0]) {
	                position = (axisIndex - 1) * otherWidth;
	            } else if (axisIndex <= axisExpandWindow[1]) {
	                position = axisExpandWindow[0] * otherWidth + (axisIndex - axisExpandWindow[0]) * axisExpandWidth;
	            } else if (axisIndex === axisCount - 1) {
	                position = layoutLength;
	            } else {
	                position = axisExpandWindow[0] * otherWidth + peekIntervalCount * axisExpandWidth + (axisIndex - axisExpandWindow[1]) * otherWidth;
	            }

	            return {
	                position: position,
	                axisNameAvailableWidth: axisExpandWindow[0] < axisIndex && axisIndex < axisExpandWindow[1] ? axisExpandWidth : otherWidth
	            };
	        } : function (axisIndex, layoutLength, axisCount) {
	            var step = layoutLength / (axisCount - 1);
	            return {
	                position: step * axisIndex,
	                axisNameAvailableWidth: step
	            };
	        };

	        each(dimensions, function (dim, idx) {
	            var posInfo = calcPos(idx, layoutLength, dimensions.length);

	            var positionTable = {
	                horizontal: {
	                    x: posInfo.position,
	                    y: axisLength
	                },
	                vertical: {
	                    x: 0,
	                    y: posInfo.position
	                }
	            };
	            var rotationTable = {
	                horizontal: PI / 2,
	                vertical: 0
	            };

	            var position = [positionTable[layout].x + rect.x, positionTable[layout].y + rect.y];

	            var rotation = rotationTable[layout];
	            var transform = matrix.create();
	            matrix.rotate(transform, transform, rotation);
	            matrix.translate(transform, transform, position);

	            // TODO
	            // tick等排布信息。

	            // TODO
	            // 根据axis order 更新 dimensions顺序。

	            this._axesLayout[dim] = {
	                position: position,
	                rotation: rotation,
	                transform: transform,
	                axisNameAvailableWidth: posInfo.axisNameAvailableWidth,
	                tickDirection: 1,
	                labelDirection: 1,
	                axisExpandWindow: axisExpandWindow
	            };
	        }, this);
	    },

	    /**
	     * Get axis by dim.
	     * @param {string} dim
	     * @return {module:echarts/coord/parallel/ParallelAxis} [description]
	     */
	    getAxis: function getAxis(dim) {
	        return this._axesMap[dim];
	    },

	    /**
	     * Convert a dim value of a single item of series data to Point.
	     * @param {*} value
	     * @param {string} dim
	     * @return {Array}
	     */
	    dataToPoint: function dataToPoint(value, dim) {
	        return this.axisCoordToPoint(this._axesMap[dim].dataToCoord(value), dim);
	    },

	    /**
	     * Travel data for one time, get activeState of each data item.
	     * @param {module:echarts/data/List} data
	     * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'
	     *                            {number} dataIndex
	     * @param {Object} context
	     */
	    eachActiveState: function eachActiveState(data, callback, context) {
	        var dimensions = this.dimensions;
	        var axesMap = this._axesMap;
	        var hasActiveSet = this.hasAxisbrushed();

	        for (var i = 0, len = data.count(); i < len; i++) {
	            var values = data.getValues(dimensions, i);
	            var activeState;

	            if (!hasActiveSet) {
	                activeState = 'normal';
	            } else {
	                activeState = 'active';
	                for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	                    var dimName = dimensions[j];
	                    var state = axesMap[dimName].model.getActiveState(values[j], j);

	                    if (state === 'inactive') {
	                        activeState = 'inactive';
	                        break;
	                    }
	                }
	            }

	            callback.call(context, activeState, i);
	        }
	    },

	    /**
	     * Whether has any activeSet.
	     * @return {boolean}
	     */
	    hasAxisbrushed: function hasAxisbrushed() {
	        var dimensions = this.dimensions;
	        var axesMap = this._axesMap;
	        var hasActiveSet = false;

	        for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	            if (axesMap[dimensions[j]].model.getActiveState() !== 'normal') {
	                hasActiveSet = true;
	            }
	        }

	        return hasActiveSet;
	    },

	    /**
	     * Convert coords of each axis to Point.
	     *  Return point. For example: [10, 20]
	     * @param {Array.<number>} coords
	     * @param {string} dim
	     * @return {Array.<number>}
	     */
	    axisCoordToPoint: function axisCoordToPoint(coord, dim) {
	        var axisLayout = this._axesLayout[dim];
	        return graphic.applyTransform([coord, 0], axisLayout.transform);
	    },

	    /**
	     * Get axis layout.
	     */
	    getAxisLayout: function getAxisLayout(dim) {
	        return zrUtil.clone(this._axesLayout[dim]);
	    },

	    findClosestAxisDim: function findClosestAxisDim(point) {
	        var axisDim;
	        var minDist = Infinity;

	        zrUtil.each(this._axesLayout, function (axisLayout, dim) {
	            var localPoint = graphic.applyTransform(point, axisLayout.transform, true);
	            var extent = this._axesMap[dim].getExtent();

	            if (localPoint[0] < extent[0] || localPoint[0] > extent[1]) {
	                return;
	            }

	            var dist = Math.abs(localPoint[1]);
	            if (dist < minDist) {
	                minDist = dist;
	                axisDim = dim;
	            }
	        }, this);

	        return axisDim;
	    }

	};

	module.exports = Parallel;

/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Axis = __webpack_require__(624);

	/**
	 * @constructor module:echarts/coord/parallel/ParallelAxis
	 * @extends {module:echarts/coord/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 */
	var ParallelAxis = function ParallelAxis(dim, scale, coordExtent, axisType, axisIndex) {

	  Axis.call(this, dim, scale, coordExtent);

	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */
	  this.type = axisType || 'value';

	  /**
	   * @type {number}
	   * @readOnly
	   */
	  this.axisIndex = axisIndex;
	};

	ParallelAxis.prototype = {

	  constructor: ParallelAxis,

	  /**
	   * Axis model
	   * @param {module:echarts/coord/parallel/AxisModel}
	   */
	  model: null

	};

	zrUtil.inherits(ParallelAxis, Axis);

	module.exports = ParallelAxis;

/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Component = __webpack_require__(519);

	__webpack_require__(732);

	Component.extend({

	    type: 'parallel',

	    dependencies: ['parallelAxis'],

	    /**
	     * @type {module:echarts/coord/parallel/Parallel}
	     */
	    coordinateSystem: null,

	    /**
	     * Each item like: 'dim0', 'dim1', 'dim2', ...
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: null,

	    /**
	     * Coresponding to dimensions.
	     * @type {Array.<number>}
	     * @readOnly
	     */
	    parallelAxisIndex: null,

	    layoutMode: 'box',

	    defaultOption: {
	        zlevel: 0,
	        z: 0,
	        left: 80,
	        top: 60,
	        right: 80,
	        bottom: 60,
	        // width: {totalWidth} - left - right,
	        // height: {totalHeight} - top - bottom,

	        layout: 'horizontal', // 'horizontal' or 'vertical'

	        // FIXME
	        // naming?
	        axisExpandable: false,
	        axisExpandCenter: null,
	        axisExpandCount: 0,
	        axisExpandWidth: 50, // FIXME '10%' ?

	        parallelAxisDefault: null
	    },

	    /**
	     * @override
	     */
	    init: function init() {
	        Component.prototype.init.apply(this, arguments);

	        this.mergeOption({});
	    },

	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(newOption) {
	        var thisOption = this.option;

	        newOption && zrUtil.merge(thisOption, newOption, true);

	        this._initDimensions();
	    },

	    /**
	     * Whether series or axis is in this coordinate system.
	     * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model
	     * @param {module:echarts/model/Global} ecModel
	     */
	    contains: function contains(model, ecModel) {
	        var parallelIndex = model.get('parallelIndex');
	        return parallelIndex != null && ecModel.getComponent('parallel', parallelIndex) === this;
	    },

	    setAxisExpand: function setAxisExpand(opt) {
	        zrUtil.each(['axisExpandable', 'axisExpandCenter', 'axisExpandCount', 'axisExpandWidth'], function (name) {
	            if (opt.hasOwnProperty(name)) {
	                this.option[name] = opt[name];
	            }
	        }, this);
	    },

	    /**
	     * @private
	     */
	    _initDimensions: function _initDimensions() {
	        var dimensions = this.dimensions = [];
	        var parallelAxisIndex = this.parallelAxisIndex = [];

	        var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {
	            // Can not use this.contains here, because
	            // initialization has not been completed yet.
	            return axisModel.get('parallelIndex') === this.componentIndex;
	        });

	        zrUtil.each(axisModels, function (axisModel) {
	            dimensions.push('dim' + axisModel.get('dim'));
	            parallelAxisIndex.push(axisModel.componentIndex);
	        });
	    }

	});

/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ComponentModel = __webpack_require__(519);
	var zrUtil = __webpack_require__(504);
	var makeStyleMapper = __webpack_require__(515);
	var axisModelCreator = __webpack_require__(628);
	var numberUtil = __webpack_require__(507);

	var AxisModel = ComponentModel.extend({

	    type: 'baseParallelAxis',

	    /**
	     * @type {module:echarts/coord/parallel/Axis}
	     */
	    axis: null,

	    /**
	     * @type {Array.<Array.<number>}
	     * @readOnly
	     */
	    activeIntervals: [],

	    /**
	     * @return {Object}
	     */
	    getAreaSelectStyle: function getAreaSelectStyle() {
	        return makeStyleMapper([['fill', 'color'], ['lineWidth', 'borderWidth'], ['stroke', 'borderColor'], ['width', 'width'], ['opacity', 'opacity']]).call(this.getModel('areaSelectStyle'));
	    },

	    /**
	     * The code of this feature is put on AxisModel but not ParallelAxis,
	     * because axisModel can be alive after echarts updating but instance of
	     * ParallelAxis having been disposed. this._activeInterval should be kept
	     * when action dispatched (i.e. legend click).
	     *
	     * @param {Array.<Array<number>>} intervals interval.length === 0
	     *                                          means set all active.
	     * @public
	     */
	    setActiveIntervals: function setActiveIntervals(intervals) {
	        var activeIntervals = this.activeIntervals = zrUtil.clone(intervals);

	        // Normalize
	        if (activeIntervals) {
	            for (var i = activeIntervals.length - 1; i >= 0; i--) {
	                numberUtil.asc(activeIntervals[i]);
	            }
	        }
	    },

	    /**
	     * @param {number|string} [value] When attempting to detect 'no activeIntervals set',
	     *                         value can not be input.
	     * @return {string} 'normal': no activeIntervals set,
	     *                  'active',
	     *                  'inactive'.
	     * @public
	     */
	    getActiveState: function getActiveState(value) {
	        var activeIntervals = this.activeIntervals;

	        if (!activeIntervals.length) {
	            return 'normal';
	        }

	        if (value == null) {
	            return 'inactive';
	        }

	        for (var i = 0, len = activeIntervals.length; i < len; i++) {
	            if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {
	                return 'active';
	            }
	        }
	        return 'inactive';
	    }

	});

	var defaultOption = {

	    type: 'value',

	    /**
	     * @type {Array.<number>}
	     */
	    dim: null, // 0, 1, 2, ...

	    // parallelIndex: null,

	    areaSelectStyle: {
	        width: 20,
	        borderWidth: 1,
	        borderColor: 'rgba(160,197,232)',
	        color: 'rgba(160,197,232)',
	        opacity: 0.3
	    },

	    realtime: true, // Whether realtime update view when select.

	    z: 10
	};

	zrUtil.merge(AxisModel.prototype, __webpack_require__(630));

	function getAxisType(axisName, option) {
	    return option.type || (option.data ? 'category' : 'value');
	}

	axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);

	module.exports = AxisModel;

/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(728);
	__webpack_require__(734);
	__webpack_require__(735);

/***/ },
/* 734 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);

	/**
	 * @payload
	 * @property {string} parallelAxisId
	 * @property {Array.<Array.<number>>} intervals
	 */
	var actionInfo = {
	    type: 'axisAreaSelect',
	    event: 'axisAreaSelected',
	    update: 'updateVisual'
	};
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	    ecModel.eachComponent({ mainType: 'parallelAxis', query: payload }, function (parallelAxisModel) {
	        parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);
	    });
	});

	/**
	 * @payload
	 */
	echarts.registerAction('parallelAxisExpand', function (payload, ecModel) {
	    ecModel.eachComponent({ mainType: 'parallel', query: payload }, function (parallelModel) {
	        parallelModel.setAxisExpand(payload);
	    });
	});

/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var AxisBuilder = __webpack_require__(633);
	var BrushController = __webpack_require__(736);
	var graphic = __webpack_require__(543);

	var elementList = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];

	var AxisView = __webpack_require__(501).extendComponentView({

	    type: 'parallelAxis',

	    /**
	     * @override
	     */
	    init: function init(ecModel, api) {
	        AxisView.superApply(this, 'init', arguments);

	        /**
	         * @type {module:echarts/component/helper/BrushController}
	         */
	        (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this));
	    },

	    /**
	     * @override
	     */
	    render: function render(axisModel, ecModel, api, payload) {
	        if (fromAxisAreaSelect(axisModel, ecModel, payload)) {
	            return;
	        }

	        this.axisModel = axisModel;
	        this.api = api;

	        this.group.removeAll();

	        var oldAxisGroup = this._axisGroup;
	        this._axisGroup = new graphic.Group();
	        this.group.add(this._axisGroup);

	        if (!axisModel.get('show')) {
	            return;
	        }

	        var coordSys = ecModel.getComponent('parallel', axisModel.get('parallelIndex')).coordinateSystem;

	        var areaSelectStyle = axisModel.getAreaSelectStyle();
	        var areaWidth = areaSelectStyle.width;

	        var dim = axisModel.axis.dim;
	        var axisLayout = coordSys.getAxisLayout(dim);

	        // Fetch from axisModel by default.
	        var axisLabelShow;
	        var axisIndex = zrUtil.indexOf(coordSys.dimensions, dim);

	        var axisExpandWindow = axisLayout.axisExpandWindow;
	        if (axisExpandWindow && (axisIndex <= axisExpandWindow[0] || axisIndex >= axisExpandWindow[1])) {
	            axisLabelShow = false;
	        }

	        var builderOpt = zrUtil.extend({
	            axisLabelShow: axisLabelShow,
	            strokeContainThreshold: areaWidth
	        }, axisLayout);

	        var axisBuilder = new AxisBuilder(axisModel, builderOpt);

	        zrUtil.each(elementList, axisBuilder.add, axisBuilder);

	        this._axisGroup.add(axisBuilder.getGroup());

	        this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, areaWidth);

	        graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	    },

	    _refreshBrushController: function _refreshBrushController(builderOpt, areaSelectStyle, axisModel, areaWidth) {
	        // After filtering, axis may change, select area needs to be update.
	        var axis = axisModel.axis;
	        var coverInfoList = zrUtil.map(axisModel.activeIntervals, function (interval) {
	            return {
	                brushType: 'lineX',
	                panelId: 'pl',
	                range: [axis.dataToCoord(interval[0], true), axis.dataToCoord(interval[1], true)]
	            };
	        });

	        var extent = axis.getExtent();
	        var extentLen = extent[1] - extent[0];
	        var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.

	        // width/height might be negative, which will be
	        // normalized in BoundingRect.
	        var rect = graphic.BoundingRect.create({
	            x: extent[0],
	            y: -areaWidth / 2,
	            width: extentLen,
	            height: areaWidth
	        });
	        rect.x -= extra;
	        rect.width += 2 * extra;

	        this._brushController.mount({
	            enableGlobalPan: true,
	            rotation: builderOpt.rotation,
	            position: builderOpt.position
	        }).setPanels([{
	            panelId: 'pl',
	            rect: rect
	        }]).enableBrush({
	            brushType: 'lineX',
	            brushStyle: areaSelectStyle,
	            removeOnClick: true
	        }).updateCovers(coverInfoList);
	    },

	    _onBrush: function _onBrush(coverInfoList, opt) {
	        // Do not cache these object, because the mey be changed.
	        var axisModel = this.axisModel;
	        var axis = axisModel.axis;

	        var intervals = zrUtil.map(coverInfoList, function (coverInfo) {
	            return [axis.coordToData(coverInfo.range[0], true), axis.coordToData(coverInfo.range[1], true)];
	        });

	        // If realtime is true, action is not dispatched on drag end, because
	        // the drag end emits the same params with the last drag move event,
	        // and may have some delay when using touch pad.
	        if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) {
	            // jshint ignore:line
	            this.api.dispatchAction({
	                type: 'axisAreaSelect',
	                parallelAxisId: axisModel.id,
	                intervals: intervals
	            });
	        }
	    },

	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        this._brushController.dispose();
	    }
	});

	function fromAxisAreaSelect(axisModel, ecModel, payload) {
	    return payload && payload.type === 'axisAreaSelect' && ecModel.findComponents({ mainType: 'parallelAxis', query: payload })[0] === axisModel;
	}

	module.exports = AxisView;

/***/ },
/* 736 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Box selection tool.
	 *
	 * @module echarts/component/helper/BrushController
	 */

	var Eventful = __webpack_require__(533);
	var zrUtil = __webpack_require__(504);
	var BoundingRect = __webpack_require__(509);
	var graphic = __webpack_require__(543);
	var interactionMutex = __webpack_require__(678);
	var DataDiffer = __webpack_require__(599);

	var curry = zrUtil.curry;
	var each = zrUtil.each;
	var map = zrUtil.map;
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathPow = Math.pow;

	var COVER_Z = 10000;
	var UNSELECT_THRESHOLD = 6;
	var MIN_RESIZE_LINE_WIDTH = 6;
	var MUTEX_RESOURCE_KEY = 'globalPan';

	var DIRECTION_MAP = {
	    w: [0, 0],
	    e: [0, 1],
	    n: [1, 0],
	    s: [1, 1]
	};
	var CURSOR_MAP = {
	    w: 'ew',
	    e: 'ew',
	    n: 'ns',
	    s: 'ns',
	    ne: 'nesw',
	    sw: 'nesw',
	    nw: 'nwse',
	    se: 'nwse'
	};
	var DEFAULT_BRUSH_OPT = {
	    brushStyle: {
	        lineWidth: 2,
	        stroke: 'rgba(0,0,0,0.3)',
	        fill: 'rgba(0,0,0,0.1)'
	    },
	    transformable: true,
	    brushMode: 'single',
	    removeOnClick: false
	};

	var baseUID = 0;

	/**
	 * @alias module:echarts/component/helper/BrushController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 * @event module:echarts/component/helper/BrushController#brush
	 *        params:
	 *            areas: Array.<Array>, coord relates to container group,
	 *                                    If no container specified, to global.
	 *            opt {
	 *                isEnd: boolean,
	 *                removeOnClick: boolean
	 *            }
	 *
	 * @param {module:zrender/zrender~ZRender} zr
	 */
	function BrushController(zr) {

	    if (__DEV__) {
	        zrUtil.assert(zr);
	    }

	    Eventful.call(this);

	    /**
	     * @type {module:zrender/zrender~ZRender}
	     * @private
	     */
	    this._zr = zr;

	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = new graphic.Group();

	    /**
	     * Only for drawing (after enabledBrush).
	     * @private
	     * @type {string}
	     */
	    this._brushType;

	    /**
	     * Only for drawing (after enabledBrush).
	     * @private
	     * @type {Object}
	     */
	    this._brushOption;

	    /**
	     * @private
	     * @type {Object}
	     */
	    this._panels;

	    /**
	     * @private
	     * @type {Array.<nubmer>}
	     */
	    this._track = [];

	    /**
	     * @private
	     * @type {boolean}
	     */
	    this._dragging;

	    /**
	     * @private
	     * @type {Array}
	     */
	    this._covers = [];

	    /**
	     * @private
	     * @type {moudule:zrender/container/Group}
	     */
	    this._creatingCover;

	    /**
	     * true means global panel
	     * @private
	     * @type {module:zrender/container/Group|boolean}
	     */
	    this._creatingPanel;

	    /**
	     * @private
	     * @type {boolean}
	     */
	    this._enableGlobalPan;

	    /**
	     * @private
	     * @type {boolean}
	     */
	    if (__DEV__) {
	        this._mounted;
	    }

	    /**
	     * @private
	     * @type {string}
	     */
	    this._uid = 'brushController_' + baseUID++;

	    /**
	     * @private
	     * @type {Object}
	     */
	    this._handlers = {};
	    each(mouseHandlers, function (handler, eventName) {
	        this._handlers[eventName] = zrUtil.bind(handler, this);
	    }, this);
	}

	BrushController.prototype = {

	    constructor: BrushController,

	    /**
	     * If set to null/undefined/false, select disabled.
	     * @param {Object} brushOption
	     * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false
	     *                          If pass false/null/undefined, disable brush.
	     * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'
	     * @param {boolean} [brushOption.transformable=true]
	     * @param {boolean} [brushOption.removeOnClick=false]
	     * @param {Object} [brushOption.brushStyle]
	     * @param {number} [brushOption.brushStyle.width]
	     * @param {number} [brushOption.brushStyle.lineWidth]
	     * @param {string} [brushOption.brushStyle.stroke]
	     * @param {string} [brushOption.brushStyle.fill]
	     */
	    enableBrush: function enableBrush(brushOption) {
	        if (__DEV__) {
	            zrUtil.assert(this._mounted);
	        }

	        this._brushType && doDisableBrush(this);
	        brushOption.brushType && doEnableBrush(this, brushOption);

	        return this;
	    },

	    /**
	     * @param {Array.<Object>} panelOpts If not pass, it is global brush.
	     *        Each items: {panelId, rect}
	     */
	    setPanels: function setPanels(panelOpts) {
	        var oldPanels = this._panels || {};
	        var newPanels = this._panels = panelOpts && panelOpts.length && {};
	        var thisGroup = this.group;

	        newPanels && each(panelOpts, function (panelOpt) {
	            var panelId = panelOpt.panelId;
	            var panel = oldPanels[panelId];
	            if (!panel) {
	                panel = new graphic.Rect({
	                    silent: true,
	                    invisible: true
	                });
	                thisGroup.add(panel);
	            }

	            var rect = panelOpt.rect;
	            // Using BoundingRect to normalize negative width/height.
	            if (!(rect instanceof BoundingRect)) {
	                rect = BoundingRect.create(rect);
	            }

	            panel.attr('shape', rect.plain());
	            panel.__brushPanelId = panelId;
	            newPanels[panelId] = panel;
	            oldPanels[panelId] = null;
	        });

	        each(oldPanels, function (panel) {
	            panel && thisGroup.remove(panel);
	        });

	        return this;
	    },

	    /**
	     * @param {Object} [opt]
	     * @return {boolean} [opt.enableGlobalPan=false]
	     * @return {boolean} [opt.position=[0, 0]]
	     * @return {boolean} [opt.rotation=0]
	     * @return {boolean} [opt.scale=[1, 1]]
	     */
	    mount: function mount(opt) {
	        opt = opt || {};

	        if (__DEV__) {
	            this._mounted = true; // should be at first.
	        }

	        this._enableGlobalPan = opt.enableGlobalPan;

	        var thisGroup = this.group;
	        this._zr.add(thisGroup);

	        thisGroup.attr({
	            position: opt.position || [0, 0],
	            rotation: opt.rotation || 0,
	            scale: opt.scale || [1, 1]
	        });

	        return this;
	    },

	    eachCover: function eachCover(cb, context) {
	        each(this._covers, cb, context);
	    },

	    /**
	     * Update covers.
	     * @param {Array.<Object>} brushOptionList Like:
	     *        [
	     *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},
	     *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},
	     *            ...
	     *        ]
	     *        `brushType` is required in each cover info.
	     *        `id` is not mandatory.
	     *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.
	     *        If brushOptionList is null/undefined, all covers removed.
	     */
	    updateCovers: function updateCovers(brushOptionList) {
	        if (__DEV__) {
	            zrUtil.assert(this._mounted);
	        }

	        brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {
	            return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	        });

	        var tmpIdPrefix = '\0-brush-index-';
	        var oldCovers = this._covers;
	        var newCovers = this._covers = [];
	        var controller = this;
	        var creatingCover = this._creatingCover;

	        new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey).add(addOrUpdate).update(addOrUpdate).remove(remove).execute();

	        return this;

	        function getKey(brushOption, index) {
	            return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + '-' + brushOption.brushType;
	        }

	        function oldGetKey(cover, index) {
	            return getKey(cover.__brushOption, index);
	        }

	        function addOrUpdate(newIndex, oldIndex) {
	            var newBrushOption = brushOptionList[newIndex];
	            // Consider setOption in event listener of brushSelect,
	            // where updating cover when creating should be forbiden.
	            if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {
	                newCovers[newIndex] = oldCovers[oldIndex];
	            } else {
	                var cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushOption, oldCovers[oldIndex]) : endCreating(controller, createCover(controller, newBrushOption));
	                updateCoverAfterCreation(controller, cover);
	            }
	        }

	        function remove(oldIndex) {
	            if (oldCovers[oldIndex] !== creatingCover) {
	                controller.group.remove(oldCovers[oldIndex]);
	            }
	        }
	    },

	    unmount: function unmount() {
	        this.enableBrush(false);

	        // container may 'removeAll' outside.
	        clearCovers(this);
	        this._zr.remove(this.group);

	        if (__DEV__) {
	            this._mounted = false; // should be at last.
	        }

	        return this;
	    },

	    dispose: function dispose() {
	        this.unmount();
	        this.off();
	    }
	};

	zrUtil.mixin(BrushController, Eventful);

	function doEnableBrush(controller, brushOption) {
	    var zr = controller._zr;

	    // Consider roam, which takes globalPan too.
	    if (!controller._enableGlobalPan) {
	        interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);
	    }

	    each(controller._handlers, function (handler, eventName) {
	        zr.on(eventName, handler);
	    });

	    controller._brushType = brushOption.brushType;
	    controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	}

	function doDisableBrush(controller) {
	    var zr = controller._zr;

	    interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);

	    each(controller._handlers, function (handler, eventName) {
	        zr.off(eventName, handler);
	    });

	    controller._brushType = controller._brushOption = null;
	}

	function createCover(controller, brushOption) {
	    var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);
	    updateZ(cover);
	    cover.__brushOption = brushOption;
	    controller.group.add(cover);
	    return cover;
	}

	function endCreating(controller, creatingCover) {
	    var coverRenderer = getCoverRenderer(creatingCover);
	    if (coverRenderer.endCreating) {
	        coverRenderer.endCreating(controller, creatingCover);
	        updateZ(creatingCover);
	    }
	    return creatingCover;
	}

	function updateCoverShape(controller, cover) {
	    var brushOption = cover.__brushOption;
	    getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);
	}

	function updateZ(group) {
	    group.traverse(function (el) {
	        el.z = COVER_Z;
	        el.z2 = COVER_Z; // Consider in given container.
	    });
	}

	function updateCoverAfterCreation(controller, cover) {
	    getCoverRenderer(cover).updateCommon(controller, cover);
	    updateCoverShape(controller, cover);
	}

	function getCoverRenderer(cover) {
	    return coverRenderers[cover.__brushOption.brushType];
	}

	function getPanelByPoint(controller, x, y) {
	    var panels = controller._panels;
	    if (!panels) {
	        return true; // Global panel
	    }
	    var panel;
	    each(panels, function (pn) {
	        pn.contain(x, y) && (panel = pn);
	    });
	    return panel;
	}

	function getPanelByCover(controller, cover) {
	    var panels = controller._panels;
	    if (!panels) {
	        return true; // Global panel
	    }
	    var panelId = cover.__brushOption.panelId;
	    // User may give cover without coord sys info,
	    // which is then treated as global panel.
	    return panelId != null ? panels[panelId] : true;
	}

	function clearCovers(controller) {
	    var covers = controller._covers;
	    var originalLength = covers.length;
	    each(covers, function (cover) {
	        controller.group.remove(cover);
	    }, controller);
	    covers.length = 0;

	    return !!originalLength;
	}

	function trigger(controller, opt) {
	    var areas = map(controller._covers, function (cover) {
	        var brushOption = cover.__brushOption;
	        var range = zrUtil.clone(brushOption.range);

	        return {
	            brushType: brushOption.brushType,
	            panelId: brushOption.panelId,
	            range: range
	        };
	    });

	    controller.trigger('brush', areas, {
	        isEnd: !!opt.isEnd,
	        removeOnClick: !!opt.removeOnClick
	    });
	}

	function shouldShowCover(controller) {
	    var track = controller._track;

	    if (!track.length) {
	        return false;
	    }

	    var p2 = track[track.length - 1];
	    var p1 = track[0];
	    var dx = p2[0] - p1[0];
	    var dy = p2[1] - p1[1];
	    var dist = mathPow(dx * dx + dy * dy, 0.5);

	    return dist > UNSELECT_THRESHOLD;
	}

	function getTrackEnds(track) {
	    var tail = track.length - 1;
	    tail < 0 && (tail = 0);
	    return [track[0], track[tail]];
	}

	function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {
	    var cover = new graphic.Group();

	    cover.add(new graphic.Rect({
	        name: 'main',
	        style: makeStyle(brushOption),
	        silent: true,
	        draggable: true,
	        cursor: 'move',
	        drift: curry(doDrift, controller, cover, 'nswe'),
	        ondragend: curry(trigger, controller, { isEnd: true })
	    }));

	    each(edgeNames, function (name) {
	        cover.add(new graphic.Rect({
	            name: name,
	            style: { opacity: 0 },
	            draggable: true,
	            silent: true,
	            invisible: true,
	            drift: curry(doDrift, controller, cover, name),
	            ondragend: curry(trigger, controller, { isEnd: true })
	        }));
	    });

	    return cover;
	}

	function updateBaseRect(controller, cover, localRange, brushOption) {
	    var lineWidth = brushOption.brushStyle.lineWidth || 0;
	    var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);
	    var x = localRange[0][0];
	    var y = localRange[1][0];
	    var xa = x - lineWidth / 2;
	    var ya = y - lineWidth / 2;
	    var x2 = localRange[0][1];
	    var y2 = localRange[1][1];
	    var x2a = x2 - handleSize + lineWidth / 2;
	    var y2a = y2 - handleSize + lineWidth / 2;
	    var width = x2 - x;
	    var height = y2 - y;
	    var widtha = width + lineWidth;
	    var heighta = height + lineWidth;

	    updateRectShape(controller, cover, 'main', x, y, width, height);

	    if (brushOption.transformable) {
	        updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);
	        updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);
	        updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);
	        updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);

	        updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);
	        updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);
	        updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);
	        updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);
	    }
	}

	function updateCommon(controller, cover) {
	    var brushOption = cover.__brushOption;
	    var transformable = brushOption.transformable;

	    var mainEl = cover.childAt(0);
	    mainEl.useStyle(makeStyle(brushOption));
	    mainEl.attr({
	        silent: !transformable,
	        cursor: transformable ? 'move' : 'default'
	    });

	    each(['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'], function (name) {
	        var el = cover.childOfName(name);
	        var globalDir = getGlobalDirection(controller, name);

	        el && el.attr({
	            silent: !transformable,
	            invisible: !transformable,
	            cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null
	        });
	    });
	}

	function updateRectShape(controller, cover, name, x, y, w, h) {
	    var el = cover.childOfName(name);
	    el && el.setShape(pointsToRect(clipByPanel(controller, cover, [[x, y], [x + w, y + h]])));
	}

	function makeStyle(brushOption) {
	    return zrUtil.defaults({ strokeNoScale: true }, brushOption.brushStyle);
	}

	function formatRectRange(x, y, x2, y2) {
	    var min = [mathMin(x, x2), mathMin(y, y2)];
	    var max = [mathMax(x, x2), mathMax(y, y2)];

	    return [[min[0], max[0]], // x range
	    [min[1], max[1]] // y range
	    ];
	}

	function getTransform(controller) {
	    return graphic.getTransform(controller.group);
	}

	function getGlobalDirection(controller, localDirection) {
	    if (localDirection.length > 1) {
	        localDirection = localDirection.split('');
	        var globalDir = [getGlobalDirection(controller, localDirection[0]), getGlobalDirection(controller, localDirection[1])];
	        (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();
	        return globalDir.join('');
	    } else {
	        var map = { w: 'left', e: 'right', n: 'top', s: 'bottom' };
	        var inverseMap = { left: 'w', right: 'e', top: 'n', bottom: 's' };
	        var globalDir = graphic.transformDirection(map[localDirection], getTransform(controller));
	        return inverseMap[globalDir];
	    }
	}

	function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {
	    var brushOption = cover.__brushOption;
	    var rectRange = toRectRange(brushOption.range);
	    var localDelta = toLocalDelta(controller, dx, dy);

	    each(name.split(''), function (namePart) {
	        var ind = DIRECTION_MAP[namePart];
	        rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
	    });

	    brushOption.range = fromRectRange(formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));

	    updateCoverAfterCreation(controller, cover);
	    trigger(controller, { isEnd: false });
	}

	function driftPolygon(controller, cover, dx, dy, e) {
	    var range = cover.__brushOption.range;
	    var localDelta = toLocalDelta(controller, dx, dy);

	    each(range, function (point) {
	        point[0] += localDelta[0];
	        point[1] += localDelta[1];
	    });

	    updateCoverAfterCreation(controller, cover);
	    trigger(controller, { isEnd: false });
	}

	function toLocalDelta(controller, dx, dy) {
	    var thisGroup = controller.group;
	    var localD = thisGroup.transformCoordToLocal(dx, dy);
	    var localZero = thisGroup.transformCoordToLocal(0, 0);

	    return [localD[0] - localZero[0], localD[1] - localZero[1]];
	}

	function clipByPanel(controller, cover, data) {
	    var panel = getPanelByCover(controller, cover);
	    if (panel === true) {
	        // Global panel
	        return zrUtil.clone(data);
	    }

	    var panelRect = panel.getBoundingRect();

	    return zrUtil.map(data, function (point) {
	        var x = point[0];
	        x = mathMax(x, panelRect.x);
	        x = mathMin(x, panelRect.x + panelRect.width);
	        var y = point[1];
	        y = mathMax(y, panelRect.y);
	        y = mathMin(y, panelRect.y + panelRect.height);
	        return [x, y];
	    });
	}

	function pointsToRect(points) {
	    var xmin = mathMin(points[0][0], points[1][0]);
	    var ymin = mathMin(points[0][1], points[1][1]);
	    var xmax = mathMax(points[0][0], points[1][0]);
	    var ymax = mathMax(points[0][1], points[1][1]);

	    return {
	        x: xmin,
	        y: ymin,
	        width: xmax - xmin,
	        height: ymax - ymin
	    };
	}

	function resetCursor(controller, e) {
	    var x = e.offsetX;
	    var y = e.offsetY;
	    var zr = controller._zr;

	    if (controller._brushType) {
	        // If active
	        var panels = controller._panels;
	        var covers = controller._covers;
	        var inCover;

	        for (var i = 0; i < covers.length; i++) {
	            if (coverRenderers[covers[i].__brushOption.brushType].contain(covers[i], x, y)) {
	                inCover = true;
	                break;
	            }
	        }

	        if (!inCover) {
	            if (panels) {
	                // Brush on panels
	                each(panels, function (panel) {
	                    panel.contain(x, y) && zr.setCursorStyle('crosshair');
	                });
	            } else {
	                // Global brush
	                zr.setCursorStyle('crosshair');
	            }
	        }
	    }
	}

	function preventDefault(e) {
	    var rawE = e.event;
	    rawE.preventDefault && rawE.preventDefault();
	}

	function mainShapeContain(cover, x, y) {
	    return cover.childOfName('main').contain(x, y);
	}

	function updateCoverByMouse(controller, e, isEnd) {
	    var x = e.offsetX;
	    var y = e.offsetY;
	    var creatingCover = controller._creatingCover;
	    var panel = controller._creatingPanel;
	    var thisBrushOption = controller._brushOption;
	    var eventParams;

	    controller._track.push(controller.group.transformCoordToLocal(x, y));

	    if (shouldShowCover(controller) || creatingCover) {

	        if (panel && !creatingCover) {
	            thisBrushOption.brushMode === 'single' && clearCovers(controller);
	            var brushOption = zrUtil.clone(thisBrushOption);
	            brushOption.panelId = panel === true ? null : panel.__brushPanelId;
	            creatingCover = controller._creatingCover = createCover(controller, brushOption);
	            controller._covers.push(creatingCover);
	        }

	        if (creatingCover) {
	            var coverRenderer = coverRenderers[controller._brushType];
	            var coverBrushOption = creatingCover.__brushOption;

	            coverBrushOption.range = coverRenderer.getCreatingRange(clipByPanel(controller, creatingCover, controller._track));

	            if (isEnd) {
	                endCreating(controller, creatingCover);
	                coverRenderer.updateCommon(controller, creatingCover);
	            }

	            updateCoverShape(controller, creatingCover);

	            eventParams = { isEnd: isEnd };
	        }
	    } else if (isEnd && thisBrushOption.brushMode === 'single' && thisBrushOption.removeOnClick) {
	        // Help user to remove covers easily, only by a tiny drag, in 'single' mode.
	        // But a single click do not clear covers, because user may have casual
	        // clicks (for example, click on other component and do not expect covers
	        // disappear).
	        // Only some cover removed, trigger action, but not every click trigger action.
	        if (getPanelByPoint(controller, x, y) && clearCovers(controller)) {
	            eventParams = { isEnd: isEnd, removeOnClick: true };
	        }
	    }

	    return eventParams;
	}

	var mouseHandlers = {

	    mousedown: function mousedown(e) {
	        if (this._dragging) {
	            // In case some browser do not support globalOut,
	            // and release mose out side the browser.
	            handleDragEnd.call(this, e);
	        } else if (!e.target || !e.target.draggable) {

	            preventDefault(e);

	            var x = e.offsetX;
	            var y = e.offsetY;

	            this._creatingCover = null;
	            var panel = this._creatingPanel = getPanelByPoint(this, x, y);

	            if (panel) {
	                this._dragging = true;
	                this._track = [this.group.transformCoordToLocal(x, y)];
	            }
	        }
	    },

	    mousemove: function mousemove(e) {
	        // set Cursor
	        resetCursor(this, e);

	        if (this._dragging) {

	            preventDefault(e);

	            var eventParams = updateCoverByMouse(this, e, false);

	            eventParams && trigger(this, eventParams);
	        }
	    },

	    mouseup: handleDragEnd //,

	    // FIXME
	    // in tooltip, globalout should not be triggered.
	    // globalout: handleDragEnd
	};

	function handleDragEnd(e) {
	    if (this._dragging) {

	        preventDefault(e);

	        var eventParams = updateCoverByMouse(this, e, true);

	        this._dragging = false;
	        this._track = [];
	        this._creatingCover = null;

	        // trigger event shoule be at final, after procedure will be nested.
	        eventParams && trigger(this, eventParams);
	    }
	}

	/**
	 * key: brushType
	 * @type {Object}
	 */
	var coverRenderers = {

	    lineX: getLineRenderer(0),

	    lineY: getLineRenderer(1),

	    rect: {
	        createCover: function createCover(controller, brushOption) {
	            return createBaseRectCover(curry(driftRect, function (range) {
	                return range;
	            }, function (range) {
	                return range;
	            }), controller, brushOption, ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']);
	        },
	        getCreatingRange: function getCreatingRange(localTrack) {
	            var ends = getTrackEnds(localTrack);
	            return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
	        },
	        updateCoverShape: function updateCoverShape(controller, cover, localRange, brushOption) {
	            updateBaseRect(controller, cover, localRange, brushOption);
	        },
	        updateCommon: updateCommon,
	        contain: mainShapeContain
	    },

	    polygon: {
	        createCover: function createCover(controller, brushOption) {
	            var cover = new graphic.Group();

	            // Do not use graphic.Polygon because graphic.Polyline do not close the
	            // border of the shape when drawing, which is a better experience for user.
	            cover.add(new graphic.Polyline({
	                name: 'main',
	                style: makeStyle(brushOption),
	                silent: true
	            }));

	            return cover;
	        },
	        getCreatingRange: function getCreatingRange(localTrack) {
	            return localTrack;
	        },
	        endCreating: function endCreating(controller, cover) {
	            cover.remove(cover.childAt(0));
	            // Use graphic.Polygon close the shape.
	            cover.add(new graphic.Polygon({
	                name: 'main',
	                draggable: true,
	                drift: curry(driftPolygon, controller, cover),
	                ondragend: curry(trigger, controller, { isEnd: true })
	            }));
	        },
	        updateCoverShape: function updateCoverShape(controller, cover, localRange, brushOption) {
	            cover.childAt(0).setShape({
	                points: clipByPanel(controller, cover, localRange)
	            });
	        },
	        updateCommon: updateCommon,
	        contain: mainShapeContain
	    }
	};

	function getLineRenderer(xyIndex) {
	    return {
	        createCover: function createCover(controller, brushOption) {
	            return createBaseRectCover(curry(driftRect, function (range) {
	                var rectRange = [range, [0, 100]];
	                xyIndex && rectRange.reverse();
	                return rectRange;
	            }, function (rectRange) {
	                return rectRange[xyIndex];
	            }), controller, brushOption, [['w', 'e'], ['n', 's']][xyIndex]);
	        },
	        getCreatingRange: function getCreatingRange(localTrack) {
	            var ends = getTrackEnds(localTrack);
	            var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);
	            var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);

	            return [min, max];
	        },
	        updateCoverShape: function updateCoverShape(controller, cover, localRange, brushOption) {
	            var brushWidth = brushOption.brushStyle.width;
	            var otherExtent;
	            // If brushWidth not specified, fit the panel.
	            if (brushWidth == null) {
	                var panel = getPanelByCover(controller, cover);
	                var base = 0;
	                if (panel !== true) {
	                    var rect = panel.getBoundingRect();
	                    brushWidth = xyIndex ? rect.width : rect.height;
	                    base = xyIndex ? rect.x : rect.y;
	                }
	                // FIXME
	                // do not support global panel yet.
	                otherExtent = [base, base + (brushWidth || 0)];
	            } else {
	                otherExtent = [-brushWidth / 2, brushWidth / 2];
	            }
	            var rectRange = [localRange, otherExtent];
	            xyIndex && rectRange.reverse();

	            updateBaseRect(controller, cover, rectRange, brushOption);
	        },
	        updateCommon: updateCommon,
	        contain: mainShapeContain
	    };
	}

	module.exports = BrushController;

/***/ },
/* 737 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);

	module.exports = function (option) {
	    createParallelIfNeeded(option);
	    mergeAxisOptionFromParallel(option);
	};

	/**
	 * Create a parallel coordinate if not exists.
	 * @inner
	 */
	function createParallelIfNeeded(option) {
	    if (option.parallel) {
	        return;
	    }

	    var hasParallelSeries = false;

	    zrUtil.each(option.series, function (seriesOpt) {
	        if (seriesOpt && seriesOpt.type === 'parallel') {
	            hasParallelSeries = true;
	        }
	    });

	    if (hasParallelSeries) {
	        option.parallel = [{}];
	    }
	}

	/**
	 * Merge aixs definition from parallel option (if exists) to axis option.
	 * @inner
	 */
	function mergeAxisOptionFromParallel(option) {
	    var axes = modelUtil.normalizeToArray(option.parallelAxis);

	    zrUtil.each(axes, function (axisOption) {
	        if (!zrUtil.isObject(axisOption)) {
	            return;
	        }

	        var parallelIndex = axisOption.parallelIndex || 0;
	        var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];

	        if (parallelOption && parallelOption.parallelAxisDefault) {
	            zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);
	        }
	    });
	}

/***/ },
/* 738 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var zrUtil = __webpack_require__(504);
	var SeriesModel = __webpack_require__(528);
	var completeDimensions = __webpack_require__(603);

	module.exports = SeriesModel.extend({

	    type: 'series.parallel',

	    dependencies: ['parallel'],

	    getInitialData: function getInitialData(option, ecModel) {
	        var parallelModel = ecModel.getComponent('parallel', this.get('parallelIndex'));
	        var parallelAxisIndices = parallelModel.parallelAxisIndex;

	        var rawData = option.data;
	        var modelDims = parallelModel.dimensions;

	        var dataDims = generateDataDims(modelDims, rawData);

	        var dataDimsInfo = zrUtil.map(dataDims, function (dim, dimIndex) {

	            var modelDimsIndex = zrUtil.indexOf(modelDims, dim);
	            var axisModel = modelDimsIndex >= 0 && ecModel.getComponent('parallelAxis', parallelAxisIndices[modelDimsIndex]);

	            if (axisModel && axisModel.get('type') === 'category') {
	                translateCategoryValue(axisModel, dim, rawData);
	                return { name: dim, type: 'ordinal' };
	            } else if (modelDimsIndex < 0) {
	                return completeDimensions.guessOrdinal(rawData, dimIndex) ? { name: dim, type: 'ordinal' } : dim;
	            } else {
	                return dim;
	            }
	        });

	        var list = new List(dataDimsInfo, this);
	        list.initData(rawData);

	        // Anication is forbiden in progressive data mode.
	        if (this.option.progressive) {
	            this.option.animation = false;
	        }

	        return list;
	    },

	    /**
	     * User can get data raw indices on 'axisAreaSelected' event received.
	     *
	     * @public
	     * @param {string} activeState 'active' or 'inactive' or 'normal'
	     * @return {Array.<number>} Raw indices
	     */
	    getRawIndicesByActiveState: function getRawIndicesByActiveState(activeState) {
	        var coordSys = this.coordinateSystem;
	        var data = this.getData();
	        var indices = [];

	        coordSys.eachActiveState(data, function (theActiveState, dataIndex) {
	            if (activeState === theActiveState) {
	                indices.push(data.getRawIndex(dataIndex));
	            }
	        });

	        return indices;
	    },

	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠

	        coordinateSystem: 'parallel',
	        parallelIndex: 0,

	        label: {
	            normal: {
	                show: false
	            },
	            emphasis: {
	                show: false
	            }
	        },

	        inactiveOpacity: 0.05,
	        activeOpacity: 1,

	        lineStyle: {
	            normal: {
	                width: 1,
	                opacity: 0.45,
	                type: 'solid'
	            }
	        },
	        progressive: false, // 100
	        smooth: false,

	        animationEasing: 'linear'
	    }
	});

	function translateCategoryValue(axisModel, dim, rawData) {
	    var axisData = axisModel.get('data');
	    var numberDim = convertDimNameToNumber(dim);

	    if (axisData && axisData.length) {
	        zrUtil.each(rawData, function (dataItem) {
	            if (!dataItem) {
	                return;
	            }
	            // FIXME
	            // time consuming, should use hash?
	            var index = zrUtil.indexOf(axisData, dataItem[numberDim]);
	            dataItem[numberDim] = index >= 0 ? index : NaN;
	        });
	    }
	    // FIXME
	    // 如果没有设置axis data, 应自动算出，或者提示。
	}

	function convertDimNameToNumber(dimName) {
	    return +dimName.replace('dim', '');
	}

	function generateDataDims(modelDims, rawData) {
	    // parallelModel.dimension should not be regarded as data
	    // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];

	    // We detect max dim by parallelModel.dimensions and fist
	    // item in rawData arbitrarily.
	    var maxDimNum = 0;
	    zrUtil.each(modelDims, function (dimName) {
	        var numberDim = convertDimNameToNumber(dimName);
	        numberDim > maxDimNum && (maxDimNum = numberDim);
	    });

	    var firstItem = rawData[0];
	    if (firstItem && firstItem.length - 1 > maxDimNum) {
	        maxDimNum = firstItem.length - 1;
	    }

	    var dataDims = [];
	    for (var i = 0; i <= maxDimNum; i++) {
	        dataDims.push('dim' + i);
	    }

	    return dataDims;
	}

/***/ },
/* 739 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);

	var SMOOTH = 0.3;

	var ParallelView = __webpack_require__(542).extend({

	    type: 'parallel',

	    init: function init() {

	        /**
	         * @type {module:zrender/container/Group}
	         * @private
	         */
	        this._dataGroup = new graphic.Group();

	        this.group.add(this._dataGroup);

	        /**
	         * @type {module:echarts/data/List}
	         */
	        this._data;
	    },

	    /**
	     * @override
	     */
	    render: function render(seriesModel, ecModel, api, payload) {
	        this._renderForNormal(seriesModel);
	        // this[
	        //     seriesModel.option.progressive
	        //         ? '_renderForProgressive'
	        //         : '_renderForNormal'
	        // ](seriesModel);
	    },

	    dispose: function dispose() {},

	    /**
	     * @private
	     */
	    _renderForNormal: function _renderForNormal(seriesModel) {
	        var dataGroup = this._dataGroup;
	        var data = seriesModel.getData();
	        var oldData = this._data;
	        var coordSys = seriesModel.coordinateSystem;
	        var dimensions = coordSys.dimensions;
	        var option = seriesModel.option;
	        var smooth = option.smooth ? SMOOTH : null;

	        // Consider switch between progressive and not.
	        // oldData && oldData.__plProgressive && dataGroup.removeAll();

	        data.diff(oldData).add(add).update(update).remove(remove).execute();

	        // Update style
	        updateElCommon(data, smooth);

	        // First create
	        if (!this._data) {
	            var clipPath = createGridClipShape(coordSys, seriesModel, function () {
	                // Callback will be invoked immediately if there is no animation
	                setTimeout(function () {
	                    dataGroup.removeClipPath();
	                });
	            });
	            dataGroup.setClipPath(clipPath);
	        }

	        this._data = data;

	        function add(newDataIndex) {
	            addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);
	        }

	        function update(newDataIndex, oldDataIndex) {
	            var line = oldData.getItemGraphicEl(oldDataIndex);
	            var points = createLinePoints(data, newDataIndex, dimensions, coordSys);
	            data.setItemGraphicEl(newDataIndex, line);
	            graphic.updateProps(line, { shape: { points: points } }, seriesModel, newDataIndex);
	        }

	        function remove(oldDataIndex) {
	            var line = oldData.getItemGraphicEl(oldDataIndex);
	            dataGroup.remove(line);
	        }
	    },

	    /**
	     * @private
	     */
	    // _renderForProgressive: function (seriesModel) {
	    //     var dataGroup = this._dataGroup;
	    //     var data = seriesModel.getData();
	    //     var oldData = this._data;
	    //     var coordSys = seriesModel.coordinateSystem;
	    //     var dimensions = coordSys.dimensions;
	    //     var option = seriesModel.option;
	    //     var progressive = option.progressive;
	    //     var smooth = option.smooth ? SMOOTH : null;

	    //     // In progressive animation is disabled, so use simple data diff,
	    //     // which effects performance less.
	    //     // (Typically performance for data with length 7000+ like:
	    //     // simpleDiff: 60ms, addEl: 184ms,
	    //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))
	    //     if (simpleDiff(oldData, data, dimensions)) {
	    //         dataGroup.removeAll();
	    //         data.each(function (dataIndex) {
	    //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);
	    //         });
	    //     }

	    //     updateElCommon(data, progressive, smooth);

	    //     // Consider switch between progressive and not.
	    //     data.__plProgressive = true;
	    //     this._data = data;
	    // },

	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._dataGroup && this._dataGroup.removeAll();
	        this._data = null;
	    }
	});

	function createGridClipShape(coordSys, seriesModel, cb) {
	    var parallelModel = coordSys.model;
	    var rect = coordSys.getRect();
	    var rectEl = new graphic.Rect({
	        shape: {
	            x: rect.x,
	            y: rect.y,
	            width: rect.width,
	            height: rect.height
	        }
	    });

	    var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';
	    rectEl.setShape(dim, 0);
	    graphic.initProps(rectEl, {
	        shape: {
	            width: rect.width,
	            height: rect.height
	        }
	    }, seriesModel, cb);
	    return rectEl;
	}

	function createLinePoints(data, dataIndex, dimensions, coordSys) {
	    var points = [];
	    for (var i = 0; i < dimensions.length; i++) {
	        var dimName = dimensions[i];
	        var value = data.get(dimName, dataIndex);
	        if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {
	            points.push(coordSys.dataToPoint(value, dimName));
	        }
	    }
	    return points;
	}

	function addEl(data, dataGroup, dataIndex, dimensions, coordSys) {
	    var points = createLinePoints(data, dataIndex, dimensions, coordSys);
	    var line = new graphic.Polyline({
	        shape: { points: points },
	        silent: true,
	        z2: 10
	    });
	    dataGroup.add(line);
	    data.setItemGraphicEl(dataIndex, line);
	}

	function updateElCommon(data, smooth) {
	    var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');
	    var lineStyle = seriesStyleModel.getLineStyle();
	    data.eachItemGraphicEl(function (line, dataIndex) {
	        if (data.hasItemOption) {
	            var itemModel = data.getItemModel(dataIndex);
	            var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);
	            lineStyle = lineStyleModel.getLineStyle();
	        }

	        line.useStyle(zrUtil.extend(lineStyle, {
	            fill: null,
	            stroke: data.getItemVisual(dataIndex, 'color'),
	            opacity: data.getItemVisual(dataIndex, 'opacity')
	        }));
	        line.shape.smooth = smooth;
	    });
	}

	// function simpleDiff(oldData, newData, dimensions) {
	//     var oldLen;
	//     if (!oldData
	//         || !oldData.__plProgressive
	//         || (oldLen = oldData.count()) !== newData.count()
	//     ) {
	//         return true;
	//     }

	//     var dimLen = dimensions.length;
	//     for (var i = 0; i < oldLen; i++) {
	//         for (var j = 0; j < dimLen; j++) {
	//             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {
	//                 return true;
	//             }
	//         }
	//     }

	//     return false;
	// }

	// FIXME
	// 公用方法?
	function isEmptyValue(val, axisType) {
	    return axisType === 'category' ? val == null : val == null || isNaN(val); // axisType === 'value'
	}

	module.exports = ParallelView;

/***/ },
/* 740 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (ecModel) {

	    ecModel.eachSeriesByType('parallel', function (seriesModel) {

	        var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	        var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	        var globalColors = ecModel.get('color');

	        var color = lineStyleModel.get('color') || itemStyleModel.get('color') || globalColors[seriesModel.seriesIndex % globalColors.length];
	        var inactiveOpacity = seriesModel.get('inactiveOpacity');
	        var activeOpacity = seriesModel.get('activeOpacity');
	        var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();

	        var coordSys = seriesModel.coordinateSystem;
	        var data = seriesModel.getData();

	        var opacityMap = {
	            normal: lineStyle.opacity,
	            active: activeOpacity,
	            inactive: inactiveOpacity
	        };

	        coordSys.eachActiveState(data, function (activeState, dataIndex) {
	            data.setItemVisual(dataIndex, 'opacity', opacityMap[activeState]);
	        });

	        data.setVisual('color', color);
	    });
	};

/***/ },
/* 741 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);

	__webpack_require__(742);
	__webpack_require__(743);
	echarts.registerLayout(__webpack_require__(744));
	echarts.registerVisual(__webpack_require__(746));

/***/ },
/* 742 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Get initial data and define sankey view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */

	var SeriesModel = __webpack_require__(528);
	var createGraphFromNodeEdge = __webpack_require__(699);
	var encodeHTML = __webpack_require__(506).encodeHTML;

	var SankeySeries = SeriesModel.extend({

	    type: 'series.sankey',

	    layoutInfo: null,

	    /**
	     * Init a graph data structure from data in option series
	     *
	     * @param  {Object} option  the object used to config echarts view
	     * @return {module:echarts/data/List} storage initial data
	     */
	    getInitialData: function getInitialData(option) {
	        var links = option.edges || option.links;
	        var nodes = option.data || option.nodes;
	        if (nodes && links) {
	            var graph = createGraphFromNodeEdge(nodes, links, this, true);
	            return graph.data;
	        }
	    },

	    /**
	     * Return the graphic data structure
	     *
	     * @return {module:echarts/data/Graph} graphic data structure
	     */
	    getGraph: function getGraph() {
	        return this.getData().graph;
	    },

	    /**
	     * Get edge data of graphic data structure
	     *
	     * @return {module:echarts/data/List} data structure of list
	     */
	    getEdgeData: function getEdgeData() {
	        return this.getGraph().edgeData;
	    },

	    /**
	     * @override
	     */
	    formatTooltip: function formatTooltip(dataIndex, multipleSeries, dataType) {
	        // dataType === 'node' or empty do not show tooltip by default
	        if (dataType === 'edge') {
	            var params = this.getDataParams(dataIndex, dataType);
	            var rawDataOpt = params.data;
	            var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;
	            if (params.value) {
	                html += ' : ' + params.value;
	            }
	            return encodeHTML(html);
	        }

	        return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);
	    },

	    defaultOption: {
	        zlevel: 0,
	        z: 2,

	        coordinateSystem: 'view',

	        layout: null,

	        // the position of the whole view
	        left: '5%',
	        top: '5%',
	        right: '20%',
	        bottom: '5%',

	        // the dx of the node
	        nodeWidth: 20,

	        // the vertical distance between two nodes
	        nodeGap: 8,

	        // the number of iterations to change the position of the node
	        layoutIterations: 32,

	        label: {
	            normal: {
	                show: true,
	                position: 'right',
	                textStyle: {
	                    color: '#000',
	                    fontSize: 12
	                }
	            },
	            emphasis: {
	                show: true
	            }
	        },

	        itemStyle: {
	            normal: {
	                borderWidth: 1,
	                borderColor: '#333'
	            }
	        },

	        lineStyle: {
	            normal: {
	                color: '#314656',
	                opacity: 0.2,
	                curveness: 0.5
	            },
	            emphasis: {
	                opacity: 0.6
	            }
	        },

	        animationEasing: 'linear',

	        animationDuration: 1000
	    }

	});

	module.exports = SankeySeries;

/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file  The file used to draw sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);

	var SankeyShape = graphic.extendShape({
	    shape: {
	        x1: 0, y1: 0,
	        x2: 0, y2: 0,
	        cpx1: 0, cpy1: 0,
	        cpx2: 0, cpy2: 0,

	        extent: 0
	    },

	    buildPath: function buildPath(ctx, shape) {
	        var halfExtent = shape.extent / 2;
	        ctx.moveTo(shape.x1, shape.y1 - halfExtent);
	        ctx.bezierCurveTo(shape.cpx1, shape.cpy1 - halfExtent, shape.cpx2, shape.cpy2 - halfExtent, shape.x2, shape.y2 - halfExtent);
	        ctx.lineTo(shape.x2, shape.y2 + halfExtent);
	        ctx.bezierCurveTo(shape.cpx2, shape.cpy2 + halfExtent, shape.cpx1, shape.cpy1 + halfExtent, shape.x1, shape.y1 + halfExtent);
	        ctx.closePath();
	    }
	});

	module.exports = __webpack_require__(501).extendChartView({

	    type: 'sankey',

	    /**
	     * @private
	     * @type {module:echarts/chart/sankey/SankeySeries}
	     */
	    _model: null,

	    render: function render(seriesModel, ecModel, api) {
	        var graph = seriesModel.getGraph();
	        var group = this.group;
	        var layoutInfo = seriesModel.layoutInfo;
	        var nodeData = seriesModel.getData();
	        var edgeData = seriesModel.getData('edge');

	        this._model = seriesModel;

	        group.removeAll();

	        group.position = [layoutInfo.x, layoutInfo.y];

	        // generate a bezire Curve for each edge
	        graph.eachEdge(function (edge) {
	            var curve = new SankeyShape();

	            curve.dataIndex = edge.dataIndex;
	            curve.seriesIndex = seriesModel.seriesIndex;
	            curve.dataType = 'edge';

	            var lineStyleModel = edge.getModel('lineStyle.normal');
	            var curvature = lineStyleModel.get('curveness');
	            var n1Layout = edge.node1.getLayout();
	            var n2Layout = edge.node2.getLayout();
	            var edgeLayout = edge.getLayout();

	            curve.shape.extent = Math.max(1, edgeLayout.dy);

	            var x1 = n1Layout.x + n1Layout.dx;
	            var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;
	            var x2 = n2Layout.x;
	            var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;
	            var cpx1 = x1 * (1 - curvature) + x2 * curvature;
	            var cpy1 = y1;
	            var cpx2 = x1 * curvature + x2 * (1 - curvature);
	            var cpy2 = y2;

	            curve.setShape({
	                x1: x1,
	                y1: y1,
	                x2: x2,
	                y2: y2,
	                cpx1: cpx1,
	                cpy1: cpy1,
	                cpx2: cpx2,
	                cpy2: cpy2
	            });

	            curve.setStyle(lineStyleModel.getItemStyle());
	            // Special color, use source node color or target node color
	            switch (curve.style.fill) {
	                case 'source':
	                    curve.style.fill = edge.node1.getVisual('color');
	                    break;
	                case 'target':
	                    curve.style.fill = edge.node2.getVisual('color');
	                    break;
	            }

	            graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());

	            group.add(curve);

	            edgeData.setItemGraphicEl(edge.dataIndex, curve);
	        });

	        // generate a rect  for each node
	        graph.eachNode(function (node) {
	            var layout = node.getLayout();
	            var itemModel = node.getModel();
	            var labelModel = itemModel.getModel('label.normal');
	            var textStyleModel = labelModel.getModel('textStyle');
	            var labelHoverModel = itemModel.getModel('label.emphasis');
	            var textStyleHoverModel = labelHoverModel.getModel('textStyle');

	            var rect = new graphic.Rect({
	                shape: {
	                    x: layout.x,
	                    y: layout.y,
	                    width: node.getLayout().dx,
	                    height: node.getLayout().dy
	                },
	                style: {
	                    // Get formatted label in label.normal option
	                    //  Use node id if it is not specified
	                    text: labelModel.get('show') ? seriesModel.getFormattedLabel(node.dataIndex, 'normal') || node.id
	                    // Use empty string to hide the label
	                    : '',
	                    textFont: textStyleModel.getFont(),
	                    textFill: textStyleModel.getTextColor(),
	                    textPosition: labelModel.get('position')
	                }
	            });

	            rect.setStyle(zrUtil.defaults({
	                fill: node.getVisual('color')
	            }, itemModel.getModel('itemStyle.normal').getItemStyle()));

	            graphic.setHoverStyle(rect, zrUtil.extend(node.getModel('itemStyle.emphasis'), {
	                text: labelHoverModel.get('show') ? seriesModel.getFormattedLabel(node.dataIndex, 'emphasis') || node.id : '',
	                textFont: textStyleHoverModel.getFont(),
	                textFill: textStyleHoverModel.getTextColor(),
	                textPosition: labelHoverModel.get('position')
	            }));

	            group.add(rect);

	            nodeData.setItemGraphicEl(node.dataIndex, rect);

	            rect.dataType = 'node';
	        });

	        if (!this._data && seriesModel.get('animation')) {
	            group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {
	                group.removeClipPath();
	            }));
	        }

	        this._data = seriesModel.getData();
	    },

	    dispose: function dispose() {}
	});

	// add animation to the view
	function createGridClipShape(rect, seriesModel, cb) {
	    var rectEl = new graphic.Rect({
	        shape: {
	            x: rect.x - 10,
	            y: rect.y - 10,
	            width: 0,
	            height: rect.height + 20
	        }
	    });
	    graphic.initProps(rectEl, {
	        shape: {
	            width: rect.width + 20,
	            height: rect.height + 20
	        }
	    }, seriesModel, cb);

	    return rectEl;
	}

/***/ },
/* 744 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file The layout algorithm of sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */

	var layout = __webpack_require__(521);
	var nest = __webpack_require__(745);
	var zrUtil = __webpack_require__(504);

	module.exports = function (ecModel, api, payload) {

	    ecModel.eachSeriesByType('sankey', function (seriesModel) {

	        var nodeWidth = seriesModel.get('nodeWidth');
	        var nodeGap = seriesModel.get('nodeGap');

	        var layoutInfo = getViewRect(seriesModel, api);

	        seriesModel.layoutInfo = layoutInfo;

	        var width = layoutInfo.width;
	        var height = layoutInfo.height;

	        var graph = seriesModel.getGraph();

	        var nodes = graph.nodes;
	        var edges = graph.edges;

	        computeNodeValues(nodes);

	        var filteredNodes = nodes.filter(function (node) {
	            return node.getLayout().value === 0;
	        });

	        var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');

	        layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);
	    });
	};

	/**
	 * Get the layout position of the whole view
	 *
	 * @param {module:echarts/model/Series} seriesModel  the model object of sankey series
	 * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call
	 * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view
	 */
	function getViewRect(seriesModel, api) {
	    return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	}

	function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {
	    computeNodeBreadths(nodes, nodeWidth, width);
	    computeNodeDepths(nodes, edges, height, nodeGap, iterations);
	    computeEdgeDepths(nodes);
	}

	/**
	 * Compute the value of each node by summing the associated edge's value
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 */
	function computeNodeValues(nodes) {
	    zrUtil.each(nodes, function (node) {
	        var value1 = sum(node.outEdges, getEdgeValue);
	        var value2 = sum(node.inEdges, getEdgeValue);
	        var value = Math.max(value1, value2);
	        node.setLayout({ value: value }, true);
	    });
	}

	/**
	 * Compute the x-position for each node
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param  {number} nodeWidth  the dx of the node
	 * @param  {number} width  the whole width of the area to draw the view
	 */
	function computeNodeBreadths(nodes, nodeWidth, width) {
	    var remainNodes = nodes;
	    var nextNode = null;
	    var x = 0;
	    var kx = 0;

	    while (remainNodes.length) {
	        nextNode = [];
	        for (var i = 0, len = remainNodes.length; i < len; i++) {
	            var node = remainNodes[i];
	            node.setLayout({ x: x }, true);
	            node.setLayout({ dx: nodeWidth }, true);
	            for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {
	                nextNode.push(node.outEdges[j].node2);
	            }
	        }
	        remainNodes = nextNode;
	        ++x;
	    }

	    moveSinksRight(nodes, x);
	    kx = (width - nodeWidth) / (x - 1);

	    scaleNodeBreadths(nodes, kx);
	}

	/**
	 * All the node without outEgdes are assigned maximum x-position and
	 *     be aligned in the last column.
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {number} x  value (x-1) use to assign to node without outEdges
	 *     as x-position
	 */
	function moveSinksRight(nodes, x) {
	    zrUtil.each(nodes, function (node) {
	        if (!node.outEdges.length) {
	            node.setLayout({ x: x - 1 }, true);
	        }
	    });
	}

	/**
	 * Scale node x-position to the width
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {number} kx   multiple used to scale nodes
	 */
	function scaleNodeBreadths(nodes, kx) {
	    zrUtil.each(nodes, function (node) {
	        var nodeX = node.getLayout().x * kx;
	        node.setLayout({ x: nodeX }, true);
	    });
	}

	/**
	 * Using Gauss-Seidel iterations method to compute the node depth(y-position)
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	 * @param {number} height  the whole height of the area to draw the view
	 * @param {numbber} nodeGap  the vertical distance between two nodes
	 *     in the same column.
	 * @param {number} iterations  the number of iterations for the algorithm
	 */
	function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {
	    var nodesByBreadth = nest().key(function (d) {
	        return d.getLayout().x;
	    }).sortKeys(ascending).entries(nodes).map(function (d) {
	        return d.values;
	    });

	    initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);
	    resolveCollisions(nodesByBreadth, nodeGap, height);

	    for (var alpha = 1; iterations > 0; iterations--) {
	        // 0.99 is a experience parameter, ensure that each iterations of
	        // changes as small as possible.
	        alpha *= 0.99;
	        relaxRightToLeft(nodesByBreadth, alpha);
	        resolveCollisions(nodesByBreadth, nodeGap, height);
	        relaxLeftToRight(nodesByBreadth, alpha);
	        resolveCollisions(nodesByBreadth, nodeGap, height);
	    }
	}

	/**
	 * Compute the original y-position for each node
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the nodes x-position.
	 * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	 * @param {number} height  the whole height of the area to draw the view
	 * @param {number} nodeGap  the vertical distance between two nodes
	 */
	function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {
	    var kyArray = [];
	    zrUtil.each(nodesByBreadth, function (nodes) {
	        var n = nodes.length;
	        var sum = 0;
	        zrUtil.each(nodes, function (node) {
	            sum += node.getLayout().value;
	        });
	        var ky = (height - (n - 1) * nodeGap) / sum;
	        kyArray.push(ky);
	    });

	    kyArray.sort(function (a, b) {
	        return a - b;
	    });
	    var ky0 = kyArray[0];

	    zrUtil.each(nodesByBreadth, function (nodes) {
	        zrUtil.each(nodes, function (node, i) {
	            node.setLayout({ y: i }, true);
	            var nodeDy = node.getLayout().value * ky0;
	            node.setLayout({ dy: nodeDy }, true);
	        });
	    });

	    zrUtil.each(edges, function (edge) {
	        var edgeDy = +edge.getValue() * ky0;
	        edge.setLayout({ dy: edgeDy }, true);
	    });
	}

	/**
	 * Resolve the collision of initialized depth (y-position)
	 *
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the nodes x-position.
	 * @param {number} nodeGap  the vertical distance between two nodes
	 * @param {number} height  the whole height of the area to draw the view
	 */
	function resolveCollisions(nodesByBreadth, nodeGap, height) {
	    zrUtil.each(nodesByBreadth, function (nodes) {
	        var node;
	        var dy;
	        var y0 = 0;
	        var n = nodes.length;
	        var i;

	        nodes.sort(ascendingDepth);

	        for (i = 0; i < n; i++) {
	            node = nodes[i];
	            dy = y0 - node.getLayout().y;
	            if (dy > 0) {
	                var nodeY = node.getLayout().y + dy;
	                node.setLayout({ y: nodeY }, true);
	            }
	            y0 = node.getLayout().y + node.getLayout().dy + nodeGap;
	        }

	        // if the bottommost node goes outside the bounds, push it back up
	        dy = y0 - nodeGap - height;
	        if (dy > 0) {
	            var nodeY = node.getLayout().y - dy;
	            node.setLayout({ y: nodeY }, true);
	            y0 = node.getLayout().y;
	            for (i = n - 2; i >= 0; --i) {
	                node = nodes[i];
	                dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;
	                if (dy > 0) {
	                    nodeY = node.getLayout().y - dy;
	                    node.setLayout({ y: nodeY }, true);
	                }
	                y0 = node.getLayout().y;
	            }
	        }
	    });
	}

	/**
	 * Change the y-position of the nodes, except most the right side nodes
	 *
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the node x-position.
	 * @param {number} alpha  parameter used to adjust the nodes y-position
	 */
	function relaxRightToLeft(nodesByBreadth, alpha) {
	    zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {
	        zrUtil.each(nodes, function (node) {
	            if (node.outEdges.length) {
	                var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);
	                var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                node.setLayout({ y: nodeY }, true);
	            }
	        });
	    });
	}

	function weightedTarget(edge) {
	    return center(edge.node2) * edge.getValue();
	}

	/**
	 * Change the y-position of the nodes, except most the left side nodes
	 *
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the node x-position.
	 * @param {number} alpha  parameter used to adjust the nodes y-position
	 */
	function relaxLeftToRight(nodesByBreadth, alpha) {
	    zrUtil.each(nodesByBreadth, function (nodes) {
	        zrUtil.each(nodes, function (node) {
	            if (node.inEdges.length) {
	                var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);
	                var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                node.setLayout({ y: nodeY }, true);
	            }
	        });
	    });
	}

	function weightedSource(edge) {
	    return center(edge.node1) * edge.getValue();
	}

	/**
	 * Compute the depth(y-position) of each edge
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 */
	function computeEdgeDepths(nodes) {
	    zrUtil.each(nodes, function (node) {
	        node.outEdges.sort(ascendingTargetDepth);
	        node.inEdges.sort(ascendingSourceDepth);
	    });
	    zrUtil.each(nodes, function (node) {
	        var sy = 0;
	        var ty = 0;
	        zrUtil.each(node.outEdges, function (edge) {
	            edge.setLayout({ sy: sy }, true);
	            sy += edge.getLayout().dy;
	        });
	        zrUtil.each(node.inEdges, function (edge) {
	            edge.setLayout({ ty: ty }, true);
	            ty += edge.getLayout().dy;
	        });
	    });
	}

	function ascendingTargetDepth(a, b) {
	    return a.node2.getLayout().y - b.node2.getLayout().y;
	}

	function ascendingSourceDepth(a, b) {
	    return a.node1.getLayout().y - b.node1.getLayout().y;
	}

	function sum(array, f) {
	    var sum = 0;
	    var len = array.length;
	    var i = -1;
	    while (++i < len) {
	        var value = +f.call(array, array[i], i);
	        if (!isNaN(value)) {
	            sum += value;
	        }
	    }
	    return sum;
	}

	function center(node) {
	    return node.getLayout().y + node.getLayout().dy / 2;
	}

	function ascendingDepth(a, b) {
	    return a.getLayout().y - b.getLayout().y;
	}

	function ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a === b ? 0 : NaN;
	}

	function getEdgeValue(edge) {
	    return edge.getValue();
	}

/***/ },
/* 745 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	/**
	 * nest helper used to group by the array.
	 * can specified the keys and sort the keys.
	 */
	function nest() {

	    var keysFunction = [];
	    var sortKeysFunction = [];

	    /**
	     * map an Array into the mapObject.
	     * @param {Array} array
	     * @param {number} depth
	     */
	    function map(array, depth) {
	        if (depth >= keysFunction.length) {
	            return array;
	        }
	        var i = -1;
	        var n = array.length;
	        var keyFunction = keysFunction[depth++];
	        var mapObject = {};
	        var valuesByKey = {};

	        while (++i < n) {
	            var keyValue = keyFunction(array[i]);
	            var values = valuesByKey[keyValue];

	            if (values) {
	                values.push(array[i]);
	            } else {
	                valuesByKey[keyValue] = [array[i]];
	            }
	        }

	        zrUtil.each(valuesByKey, function (value, key) {
	            mapObject[key] = map(value, depth);
	        });

	        return mapObject;
	    }

	    /**
	     * transform the Map Object to multidimensional Array
	     * @param {Object} map
	     * @param {number} depth
	     */
	    function entriesMap(mapObject, depth) {
	        if (depth >= keysFunction.length) {
	            return mapObject;
	        }
	        var array = [];
	        var sortKeyFunction = sortKeysFunction[depth++];

	        zrUtil.each(mapObject, function (value, key) {
	            array.push({
	                key: key, values: entriesMap(value, depth)
	            });
	        });

	        if (sortKeyFunction) {
	            return array.sort(function (a, b) {
	                return sortKeyFunction(a.key, b.key);
	            });
	        } else {
	            return array;
	        }
	    }

	    return {
	        /**
	         * specified the key to groupby the arrays.
	         * users can specified one more keys.
	         * @param {Function} d
	         */
	        key: function key(d) {
	            keysFunction.push(d);
	            return this;
	        },

	        /**
	         * specified the comparator to sort the keys
	         * @param {Function} order
	         */
	        sortKeys: function sortKeys(order) {
	            sortKeysFunction[keysFunction.length - 1] = order;
	            return this;
	        },

	        /**
	         * the array to be grouped by.
	         * @param {Array} array
	         */
	        entries: function entries(array) {
	            return entriesMap(map(array, 0), 0);
	        }
	    };
	}
	module.exports = nest;

/***/ },
/* 746 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Visual encoding for sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */

	var VisualMapping = __webpack_require__(695);
	var zrUtil = __webpack_require__(504);

	module.exports = function (ecModel, payload) {
	    ecModel.eachSeriesByType('sankey', function (seriesModel) {
	        var graph = seriesModel.getGraph();
	        var nodes = graph.nodes;

	        nodes.sort(function (a, b) {
	            return a.getLayout().value - b.getLayout().value;
	        });

	        var minValue = nodes[0].getLayout().value;
	        var maxValue = nodes[nodes.length - 1].getLayout().value;

	        zrUtil.each(nodes, function (node) {
	            var mapping = new VisualMapping({
	                type: 'color',
	                mappingMethod: 'linear',
	                dataExtent: [minValue, maxValue],
	                visual: seriesModel.get('color')
	            });

	            var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);
	            node.setVisual('color', mapValueToColor);
	            // If set itemStyle.normal.color
	            var itemModel = node.getModel();
	            var customColor = itemModel.get('itemStyle.normal.color');
	            if (customColor != null) {
	                node.setVisual('color', customColor);
	            }
	        });
	    });
	};

/***/ },
/* 747 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);

	__webpack_require__(748);
	__webpack_require__(751);

	echarts.registerVisual(__webpack_require__(752));
	echarts.registerLayout(__webpack_require__(753));

/***/ },
/* 748 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var SeriesModel = __webpack_require__(528);
	var whiskerBoxCommon = __webpack_require__(749);

	var BoxplotSeries = SeriesModel.extend({

	    type: 'series.boxplot',

	    dependencies: ['xAxis', 'yAxis', 'grid'],

	    // TODO
	    // box width represents group size, so dimension should have 'size'.

	    /**
	     * @see <https://en.wikipedia.org/wiki/Box_plot>
	     * The meanings of 'min' and 'max' depend on user,
	     * and echarts do not need to know it.
	     * @readOnly
	     */
	    valueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],

	    /**
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: null,

	    /**
	     * @override
	     */
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,

	        hoverAnimation: true,

	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        layout: null, // 'horizontal' or 'vertical'
	        boxWidth: [7, 50], // [min, max] can be percent of band width.

	        itemStyle: {
	            normal: {
	                color: '#fff',
	                borderWidth: 1
	            },
	            emphasis: {
	                borderWidth: 2,
	                shadowBlur: 5,
	                shadowOffsetX: 2,
	                shadowOffsetY: 2,
	                shadowColor: 'rgba(0,0,0,0.4)'
	            }
	        },

	        animationEasing: 'elasticOut',
	        animationDuration: 800
	    }
	});

	zrUtil.mixin(BoxplotSeries, whiskerBoxCommon.seriesModelMixin, true);

	module.exports = BoxplotSeries;

/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var List = __webpack_require__(598);
	var completeDimensions = __webpack_require__(603);
	var WhiskerBoxDraw = __webpack_require__(750);
	var zrUtil = __webpack_require__(504);

	function getItemValue(item) {
	    return item.value == null ? item : item.value;
	}

	var seriesModelMixin = {

	    /**
	     * @private
	     * @type {string}
	     */
	    _baseAxisDim: null,

	    /**
	     * @override
	     */
	    getInitialData: function getInitialData(option, ecModel) {
	        // When both types of xAxis and yAxis are 'value', layout is
	        // needed to be specified by user. Otherwise, layout can be
	        // judged by which axis is category.

	        var categories;

	        var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));
	        var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));
	        var xAxisType = xAxisModel.get('type');
	        var yAxisType = yAxisModel.get('type');
	        var addOrdinal;

	        // FIXME
	        // 考虑时间轴

	        if (xAxisType === 'category') {
	            option.layout = 'horizontal';
	            categories = xAxisModel.getCategories();
	            addOrdinal = true;
	        } else if (yAxisType === 'category') {
	            option.layout = 'vertical';
	            categories = yAxisModel.getCategories();
	            addOrdinal = true;
	        } else {
	            option.layout = option.layout || 'horizontal';
	        }

	        this._baseAxisDim = option.layout === 'horizontal' ? 'x' : 'y';

	        var data = option.data;
	        var dimensions = this.dimensions = ['base'].concat(this.valueDimensions);
	        completeDimensions(dimensions, data);

	        var list = new List(dimensions, this);
	        list.initData(data, categories ? categories.slice() : null, function (dataItem, dimName, idx, dimIdx) {
	            var value = getItemValue(dataItem);
	            return addOrdinal ? dimName === 'base' ? idx : value[dimIdx - 1] : value[dimIdx];
	        });

	        return list;
	    },

	    /**
	     * Used by Gird.
	     * @param {string} axisDim 'x' or 'y'
	     * @return {Array.<string>} dimensions on the axis.
	     */
	    coordDimToDataDim: function coordDimToDataDim(axisDim) {
	        var dims = this.valueDimensions.slice();
	        var baseDim = ['base'];
	        var map = {
	            horizontal: { x: baseDim, y: dims },
	            vertical: { x: dims, y: baseDim }
	        };
	        return map[this.get('layout')][axisDim];
	    },

	    /**
	     * @override
	     * @param {string|number} dataDim
	     * @return {string} coord dimension
	     */
	    dataDimToCoordDim: function dataDimToCoordDim(dataDim) {
	        var dim;

	        zrUtil.each(['x', 'y'], function (coordDim, index) {
	            var dataDims = this.coordDimToDataDim(coordDim);
	            if (zrUtil.indexOf(dataDims, dataDim) >= 0) {
	                dim = coordDim;
	            }
	        }, this);

	        return dim;
	    },

	    /**
	     * If horizontal, base axis is x, otherwise y.
	     * @override
	     */
	    getBaseAxis: function getBaseAxis() {
	        var dim = this._baseAxisDim;
	        return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;
	    }
	};

	var viewMixin = {

	    init: function init() {
	        /**
	         * Old data.
	         * @private
	         * @type {module:echarts/chart/helper/WhiskerBoxDraw}
	         */
	        var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(this.getStyleUpdater());
	        this.group.add(whiskerBoxDraw.group);
	    },

	    render: function render(seriesModel, ecModel, api) {
	        this._whiskerBoxDraw.updateData(seriesModel.getData());
	    },

	    remove: function remove(ecModel) {
	        this._whiskerBoxDraw.remove();
	    }
	};

	module.exports = {
	    seriesModelMixin: seriesModelMixin,
	    viewMixin: viewMixin
	};

/***/ },
/* 750 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/chart/helper/Symbol
	 */

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var Path = __webpack_require__(545);

	var WhiskerPath = Path.extend({

	    type: 'whiskerInBox',

	    shape: {},

	    buildPath: function buildPath(ctx, shape) {
	        for (var i in shape) {
	            if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {
	                var pts = shape[i];
	                ctx.moveTo(pts[0][0], pts[0][1]);
	                ctx.lineTo(pts[1][0], pts[1][1]);
	            }
	        }
	    }
	});

	/**
	 * @constructor
	 * @alias {module:echarts/chart/helper/WhiskerBox}
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @param {Function} styleUpdater
	 * @param {boolean} isInit
	 * @extends {module:zrender/graphic/Group}
	 */
	function WhiskerBox(data, idx, styleUpdater, isInit) {
	    graphic.Group.call(this);

	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.bodyIndex;

	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.whiskerIndex;

	    /**
	     * @type {Function}
	     */
	    this.styleUpdater = styleUpdater;

	    this._createContent(data, idx, isInit);

	    this.updateData(data, idx, isInit);

	    /**
	     * Last series model.
	     * @type {module:echarts/model/Series}
	     */
	    this._seriesModel;
	}

	var whiskerBoxProto = WhiskerBox.prototype;

	whiskerBoxProto._createContent = function (data, idx, isInit) {
	    var itemLayout = data.getItemLayout(idx);
	    var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;
	    var count = 0;

	    // Whisker element.
	    this.add(new graphic.Polygon({
	        shape: {
	            points: isInit ? transInit(itemLayout.bodyEnds, constDim, itemLayout) : itemLayout.bodyEnds
	        },
	        style: { strokeNoScale: true },
	        z2: 100
	    }));
	    this.bodyIndex = count++;

	    // Box element.
	    var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {
	        return isInit ? transInit(ends, constDim, itemLayout) : ends;
	    });
	    this.add(new WhiskerPath({
	        shape: makeWhiskerEndsShape(whiskerEnds),
	        style: { strokeNoScale: true },
	        z2: 100
	    }));
	    this.whiskerIndex = count++;
	};

	function transInit(points, dim, itemLayout) {
	    return zrUtil.map(points, function (point) {
	        point = point.slice();
	        point[dim] = itemLayout.initBaseline;
	        return point;
	    });
	}

	function makeWhiskerEndsShape(whiskerEnds) {
	    // zr animation only support 2-dim array.
	    var shape = {};
	    zrUtil.each(whiskerEnds, function (ends, i) {
	        shape['ends' + i] = ends;
	    });
	    return shape;
	}

	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */
	whiskerBoxProto.updateData = function (data, idx, isInit) {
	    var seriesModel = this._seriesModel = data.hostModel;
	    var itemLayout = data.getItemLayout(idx);
	    var updateMethod = graphic[isInit ? 'initProps' : 'updateProps'];
	    // this.childAt(this.bodyIndex).stopAnimation(true);
	    // this.childAt(this.whiskerIndex).stopAnimation(true);
	    updateMethod(this.childAt(this.bodyIndex), { shape: { points: itemLayout.bodyEnds } }, seriesModel, idx);
	    updateMethod(this.childAt(this.whiskerIndex), { shape: makeWhiskerEndsShape(itemLayout.whiskerEnds) }, seriesModel, idx);

	    this.styleUpdater.call(null, this, data, idx);
	};

	zrUtil.inherits(WhiskerBox, graphic.Group);

	/**
	 * @constructor
	 * @alias module:echarts/chart/helper/WhiskerBoxDraw
	 */
	function WhiskerBoxDraw(styleUpdater) {
	    this.group = new graphic.Group();
	    this.styleUpdater = styleUpdater;
	}

	var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;

	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */
	whiskerBoxDrawProto.updateData = function (data) {
	    var group = this.group;
	    var oldData = this._data;
	    var styleUpdater = this.styleUpdater;

	    data.diff(oldData).add(function (newIdx) {
	        if (data.hasValue(newIdx)) {
	            var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);
	            data.setItemGraphicEl(newIdx, symbolEl);
	            group.add(symbolEl);
	        }
	    }).update(function (newIdx, oldIdx) {
	        var symbolEl = oldData.getItemGraphicEl(oldIdx);

	        // Empty data
	        if (!data.hasValue(newIdx)) {
	            group.remove(symbolEl);
	            return;
	        }

	        if (!symbolEl) {
	            symbolEl = new WhiskerBox(data, newIdx, styleUpdater);
	        } else {
	            symbolEl.updateData(data, newIdx);
	        }

	        // Add back
	        group.add(symbolEl);

	        data.setItemGraphicEl(newIdx, symbolEl);
	    }).remove(function (oldIdx) {
	        var el = oldData.getItemGraphicEl(oldIdx);
	        el && group.remove(el);
	    }).execute();

	    this._data = data;
	};

	/**
	 * Remove symbols.
	 * @param {module:echarts/data/List} data
	 */
	whiskerBoxDrawProto.remove = function () {
	    var group = this.group;
	    var data = this._data;
	    this._data = null;
	    data && data.eachItemGraphicEl(function (el) {
	        el && group.remove(el);
	    });
	};

	module.exports = WhiskerBoxDraw;

/***/ },
/* 751 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var ChartView = __webpack_require__(542);
	var graphic = __webpack_require__(543);
	var whiskerBoxCommon = __webpack_require__(749);

	var BoxplotView = ChartView.extend({

	    type: 'boxplot',

	    getStyleUpdater: function getStyleUpdater() {
	        return updateStyle;
	    },

	    dispose: zrUtil.noop
	});

	zrUtil.mixin(BoxplotView, whiskerBoxCommon.viewMixin, true);

	// Update common properties
	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

	function updateStyle(itemGroup, data, idx) {
	    var itemModel = data.getItemModel(idx);
	    var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	    var borderColor = data.getItemVisual(idx, 'color');

	    // Exclude borderColor.
	    var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);

	    var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	    whiskerEl.style.set(itemStyle);
	    whiskerEl.style.stroke = borderColor;
	    whiskerEl.dirty();

	    var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	    bodyEl.style.set(itemStyle);
	    bodyEl.style.stroke = borderColor;
	    bodyEl.dirty();

	    var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	    graphic.setHoverStyle(itemGroup, hoverStyle);
	}

	module.exports = BoxplotView;

/***/ },
/* 752 */
/***/ function(module, exports) {

	'use strict';

	var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];

	module.exports = function (ecModel, api) {

	    var globalColors = ecModel.get('color');

	    ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {

	        var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];
	        var data = seriesModel.getData();

	        data.setVisual({
	            legendSymbol: 'roundRect',
	            // Use name 'color' but not 'borderColor' for legend usage and
	            // visual coding from other component like dataRange.
	            color: seriesModel.get(borderColorQuery) || defaulColor
	        });

	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                data.setItemVisual(idx, { color: itemModel.get(borderColorQuery, true) });
	            });
	        }
	    });
	};

/***/ },
/* 753 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var parsePercent = numberUtil.parsePercent;
	var each = zrUtil.each;

	module.exports = function (ecModel) {

	    var groupResult = groupSeriesByAxis(ecModel);

	    each(groupResult, function (groupItem) {
	        var seriesModels = groupItem.seriesModels;

	        if (!seriesModels.length) {
	            return;
	        }

	        calculateBase(groupItem);

	        each(seriesModels, function (seriesModel, idx) {
	            layoutSingleSeries(seriesModel, groupItem.boxOffsetList[idx], groupItem.boxWidthList[idx]);
	        });
	    });
	};

	/**
	 * Group series by axis.
	 */
	function groupSeriesByAxis(ecModel) {
	    var result = [];
	    var axisList = [];

	    ecModel.eachSeriesByType('boxplot', function (seriesModel) {
	        var baseAxis = seriesModel.getBaseAxis();
	        var idx = zrUtil.indexOf(axisList, baseAxis);

	        if (idx < 0) {
	            idx = axisList.length;
	            axisList[idx] = baseAxis;
	            result[idx] = { axis: baseAxis, seriesModels: [] };
	        }

	        result[idx].seriesModels.push(seriesModel);
	    });

	    return result;
	}

	/**
	 * Calculate offset and box width for each series.
	 */
	function calculateBase(groupItem) {
	    var extent;
	    var baseAxis = groupItem.axis;
	    var seriesModels = groupItem.seriesModels;
	    var seriesCount = seriesModels.length;

	    var boxWidthList = groupItem.boxWidthList = [];
	    var boxOffsetList = groupItem.boxOffsetList = [];
	    var boundList = [];

	    var bandWidth;
	    if (baseAxis.type === 'category') {
	        bandWidth = baseAxis.getBandWidth();
	    } else {
	        var maxDataCount = 0;
	        each(seriesModels, function (seriesModel) {
	            maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());
	        });
	        extent = baseAxis.getExtent(), Math.abs(extent[1] - extent[0]) / maxDataCount;
	    }

	    each(seriesModels, function (seriesModel) {
	        var boxWidthBound = seriesModel.get('boxWidth');
	        if (!zrUtil.isArray(boxWidthBound)) {
	            boxWidthBound = [boxWidthBound, boxWidthBound];
	        }
	        boundList.push([parsePercent(boxWidthBound[0], bandWidth) || 0, parsePercent(boxWidthBound[1], bandWidth) || 0]);
	    });

	    var availableWidth = bandWidth * 0.8 - 2;
	    var boxGap = availableWidth / seriesCount * 0.3;
	    var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;
	    var base = boxWidth / 2 - availableWidth / 2;

	    each(seriesModels, function (seriesModel, idx) {
	        boxOffsetList.push(base);
	        base += boxGap + boxWidth;

	        boxWidthList.push(Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1]));
	    });
	}

	/**
	 * Calculate points location for each series.
	 */
	function layoutSingleSeries(seriesModel, offset, boxWidth) {
	    var coordSys = seriesModel.coordinateSystem;
	    var data = seriesModel.getData();
	    var dimensions = seriesModel.dimensions;
	    var chartLayout = seriesModel.get('layout');
	    var halfWidth = boxWidth / 2;

	    data.each(dimensions, function () {
	        var args = arguments;
	        var dimLen = dimensions.length;
	        var axisDimVal = args[0];
	        var idx = args[dimLen];
	        var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	        var constDim = 1 - variableDim;

	        var median = getPoint(args[3]);
	        var end1 = getPoint(args[1]);
	        var end5 = getPoint(args[5]);
	        var whiskerEnds = [[end1, getPoint(args[2])], [end5, getPoint(args[4])]];
	        layEndLine(end1);
	        layEndLine(end5);
	        layEndLine(median);

	        var bodyEnds = [];
	        addBodyEnd(whiskerEnds[0][1], 0);
	        addBodyEnd(whiskerEnds[1][1], 1);

	        data.setItemLayout(idx, {
	            chartLayout: chartLayout,
	            initBaseline: median[constDim],
	            median: median,
	            bodyEnds: bodyEnds,
	            whiskerEnds: whiskerEnds
	        });

	        function getPoint(val) {
	            var p = [];
	            p[variableDim] = axisDimVal;
	            p[constDim] = val;
	            var point;
	            if (isNaN(axisDimVal) || isNaN(val)) {
	                point = [NaN, NaN];
	            } else {
	                point = coordSys.dataToPoint(p);
	                point[variableDim] += offset;
	            }
	            return point;
	        }

	        function addBodyEnd(point, start) {
	            var point1 = point.slice();
	            var point2 = point.slice();
	            point1[variableDim] += halfWidth;
	            point2[variableDim] -= halfWidth;
	            start ? bodyEnds.push(point1, point2) : bodyEnds.push(point2, point1);
	        }

	        function layEndLine(endCenter) {
	            var line = [endCenter.slice(), endCenter.slice()];
	            line[0][variableDim] -= halfWidth;
	            line[1][variableDim] += halfWidth;
	            whiskerEnds.push(line);
	        }
	    });
	}

/***/ },
/* 754 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);

	__webpack_require__(755);
	__webpack_require__(756);

	echarts.registerPreprocessor(__webpack_require__(757));

	echarts.registerVisual(__webpack_require__(758));
	echarts.registerLayout(__webpack_require__(759));

/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var SeriesModel = __webpack_require__(528);
	var whiskerBoxCommon = __webpack_require__(749);
	var formatUtil = __webpack_require__(506);
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;

	var CandlestickSeries = SeriesModel.extend({

	    type: 'series.candlestick',

	    dependencies: ['xAxis', 'yAxis', 'grid'],

	    /**
	     * @readOnly
	     */
	    valueDimensions: ['open', 'close', 'lowest', 'highest'],

	    /**
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: null,

	    /**
	     * @override
	     */
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,

	        hoverAnimation: true,

	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        layout: null, // 'horizontal' or 'vertical'

	        itemStyle: {
	            normal: {
	                color: '#c23531', // 阳线 positive
	                color0: '#314656', // 阴线 negative     '#c23531', '#314656'
	                borderWidth: 1,
	                // FIXME
	                // ec2中使用的是lineStyle.color 和 lineStyle.color0
	                borderColor: '#c23531',
	                borderColor0: '#314656'
	            },
	            emphasis: {
	                borderWidth: 2
	            }
	        },

	        barMaxWidth: null,
	        barMinWidth: null,
	        barWidth: null,

	        animationUpdate: false,
	        animationEasing: 'linear',
	        animationDuration: 300
	    },

	    /**
	     * Get dimension for shadow in dataZoom
	     * @return {string} dimension name
	     */
	    getShadowDim: function getShadowDim() {
	        return 'open';
	    },

	    /**
	     * @override
	     */
	    formatTooltip: function formatTooltip(dataIndex, mutipleSeries) {
	        // It rearly use mutiple candlestick series in one cartesian,
	        // so only consider one series in this default tooltip.
	        var valueHTML = zrUtil.map(this.valueDimensions, function (dim) {
	            return encodeHTML(dim + ': ' + addCommas(this.getData().get(dim, dataIndex)));
	        }, this).join('<br />');

	        var html = [];
	        this.name != null && html.push(encodeHTML(this.name));
	        valueHTML != null && html.push(valueHTML);

	        return html.join('<br />');
	    },

	    brushSelector: function brushSelector(itemLayout, selectors) {
	        return selectors.rect(itemLayout.brushRect);
	    }

	});

	zrUtil.mixin(CandlestickSeries, whiskerBoxCommon.seriesModelMixin, true);

	module.exports = CandlestickSeries;

/***/ },
/* 756 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var ChartView = __webpack_require__(542);
	var graphic = __webpack_require__(543);
	var whiskerBoxCommon = __webpack_require__(749);

	var CandlestickView = ChartView.extend({

	    type: 'candlestick',

	    getStyleUpdater: function getStyleUpdater() {
	        return updateStyle;
	    },

	    dispose: zrUtil.noop
	});

	zrUtil.mixin(CandlestickView, whiskerBoxCommon.viewMixin, true);

	// Update common properties
	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

	function updateStyle(itemGroup, data, idx) {
	    var itemModel = data.getItemModel(idx);
	    var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	    var color = data.getItemVisual(idx, 'color');
	    var borderColor = data.getItemVisual(idx, 'borderColor') || color;

	    // Color must be excluded.
	    // Because symbol provide setColor individually to set fill and stroke
	    var itemStyle = normalItemStyleModel.getItemStyle(['color', 'color0', 'borderColor', 'borderColor0']);

	    var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	    whiskerEl.useStyle(itemStyle);
	    whiskerEl.style.stroke = borderColor;

	    var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	    bodyEl.useStyle(itemStyle);
	    bodyEl.style.fill = color;
	    bodyEl.style.stroke = borderColor;

	    var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	    graphic.setHoverStyle(itemGroup, hoverStyle);
	}

	module.exports = CandlestickView;

/***/ },
/* 757 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	module.exports = function (option) {
	    if (!option || !zrUtil.isArray(option.series)) {
	        return;
	    }

	    // Translate 'k' to 'candlestick'.
	    zrUtil.each(option.series, function (seriesItem) {
	        if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {
	            seriesItem.type = 'candlestick';
	        }
	    });
	};

/***/ },
/* 758 */
/***/ function(module, exports) {

	'use strict';

	var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];
	var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];
	var positiveColorQuery = ['itemStyle', 'normal', 'color'];
	var negativeColorQuery = ['itemStyle', 'normal', 'color0'];

	module.exports = function (ecModel, api) {

	    ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {

	        var data = seriesModel.getData();

	        data.setVisual({
	            legendSymbol: 'roundRect'
	        });

	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var sign = data.getItemLayout(idx).sign;

	                data.setItemVisual(idx, {
	                    color: itemModel.get(sign > 0 ? positiveColorQuery : negativeColorQuery),
	                    borderColor: itemModel.get(sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery)
	                });
	            });
	        }
	    });
	};

/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var retrieve = __webpack_require__(504).retrieve;
	var parsePercent = __webpack_require__(507).parsePercent;

	module.exports = function (ecModel) {

	    ecModel.eachSeriesByType('candlestick', function (seriesModel) {

	        var coordSys = seriesModel.coordinateSystem;
	        var data = seriesModel.getData();
	        var dimensions = seriesModel.dimensions;
	        var chartLayout = seriesModel.get('layout');

	        var candleWidth = calculateCandleWidth(seriesModel, data);

	        data.each(dimensions, function () {
	            var args = arguments;
	            var dimLen = dimensions.length;
	            var axisDimVal = args[0];
	            var idx = args[dimLen];
	            var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	            var constDim = 1 - variableDim;

	            var openVal = args[1];
	            var closeVal = args[2];
	            var lowestVal = args[3];
	            var highestVal = args[4];

	            var ocLow = Math.min(openVal, closeVal);
	            var ocHigh = Math.max(openVal, closeVal);

	            var ocLowPoint = getPoint(ocLow);
	            var ocHighPoint = getPoint(ocHigh);
	            var lowestPoint = getPoint(lowestVal);
	            var highestPoint = getPoint(highestVal);

	            var whiskerEnds = [[highestPoint, ocHighPoint], [lowestPoint, ocLowPoint]];

	            var bodyEnds = [];
	            addBodyEnd(ocHighPoint, 0);
	            addBodyEnd(ocLowPoint, 1);

	            data.setItemLayout(idx, {
	                chartLayout: chartLayout,
	                sign: openVal > closeVal ? -1 : openVal < closeVal ? 1 : 0,
	                initBaseline: openVal > closeVal ? ocHighPoint[constDim] : ocLowPoint[constDim], // open point.
	                bodyEnds: bodyEnds,
	                whiskerEnds: whiskerEnds,
	                brushRect: makeBrushRect()
	            });

	            function getPoint(val) {
	                var p = [];
	                p[variableDim] = axisDimVal;
	                p[constDim] = val;
	                return isNaN(axisDimVal) || isNaN(val) ? [NaN, NaN] : coordSys.dataToPoint(p);
	            }

	            function addBodyEnd(point, start) {
	                var point1 = point.slice();
	                var point2 = point.slice();
	                point1[variableDim] += candleWidth / 2;
	                point2[variableDim] -= candleWidth / 2;
	                start ? bodyEnds.push(point1, point2) : bodyEnds.push(point2, point1);
	            }

	            function makeBrushRect() {
	                var pmin = getPoint(Math.min(openVal, closeVal, lowestVal, highestVal));
	                var pmax = getPoint(Math.max(openVal, closeVal, lowestVal, highestVal));

	                pmin[variableDim] -= candleWidth / 2;
	                pmax[variableDim] -= candleWidth / 2;

	                return {
	                    x: pmin[0],
	                    y: pmin[1],
	                    width: constDim ? candleWidth : pmax[0] - pmin[0],
	                    height: constDim ? pmax[1] - pmin[1] : candleWidth
	                };
	            }
	        }, true);
	    });
	};

	function calculateCandleWidth(seriesModel, data) {
	    var baseAxis = seriesModel.getBaseAxis();
	    var extent;

	    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : (extent = baseAxis.getExtent(), Math.abs(extent[1] - extent[0]) / data.count());

	    var barMaxWidth = parsePercent(retrieve(seriesModel.get('barMaxWidth'), bandWidth), bandWidth);
	    var barMinWidth = parsePercent(retrieve(seriesModel.get('barMinWidth'), 1), bandWidth);
	    var barWidth = seriesModel.get('barWidth');
	    return barWidth != null ? parsePercent(barWidth, bandWidth)
	    // Put max outer to ensure bar visible in spite of overlap.
	    : Math.max(Math.min(bandWidth / 2, barMaxWidth), barMinWidth);
	}

/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var echarts = __webpack_require__(501);

	__webpack_require__(761);
	__webpack_require__(762);

	echarts.registerVisual(zrUtil.curry(__webpack_require__(610), 'effectScatter', 'circle', null));
	echarts.registerLayout(zrUtil.curry(__webpack_require__(611), 'effectScatter'));

/***/ },
/* 761 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createListFromArray = __webpack_require__(602);
	var SeriesModel = __webpack_require__(528);

	module.exports = SeriesModel.extend({

	    type: 'series.effectScatter',

	    dependencies: ['grid', 'polar'],

	    getInitialData: function getInitialData(option, ecModel) {
	        var list = createListFromArray(option.data, this, ecModel);
	        return list;
	    },

	    brushSelector: 'point',

	    defaultOption: {
	        coordinateSystem: 'cartesian2d',
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,

	        effectType: 'ripple',

	        progressive: 0,

	        // When to show the effect, option: 'render'|'emphasis'
	        showEffectOn: 'render',

	        // Ripple effect config
	        rippleEffect: {
	            period: 4,
	            // Scale of ripple
	            scale: 2.5,
	            // Brush type can be fill or stroke
	            brushType: 'fill'
	        },

	        // Cartesian coordinate system
	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        // Polar coordinate system
	        // polarIndex: 0,

	        // Geo coordinate system
	        // geoIndex: 0,

	        // symbol: null,        // 图形类型
	        symbolSize: 10 // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	        // symbolRotate: null,  // 图形旋转控制

	        // large: false,
	        // Available when large is true
	        // largeThreshold: 2000,

	        // itemStyle: {
	        //     normal: {
	        //         opacity: 1
	        //     }
	        // }
	    }

	});

/***/ },
/* 762 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SymbolDraw = __webpack_require__(605);
	var EffectSymbol = __webpack_require__(763);

	__webpack_require__(501).extendChartView({

	    type: 'effectScatter',

	    init: function init() {
	        this._symbolDraw = new SymbolDraw(EffectSymbol);
	    },

	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var effectSymbolDraw = this._symbolDraw;
	        effectSymbolDraw.updateData(data);
	        this.group.add(effectSymbolDraw.group);
	    },

	    updateLayout: function updateLayout() {
	        this._symbolDraw.updateLayout();
	    },

	    remove: function remove(ecModel, api) {
	        this._symbolDraw && this._symbolDraw.remove(api);
	    },

	    dispose: function dispose() {}
	});

/***/ },
/* 763 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Symbol with ripple effect
	 * @module echarts/chart/helper/EffectSymbol
	 */

	var zrUtil = __webpack_require__(504);
	var symbolUtil = __webpack_require__(607);
	var graphic = __webpack_require__(543);
	var numberUtil = __webpack_require__(507);
	var _Symbol = __webpack_require__(606);
	var Group = graphic.Group;

	var EFFECT_RIPPLE_NUMBER = 3;

	function normalizeSymbolSize(symbolSize) {
	    if (!zrUtil.isArray(symbolSize)) {
	        symbolSize = [+symbolSize, +symbolSize];
	    }
	    return symbolSize;
	}

	function updateRipplePath(rippleGroup, effectCfg) {
	    rippleGroup.eachChild(function (ripplePath) {
	        ripplePath.attr({
	            z: effectCfg.z,
	            zlevel: effectCfg.zlevel,
	            style: {
	                stroke: effectCfg.brushType === 'stroke' ? effectCfg.color : null,
	                fill: effectCfg.brushType === 'fill' ? effectCfg.color : null
	            }
	        });
	    });
	}
	/**
	 * @constructor
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @extends {module:zrender/graphic/Group}
	 */
	function EffectSymbol(data, idx) {
	    Group.call(this);

	    var symbol = new _Symbol(data, idx);
	    var rippleGroup = new Group();
	    this.add(symbol);
	    this.add(rippleGroup);

	    rippleGroup.beforeUpdate = function () {
	        this.attr(symbol.getScale());
	    };
	    this.updateData(data, idx);
	}

	var effectSymbolProto = EffectSymbol.prototype;

	effectSymbolProto.stopEffectAnimation = function () {
	    this.childAt(1).removeAll();
	};

	effectSymbolProto.startEffectAnimation = function (effectCfg) {
	    var symbolType = effectCfg.symbolType;
	    var color = effectCfg.color;
	    var rippleGroup = this.childAt(1);

	    for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {
	        // var ripplePath = symbolUtil.createSymbol(
	        //     symbolType, -0.5, -0.5, 1, 1, color
	        // );
	        // If width/height are set too small (e.g., set to 1) on ios10
	        // and macOS Sierra, a circle stroke become a rect, no matter what
	        // the scale is set. So we set width/height as 2. See #4136.
	        var ripplePath = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);
	        ripplePath.attr({
	            style: {
	                strokeNoScale: true
	            },
	            z2: 99,
	            silent: true,
	            scale: [0.5, 0.5]
	        });

	        var delay = -i / EFFECT_RIPPLE_NUMBER * effectCfg.period + effectCfg.effectOffset;
	        // TODO Configurable effectCfg.period
	        ripplePath.animate('', true).when(effectCfg.period, {
	            scale: [effectCfg.rippleScale / 2, effectCfg.rippleScale / 2]
	        }).delay(delay).start();
	        ripplePath.animateStyle(true).when(effectCfg.period, {
	            opacity: 0
	        }).delay(delay).start();

	        rippleGroup.add(ripplePath);
	    }

	    updateRipplePath(rippleGroup, effectCfg);
	};

	/**
	 * Update effect symbol
	 */
	effectSymbolProto.updateEffectAnimation = function (effectCfg) {
	    var oldEffectCfg = this._effectCfg;
	    var rippleGroup = this.childAt(1);

	    // Must reinitialize effect if following configuration changed
	    var DIFFICULT_PROPS = ['symbolType', 'period', 'rippleScale'];
	    for (var i = 0; i < DIFFICULT_PROPS; i++) {
	        var propName = DIFFICULT_PROPS[i];
	        if (oldEffectCfg[propName] !== effectCfg[propName]) {
	            this.stopEffectAnimation();
	            this.startEffectAnimation(effectCfg);
	            return;
	        }
	    }

	    updateRipplePath(rippleGroup, effectCfg);
	};

	/**
	 * Highlight symbol
	 */
	effectSymbolProto.highlight = function () {
	    this.trigger('emphasis');
	};

	/**
	 * Downplay symbol
	 */
	effectSymbolProto.downplay = function () {
	    this.trigger('normal');
	};

	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */
	effectSymbolProto.updateData = function (data, idx) {
	    var seriesModel = data.hostModel;

	    this.childAt(0).updateData(data, idx);

	    var rippleGroup = this.childAt(1);
	    var itemModel = data.getItemModel(idx);
	    var symbolType = data.getItemVisual(idx, 'symbol');
	    var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	    var color = data.getItemVisual(idx, 'color');

	    rippleGroup.attr('scale', symbolSize);

	    rippleGroup.traverse(function (ripplePath) {
	        ripplePath.attr({
	            fill: color
	        });
	    });

	    var symbolOffset = itemModel.getShallow('symbolOffset');
	    if (symbolOffset) {
	        var pos = rippleGroup.position;
	        pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	        pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	    }
	    rippleGroup.rotation = (itemModel.getShallow('symbolRotate') || 0) * Math.PI / 180 || 0;

	    var effectCfg = {};

	    effectCfg.showEffectOn = seriesModel.get('showEffectOn');
	    effectCfg.rippleScale = itemModel.get('rippleEffect.scale');
	    effectCfg.brushType = itemModel.get('rippleEffect.brushType');
	    effectCfg.period = itemModel.get('rippleEffect.period') * 1000;
	    effectCfg.effectOffset = idx / data.count();
	    effectCfg.z = itemModel.getShallow('z') || 0;
	    effectCfg.zlevel = itemModel.getShallow('zlevel') || 0;
	    effectCfg.symbolType = symbolType;
	    effectCfg.color = color;

	    this.off('mouseover').off('mouseout').off('emphasis').off('normal');

	    if (effectCfg.showEffectOn === 'render') {
	        this._effectCfg ? this.updateEffectAnimation(effectCfg) : this.startEffectAnimation(effectCfg);

	        this._effectCfg = effectCfg;
	    } else {
	        // Not keep old effect config
	        this._effectCfg = null;

	        this.stopEffectAnimation();
	        var symbol = this.childAt(0);
	        var onEmphasis = function onEmphasis() {
	            symbol.trigger('emphasis');
	            if (effectCfg.showEffectOn !== 'render') {
	                this.startEffectAnimation(effectCfg);
	            }
	        };
	        var onNormal = function onNormal() {
	            symbol.trigger('normal');
	            if (effectCfg.showEffectOn !== 'render') {
	                this.stopEffectAnimation();
	            }
	        };
	        this.on('mouseover', onEmphasis, this).on('mouseout', onNormal, this).on('emphasis', onEmphasis, this).on('normal', onNormal, this);
	    }

	    this._effectCfg = effectCfg;
	};

	effectSymbolProto.fadeOut = function (cb) {
	    this.off('mouseover').off('mouseout').off('emphasis').off('normal');
	    cb && cb();
	};

	zrUtil.inherits(EffectSymbol, Group);

	module.exports = EffectSymbol;

/***/ },
/* 764 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(765);
	__webpack_require__(766);

	var echarts = __webpack_require__(501);
	echarts.registerLayout(__webpack_require__(771));
	echarts.registerVisual(__webpack_require__(772));

/***/ },
/* 765 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SeriesModel = __webpack_require__(528);
	var List = __webpack_require__(598);
	var zrUtil = __webpack_require__(504);
	var formatUtil = __webpack_require__(506);
	var CoordinateSystem = __webpack_require__(526);

	// Convert [ [{coord: []}, {coord: []}] ]
	// to [ { coords: [[]] } ]
	function preprocessOption(seriesOpt) {
	    var data = seriesOpt.data;
	    if (data && data[0] && data[0][0] && data[0][0].coord) {
	        if (__DEV__) {
	            console.warn('Lines data configuration has been changed to' + ' { coords:[[1,2],[2,3]] }');
	        }
	        seriesOpt.data = zrUtil.map(data, function (itemOpt) {
	            var coords = [itemOpt[0].coord, itemOpt[1].coord];
	            var target = {
	                coords: coords
	            };
	            if (itemOpt[0].name) {
	                target.fromName = itemOpt[0].name;
	            }
	            if (itemOpt[1].name) {
	                target.toName = itemOpt[1].name;
	            }
	            return zrUtil.mergeAll([target, itemOpt[0], itemOpt[1]]);
	        });
	    }
	}

	var LinesSeries = SeriesModel.extend({

	    type: 'series.lines',

	    dependencies: ['grid', 'polar'],

	    visualColorAccessPath: 'lineStyle.normal.color',

	    init: function init(option) {
	        // Not using preprocessor because mergeOption may not have series.type
	        preprocessOption(option);

	        LinesSeries.superApply(this, 'init', arguments);
	    },

	    mergeOption: function mergeOption(option) {
	        preprocessOption(option);

	        LinesSeries.superApply(this, 'mergeOption', arguments);
	    },

	    getInitialData: function getInitialData(option, ecModel) {
	        if (__DEV__) {
	            var CoordSys = CoordinateSystem.get(option.coordinateSystem);
	            if (!CoordSys) {
	                throw new Error('Unkown coordinate system ' + option.coordinateSystem);
	            }
	        }

	        var lineData = new List(['value'], this);
	        lineData.hasItemOption = false;
	        lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
	            // dataItem is simply coords
	            if (dataItem instanceof Array) {
	                return NaN;
	            } else {
	                lineData.hasItemOption = true;
	                var value = dataItem.value;
	                if (value != null) {
	                    return value instanceof Array ? value[dimIndex] : value;
	                }
	            }
	        });

	        return lineData;
	    },

	    formatTooltip: function formatTooltip(dataIndex) {
	        var data = this.getData();
	        var itemModel = data.getItemModel(dataIndex);
	        var name = itemModel.get('name');
	        if (name) {
	            return name;
	        }
	        var fromName = itemModel.get('fromName');
	        var toName = itemModel.get('toName');
	        var html = [];
	        fromName != null && html.push(fromName);
	        toName != null && html.push(toName);

	        return formatUtil.encodeHTML(html.join(' > '));
	    },

	    defaultOption: {
	        coordinateSystem: 'geo',
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,

	        hoverAnimation: true,
	        // Cartesian coordinate system
	        xAxisIndex: 0,
	        yAxisIndex: 0,

	        symbol: ['none', 'none'],
	        symbolSize: [10, 10],
	        // Geo coordinate system
	        geoIndex: 0,

	        effect: {
	            show: false,
	            period: 4,
	            // Animation delay. support callback
	            // delay: 0,
	            // If move with constant speed px/sec
	            // period will be ignored if this property is > 0,
	            constantSpeed: 0,
	            symbol: 'circle',
	            symbolSize: 3,
	            loop: true,
	            // Length of trail, 0 - 1
	            trailLength: 0.2
	            // Same with lineStyle.normal.color
	            // color
	        },

	        large: false,
	        // Available when large is true
	        largeThreshold: 2000,

	        // If lines are polyline
	        // polyline not support curveness, label, animation
	        polyline: false,

	        label: {
	            normal: {
	                show: false,
	                position: 'end'
	                // distance: 5,
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	            }
	        },

	        lineStyle: {
	            normal: {
	                opacity: 0.5
	            }
	        }
	    }
	});

/***/ },
/* 766 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LineDraw = __webpack_require__(702);
	var EffectLine = __webpack_require__(767);
	var Line = __webpack_require__(703);
	var Polyline = __webpack_require__(768);
	var EffectPolyline = __webpack_require__(769);
	var LargeLineDraw = __webpack_require__(770);

	__webpack_require__(501).extendChartView({

	    type: 'lines',

	    init: function init() {},

	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var lineDraw = this._lineDraw;

	        var hasEffect = seriesModel.get('effect.show');
	        var isPolyline = seriesModel.get('polyline');
	        var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');

	        if (__DEV__) {
	            if (hasEffect && isLarge) {
	                console.warn('Large lines not support effect');
	            }
	        }
	        if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {
	            if (lineDraw) {
	                lineDraw.remove();
	            }
	            lineDraw = this._lineDraw = isLarge ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);
	            this._hasEffet = hasEffect;
	            this._isPolyline = isPolyline;
	            this._isLarge = isLarge;
	        }

	        var zlevel = seriesModel.get('zlevel');
	        var trailLength = seriesModel.get('effect.trailLength');

	        var zr = api.getZr();
	        // Avoid the drag cause ghost shadow
	        // FIXME Better way ?
	        zr.painter.getLayer(zlevel).clear(true);
	        // Config layer with motion blur
	        if (this._lastZlevel != null) {
	            zr.configLayer(this._lastZlevel, {
	                motionBlur: false
	            });
	        }
	        if (hasEffect && trailLength) {
	            if (__DEV__) {
	                var notInIndividual = false;
	                ecModel.eachSeries(function (otherSeriesModel) {
	                    if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {
	                        notInIndividual = true;
	                    }
	                });
	                notInIndividual && console.warn('Lines with trail effect should have an individual zlevel');
	            }

	            zr.configLayer(zlevel, {
	                motionBlur: true,
	                lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)
	            });
	        }

	        this.group.add(lineDraw.group);

	        lineDraw.updateData(data);

	        this._lastZlevel = zlevel;
	    },

	    updateLayout: function updateLayout(seriesModel, ecModel, api) {
	        this._lineDraw.updateLayout(seriesModel);
	        // Not use motion when dragging or zooming
	        var zr = api.getZr();
	        zr.painter.getLayer(this._lastZlevel).clear(true);
	    },

	    remove: function remove(ecModel, api) {
	        this._lineDraw && this._lineDraw.remove(api, true);
	    },

	    dispose: function dispose() {}
	});

/***/ },
/* 767 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */

	var graphic = __webpack_require__(543);
	var Line = __webpack_require__(703);
	var zrUtil = __webpack_require__(504);
	var symbolUtil = __webpack_require__(607);
	var vec2 = __webpack_require__(510);

	var curveUtil = __webpack_require__(550);

	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Line}
	 */
	function EffectLine(lineData, idx, seriesScope) {
	    graphic.Group.call(this);

	    this.add(this.createLine(lineData, idx, seriesScope));

	    this._updateEffectSymbol(lineData, idx);
	}

	var effectLineProto = EffectLine.prototype;

	effectLineProto.createLine = function (lineData, idx, seriesScope) {
	    return new Line(lineData, idx, seriesScope);
	};

	effectLineProto._updateEffectSymbol = function (lineData, idx) {
	    var itemModel = lineData.getItemModel(idx);
	    var effectModel = itemModel.getModel('effect');
	    var size = effectModel.get('symbolSize');
	    var symbolType = effectModel.get('symbol');
	    if (!zrUtil.isArray(size)) {
	        size = [size, size];
	    }
	    var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');
	    var symbol = this.childAt(1);

	    if (this._symbolType !== symbolType) {
	        // Remove previous
	        this.remove(symbol);

	        symbol = symbolUtil.createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	        symbol.z2 = 100;
	        symbol.culling = true;

	        this.add(symbol);
	    }

	    // Symbol may be removed if loop is false
	    if (!symbol) {
	        return;
	    }

	    // Shadow color is same with color in default
	    symbol.setStyle('shadowColor', color);
	    symbol.setStyle(effectModel.getItemStyle(['color']));

	    symbol.attr('scale', size);

	    symbol.setColor(color);
	    symbol.attr('scale', size);

	    this._symbolType = symbolType;

	    this._updateEffectAnimation(lineData, effectModel, idx);
	};

	effectLineProto._updateEffectAnimation = function (lineData, effectModel, idx) {

	    var symbol = this.childAt(1);
	    if (!symbol) {
	        return;
	    }

	    var self = this;

	    var points = lineData.getItemLayout(idx);

	    var period = effectModel.get('period') * 1000;
	    var loop = effectModel.get('loop');
	    var constantSpeed = effectModel.get('constantSpeed');
	    var delayExpr = zrUtil.retrieve(effectModel.get('delay'), function (idx) {
	        return idx / lineData.count() * period / 3;
	    });
	    var isDelayFunc = typeof delayExpr === 'function';

	    // Ignore when updating
	    symbol.ignore = true;

	    this.updateAnimationPoints(symbol, points);

	    if (constantSpeed > 0) {
	        period = this.getLineLength(symbol) / constantSpeed * 1000;
	    }

	    if (period !== this._period || loop !== this._loop) {

	        symbol.stopAnimation();

	        var delay = delayExpr;
	        if (isDelayFunc) {
	            delay = delayExpr(idx);
	        }
	        if (symbol.__t > 0) {
	            delay = -period * symbol.__t;
	        }
	        symbol.__t = 0;
	        var animator = symbol.animate('', loop).when(period, {
	            __t: 1
	        }).delay(delay).during(function () {
	            self.updateSymbolPosition(symbol);
	        });
	        if (!loop) {
	            animator.done(function () {
	                self.remove(symbol);
	            });
	        }
	        animator.start();
	    }

	    this._period = period;
	    this._loop = loop;
	};

	effectLineProto.getLineLength = function (symbol) {
	    // Not so accurate
	    return vec2.dist(symbol.__p1, symbol.__cp1) + vec2.dist(symbol.__cp1, symbol.__p2);
	};

	effectLineProto.updateAnimationPoints = function (symbol, points) {
	    symbol.__p1 = points[0];
	    symbol.__p2 = points[1];
	    symbol.__cp1 = points[2] || [(points[0][0] + points[1][0]) / 2, (points[0][1] + points[1][1]) / 2];
	};

	effectLineProto.updateData = function (lineData, idx, seriesScope) {
	    this.childAt(0).updateData(lineData, idx, seriesScope);
	    this._updateEffectSymbol(lineData, idx);
	};

	effectLineProto.updateSymbolPosition = function (symbol) {
	    var p1 = symbol.__p1;
	    var p2 = symbol.__p2;
	    var cp1 = symbol.__cp1;
	    var t = symbol.__t;
	    var pos = symbol.position;
	    var quadraticAt = curveUtil.quadraticAt;
	    var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;
	    pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);
	    pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t);

	    // Tangent
	    var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);
	    var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);

	    symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;

	    symbol.ignore = false;
	};

	effectLineProto.updateLayout = function (lineData, idx) {
	    this.childAt(0).updateLayout(lineData, idx);

	    var effectModel = lineData.getItemModel(idx).getModel('effect');
	    this._updateEffectAnimation(lineData, effectModel, idx);
	};

	zrUtil.inherits(EffectLine, graphic.Group);

	module.exports = EffectLine;

/***/ },
/* 768 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/chart/helper/Line
	 */

	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);

	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Polyline}
	 */
	function Polyline(lineData, idx, seriesScope) {
	    graphic.Group.call(this);

	    this._createPolyline(lineData, idx, seriesScope);
	}

	var polylineProto = Polyline.prototype;

	polylineProto._createPolyline = function (lineData, idx, seriesScope) {
	    // var seriesModel = lineData.hostModel;
	    var points = lineData.getItemLayout(idx);

	    var line = new graphic.Polyline({
	        shape: {
	            points: points
	        }
	    });

	    this.add(line);

	    this._updateCommonStl(lineData, idx, seriesScope);
	};

	polylineProto.updateData = function (lineData, idx, seriesScope) {
	    var seriesModel = lineData.hostModel;

	    var line = this.childAt(0);
	    var target = {
	        shape: {
	            points: lineData.getItemLayout(idx)
	        }
	    };
	    graphic.updateProps(line, target, seriesModel, idx);

	    this._updateCommonStl(lineData, idx, seriesScope);
	};

	polylineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	    var line = this.childAt(0);
	    var itemModel = lineData.getItemModel(idx);

	    var visualColor = lineData.getItemVisual(idx, 'color');

	    var lineStyle = seriesScope && seriesScope.lineStyle;
	    var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;

	    if (!seriesScope || lineData.hasItemOption) {
	        lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	        hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	    }
	    line.useStyle(zrUtil.defaults({
	        strokeNoScale: true,
	        fill: 'none',
	        stroke: visualColor
	    }, lineStyle));
	    line.hoverStyle = hoverLineStyle;

	    graphic.setHoverStyle(this);
	};

	polylineProto.updateLayout = function (lineData, idx) {
	    var polyline = this.childAt(0);
	    polyline.setShape('points', lineData.getItemLayout(idx));
	};

	zrUtil.inherits(Polyline, graphic.Group);

	module.exports = Polyline;

/***/ },
/* 769 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */

	var Polyline = __webpack_require__(768);
	var zrUtil = __webpack_require__(504);
	var EffectLine = __webpack_require__(767);
	var vec2 = __webpack_require__(510);

	/**
	 * @constructor
	 * @extends {module:echarts/chart/helper/EffectLine}
	 * @alias {module:echarts/chart/helper/Polyline}
	 */
	function EffectPolyline(lineData, idx, seriesScope) {
	    EffectLine.call(this, lineData, idx, seriesScope);
	    this._lastFrame = 0;
	    this._lastFramePercent = 0;
	}

	var effectPolylineProto = EffectPolyline.prototype;

	// Overwrite
	effectPolylineProto.createLine = function (lineData, idx, seriesScope) {
	    return new Polyline(lineData, idx, seriesScope);
	};

	// Overwrite
	effectPolylineProto.updateAnimationPoints = function (symbol, points) {
	    this._points = points;
	    var accLenArr = [0];
	    var len = 0;
	    for (var i = 1; i < points.length; i++) {
	        var p1 = points[i - 1];
	        var p2 = points[i];
	        len += vec2.dist(p1, p2);
	        accLenArr.push(len);
	    }
	    if (len === 0) {
	        return;
	    }

	    for (var i = 0; i < accLenArr.length; i++) {
	        accLenArr[i] /= len;
	    }
	    this._offsets = accLenArr;
	    this._length = len;
	};

	// Overwrite
	effectPolylineProto.getLineLength = function (symbol) {
	    return this._length;
	};

	// Overwrite
	effectPolylineProto.updateSymbolPosition = function (symbol) {
	    var t = symbol.__t;
	    var points = this._points;
	    var offsets = this._offsets;
	    var len = points.length;

	    if (!offsets) {
	        // Has length 0
	        return;
	    }

	    var lastFrame = this._lastFrame;
	    var frame;

	    if (t < this._lastFramePercent) {
	        // Start from the next frame
	        // PENDING start from lastFrame ?
	        var start = Math.min(lastFrame + 1, len - 1);
	        for (frame = start; frame >= 0; frame--) {
	            if (offsets[frame] <= t) {
	                break;
	            }
	        }
	        // PENDING really need to do this ?
	        frame = Math.min(frame, len - 2);
	    } else {
	        for (var frame = lastFrame; frame < len; frame++) {
	            if (offsets[frame] > t) {
	                break;
	            }
	        }
	        frame = Math.min(frame - 1, len - 2);
	    }

	    vec2.lerp(symbol.position, points[frame], points[frame + 1], (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame]));

	    var tx = points[frame + 1][0] - points[frame][0];
	    var ty = points[frame + 1][1] - points[frame][1];
	    symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;

	    this._lastFrame = frame;
	    this._lastFramePercent = t;

	    symbol.ignore = false;
	};

	zrUtil.inherits(EffectPolyline, EffectLine);

	module.exports = EffectPolyline;

/***/ },
/* 770 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO Batch by color


	var graphic = __webpack_require__(543);

	var quadraticContain = __webpack_require__(555);
	var lineContain = __webpack_require__(553);

	var LargeLineShape = graphic.extendShape({
	    shape: {
	        polyline: false,

	        segs: []
	    },

	    buildPath: function buildPath(path, shape) {
	        var segs = shape.segs;
	        var isPolyline = shape.polyline;

	        for (var i = 0; i < segs.length; i++) {
	            var seg = segs[i];
	            if (isPolyline) {
	                path.moveTo(seg[0][0], seg[0][1]);
	                for (var j = 1; j < seg.length; j++) {
	                    path.lineTo(seg[j][0], seg[j][1]);
	                }
	            } else {
	                path.moveTo(seg[0][0], seg[0][1]);
	                if (seg.length > 2) {
	                    path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);
	                } else {
	                    path.lineTo(seg[1][0], seg[1][1]);
	                }
	            }
	        }
	    },

	    findDataIndex: function findDataIndex(x, y) {
	        var shape = this.shape;
	        var segs = shape.segs;
	        var isPolyline = shape.polyline;
	        var lineWidth = Math.max(this.style.lineWidth, 1);

	        // Not consider transform
	        for (var i = 0; i < segs.length; i++) {
	            var seg = segs[i];
	            if (isPolyline) {
	                for (var j = 1; j < seg.length; j++) {
	                    if (lineContain.containStroke(seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y)) {
	                        return i;
	                    }
	                }
	            } else {
	                if (seg.length > 2) {
	                    if (quadraticContain.containStroke(seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y)) {
	                        return i;
	                    }
	                } else {
	                    if (lineContain.containStroke(seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y)) {
	                        return i;
	                    }
	                }
	            }
	        }

	        return -1;
	    }
	});

	function LargeLineDraw() {
	    this.group = new graphic.Group();

	    this._lineEl = new LargeLineShape();
	}

	var largeLineProto = LargeLineDraw.prototype;

	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */
	largeLineProto.updateData = function (data) {
	    this.group.removeAll();

	    var lineEl = this._lineEl;

	    var seriesModel = data.hostModel;

	    lineEl.setShape({
	        segs: data.mapArray(data.getItemLayout),
	        polyline: seriesModel.get('polyline')
	    });

	    lineEl.useStyle(seriesModel.getModel('lineStyle.normal').getLineStyle());

	    var visualColor = data.getVisual('color');
	    if (visualColor) {
	        lineEl.setStyle('stroke', visualColor);
	    }
	    lineEl.setStyle('fill');

	    // Enable tooltip
	    // PENDING May have performance issue when path is extremely large
	    lineEl.seriesIndex = seriesModel.seriesIndex;
	    lineEl.on('mousemove', function (e) {
	        lineEl.dataIndex = null;
	        var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);
	        if (dataIndex > 0) {
	            // Provide dataIndex for tooltip
	            lineEl.dataIndex = dataIndex;
	        }
	    });

	    // Add back
	    this.group.add(lineEl);
	};

	largeLineProto.updateLayout = function (seriesModel) {
	    var data = seriesModel.getData();
	    this._lineEl.setShape({
	        segs: data.mapArray(data.getItemLayout)
	    });
	};

	largeLineProto.remove = function () {
	    this.group.removeAll();
	};

	module.exports = LargeLineDraw;

/***/ },
/* 771 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('lines', function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        var lineData = seriesModel.getData();

	        // FIXME Use data dimensions ?
	        lineData.each(function (idx) {
	            var itemModel = lineData.getItemModel(idx);
	            // TODO Support pure array
	            var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.get('coords');

	            if (__DEV__) {
	                if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
	                    throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');
	                }
	            }
	            var pts = [];

	            if (seriesModel.get('polyline')) {
	                for (var i = 0; i < coords.length; i++) {
	                    pts.push(coordSys.dataToPoint(coords[i]));
	                }
	            } else {
	                pts[0] = coordSys.dataToPoint(coords[0]);
	                pts[1] = coordSys.dataToPoint(coords[1]);

	                var curveness = itemModel.get('lineStyle.normal.curveness');
	                if (+curveness) {
	                    pts[2] = [(pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness, (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness];
	                }
	            }
	            lineData.setItemLayout(idx, pts);
	        });
	    });
	};

/***/ },
/* 772 */
/***/ function(module, exports) {

	'use strict';

	function normalize(a) {
	    if (!(a instanceof Array)) {
	        a = [a, a];
	    }
	    return a;
	}
	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('lines', function (seriesModel) {
	        var data = seriesModel.getData();
	        var symbolType = normalize(seriesModel.get('symbol'));
	        var symbolSize = normalize(seriesModel.get('symbolSize'));

	        var opacityQuery = 'lineStyle.normal.opacity'.split('.');

	        data.setVisual('fromSymbol', symbolType && symbolType[0]);
	        data.setVisual('toSymbol', symbolType && symbolType[1]);
	        data.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	        data.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	        data.setVisual('opacity', seriesModel.get(opacityQuery));

	        data.each(function (idx) {
	            var itemModel = data.getItemModel(idx);
	            var symbolType = normalize(itemModel.getShallow('symbol', true));
	            var symbolSize = normalize(itemModel.getShallow('symbolSize', true));
	            var opacity = itemModel.get(opacityQuery);

	            symbolType[0] && data.setItemVisual(idx, 'fromSymbol', symbolType[0]);
	            symbolType[1] && data.setItemVisual(idx, 'toSymbol', symbolType[1]);
	            symbolSize[0] && data.setItemVisual(idx, 'fromSymbolSize', symbolSize[0]);
	            symbolSize[1] && data.setItemVisual(idx, 'toSymbolSize', symbolSize[1]);

	            data.setItemVisual(idx, 'opacity', opacity);
	        });
	    });
	};

/***/ },
/* 773 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(774);
	__webpack_require__(775);

/***/ },
/* 774 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SeriesModel = __webpack_require__(528);
	var createListFromArray = __webpack_require__(602);

	module.exports = SeriesModel.extend({
	    type: 'series.heatmap',

	    getInitialData: function getInitialData(option, ecModel) {
	        return createListFromArray(option.data, this, ecModel);
	    },

	    defaultOption: {

	        // Cartesian2D or geo
	        coordinateSystem: 'cartesian2d',

	        zlevel: 0,

	        z: 2,

	        // Cartesian coordinate system
	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        // Geo coordinate system
	        geoIndex: 0,

	        blurSize: 30,

	        pointSize: 20,

	        maxOpacity: 1,

	        minOpacity: 0
	    }
	});

/***/ },
/* 775 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var graphic = __webpack_require__(543);
	var HeatmapLayer = __webpack_require__(776);
	var zrUtil = __webpack_require__(504);

	function getIsInPiecewiseRange(dataExtent, pieceList, selected) {
	    var dataSpan = dataExtent[1] - dataExtent[0];
	    pieceList = zrUtil.map(pieceList, function (piece) {
	        return {
	            interval: [(piece.interval[0] - dataExtent[0]) / dataSpan, (piece.interval[1] - dataExtent[0]) / dataSpan]
	        };
	    });
	    var len = pieceList.length;
	    var lastIndex = 0;
	    return function (val) {
	        // Try to find in the location of the last found
	        for (var i = lastIndex; i < len; i++) {
	            var interval = pieceList[i].interval;
	            if (interval[0] <= val && val <= interval[1]) {
	                lastIndex = i;
	                break;
	            }
	        }
	        if (i === len) {
	            // Not found, back interation
	            for (var i = lastIndex - 1; i >= 0; i--) {
	                var interval = pieceList[i].interval;
	                if (interval[0] <= val && val <= interval[1]) {
	                    lastIndex = i;
	                    break;
	                }
	            }
	        }
	        return i >= 0 && i < len && selected[i];
	    };
	}

	function getIsInContinuousRange(dataExtent, range) {
	    var dataSpan = dataExtent[1] - dataExtent[0];
	    range = [(range[0] - dataExtent[0]) / dataSpan, (range[1] - dataExtent[0]) / dataSpan];
	    return function (val) {
	        return val >= range[0] && val <= range[1];
	    };
	}

	function isGeoCoordSys(coordSys) {
	    var dimensions = coordSys.dimensions;
	    // Not use coorSys.type === 'geo' because coordSys maybe extended
	    return dimensions[0] === 'lng' && dimensions[1] === 'lat';
	}

	module.exports = __webpack_require__(501).extendChartView({

	    type: 'heatmap',

	    render: function render(seriesModel, ecModel, api) {
	        var visualMapOfThisSeries;
	        ecModel.eachComponent('visualMap', function (visualMap) {
	            visualMap.eachTargetSeries(function (targetSeries) {
	                if (targetSeries === seriesModel) {
	                    visualMapOfThisSeries = visualMap;
	                }
	            });
	        });

	        if (__DEV__) {
	            if (!visualMapOfThisSeries) {
	                throw new Error('Heatmap must use with visualMap');
	            }
	        }

	        this.group.removeAll();
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys.type === 'cartesian2d') {
	            this._renderOnCartesian(coordSys, seriesModel, api);
	        } else if (isGeoCoordSys(coordSys)) {
	            this._renderOnGeo(coordSys, seriesModel, visualMapOfThisSeries, api);
	        }
	    },

	    dispose: function dispose() {},

	    _renderOnCartesian: function _renderOnCartesian(cartesian, seriesModel, api) {
	        var xAxis = cartesian.getAxis('x');
	        var yAxis = cartesian.getAxis('y');
	        var group = this.group;

	        if (__DEV__) {
	            if (!(xAxis.type === 'category' && yAxis.type === 'category')) {
	                throw new Error('Heatmap on cartesian must have two category axes');
	            }
	            if (!(xAxis.onBand && yAxis.onBand)) {
	                throw new Error('Heatmap on cartesian must have two axes with boundaryGap true');
	            }
	        }

	        var width = xAxis.getBandWidth();
	        var height = yAxis.getBandWidth();

	        var data = seriesModel.getData();

	        var itemStyleQuery = 'itemStyle.normal';
	        var hoverItemStyleQuery = 'itemStyle.emphasis';
	        var labelQuery = 'label.normal';
	        var hoverLabelQuery = 'label.emphasis';
	        var style = seriesModel.getModel(itemStyleQuery).getItemStyle(['color']);
	        var hoverStl = seriesModel.getModel(hoverItemStyleQuery).getItemStyle();
	        var labelModel = seriesModel.getModel('label.normal');
	        var hoverLabelModel = seriesModel.getModel('label.emphasis');

	        data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	            var itemModel = data.getItemModel(idx);
	            var point = cartesian.dataToPoint([x, y]);
	            // Ignore empty data
	            if (isNaN(z)) {
	                return;
	            }
	            var rect = new graphic.Rect({
	                shape: {
	                    x: point[0] - width / 2,
	                    y: point[1] - height / 2,
	                    width: width,
	                    height: height
	                },
	                style: {
	                    fill: data.getItemVisual(idx, 'color'),
	                    opacity: data.getItemVisual(idx, 'opacity')
	                }
	            });
	            // Optimization for large datset
	            if (data.hasItemOption) {
	                style = itemModel.getModel(itemStyleQuery).getItemStyle(['color']);
	                hoverStl = itemModel.getModel(hoverItemStyleQuery).getItemStyle();
	                labelModel = itemModel.getModel(labelQuery);
	                hoverLabelModel = itemModel.getModel(hoverLabelQuery);
	            }

	            var rawValue = seriesModel.getRawValue(idx);
	            var defaultText = '-';
	            if (rawValue && rawValue[2] != null) {
	                defaultText = rawValue[2];
	            }
	            if (labelModel.getShallow('show')) {
	                graphic.setText(style, labelModel);
	                style.text = seriesModel.getFormattedLabel(idx, 'normal') || defaultText;
	            }
	            if (hoverLabelModel.getShallow('show')) {
	                graphic.setText(hoverStl, hoverLabelModel);
	                hoverStl.text = seriesModel.getFormattedLabel(idx, 'emphasis') || defaultText;
	            }

	            rect.setStyle(style);

	            graphic.setHoverStyle(rect, data.hasItemOption ? hoverStl : zrUtil.extend({}, hoverStl));

	            group.add(rect);
	            data.setItemGraphicEl(idx, rect);
	        });
	    },

	    _renderOnGeo: function _renderOnGeo(geo, seriesModel, visualMapModel, api) {
	        var inRangeVisuals = visualMapModel.targetVisuals.inRange;
	        var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;
	        // if (!visualMapping) {
	        //     throw new Error('Data range must have color visuals');
	        // }

	        var data = seriesModel.getData();
	        var hmLayer = this._hmLayer || this._hmLayer || new HeatmapLayer();
	        hmLayer.blurSize = seriesModel.get('blurSize');
	        hmLayer.pointSize = seriesModel.get('pointSize');
	        hmLayer.minOpacity = seriesModel.get('minOpacity');
	        hmLayer.maxOpacity = seriesModel.get('maxOpacity');

	        var rect = geo.getViewRect().clone();
	        var roamTransform = geo.getRoamTransform().transform;
	        rect.applyTransform(roamTransform);

	        // Clamp on viewport
	        var x = Math.max(rect.x, 0);
	        var y = Math.max(rect.y, 0);
	        var x2 = Math.min(rect.width + rect.x, api.getWidth());
	        var y2 = Math.min(rect.height + rect.y, api.getHeight());
	        var width = x2 - x;
	        var height = y2 - y;

	        var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {
	            var pt = geo.dataToPoint([lng, lat]);
	            pt[0] -= x;
	            pt[1] -= y;
	            pt.push(value);
	            return pt;
	        });

	        var dataExtent = visualMapModel.getExtent();
	        var isInRange = visualMapModel.type === 'visualMap.continuous' ? getIsInContinuousRange(dataExtent, visualMapModel.option.range) : getIsInPiecewiseRange(dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected);

	        hmLayer.update(points, width, height, inRangeVisuals.color.getNormalizer(), {
	            inRange: inRangeVisuals.color.getColorMapper(),
	            outOfRange: outOfRangeVisuals.color.getColorMapper()
	        }, isInRange);
	        var img = new graphic.Image({
	            style: {
	                width: width,
	                height: height,
	                x: x,
	                y: y,
	                image: hmLayer.canvas
	            },
	            silent: true
	        });
	        this.group.add(img);
	    }
	});

/***/ },
/* 776 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file defines echarts Heatmap Chart
	 * @author Ovilia (me@zhangwenli.com)
	 * Inspired by https://github.com/mourner/simpleheat
	 *
	 * @module
	 */

	var GRADIENT_LEVELS = 256;
	var zrUtil = __webpack_require__(504);

	/**
	 * Heatmap Chart
	 *
	 * @class
	 */
	function Heatmap() {
	    var canvas = zrUtil.createCanvas();
	    this.canvas = canvas;

	    this.blurSize = 30;
	    this.pointSize = 20;

	    this.maxOpacity = 1;
	    this.minOpacity = 0;

	    this._gradientPixels = {};
	}

	Heatmap.prototype = {
	    /**
	     * Renders Heatmap and returns the rendered canvas
	     * @param {Array} data array of data, each has x, y, value
	     * @param {number} width canvas width
	     * @param {number} height canvas height
	     */
	    update: function update(data, width, height, normalize, colorFunc, isInRange) {
	        var brush = this._getBrush();
	        var gradientInRange = this._getGradient(data, colorFunc, 'inRange');
	        var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');
	        var r = this.pointSize + this.blurSize;

	        var canvas = this.canvas;
	        var ctx = canvas.getContext('2d');
	        var len = data.length;
	        canvas.width = width;
	        canvas.height = height;
	        for (var i = 0; i < len; ++i) {
	            var p = data[i];
	            var x = p[0];
	            var y = p[1];
	            var value = p[2];

	            // calculate alpha using value
	            var alpha = normalize(value);

	            // draw with the circle brush with alpha
	            ctx.globalAlpha = alpha;
	            ctx.drawImage(brush, x - r, y - r);
	        }

	        // colorize the canvas using alpha value and set with gradient
	        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
	        var pixels = imageData.data;
	        var offset = 0;
	        var pixelLen = pixels.length;
	        var minOpacity = this.minOpacity;
	        var maxOpacity = this.maxOpacity;
	        var diffOpacity = maxOpacity - minOpacity;

	        while (offset < pixelLen) {
	            var alpha = pixels[offset + 3] / 256;
	            var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;
	            // Simple optimize to ignore the empty data
	            if (alpha > 0) {
	                var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;
	                // Any alpha > 0 will be mapped to [minOpacity, maxOpacity]
	                alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);
	                pixels[offset++] = gradient[gradientOffset];
	                pixels[offset++] = gradient[gradientOffset + 1];
	                pixels[offset++] = gradient[gradientOffset + 2];
	                pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;
	            } else {
	                offset += 4;
	            }
	        }
	        ctx.putImageData(imageData, 0, 0);

	        return canvas;
	    },

	    /**
	     * get canvas of a black circle brush used for canvas to draw later
	     * @private
	     * @returns {Object} circle brush canvas
	     */
	    _getBrush: function _getBrush() {
	        var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas());
	        // set brush size
	        var r = this.pointSize + this.blurSize;
	        var d = r * 2;
	        brushCanvas.width = d;
	        brushCanvas.height = d;

	        var ctx = brushCanvas.getContext('2d');
	        ctx.clearRect(0, 0, d, d);

	        // in order to render shadow without the distinct circle,
	        // draw the distinct circle in an invisible place,
	        // and use shadowOffset to draw shadow in the center of the canvas
	        ctx.shadowOffsetX = d;
	        ctx.shadowBlur = this.blurSize;
	        // draw the shadow in black, and use alpha and shadow blur to generate
	        // color in color map
	        ctx.shadowColor = '#000';

	        // draw circle in the left to the canvas
	        ctx.beginPath();
	        ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);
	        ctx.closePath();
	        ctx.fill();
	        return brushCanvas;
	    },

	    /**
	     * get gradient color map
	     * @private
	     */
	    _getGradient: function _getGradient(data, colorFunc, state) {
	        var gradientPixels = this._gradientPixels;
	        var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));
	        var color = [];
	        var off = 0;
	        for (var i = 0; i < 256; i++) {
	            colorFunc[state](i / 255, true, color);
	            pixelsSingleState[off++] = color[0];
	            pixelsSingleState[off++] = color[1];
	            pixelsSingleState[off++] = color[2];
	            pixelsSingleState[off++] = color[3];
	        }
	        return pixelsSingleState;
	    }
	};

	module.exports = Heatmap;

/***/ },
/* 777 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	__webpack_require__(614);

	__webpack_require__(778);
	__webpack_require__(779);

	var barLayoutGrid = __webpack_require__(640);
	var echarts = __webpack_require__(501);

	echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'pictorialBar'));

	echarts.registerVisual(zrUtil.curry(__webpack_require__(610), 'pictorialBar', 'roundRect', null));

	// In case developer forget to include grid component
	__webpack_require__(613);

/***/ },
/* 778 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PictorialBarSeries = __webpack_require__(636).extend({

	    type: 'series.pictorialBar',

	    dependencies: ['grid'],

	    defaultOption: {
	        symbol: 'circle', // Customized bar shape
	        symbolSize: null, // Can be ['100%', '100%'], null means auto.
	        symbolRotate: null,

	        symbolPosition: null, // 'start' or 'end' or 'center', null means auto.
	        symbolOffset: null,
	        symbolMargin: null, // start margin and end margin. Can be a number or a percent string.
	        // Auto margin by defualt.
	        symbolRepeat: false, // false/null/undefined, means no repeat.
	        // Can be true, means auto calculate repeat times and cut by data.
	        // Can be a number, specifies repeat times, and do not cut by data.
	        // Can be 'fixed', means auto calculate repeat times but do not cut by data.
	        symbolRepeatDirection: 'end', // 'end' means from 'start' to 'end'.

	        symbolClip: false,
	        symbolBoundingData: null,
	        symbolPatternSize: 400, // 400 * 400 px

	        barGap: '-100%', // In most case, overlap is needed.

	        // z can be set in data item, which is z2 actually.

	        // Disable progressive
	        progressive: 0,
	        hoverAnimation: false // Open only when needed.
	    },

	    getInitialData: function getInitialData(option) {
	        // Disable stack.
	        option.stack = null;
	        return PictorialBarSeries.superApply(this, 'getInitialData', arguments);
	    }
	});

	module.exports = PictorialBarSeries;

/***/ },
/* 779 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var symbolUtil = __webpack_require__(607);
	var numberUtil = __webpack_require__(507);
	var helper = __webpack_require__(638);

	var parsePercent = numberUtil.parsePercent;

	var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'borderWidth'];

	// index: +isHorizontal
	var LAYOUT_ATTRS = [{ xy: 'x', wh: 'width', index: 0, posDesc: ['left', 'right'] }, { xy: 'y', wh: 'height', index: 1, posDesc: ['top', 'bottom'] }];

	var pathForLineWidth = new graphic.Circle();

	var BarView = __webpack_require__(501).extendChartView({

	    type: 'pictorialBar',

	    render: function render(seriesModel, ecModel, api) {
	        var group = this.group;
	        var data = seriesModel.getData();
	        var oldData = this._data;

	        var cartesian = seriesModel.coordinateSystem;
	        var baseAxis = cartesian.getBaseAxis();
	        var isHorizontal = !!baseAxis.isHorizontal();
	        var coordSysRect = cartesian.grid.getRect();

	        var opt = {
	            ecSize: { width: api.getWidth(), height: api.getHeight() },
	            seriesModel: seriesModel,
	            coordSys: cartesian,
	            coordSysExtent: [[coordSysRect.x, coordSysRect.x + coordSysRect.width], [coordSysRect.y, coordSysRect.y + coordSysRect.height]],
	            isHorizontal: isHorizontal,
	            valueDim: LAYOUT_ATTRS[+isHorizontal],
	            categoryDim: LAYOUT_ATTRS[1 - isHorizontal]
	        };

	        data.diff(oldData).add(function (dataIndex) {
	            if (!data.hasValue(dataIndex)) {
	                return;
	            }

	            var itemModel = getItemModel(data, dataIndex);
	            var symbolMeta = getSymbolMeta(data, dataIndex, itemModel, opt);

	            var bar = createBar(data, opt, symbolMeta);

	            data.setItemGraphicEl(dataIndex, bar);
	            group.add(bar);

	            updateCommon(bar, opt, symbolMeta);
	        }).update(function (newIndex, oldIndex) {
	            var bar = oldData.getItemGraphicEl(oldIndex);

	            if (!data.hasValue(newIndex)) {
	                group.remove(bar);
	                return;
	            }

	            var itemModel = getItemModel(data, newIndex);
	            var symbolMeta = getSymbolMeta(data, newIndex, itemModel, opt);

	            var pictorialShapeStr = getShapeStr(data, symbolMeta);
	            if (bar && pictorialShapeStr !== bar.__pictorialShapeStr) {
	                group.remove(bar);
	                data.setItemGraphicEl(newIndex, null);
	                bar = null;
	            }

	            if (bar) {
	                updateBar(bar, opt, symbolMeta);
	            } else {
	                bar = createBar(data, opt, symbolMeta, true);
	            }

	            data.setItemGraphicEl(newIndex, bar);
	            bar.__pictorialSymbolMeta = symbolMeta;
	            // Add back
	            group.add(bar);

	            updateCommon(bar, opt, symbolMeta);
	        }).remove(function (dataIndex) {
	            var bar = oldData.getItemGraphicEl(dataIndex);
	            bar && removeBar(oldData, dataIndex, bar.__pictorialSymbolMeta.animationModel, bar);
	        }).execute();

	        this._data = data;

	        return this.group;
	    },

	    dispose: zrUtil.noop,

	    remove: function remove(ecModel, api) {
	        var group = this.group;
	        var data = this._data;
	        if (ecModel.get('animation')) {
	            if (data) {
	                data.eachItemGraphicEl(function (bar) {
	                    removeBar(data, bar.dataIndex, ecModel, bar);
	                });
	            }
	        } else {
	            group.removeAll();
	        }
	    }
	});

	// Set or calculate default value about symbol, and calculate layout info.
	function getSymbolMeta(data, dataIndex, itemModel, opt) {
	    var layout = data.getItemLayout(dataIndex);
	    var symbolRepeat = itemModel.get('symbolRepeat');
	    var symbolClip = itemModel.get('symbolClip');
	    var symbolPosition = itemModel.get('symbolPosition') || 'start';
	    var symbolRotate = itemModel.get('symbolRotate');
	    var rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
	    var symbolPatternSize = itemModel.get('symbolPatternSize') || 2;
	    var isAnimationEnabled = itemModel.isAnimationEnabled();

	    var symbolMeta = {
	        dataIndex: dataIndex,
	        layout: layout,
	        itemModel: itemModel,
	        symbolType: data.getItemVisual(dataIndex, 'symbol') || 'circle',
	        color: data.getItemVisual(dataIndex, 'color'),
	        symbolClip: symbolClip,
	        symbolRepeat: symbolRepeat,
	        symbolRepeatDirection: itemModel.get('symbolRepeatDirection'),
	        symbolPatternSize: symbolPatternSize,
	        rotation: rotation,
	        animationModel: isAnimationEnabled ? itemModel : null,
	        hoverAnimation: isAnimationEnabled && itemModel.get('hoverAnimation'),
	        z2: itemModel.getShallow('z', true) || 0
	    };

	    prepareBarLength(itemModel, symbolRepeat, layout, opt, symbolMeta);

	    prepareSymbolSize(data, dataIndex, layout, symbolRepeat, symbolClip, symbolMeta.boundingLength, symbolMeta.pxSign, symbolPatternSize, opt, symbolMeta);

	    prepareLineWidth(itemModel, symbolMeta.symbolScale, rotation, opt, symbolMeta);

	    var symbolSize = symbolMeta.symbolSize;
	    var symbolOffset = itemModel.get('symbolOffset');
	    if (zrUtil.isArray(symbolOffset)) {
	        symbolOffset = [parsePercent(symbolOffset[0], symbolSize[0]), parsePercent(symbolOffset[1], symbolSize[1])];
	    }

	    prepareLayoutInfo(itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset, symbolPosition, symbolMeta.valueLineWidth, symbolMeta.boundingLength, symbolMeta.repeatCutLength, opt, symbolMeta);

	    return symbolMeta;
	}

	// bar length can be negative.
	function prepareBarLength(itemModel, symbolRepeat, layout, opt, output) {
	    var valueDim = opt.valueDim;
	    var symbolBoundingData = itemModel.get('symbolBoundingData');
	    var valueAxis = opt.coordSys.getOtherAxis(opt.coordSys.getBaseAxis());
	    var zeroPx = valueAxis.toGlobalCoord(valueAxis.dataToCoord(0));

	    var boundingLength = output.boundingLength = symbolBoundingData != null ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.scale.parse(symbolBoundingData))) - zeroPx : symbolRepeat ? opt.coordSysExtent[valueDim.index][1 - +(layout[valueDim.wh] <= 0)] - zeroPx : layout[valueDim.wh];

	    if (symbolRepeat) {
	        output.repeatCutLength = layout[valueDim.wh];
	    }

	    output.pxSign = boundingLength > 0 ? 1 : boundingLength < 0 ? -1 : 0;
	}

	// Support ['100%', '100%']
	function prepareSymbolSize(data, dataIndex, layout, symbolRepeat, symbolClip, boundingLength, pxSign, symbolPatternSize, opt, output) {
	    var valueDim = opt.valueDim;
	    var categoryDim = opt.categoryDim;
	    var categorySize = Math.abs(layout[categoryDim.wh]);

	    var symbolSize = data.getItemVisual(dataIndex, 'symbolSize');
	    if (zrUtil.isArray(symbolSize)) {
	        symbolSize = symbolSize.slice();
	    } else {
	        if (symbolSize == null) {
	            symbolSize = '100%';
	        }
	        symbolSize = [symbolSize, symbolSize];
	    }

	    // Note: percentage symbolSize (like '100%') do not consider lineWidth, because it is
	    // to complicated to calculate real percent value if considering scaled lineWidth.
	    // So the actual size will bigger than layout size if lineWidth is bigger than zero,
	    // which can be tolerated in pictorial chart.

	    symbolSize[categoryDim.index] = parsePercent(symbolSize[categoryDim.index], categorySize);
	    symbolSize[valueDim.index] = parsePercent(symbolSize[valueDim.index], symbolRepeat ? categorySize : Math.abs(boundingLength));

	    output.symbolSize = symbolSize;

	    // If x or y is less than zero, show reversed shape.
	    var symbolScale = output.symbolScale = [symbolSize[0] / symbolPatternSize, symbolSize[1] / symbolPatternSize];
	    // Follow convention, 'right' and 'top' is the normal scale.
	    symbolScale[valueDim.index] *= (opt.isHorizontal ? -1 : 1) * pxSign;
	}

	function prepareLineWidth(itemModel, symbolScale, rotation, opt, output) {
	    // In symbols are drawn with scale, so do not need to care about the case that width
	    // or height are too small. But symbol use strokeNoScale, where acture lineWidth should
	    // be calculated.
	    var valueLineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;

	    if (valueLineWidth) {
	        pathForLineWidth.attr({
	            scale: symbolScale.slice(),
	            rotation: rotation
	        });
	        pathForLineWidth.updateTransform();
	        valueLineWidth /= pathForLineWidth.getLineScale();
	        valueLineWidth *= symbolScale[opt.valueDim.index];
	    }

	    output.valueLineWidth = valueLineWidth;
	}

	function prepareLayoutInfo(itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset, symbolPosition, valueLineWidth, boundingLength, repeatCutLength, opt, output) {
	    var categoryDim = opt.categoryDim;
	    var valueDim = opt.valueDim;
	    var pxSign = output.pxSign;

	    var unitLength = Math.max(symbolSize[valueDim.index] + valueLineWidth, 0);
	    var pathLen = unitLength;

	    // Note: rotation will not effect the layout of symbols, because user may
	    // want symbols to rotate on its center, which should not be translated
	    // when rotating.

	    if (symbolRepeat) {
	        var absBoundingLength = Math.abs(boundingLength);

	        var symbolMargin = zrUtil.retrieve(itemModel.get('symbolMargin'), '15%') + '';
	        var hasEndGap = false;
	        if (symbolMargin.lastIndexOf('!') === symbolMargin.length - 1) {
	            hasEndGap = true;
	            symbolMargin = symbolMargin.slice(0, symbolMargin.length - 1);
	        }
	        symbolMargin = parsePercent(symbolMargin, symbolSize[valueDim.index]);

	        var uLenWithMargin = Math.max(unitLength + symbolMargin * 2, 0);

	        // When symbol margin is less than 0, margin at both ends will be subtracted
	        // to ensure that all of the symbols will not be overflow the given area.
	        var endFix = hasEndGap ? 0 : symbolMargin * 2;

	        // Both final repeatTimes and final symbolMargin area calculated based on
	        // boundingLength.
	        var repeatSpecified = numberUtil.isNumeric(symbolRepeat);
	        var repeatTimes = repeatSpecified ? symbolRepeat : toIntTimes((absBoundingLength + endFix) / uLenWithMargin);

	        // Adjust calculate margin, to ensure each symbol is displayed
	        // entirely in the given layout area.
	        var mDiff = absBoundingLength - repeatTimes * unitLength;
	        symbolMargin = mDiff / 2 / (hasEndGap ? repeatTimes : repeatTimes - 1);
	        uLenWithMargin = unitLength + symbolMargin * 2;
	        endFix = hasEndGap ? 0 : symbolMargin * 2;

	        // Update repeatTimes when not all symbol will be shown.
	        if (!repeatSpecified && symbolRepeat !== 'fixed') {
	            repeatTimes = repeatCutLength ? toIntTimes((Math.abs(repeatCutLength) + endFix) / uLenWithMargin) : 0;
	        }

	        pathLen = repeatTimes * uLenWithMargin - endFix;
	        output.repeatTimes = repeatTimes;
	        output.symbolMargin = symbolMargin;
	    }

	    var sizeFix = pxSign * (pathLen / 2);
	    var pathPosition = output.pathPosition = [];
	    pathPosition[categoryDim.index] = layout[categoryDim.wh] / 2;
	    pathPosition[valueDim.index] = symbolPosition === 'start' ? sizeFix : symbolPosition === 'end' ? boundingLength - sizeFix : boundingLength / 2; // 'center'
	    if (symbolOffset) {
	        pathPosition[0] += symbolOffset[0];
	        pathPosition[1] += symbolOffset[1];
	    }

	    var bundlePosition = output.bundlePosition = [];
	    bundlePosition[categoryDim.index] = layout[categoryDim.xy];
	    bundlePosition[valueDim.index] = layout[valueDim.xy];

	    var barRectShape = output.barRectShape = zrUtil.extend({}, layout);
	    barRectShape[valueDim.wh] = pxSign * Math.max(Math.abs(layout[valueDim.wh]), Math.abs(pathPosition[valueDim.index] + sizeFix));
	    barRectShape[categoryDim.wh] = layout[categoryDim.wh];

	    var clipShape = output.clipShape = {};
	    // Consider that symbol may be overflow layout rect.
	    clipShape[categoryDim.xy] = -layout[categoryDim.xy];
	    clipShape[categoryDim.wh] = opt.ecSize[categoryDim.wh];
	    clipShape[valueDim.xy] = 0;
	    clipShape[valueDim.wh] = layout[valueDim.wh];
	}

	function createPath(symbolMeta) {
	    var symbolPatternSize = symbolMeta.symbolPatternSize;
	    var path = symbolUtil.createSymbol(
	    // Consider texture img, make a big size.
	    symbolMeta.symbolType, -symbolPatternSize / 2, -symbolPatternSize / 2, symbolPatternSize, symbolPatternSize, symbolMeta.color);
	    path.attr({
	        culling: true
	    });
	    path.type !== 'image' && path.setStyle({
	        strokeNoScale: true
	    });

	    return path;
	}

	function createOrUpdateRepeatSymbols(bar, opt, symbolMeta, isUpdate) {
	    var bundle = bar.__pictorialBundle;
	    var symbolSize = symbolMeta.symbolSize;
	    var valueLineWidth = symbolMeta.valueLineWidth;
	    var pathPosition = symbolMeta.pathPosition;
	    var valueDim = opt.valueDim;
	    var repeatTimes = symbolMeta.repeatTimes || 0;

	    var index = 0;
	    var unit = symbolSize[opt.valueDim.index] + valueLineWidth + symbolMeta.symbolMargin * 2;

	    eachPath(bar, function (path) {
	        path.__pictorialAnimationIndex = index;
	        path.__pictorialRepeatTimes = repeatTimes;
	        if (index < repeatTimes) {
	            updateAttr(path, null, makeTarget(index), symbolMeta, isUpdate);
	        } else {
	            updateAttr(path, null, { scale: [0, 0] }, symbolMeta, isUpdate, function () {
	                bundle.remove(path);
	            });
	        }

	        updateHoverAnimation(path, symbolMeta);

	        index++;
	    });

	    for (; index < repeatTimes; index++) {
	        var path = createPath(symbolMeta);
	        path.__pictorialAnimationIndex = index;
	        path.__pictorialRepeatTimes = repeatTimes;
	        bundle.add(path);

	        var target = makeTarget(index, true);

	        updateAttr(path, {
	            position: target.position,
	            scale: [0, 0]
	        }, {
	            scale: target.scale,
	            rotation: target.rotation
	        }, symbolMeta, isUpdate);

	        // FIXME
	        // If all emphasis/normal through action.
	        path.on('mouseover', onMouseOver).on('mouseout', onMouseOut);

	        updateHoverAnimation(path, symbolMeta);
	    }

	    function makeTarget(index) {
	        var position = pathPosition.slice();
	        // (start && pxSign > 0) || (end && pxSign < 0): i = repeatTimes - index
	        // Otherwise: i = index;
	        var pxSign = symbolMeta.pxSign;
	        var i = index;
	        if (symbolMeta.symbolRepeatDirection === 'start' ? pxSign > 0 : pxSign < 0) {
	            i = repeatTimes - 1 - index;
	        }
	        position[valueDim.index] = unit * (i - repeatTimes / 2 + 0.5) + pathPosition[valueDim.index];

	        return {
	            position: position,
	            scale: symbolMeta.symbolScale.slice(),
	            rotation: symbolMeta.rotation
	        };
	    }

	    function onMouseOver() {
	        eachPath(bar, function (path) {
	            path.trigger('emphasis');
	        });
	    }

	    function onMouseOut() {
	        eachPath(bar, function (path) {
	            path.trigger('normal');
	        });
	    }
	}

	function createOrUpdateSingleSymbol(bar, opt, symbolMeta, isUpdate) {
	    var bundle = bar.__pictorialBundle;
	    var mainPath = bar.__pictorialMainPath;

	    if (!mainPath) {
	        mainPath = bar.__pictorialMainPath = createPath(symbolMeta);
	        bundle.add(mainPath);

	        updateAttr(mainPath, {
	            position: symbolMeta.pathPosition.slice(),
	            scale: [0, 0],
	            rotation: symbolMeta.rotation
	        }, {
	            scale: symbolMeta.symbolScale.slice()
	        }, symbolMeta, isUpdate);

	        mainPath.on('mouseover', onMouseOver).on('mouseout', onMouseOut);
	    } else {
	        updateAttr(mainPath, null, {
	            position: symbolMeta.pathPosition.slice(),
	            scale: symbolMeta.symbolScale.slice(),
	            rotation: symbolMeta.rotation
	        }, symbolMeta, isUpdate);
	    }

	    updateHoverAnimation(mainPath, symbolMeta);

	    function onMouseOver() {
	        this.trigger('emphasis');
	    }

	    function onMouseOut() {
	        this.trigger('normal');
	    }
	}

	// bar rect is used for label.
	function createOrUpdateBarRect(bar, symbolMeta, isUpdate) {
	    var rectShape = zrUtil.extend({}, symbolMeta.barRectShape);

	    var barRect = bar.__pictorialBarRect;
	    if (!barRect) {
	        barRect = bar.__pictorialBarRect = new graphic.Rect({
	            z2: 2,
	            shape: rectShape,
	            silent: true,
	            style: {
	                stroke: 'transparent',
	                fill: 'transparent',
	                lineWidth: 0
	            }
	        });

	        bar.add(barRect);
	    } else {
	        updateAttr(barRect, null, { shape: rectShape }, symbolMeta, isUpdate);
	    }
	}

	function createOrUpdateClip(bar, opt, symbolMeta, isUpdate) {
	    // If not clip, symbol will be remove and rebuilt.
	    if (symbolMeta.symbolClip) {
	        var clipPath = bar.__pictorialClipPath;
	        var clipShape = zrUtil.extend({}, symbolMeta.clipShape);
	        var valueDim = opt.valueDim;
	        var animationModel = symbolMeta.animationModel;
	        var dataIndex = symbolMeta.dataIndex;

	        if (clipPath) {
	            graphic.updateProps(clipPath, { shape: clipShape }, animationModel, dataIndex);
	        } else {
	            clipShape[valueDim.wh] = 0;
	            clipPath = new graphic.Rect({ shape: clipShape });
	            bar.__pictorialBundle.setClipPath(clipPath);
	            bar.__pictorialClipPath = clipPath;

	            var target = {};
	            target[valueDim.wh] = symbolMeta.clipShape[valueDim.wh];

	            graphic[isUpdate ? 'updateProps' : 'initProps'](clipPath, { shape: target }, animationModel, dataIndex);
	        }
	    }
	}

	function getItemModel(data, dataIndex) {
	    var itemModel = data.getItemModel(dataIndex);
	    itemModel.getAnimationDelayParams = getAnimationDelayParams;
	    itemModel.isAnimationEnabled = isAnimationEnabled;
	    return itemModel;
	}

	function getAnimationDelayParams(path) {
	    // The order is the same as the z-order, see `symbolRepeatDiretion`.
	    return {
	        index: path.__pictorialAnimationIndex,
	        count: path.__pictorialRepeatTimes
	    };
	}

	function isAnimationEnabled() {
	    // `animation` prop can be set on itemModel in pictorial bar chart.
	    return this.parentModel.isAnimationEnabled() && !!this.getShallow('animation');
	}

	function updateHoverAnimation(path, symbolMeta) {
	    path.off('emphasis').off('normal');

	    var scale = symbolMeta.symbolScale.slice();

	    symbolMeta.hoverAnimation && path.on('emphasis', function () {
	        this.animateTo({
	            scale: [scale[0] * 1.1, scale[1] * 1.1]
	        }, 400, 'elasticOut');
	    }).on('normal', function () {
	        this.animateTo({
	            scale: scale.slice()
	        }, 400, 'elasticOut');
	    });
	}

	function createBar(data, opt, symbolMeta, isUpdate) {
	    // bar is the main element for each data.
	    var bar = new graphic.Group();
	    // bundle is used for location and clip.
	    var bundle = new graphic.Group();
	    bar.add(bundle);
	    bar.__pictorialBundle = bundle;
	    bundle.attr('position', symbolMeta.bundlePosition.slice());

	    if (symbolMeta.symbolRepeat) {
	        createOrUpdateRepeatSymbols(bar, opt, symbolMeta);
	    } else {
	        createOrUpdateSingleSymbol(bar, opt, symbolMeta);
	    }

	    createOrUpdateBarRect(bar, symbolMeta, isUpdate);

	    createOrUpdateClip(bar, opt, symbolMeta, isUpdate);

	    bar.__pictorialShapeStr = getShapeStr(data, symbolMeta);
	    bar.__pictorialSymbolMeta = symbolMeta;

	    return bar;
	}

	function updateBar(bar, opt, symbolMeta) {
	    var animationModel = symbolMeta.animationModel;
	    var dataIndex = symbolMeta.dataIndex;
	    var bundle = bar.__pictorialBundle;

	    graphic.updateProps(bundle, { position: symbolMeta.bundlePosition.slice() }, animationModel, dataIndex);

	    if (symbolMeta.symbolRepeat) {
	        createOrUpdateRepeatSymbols(bar, opt, symbolMeta, true);
	    } else {
	        createOrUpdateSingleSymbol(bar, opt, symbolMeta, true);
	    }

	    createOrUpdateBarRect(bar, symbolMeta, true);

	    createOrUpdateClip(bar, opt, symbolMeta, true);
	}

	function removeBar(data, dataIndex, animationModel, bar) {
	    // Not show text when animating
	    var labelRect = bar.__pictorialBarRect;
	    labelRect && (labelRect.style.text = '');

	    var pathes = [];
	    eachPath(bar, function (path) {
	        pathes.push(path);
	    });
	    bar.__pictorialMainPath && pathes.push(bar.__pictorialMainPath);

	    // I do not find proper remove animation for clip yet.
	    bar.__pictorialClipPath && (animationModel = null);

	    zrUtil.each(pathes, function (path) {
	        graphic.updateProps(path, { scale: [0, 0] }, animationModel, dataIndex, function () {
	            bar.parent && bar.parent.remove(bar);
	        });
	    });

	    data.setItemGraphicEl(dataIndex, null);
	}

	function getShapeStr(data, symbolMeta) {
	    return [data.getItemVisual(symbolMeta.dataIndex, 'symbol') || 'none', !!symbolMeta.symbolRepeat, !!symbolMeta.symbolClip].join(':');
	}

	function eachPath(bar, cb, context) {
	    // Do not use Group#eachChild, because it do not support remove.
	    zrUtil.each(bar.__pictorialBundle.children(), function (el) {
	        el !== bar.__pictorialBarRect && cb.call(context, el);
	    });
	}

	function updateAttr(el, immediateAttrs, animationAttrs, symbolMeta, isUpdate, cb) {
	    immediateAttrs && el.attr(immediateAttrs);
	    // when symbolCip used, only clip path has init animation, otherwise it would be weird effect.
	    if (symbolMeta.symbolClip && !isUpdate) {
	        animationAttrs && el.attr(animationAttrs);
	    } else {
	        animationAttrs && graphic[isUpdate ? 'updateProps' : 'initProps'](el, animationAttrs, symbolMeta.animationModel, symbolMeta.dataIndex, cb);
	    }
	}

	function updateCommon(bar, opt, symbolMeta) {
	    var color = symbolMeta.color;
	    var dataIndex = symbolMeta.dataIndex;
	    var itemModel = symbolMeta.itemModel;
	    // Color must be excluded.
	    // Because symbol provide setColor individually to set fill and stroke
	    var normalStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	    var hoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();

	    eachPath(bar, function (path) {
	        // PENDING setColor should be before setStyle!!!
	        path.setColor(color);
	        path.setStyle(zrUtil.defaults({
	            fill: color,
	            opacity: symbolMeta.opacity
	        }, normalStyle));
	        graphic.setHoverStyle(path, hoverStyle);

	        path.z2 = symbolMeta.z2;
	    });

	    var barRectHoverStyle = {};
	    var barPositionOutside = opt.valueDim.posDesc[+(symbolMeta.boundingLength > 0)];
	    var barRect = bar.__pictorialBarRect;

	    helper.setLabel(barRect.style, barRectHoverStyle, itemModel, color, opt.seriesModel, dataIndex, barPositionOutside);

	    graphic.setHoverStyle(barRect, barRectHoverStyle);
	}

	function toIntTimes(times) {
	    var roundedTimes = Math.round(times);
	    // Escapse accurate error
	    return Math.abs(times - roundedTimes) < 1e-4 ? roundedTimes : Math.ceil(times);
	}

	module.exports = BarView;

/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);

	__webpack_require__(781);

	__webpack_require__(787);

	__webpack_require__(788);

	echarts.registerLayout(__webpack_require__(789));

	echarts.registerVisual(__webpack_require__(790));

	echarts.registerProcessor(zrUtil.curry(__webpack_require__(649), 'themeRiver'));

/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(782);
	__webpack_require__(785);
	__webpack_require__(786);

	var echarts = __webpack_require__(501);

	echarts.extendComponentView({
	    type: 'single'
	});

/***/ },
/* 782 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Single coordinate system creator.
	 */

	var Single = __webpack_require__(783);

	/**
	 * Create single coordinate system and inject it into seriesModel.
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 * @return {Array.<module:echarts/coord/single/Single>}
	 */
	function create(ecModel, api) {
	    var singles = [];

	    ecModel.eachComponent('singleAxis', function (axisModel, idx) {

	        var single = new Single(axisModel, ecModel, api);
	        single.name = 'single_' + idx;
	        single.resize(axisModel, api);
	        axisModel.coordinateSystem = single;
	        singles.push(single);
	    });

	    ecModel.eachSeries(function (seriesModel) {
	        if (seriesModel.get('coordinateSystem') === 'singleAxis') {
	            var singleAxisModel = ecModel.queryComponents({
	                mainType: 'singleAxis',
	                index: seriesModel.get('singleAxisIndex'),
	                id: seriesModel.get('singleAxisId')
	            })[0];
	            seriesModel.coordinateSystem = singleAxisModel && singleAxisModel.coordinateSystem;
	        }
	    });

	    return singles;
	}

	__webpack_require__(526).register('single', {
	    create: create,
	    dimensions: Single.prototype.dimensions
	});

/***/ },
/* 783 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Single coordinates system.
	 */

	var SingleAxis = __webpack_require__(784);
	var axisHelper = __webpack_require__(615);
	var layout = __webpack_require__(521);

	/**
	 * Create a single coordinates system.
	 *
	 * @param {module:echarts/coord/single/AxisModel} axisModel
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function Single(axisModel, ecModel, api) {

	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.dimension = 'single';

	    /**
	     * Add it just for draw tooltip.
	     *
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    this.dimensions = ['single'];

	    /**
	     * @private
	     * @type {module:echarts/coord/single/SingleAxis}.
	     */
	    this._axis = null;

	    /**
	     * @private
	     * @type {module:zrender/core/BoundingRect}
	     */
	    this._rect;

	    this._init(axisModel, ecModel, api);

	    /**
	     * @type {module:echarts/coord/single/AxisModel}
	     */
	    this._model = axisModel;
	}

	Single.prototype = {

	    type: 'singleAxis',

	    constructor: Single,

	    /**
	     * Initialize single coordinate system.
	     *
	     * @param  {module:echarts/coord/single/AxisModel} axisModel
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     * @private
	     */
	    _init: function _init(axisModel, ecModel, api) {

	        var dim = this.dimension;

	        var axis = new SingleAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisModel.get('position'));

	        var isCategory = axis.type === 'category';
	        axis.onBand = isCategory && axisModel.get('boundaryGap');
	        axis.inverse = axisModel.get('inverse');
	        axis.orient = axisModel.get('orient');

	        axisModel.axis = axis;
	        axis.model = axisModel;
	        this._axis = axis;
	    },

	    /**
	     * Update axis scale after data processed
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    update: function update(ecModel, api) {
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.coordinateSystem === this) {
	                var data = seriesModel.getData();
	                var dim = this.dimension;
	                this._axis.scale.unionExtentFromData(data, seriesModel.coordDimToDataDim(dim));
	                axisHelper.niceScaleExtent(this._axis, this._axis.model);
	            }
	        }, this);
	    },

	    /**
	     * Resize the single coordinate system.
	     *
	     * @param  {module:echarts/coord/single/AxisModel} axisModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    resize: function resize(axisModel, api) {
	        this._rect = layout.getLayoutRect({
	            left: axisModel.get('left'),
	            top: axisModel.get('top'),
	            right: axisModel.get('right'),
	            bottom: axisModel.get('bottom'),
	            width: axisModel.get('width'),
	            height: axisModel.get('height')
	        }, {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });

	        this._adjustAxis();
	    },

	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getRect: function getRect() {
	        return this._rect;
	    },

	    /**
	     * @private
	     */
	    _adjustAxis: function _adjustAxis() {

	        var rect = this._rect;
	        var axis = this._axis;

	        var isHorizontal = axis.isHorizontal();
	        var extent = isHorizontal ? [0, rect.width] : [0, rect.height];
	        var idx = axis.reverse ? 1 : 0;

	        axis.setExtent(extent[idx], extent[1 - idx]);

	        this._updateAxisTransform(axis, isHorizontal ? rect.x : rect.y);
	    },

	    /**
	     * @param  {module:echarts/coord/single/SingleAxis} axis
	     * @param  {number} coordBase
	     */
	    _updateAxisTransform: function _updateAxisTransform(axis, coordBase) {

	        var axisExtent = axis.getExtent();
	        var extentSum = axisExtent[0] + axisExtent[1];
	        var isHorizontal = axis.isHorizontal();

	        axis.toGlobalCoord = isHorizontal ? function (coord) {
	            return coord + coordBase;
	        } : function (coord) {
	            return extentSum - coord + coordBase;
	        };

	        axis.toLocalCoord = isHorizontal ? function (coord) {
	            return coord - coordBase;
	        } : function (coord) {
	            return extentSum - coord + coordBase;
	        };
	    },

	    /**
	     * Get axis.
	     *
	     * @return {module:echarts/coord/single/SingleAxis}
	     */
	    getAxis: function getAxis() {
	        return this._axis;
	    },

	    /**
	     * Get axis, add it just for draw tooltip.
	     *
	     * @return {[type]} [description]
	     */
	    getBaseAxis: function getBaseAxis() {
	        return this._axis;
	    },

	    /**
	     * If contain point.
	     *
	     * @param  {Array.<number>} point
	     * @return {boolean}
	     */
	    containPoint: function containPoint(point) {
	        var rect = this.getRect();
	        var axis = this.getAxis();
	        var orient = axis.orient;
	        if (orient === 'horizontal') {
	            return axis.contain(axis.toLocalCoord(point[0])) && point[1] >= rect.y && point[1] <= rect.y + rect.height;
	        } else {
	            return axis.contain(axis.toLocalCoord(point[1])) && point[0] >= rect.y && point[0] <= rect.y + rect.height;
	        }
	    },

	    /**
	     * @param {Array.<number>} point
	     * @return {Array.<number>}
	     */
	    pointToData: function pointToData(point) {
	        var axis = this.getAxis();
	        return [axis.coordToData(axis.toLocalCoord(point[axis.orient === 'horizontal' ? 0 : 1]))];
	    },

	    /**
	     * Convert the series data to concrete point.
	     *
	     * @param  {number|Array.<number>} val
	     * @return {Array.<number>}
	     */
	    dataToPoint: function dataToPoint(val) {
	        var axis = this.getAxis();
	        var rect = this.getRect();
	        var pt = [];
	        var idx = axis.orient === 'horizontal' ? 0 : 1;
	        pt[idx] = axis.toGlobalCoord(axis.dataToCoord(+val));
	        pt[1 - idx] = idx === 0 ? rect.y + rect.height / 2 : rect.x + rect.width / 2;
	        return pt;
	    }
	};

	module.exports = Single;

/***/ },
/* 784 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Axis = __webpack_require__(624);
	var axisHelper = __webpack_require__(615);

	/**
	 * @constructor  module:echarts/coord/single/SingleAxis
	 * @extends {module:echarts/coord/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var SingleAxis = function SingleAxis(dim, scale, coordExtent, axisType, position) {

	  Axis.call(this, dim, scale, coordExtent);

	  /**
	   * Axis type
	   * - 'category'
	   * - 'value'
	   * - 'time'
	   * - 'log'
	   * @type {string}
	   */
	  this.type = axisType || 'value';

	  /**
	   * Axis position
	   *  - 'top'
	   *  - 'bottom'
	   *  - 'left'
	   *  - 'right'
	   *  @type {string}
	   */
	  this.position = position || 'bottom';

	  /**
	   * Axis orient
	   *  - 'horizontal'
	   *  - 'vertical'
	   * @type {[type]}
	   */
	  this.orient = null;

	  /**
	   * @type {number}
	   */
	  this._labelInterval = null;
	};

	SingleAxis.prototype = {

	  constructor: SingleAxis,

	  /**
	   * Axis model
	   * @type {module:echarts/coord/single/AxisModel}
	   */
	  model: null,

	  /**
	   * Judge the orient of the axis.
	   * @return {boolean}
	   */
	  isHorizontal: function isHorizontal() {
	    var position = this.position;
	    return position === 'top' || position === 'bottom';
	  },

	  /**
	   * Get interval of the axis label.
	   * @return {number}
	   */
	  getLabelInterval: function getLabelInterval() {
	    var labelInterval = this._labelInterval;
	    if (!labelInterval) {
	      var axisModel = this.model;
	      var labelModel = axisModel.getModel('axisLabel');
	      var interval = labelModel.get('interval');
	      if (!(this.type === 'category' && interval === 'auto')) {

	        labelInterval = this._labelInterval = interval === 'auto' ? 0 : interval;
	        return labelInterval;
	      }
	      labelInterval = this._labelInterval = axisHelper.getAxisLabelInterval(zrUtil.map(this.scale.getTicks(), this.dataToCoord, this), axisModel.getFormattedLabels(), labelModel.getModel('textStyle').getFont(), this.isHorizontal());
	    }
	    return labelInterval;
	  },

	  /**
	   * Convert the local coord(processed by dataToCoord())
	   * to global coord(concrete pixel coord).
	   * designated by module:echarts/coord/single/Single.
	   * @type {Function}
	   */
	  toGlobalCoord: null,

	  /**
	   * Convert the global coord to local coord.
	   * designated by module:echarts/coord/single/Single.
	   * @type {Function}
	   */
	  toLocalCoord: null

	};

	zrUtil.inherits(SingleAxis, Axis);

	module.exports = SingleAxis;

/***/ },
/* 785 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AxisBuilder = __webpack_require__(633);
	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var getInterval = AxisBuilder.getInterval;
	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;

	var axisBuilderAttrs = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];

	var selfBuilderAttr = 'splitLine';

	var AxisView = __webpack_require__(501).extendComponentView({

	    type: 'singleAxis',

	    render: function render(axisModel, ecModel) {

	        var group = this.group;

	        group.removeAll();

	        var layout = axisLayout(axisModel);

	        var axisBuilder = new AxisBuilder(axisModel, layout);

	        zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

	        group.add(axisBuilder.getGroup());

	        if (axisModel.get(selfBuilderAttr + '.show')) {
	            this['_' + selfBuilderAttr](axisModel, layout.labelInterval);
	        }
	    },

	    _splitLine: function _splitLine(axisModel, labelInterval) {
	        var axis = axisModel.axis;

	        if (axis.isBlank()) {
	            return;
	        }

	        var splitLineModel = axisModel.getModel('splitLine');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var lineWidth = lineStyleModel.get('width');
	        var lineColors = lineStyleModel.get('color');
	        var lineInterval = getInterval(splitLineModel, labelInterval);

	        lineColors = lineColors instanceof Array ? lineColors : [lineColors];

	        var gridRect = axisModel.coordinateSystem.getRect();
	        var isHorizontal = axis.isHorizontal();

	        var splitLines = [];
	        var lineCount = 0;

	        var ticksCoords = axis.getTicksCoords();

	        var p1 = [];
	        var p2 = [];

	        for (var i = 0; i < ticksCoords.length; ++i) {
	            if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                continue;
	            }
	            var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	            if (isHorizontal) {
	                p1[0] = tickCoord;
	                p1[1] = gridRect.y;
	                p2[0] = tickCoord;
	                p2[1] = gridRect.y + gridRect.height;
	            } else {
	                p1[0] = gridRect.x;
	                p1[1] = tickCoord;
	                p2[0] = gridRect.x + gridRect.width;
	                p2[1] = tickCoord;
	            }
	            var colorIndex = lineCount++ % lineColors.length;
	            splitLines[colorIndex] = splitLines[colorIndex] || [];
	            splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({
	                shape: {
	                    x1: p1[0],
	                    y1: p1[1],
	                    x2: p2[0],
	                    y2: p2[1]
	                },
	                style: {
	                    lineWidth: lineWidth
	                },
	                silent: true
	            })));
	        }

	        for (var i = 0; i < splitLines.length; ++i) {
	            this.group.add(graphic.mergePath(splitLines[i], {
	                style: {
	                    stroke: lineColors[i % lineColors.length],
	                    lineDash: lineStyleModel.getLineDash(lineWidth),
	                    lineWidth: lineWidth
	                },
	                silent: true
	            }));
	        }
	    }
	});

	function axisLayout(axisModel) {

	    var single = axisModel.coordinateSystem;
	    var axis = axisModel.axis;
	    var layout = {};

	    var axisPosition = axis.position;
	    var orient = axis.orient;

	    var rect = single.getRect();
	    var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];

	    var positionMap = {
	        horizontal: { top: rectBound[2], bottom: rectBound[3] },
	        vertical: { left: rectBound[0], right: rectBound[1] }
	    };

	    layout.position = [orient === 'vertical' ? positionMap.vertical[axisPosition] : rectBound[0], orient === 'horizontal' ? positionMap.horizontal[axisPosition] : rectBound[3]];

	    var r = { horizontal: 0, vertical: 1 };
	    layout.rotation = Math.PI / 2 * r[orient];

	    var directionMap = { top: -1, bottom: 1, right: 1, left: -1 };

	    layout.labelDirection = layout.tickDirection = layout.nameDirection = directionMap[axisPosition];

	    if (axisModel.getModel('axisTick').get('inside')) {
	        layout.tickDirection = -layout.tickDirection;
	    }

	    if (axisModel.getModel('axisLabel').get('inside')) {
	        layout.labelDirection = -layout.labelDirection;
	    }

	    var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	    layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;

	    layout.labelInterval = axis.getLabelInterval();

	    layout.z2 = 1;

	    return layout;
	}

	module.exports = AxisView;

/***/ },
/* 786 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ComponentModel = __webpack_require__(519);
	var axisModelCreator = __webpack_require__(628);
	var zrUtil = __webpack_require__(504);

	var AxisModel = ComponentModel.extend({

	    type: 'singleAxis',

	    layoutMode: 'box',

	    /**
	     * @type {module:echarts/coord/single/SingleAxis}
	     */
	    axis: null,

	    /**
	     * @type {module:echarts/coord/single/Single}
	     */
	    coordinateSystem: null,

	    /**
	     * @override
	     */
	    getCoordSysModel: function getCoordSysModel() {
	        return this;
	    }

	});

	var defaultOption = {

	    left: '5%',
	    top: '5%',
	    right: '5%',
	    bottom: '5%',

	    type: 'value',

	    position: 'bottom',

	    orient: 'horizontal',

	    axisLine: {
	        show: true,
	        lineStyle: {
	            width: 2,
	            type: 'solid'
	        }
	    },

	    axisTick: {
	        show: true,
	        length: 6,
	        lineStyle: {
	            width: 2
	        }
	    },

	    axisLabel: {
	        show: true,
	        interval: 'auto'
	    },

	    splitLine: {
	        show: true,
	        lineStyle: {
	            type: 'dashed',
	            opacity: 0.2
	        }
	    }
	};

	function getAxisType(axisName, option) {
	    return option.type || (option.data ? 'category' : 'value');
	}

	zrUtil.merge(AxisModel.prototype, __webpack_require__(630));

	axisModelCreator('single', AxisModel, getAxisType, defaultOption);

	module.exports = AxisModel;

/***/ },
/* 787 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @file  Define the themeRiver view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */

	var completeDimensions = __webpack_require__(603);
	var SeriesModel = __webpack_require__(528);
	var List = __webpack_require__(598);
	var zrUtil = __webpack_require__(504);
	var formatUtil = __webpack_require__(506);
	var encodeHTML = formatUtil.encodeHTML;
	var nest = __webpack_require__(745);

	var DATA_NAME_INDEX = 2;

	var ThemeRiverSeries = SeriesModel.extend({

	    type: 'series.themeRiver',

	    dependencies: ['singleAxis'],

	    /**
	     * @readOnly
	     * @type {Object}
	     */
	    nameMap: null,

	    /**
	     * @override
	     */
	    init: function init(option) {
	        ThemeRiverSeries.superApply(this, 'init', arguments);

	        // Put this function here is for the sake of consistency of code
	        // Enable legend selection for each data item
	        // Use a function instead of direct access because data reference may changed
	        this.legendDataProvider = function () {
	            return this.getRawData();
	        };
	    },

	    /**
	     * If there is no value of a certain point in the time for some event,set it value to 0.
	     *
	     * @param {Array} data  initial data in the option
	     * @return {Array}
	     */
	    fixData: function fixData(data) {
	        var rawDataLength = data.length;

	        // grouped data by name
	        var dataByName = nest().key(function (dataItem) {
	            return dataItem[2];
	        }).entries(data);

	        // data group in each layer
	        var layData = zrUtil.map(dataByName, function (d) {
	            return {
	                name: d.key,
	                dataList: d.values
	            };
	        });

	        var layerNum = layData.length;
	        var largestLayer = -1;
	        var index = -1;
	        for (var i = 0; i < layerNum; ++i) {
	            var len = layData[i].dataList.length;
	            if (len > largestLayer) {
	                largestLayer = len;
	                index = i;
	            }
	        }

	        for (var k = 0; k < layerNum; ++k) {
	            if (k === index) {
	                continue;
	            }
	            var name = layData[k].name;
	            for (var j = 0; j < largestLayer; ++j) {
	                var timeValue = layData[index].dataList[j][0];
	                var length = layData[k].dataList.length;
	                var keyIndex = -1;
	                for (var l = 0; l < length; ++l) {
	                    var value = layData[k].dataList[l][0];
	                    if (value === timeValue) {
	                        keyIndex = l;
	                        break;
	                    }
	                }
	                if (keyIndex === -1) {
	                    data[rawDataLength] = [];
	                    data[rawDataLength][0] = timeValue;
	                    data[rawDataLength][1] = 0;
	                    data[rawDataLength][2] = name;
	                    rawDataLength++;
	                }
	            }
	        }
	        return data;
	    },

	    /**
	     * @override
	     * @param  {Object} option  the initial option that user gived
	     * @param  {module:echarts/model/Model} ecModel  the model object for themeRiver option
	     * @return {module:echarts/data/List}
	     */
	    getInitialData: function getInitialData(option, ecModel) {

	        var dimensions = [];

	        var singleAxisModel = ecModel.queryComponents({
	            mainType: 'singleAxis',
	            index: this.get('singleAxisIndex'),
	            id: this.get('singleAxisId')
	        })[0];

	        var axisType = singleAxisModel.get('type');

	        dimensions = [{
	            name: 'time',
	            // FIXME common?
	            type: axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float'
	        }, {
	            name: 'value',
	            type: 'float'
	        }, {
	            name: 'name',
	            type: 'ordinal'
	        }];

	        // filter the data item with the value of label is undefined
	        var filterData = zrUtil.filter(option.data, function (dataItem) {
	            return dataItem[2] !== undefined;
	        });

	        var data = this.fixData(filterData || []);
	        var nameList = [];
	        var nameMap = this.nameMap = {};
	        var count = 0;

	        for (var i = 0; i < data.length; ++i) {
	            nameList.push(data[i][DATA_NAME_INDEX]);
	            if (!nameMap[data[i][DATA_NAME_INDEX]]) {
	                nameMap[data[i][DATA_NAME_INDEX]] = count++;
	            }
	        }

	        completeDimensions(dimensions, data);

	        var list = new List(dimensions, this);

	        list.initData(data, nameList);

	        return list;
	    },

	    /**
	     * Used by single coordinate
	     *
	     * @param {string} axisDim  the dimension for single coordinate
	     * @return {Array.<string> } specified dimensions on the axis.
	     */
	    coordDimToDataDim: function coordDimToDataDim(axisDim) {
	        return ['time'];
	    },

	    /**
	     * The raw data is divided into multiple layers and each layer
	     *     has same name.
	     *
	     * @return {Array.<Array.<number>>}
	     */
	    getLayerSeries: function getLayerSeries() {
	        var data = this.getData();
	        var lenCount = data.count();
	        var indexArr = [];

	        for (var i = 0; i < lenCount; ++i) {
	            indexArr[i] = i;
	        }
	        // data group by name
	        var dataByName = nest().key(function (index) {
	            return data.get('name', index);
	        }).entries(indexArr);

	        var layerSeries = zrUtil.map(dataByName, function (d) {
	            return {
	                name: d.key,
	                indices: d.values
	            };
	        });

	        for (var j = 0; j < layerSeries.length; ++j) {
	            layerSeries[j].indices.sort(comparer);
	        }

	        function comparer(index1, index2) {
	            return data.get('time', index1) - data.get('time', index2);
	        }

	        return layerSeries;
	    },

	    /**
	     * Get data indices for show tooltip content
	     *
	     * @param {Array.<string>|string} dim  single coordinate dimension
	     * @param {Array.<number>} value  coordinate value
	     * @param {module:echarts/coord/single/SingleAxis} baseAxis  single Axis used
	     *     the themeRiver.
	     * @return {Array.<number>}
	     */
	    getAxisTooltipDataIndex: function getAxisTooltipDataIndex(dim, value, baseAxis) {
	        if (!zrUtil.isArray(dim)) {
	            dim = dim ? [dim] : [];
	        }

	        var data = this.getData();

	        if (baseAxis.orient === 'horizontal') {
	            value = value[0];
	        } else {
	            value = value[1];
	        }

	        var layerSeries = this.getLayerSeries();
	        var indices = [];
	        var layerNum = layerSeries.length;

	        for (var i = 0; i < layerNum; ++i) {
	            var minDist = Number.MAX_VALUE;
	            var nearestIdx = -1;
	            var pointNum = layerSeries[i].indices.length;
	            for (var j = 0; j < pointNum; ++j) {
	                var dist = Math.abs(data.get(dim[0], layerSeries[i].indices[j]) - value);
	                if (dist <= minDist) {
	                    minDist = dist;
	                    nearestIdx = layerSeries[i].indices[j];
	                }
	            }
	            indices.push(nearestIdx);
	        }
	        return indices;
	    },

	    /**
	     * @override
	     * @param {Array.<number>} dataIndexs  index of data
	     */
	    formatTooltip: function formatTooltip(dataIndexs) {
	        var data = this.getData();
	        var len = dataIndexs.length;
	        var time = data.get('time', dataIndexs[0]);
	        var single = this.coordinateSystem;
	        var axis = single.getAxis();

	        if (axis.scale.type === 'time') {
	            time = formatUtil.formatTime('yyyy-MM-dd', time);
	        }

	        var html = encodeHTML(time) + '<br />';
	        for (var i = 0; i < len; ++i) {
	            var htmlName = data.get('name', dataIndexs[i]);
	            var htmlValue = data.get('value', dataIndexs[i]);
	            if (isNaN(htmlValue) || htmlValue == null) {
	                htmlValue = '-';
	            }
	            html += encodeHTML(htmlName + ' : ' + htmlValue) + '<br />';
	        }
	        return html;
	    },

	    defaultOption: {
	        zlevel: 0,
	        z: 2,

	        coordinateSystem: 'singleAxis',

	        // gap in axis's orthogonal orientation
	        boundaryGap: ['10%', '10%'],

	        // legendHoverLink: true,

	        singleAxisIndex: 0,

	        animationEasing: 'linear',

	        label: {
	            normal: {
	                margin: 4,
	                textAlign: 'right',
	                show: true,
	                position: 'left',
	                textStyle: {
	                    color: '#000',
	                    fontSize: 11
	                }
	            },
	            emphasis: {
	                show: true
	            }
	        }
	    }
	});

	module.exports = ThemeRiverSeries;

/***/ },
/* 788 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * @file  The file used to draw themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */

	var poly = __webpack_require__(609);
	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);
	var DataDiffer = __webpack_require__(599);

	module.exports = __webpack_require__(501).extendChartView({

	    type: 'themeRiver',

	    init: function init() {
	        this._layers = [];
	    },

	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var rawData = seriesModel.getRawData();

	        if (!data.count()) {
	            return;
	        }

	        var group = this.group;

	        var layerSeries = seriesModel.getLayerSeries();

	        var layoutInfo = data.getLayout('layoutInfo');
	        var rect = layoutInfo.rect;
	        var boundaryGap = layoutInfo.boundaryGap;

	        group.attr('position', [0, rect.y + boundaryGap[0]]);

	        function keyGetter(item) {
	            return item.name;
	        }
	        var dataDiffer = new DataDiffer(this._layersSeries || [], layerSeries, keyGetter, keyGetter);

	        var newLayersGroups = {};

	        dataDiffer.add(zrUtil.bind(zrUtil.curry(process, 'add'), this)).update(zrUtil.bind(zrUtil.curry(process, 'update'), this)).remove(zrUtil.bind(zrUtil.curry(process, 'remove'), this)).execute();

	        function process(status, idx, oldIdx) {
	            var oldLayersGroups = this._layers;
	            if (status === 'remove') {
	                group.remove(oldLayersGroups[idx]);
	                return;
	            }
	            var points0 = [];
	            var points1 = [];
	            var color;
	            var indices = layerSeries[idx].indices;
	            for (var j = 0; j < indices.length; j++) {
	                var layout = data.getItemLayout(indices[j]);
	                var x = layout.x;
	                var y0 = layout.y0;
	                var y = layout.y;

	                points0.push([x, y0]);
	                points1.push([x, y0 + y]);

	                color = rawData.getItemVisual(indices[j], 'color');
	            }

	            var polygon;
	            var text;
	            var textLayout = data.getItemLayout(indices[0]);
	            var itemModel = data.getItemModel(indices[j - 1]);
	            var labelModel = itemModel.getModel('label.normal');
	            var margin = labelModel.get('margin');
	            if (status === 'add') {
	                var layerGroup = newLayersGroups[idx] = new graphic.Group();
	                polygon = new poly.Polygon({
	                    shape: {
	                        points: points0,
	                        stackedOnPoints: points1,
	                        smooth: 0.4,
	                        stackedOnSmooth: 0.4,
	                        smoothConstraint: false
	                    },
	                    z2: 0
	                });
	                text = new graphic.Text({
	                    style: {
	                        x: textLayout.x - margin,
	                        y: textLayout.y0 + textLayout.y / 2
	                    }
	                });
	                layerGroup.add(polygon);
	                layerGroup.add(text);
	                group.add(layerGroup);

	                polygon.setClipPath(createGridClipShape(polygon.getBoundingRect(), seriesModel, function () {
	                    polygon.removeClipPath();
	                }));
	            } else {
	                var layerGroup = oldLayersGroups[oldIdx];
	                polygon = layerGroup.childAt(0);
	                text = layerGroup.childAt(1);
	                group.add(layerGroup);

	                newLayersGroups[idx] = layerGroup;

	                graphic.updateProps(polygon, {
	                    shape: {
	                        points: points0,
	                        stackedOnPoints: points1
	                    }
	                }, seriesModel);

	                graphic.updateProps(text, {
	                    style: {
	                        x: textLayout.x - margin,
	                        y: textLayout.y0 + textLayout.y / 2
	                    }
	                }, seriesModel);
	            }

	            var hoverItemStyleModel = itemModel.getModel('itemStyle.emphasis');
	            var itemStyleModel = itemModel.getModel('itemStyle.normal');
	            var textStyleModel = labelModel.getModel('textStyle');

	            text.setStyle({
	                text: labelModel.get('show') ? seriesModel.getFormattedLabel(indices[j - 1], 'normal') || data.getName(indices[j - 1]) : '',
	                textFont: textStyleModel.getFont(),
	                textAlign: labelModel.get('textAlign'),
	                textVerticalAlign: 'middle'
	            });

	            polygon.setStyle(zrUtil.extend({
	                fill: color
	            }, itemStyleModel.getItemStyle(['color'])));

	            graphic.setHoverStyle(polygon, hoverItemStyleModel.getItemStyle());
	        }

	        this._layersSeries = layerSeries;
	        this._layers = newLayersGroups;
	    },

	    dispose: function dispose() {}
	});

	// add animation to the view
	function createGridClipShape(rect, seriesModel, cb) {
	    var rectEl = new graphic.Rect({
	        shape: {
	            x: rect.x - 10,
	            y: rect.y - 10,
	            width: 0,
	            height: rect.height + 20
	        }
	    });
	    graphic.initProps(rectEl, {
	        shape: {
	            width: rect.width + 20,
	            height: rect.height + 20
	        }
	    }, seriesModel, cb);

	    return rectEl;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 789 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file  Using layout algorithm transform the raw data to layout information.
	 * @author Deqing Li(annong035@gmail.com)
	 */

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);

	module.exports = function (ecModel, api) {

	    ecModel.eachSeriesByType('themeRiver', function (seriesModel) {

	        var data = seriesModel.getData();

	        var single = seriesModel.coordinateSystem;

	        var layoutInfo = {};

	        // use the axis boundingRect for view
	        var rect = single.getRect();

	        layoutInfo.rect = rect;

	        var boundaryGap = seriesModel.get('boundaryGap');

	        var axis = single.getAxis();

	        layoutInfo.boundaryGap = boundaryGap;

	        if (axis.orient === 'horizontal') {
	            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.height);
	            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.height);
	            var height = rect.height - boundaryGap[0] - boundaryGap[1];
	            themeRiverLayout(data, seriesModel, height);
	        } else {
	            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.width);
	            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.width);
	            var width = rect.width - boundaryGap[0] - boundaryGap[1];
	            themeRiverLayout(data, seriesModel, width);
	        }

	        data.setLayout('layoutInfo', layoutInfo);
	    });
	};

	/**
	 * The layout information about themeriver
	 *
	 * @param {module:echarts/data/List} data  data in the series
	 * @param {module:echarts/model/Series} seriesModel  the model object of themeRiver series
	 * @param {number} height  value used to compute every series height
	 */
	function themeRiverLayout(data, seriesModel, height) {
	    if (!data.count()) {
	        return;
	    }
	    var coordSys = seriesModel.coordinateSystem;
	    // the data in each layer are organized into a series.
	    var layerSeries = seriesModel.getLayerSeries();

	    // the points in each layer.
	    var layerPoints = zrUtil.map(layerSeries, function (singleLayer) {
	        return zrUtil.map(singleLayer.indices, function (idx) {
	            var pt = coordSys.dataToPoint(data.get('time', idx));
	            pt[1] = data.get('value', idx);
	            return pt;
	        });
	    });

	    var base = computeBaseline(layerPoints);
	    var baseLine = base.y0;
	    var ky = height / base.max;

	    // set layout information for each item.
	    var n = layerSeries.length;
	    var m = layerSeries[0].indices.length;
	    var baseY0;
	    for (var j = 0; j < m; ++j) {
	        baseY0 = baseLine[j] * ky;
	        data.setItemLayout(layerSeries[0].indices[j], {
	            layerIndex: 0,
	            x: layerPoints[0][j][0],
	            y0: baseY0,
	            y: layerPoints[0][j][1] * ky
	        });
	        for (var i = 1; i < n; ++i) {
	            baseY0 += layerPoints[i - 1][j][1] * ky;
	            data.setItemLayout(layerSeries[i].indices[j], {
	                layerIndex: i,
	                x: layerPoints[i][j][0],
	                y0: baseY0,
	                y: layerPoints[i][j][1] * ky
	            });
	        }
	    }
	}

	/**
	 * Compute the baseLine of the rawdata
	 * Inspired by Lee Byron's paper Stacked Graphs - Geometry & Aesthetics
	 *
	 * @param  {Array.<Array>} data  the points in each layer
	 * @return {Array}
	 */
	function computeBaseline(data) {
	    var layerNum = data.length;
	    var pointNum = data[0].length;
	    var sums = [];
	    var y0 = [];
	    var max = 0;
	    var temp;
	    var base = {};

	    for (var i = 0; i < pointNum; ++i) {
	        for (var j = 0, temp = 0; j < layerNum; ++j) {
	            temp += data[j][i][1];
	        }
	        if (temp > max) {
	            max = temp;
	        }
	        sums.push(temp);
	    }

	    for (var k = 0; k < pointNum; ++k) {
	        y0[k] = (max - sums[k]) / 2;
	    }
	    max = 0;

	    for (var l = 0; l < pointNum; ++l) {
	        var sum = sums[l] + y0[l];
	        if (sum > max) {
	            max = sum;
	        }
	    }
	    base.y0 = y0;
	    base.max = max;

	    return base;
	}

/***/ },
/* 790 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * @file Visual encoding for themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */

	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('themeRiver', function (seriesModel) {
	        var data = seriesModel.getData();
	        var rawData = seriesModel.getRawData();
	        var colorList = seriesModel.get('color');

	        data.each(function (index) {
	            var name = data.getName(index);
	            var color = colorList[(seriesModel.nameMap[name] - 1) % colorList.length];
	            rawData.setItemVisual(index, 'color', color);
	        });
	    });
	};

/***/ },
/* 791 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);
	var graphicUtil = __webpack_require__(543);
	var layoutUtil = __webpack_require__(521);

	// -------------
	// Preprocessor
	// -------------

	echarts.registerPreprocessor(function (option) {
	    var graphicOption = option && option.graphic;

	    // Convert
	    // {graphic: [{left: 10, type: 'circle'}, ...]}
	    // or
	    // {graphic: {left: 10, type: 'circle'}}
	    // to
	    // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}
	    if (zrUtil.isArray(graphicOption)) {
	        if (!graphicOption[0] || !graphicOption[0].elements) {
	            option.graphic = [{ elements: graphicOption }];
	        } else {
	            // Only one graphic instance can be instantiated. (We dont
	            // want that too many views are created in echarts._viewMap)
	            option.graphic = [option.graphic[0]];
	        }
	    } else if (graphicOption && !graphicOption.elements) {
	        option.graphic = [{ elements: [graphicOption] }];
	    }
	});

	// ------
	// Model
	// ------

	var GraphicModel = echarts.extendComponentModel({

	    type: 'graphic',

	    defaultOption: {

	        // Extra properties for each elements:
	        //
	        // left/right/top/bottom: (like 12, '22%', 'center', default undefined)
	        //      If left/rigth is set, shape.x/shape.cx/position will not be used.
	        //      If top/bottom is set, shape.y/shape.cy/position will not be used.
	        //      This mechanism is useful when you want to position a group/element
	        //      against the right side or the center of this container.
	        //
	        // width/height: (can only be pixel value, default 0)
	        //      Only be used to specify contianer(group) size, if needed. And
	        //      can not be percentage value (like '33%'). See the reason in the
	        //      layout algorithm below.
	        //
	        // bounding: (enum: 'all' (default) | 'raw')
	        //      Specify how to calculate boundingRect when locating.
	        //      'all': Get uioned and transformed boundingRect
	        //          from both itself and its descendants.
	        //          This mode simplies confining a group of elements in the bounding
	        //          of their ancester container (e.g., using 'right: 0').
	        //      'raw': Only use the boundingRect of itself and before transformed.
	        //          This mode is similar to css behavior, which is useful when you
	        //          want an element to be able to overflow its container. (Consider
	        //          a rotated circle needs to be located in a corner.)

	        // Note: elements is always behind its ancestors in this elements array.
	        elements: [],
	        parentId: null
	    },

	    /**
	     * Save el options for the sake of the performance (only update modified graphics).
	     * The order is the same as those in option. (ancesters -> descendants)
	     *
	     * @private
	     * @type {Array.<Object>}
	     */
	    _elOptionsToUpdate: null,

	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(option) {
	        // Prevent default merge to elements
	        var elements = this.option.elements;
	        this.option.elements = null;

	        GraphicModel.superApply(this, 'mergeOption', arguments);

	        this.option.elements = elements;
	    },

	    /**
	     * @override
	     */
	    optionUpdated: function optionUpdated(newOption, isInit) {
	        var thisOption = this.option;
	        var newList = (isInit ? thisOption : newOption).elements;
	        var existList = thisOption.elements = isInit ? [] : thisOption.elements;

	        var flattenedList = [];
	        this._flatten(newList, flattenedList);

	        var mappingResult = modelUtil.mappingToExists(existList, flattenedList);
	        modelUtil.makeIdAndName(mappingResult);

	        // Clear elOptionsToUpdate
	        var elOptionsToUpdate = this._elOptionsToUpdate = [];

	        zrUtil.each(mappingResult, function (resultItem, index) {
	            var existElOption = resultItem.exist;
	            var newElOption = resultItem.option;

	            if (__DEV__) {
	                zrUtil.assert(zrUtil.isObject(newElOption) || existElOption, 'Empty graphic option definition');
	            }

	            if (!newElOption) {
	                return;
	            }

	            // Set id and parent id after id assigned.
	            newElOption.id = resultItem.keyInfo.id;
	            var newElParentId = newElOption.parentId;
	            var newElParentOption = newElOption.parentOption;
	            var existElParentId = existElOption && existElOption.parentId;
	            !newElOption.type && existElOption && (newElOption.type = existElOption.type);
	            newElOption.parentId = newElParentId // parent id specified
	            ? newElParentId : newElParentOption ? newElParentOption.id : existElParentId // parent not specified
	            ? existElParentId : null;
	            newElOption.parentOption = null; // Clear
	            elOptionsToUpdate.push(newElOption);

	            // Update existing options, for `getOption` feature.
	            var newElOptCopy = zrUtil.extend({}, newElOption);
	            var $action = newElOption.$action;
	            if (!$action || $action === 'merge') {
	                if (existElOption) {

	                    if (__DEV__) {
	                        var newType = newElOption.type;
	                        zrUtil.assert(!newType || existElOption.type === newType, 'Please set $action: "replace" to change `type`');
	                    }

	                    // We can ensure that newElOptCopy and existElOption are not
	                    // the same object, so `merge` will not change newElOptCopy.
	                    zrUtil.merge(existElOption, newElOptCopy, true);
	                    // Rigid body, use ignoreSize.
	                    layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, { ignoreSize: true });
	                    // Will be used in render.
	                    layoutUtil.copyLayoutParams(newElOption, existElOption);
	                } else {
	                    existList[index] = newElOptCopy;
	                }
	            } else if ($action === 'replace') {
	                existList[index] = newElOptCopy;
	            } else if ($action === 'remove') {
	                // null will be cleaned later.
	                existElOption && (existList[index] = null);
	            }

	            if (existList[index]) {
	                existList[index].hv = newElOption.hv = [
	                // Rigid body, dont care `width`.
	                isSetLoc(newElOption, ['left', 'right']),
	                // Rigid body, dont care `height`.
	                isSetLoc(newElOption, ['top', 'bottom'])];
	                // Give default group size. Otherwise layout error may occur.
	                if (existList[index].type === 'group') {
	                    existList[index].width == null && (existList[index].width = newElOption.width = 0);
	                    existList[index].height == null && (existList[index].height = newElOption.height = 0);
	                }
	            }
	        }, this);

	        // Clean
	        for (var i = existList.length - 1; i >= 0; i--) {
	            if (existList[i] == null) {
	                existList.splice(i, 1);
	            } else {
	                // $action should be volatile, otherwise option gotten from
	                // `getOption` will contain unexpected $action.
	                delete existList[i].$action;
	            }
	        }
	    },

	    /**
	     * Convert
	     * [{
	     *  type: 'group',
	     *  id: 'xx',
	     *  children: [{type: 'circle'}, {type: 'polygon'}]
	     * }]
	     * to
	     * [
	     *  {type: 'group', id: 'xx'},
	     *  {type: 'circle', parentId: 'xx'},
	     *  {type: 'polygon', parentId: 'xx'}
	     * ]
	     *
	     * @private
	     * @param {Array.<Object>} optionList option list
	     * @param {Array.<Object>} result result of flatten
	     * @param {Object} parentOption parent option
	     */
	    _flatten: function _flatten(optionList, result, parentOption) {
	        zrUtil.each(optionList, function (option) {
	            if (option) {
	                if (parentOption) {
	                    option.parentOption = parentOption;
	                }

	                result.push(option);

	                var children = option.children;
	                if (option.type === 'group' && children) {
	                    this._flatten(children, result, option);
	                }
	                // Deleting for JSON output, and for not affecting group creation.
	                delete option.children;
	            }
	        }, this);
	    },

	    // FIXME
	    // Pass to view using payload? setOption has a payload?
	    useElOptionsToUpdate: function useElOptionsToUpdate() {
	        var els = this._elOptionsToUpdate;
	        // Clear to avoid render duplicately when zooming.
	        this._elOptionsToUpdate = null;
	        return els;
	    }
	});

	// -----
	// View
	// -----

	echarts.extendComponentView({

	    type: 'graphic',

	    /**
	     * @override
	     */
	    init: function init(ecModel, api) {

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._elMap = {};

	        /**
	         * @private
	         * @type {module:echarts/graphic/GraphicModel}
	         */
	        this._lastGraphicModel;
	    },

	    /**
	     * @override
	     */
	    render: function render(graphicModel, ecModel, api) {

	        // Having leveraged between use cases and algorithm complexity, a very
	        // simple layout mechanism is used:
	        // The size(width/height) can be determined by itself or its parent (not
	        // implemented yet), but can not by its children. (Top-down travel)
	        // The location(x/y) can be determined by the bounding rect of itself
	        // (can including its descendants or not) and the size of its parent.
	        // (Bottom-up travel)

	        // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,
	        // view will be reused.
	        if (graphicModel !== this._lastGraphicModel) {
	            this._clear();
	        }
	        this._lastGraphicModel = graphicModel;

	        this._updateElements(graphicModel, api);
	        this._relocate(graphicModel, api);
	    },

	    /**
	     * Update graphic elements.
	     *
	     * @private
	     * @param {Object} graphicModel graphic model
	     * @param {module:echarts/ExtensionAPI} api extension API
	     */
	    _updateElements: function _updateElements(graphicModel, api) {
	        var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();

	        if (!elOptionsToUpdate) {
	            return;
	        }

	        var elMap = this._elMap;
	        var rootGroup = this.group;

	        // Top-down tranverse to assign graphic settings to each elements.
	        zrUtil.each(elOptionsToUpdate, function (elOption) {
	            var $action = elOption.$action;
	            var id = elOption.id;
	            var existEl = elMap[id];
	            var parentId = elOption.parentId;
	            var targetElParent = parentId != null ? elMap[parentId] : rootGroup;

	            // In top/bottom mode, textVertical should not be used. And textBaseline
	            // should not be 'alphabetic', which cause inaccurately locating.
	            if (elOption.hv && elOption.hv[1] && elOption.type === 'text') {
	                elOption.style = zrUtil.defaults({ textBaseline: 'middle' }, elOption.style);
	                elOption.style.textVerticalAlign = null;
	            }

	            // Remove unnecessary props to avoid potential problems.
	            var elOptionCleaned = getCleanedElOption(elOption);

	            // For simple, do not support parent change, otherwise reorder is needed.
	            if (__DEV__) {
	                existEl && zrUtil.assert(targetElParent === existEl.parent, 'Changing parent is not supported.');
	            }

	            if (!$action || $action === 'merge') {
	                existEl ? existEl.attr(elOptionCleaned) : createEl(id, targetElParent, elOptionCleaned, elMap);
	            } else if ($action === 'replace') {
	                removeEl(existEl, elMap);
	                createEl(id, targetElParent, elOptionCleaned, elMap);
	            } else if ($action === 'remove') {
	                removeEl(existEl, elMap);
	            }

	            if (elMap[id]) {
	                elMap[id].__ecGraphicWidth = elOption.width;
	                elMap[id].__ecGraphicHeight = elOption.height;
	            }
	        });
	    },

	    /**
	     * Locate graphic elements.
	     *
	     * @private
	     * @param {Object} graphicModel graphic model
	     * @param {module:echarts/ExtensionAPI} api extension API
	     */
	    _relocate: function _relocate(graphicModel, api) {
	        var elOptions = graphicModel.option.elements;
	        var rootGroup = this.group;
	        var elMap = this._elMap;

	        // Bottom-up tranvese all elements (consider ec resize) to locate elements.
	        for (var i = elOptions.length - 1; i >= 0; i--) {
	            var elOption = elOptions[i];
	            var el = elMap[elOption.id];

	            if (!el) {
	                continue;
	            }

	            var parentEl = el.parent;
	            var containerInfo = parentEl === rootGroup ? {
	                width: api.getWidth(),
	                height: api.getHeight()
	            } : { // Like 'position:absolut' in css, default 0.
	                width: parentEl.__ecGraphicWidth || 0,
	                height: parentEl.__ecGraphicHeight || 0
	            };

	            layoutUtil.positionElement(el, elOption, containerInfo, null, { hv: elOption.hv, boundingMode: elOption.bounding });
	        }
	    },

	    /**
	     * Clear all elements.
	     *
	     * @private
	     */
	    _clear: function _clear() {
	        var elMap = this._elMap;
	        zrUtil.each(elMap, function (el) {
	            removeEl(el, elMap);
	        });
	        this._elMap = {};
	    },

	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        this._clear();
	    }
	});

	function createEl(id, targetElParent, elOption, elMap) {
	    var graphicType = elOption.type;

	    if (__DEV__) {
	        zrUtil.assert(graphicType, 'graphic type MUST be set');
	    }

	    var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];

	    if (__DEV__) {
	        zrUtil.assert(Clz, 'graphic type can not be found');
	    }

	    var el = new Clz(elOption);
	    targetElParent.add(el);
	    elMap[id] = el;
	    el.__ecGraphicId = id;
	}

	function removeEl(existEl, elMap) {
	    var existElParent = existEl && existEl.parent;
	    if (existElParent) {
	        existEl.type === 'group' && existEl.traverse(function (el) {
	            removeEl(el, elMap);
	        });
	        delete elMap[existEl.__ecGraphicId];
	        existElParent.remove(existEl);
	    }
	}

	// Remove unnecessary props to avoid potential problems.
	function getCleanedElOption(elOption) {
	    elOption = zrUtil.extend({}, elOption);
	    zrUtil.each(['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS), function (name) {
	        delete elOption[name];
	    });
	    return elOption;
	}

	function isSetLoc(obj, props) {
	    var isSet;
	    zrUtil.each(props, function (prop) {
	        obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);
	    });
	    return isSet;
	}

/***/ },
/* 792 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Legend component entry file8
	 */

	__webpack_require__(793);
	__webpack_require__(794);
	__webpack_require__(795);

	var echarts = __webpack_require__(501);
	// Series Filter
	echarts.registerProcessor(__webpack_require__(797));

/***/ },
/* 793 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Model = __webpack_require__(512);

	var LegendModel = __webpack_require__(501).extendComponentModel({

	    type: 'legend',

	    dependencies: ['series'],

	    layoutMode: {
	        type: 'box',
	        ignoreSize: true
	    },

	    init: function init(option, parentModel, ecModel) {
	        this.mergeDefaultAndTheme(option, ecModel);

	        option.selected = option.selected || {};
	    },

	    mergeOption: function mergeOption(option) {
	        LegendModel.superCall(this, 'mergeOption', option);
	    },

	    optionUpdated: function optionUpdated() {
	        this._updateData(this.ecModel);

	        var legendData = this._data;

	        // If selectedMode is single, try to select one
	        if (legendData[0] && this.get('selectedMode') === 'single') {
	            var hasSelected = false;
	            // If has any selected in option.selected
	            for (var i = 0; i < legendData.length; i++) {
	                var name = legendData[i].get('name');
	                if (this.isSelected(name)) {
	                    // Force to unselect others
	                    this.select(name);
	                    hasSelected = true;
	                    break;
	                }
	            }
	            // Try select the first if selectedMode is single
	            !hasSelected && this.select(legendData[0].get('name'));
	        }
	    },

	    _updateData: function _updateData(ecModel) {
	        var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
	            // Can be string or number
	            if (typeof dataItem === 'string' || typeof dataItem === 'number') {
	                dataItem = {
	                    name: dataItem
	                };
	            }
	            return new Model(dataItem, this, this.ecModel);
	        }, this);
	        this._data = legendData;

	        var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
	            return series.name;
	        });
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.legendDataProvider) {
	                var data = seriesModel.legendDataProvider();
	                availableNames = availableNames.concat(data.mapArray(data.getName));
	            }
	        });
	        /**
	         * @type {Array.<string>}
	         * @private
	         */
	        this._availableNames = availableNames;
	    },

	    /**
	     * @return {Array.<module:echarts/model/Model>}
	     */
	    getData: function getData() {
	        return this._data;
	    },

	    /**
	     * @param {string} name
	     */
	    select: function select(name) {
	        var selected = this.option.selected;
	        var selectedMode = this.get('selectedMode');
	        if (selectedMode === 'single') {
	            var data = this._data;
	            zrUtil.each(data, function (dataItem) {
	                selected[dataItem.get('name')] = false;
	            });
	        }
	        selected[name] = true;
	    },

	    /**
	     * @param {string} name
	     */
	    unSelect: function unSelect(name) {
	        if (this.get('selectedMode') !== 'single') {
	            this.option.selected[name] = false;
	        }
	    },

	    /**
	     * @param {string} name
	     */
	    toggleSelected: function toggleSelected(name) {
	        var selected = this.option.selected;
	        // Default is true
	        if (!selected.hasOwnProperty(name)) {
	            selected[name] = true;
	        }
	        this[selected[name] ? 'unSelect' : 'select'](name);
	    },

	    /**
	     * @param {string} name
	     */
	    isSelected: function isSelected(name) {
	        var selected = this.option.selected;
	        return !(selected.hasOwnProperty(name) && !selected[name]) && zrUtil.indexOf(this._availableNames, name) >= 0;
	    },

	    defaultOption: {
	        // 一级层叠
	        zlevel: 0,
	        // 二级层叠
	        z: 4,
	        show: true,

	        // 布局方式，默认为水平布局，可选为：
	        // 'horizontal' | 'vertical'
	        orient: 'horizontal',

	        left: 'center',
	        // right: 'center',

	        top: 'top',
	        // bottom: 'top',

	        // 水平对齐
	        // 'auto' | 'left' | 'right'
	        // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	        align: 'auto',

	        backgroundColor: 'rgba(0,0,0,0)',
	        // 图例边框颜色
	        borderColor: '#ccc',
	        // 图例边框线宽，单位px，默认为0（无边框）
	        borderWidth: 0,
	        // 图例内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        padding: 5,
	        // 各个item之间的间隔，单位px，默认为10，
	        // 横向布局时为水平间隔，纵向布局时为纵向间隔
	        itemGap: 10,
	        // 图例图形宽度
	        itemWidth: 25,
	        // 图例图形高度
	        itemHeight: 14,

	        // 图例关闭时候的颜色
	        inactiveColor: '#ccc',

	        textStyle: {
	            // 图例文字颜色
	            color: '#333'
	        },
	        // formatter: '',
	        // 选择模式，默认开启图例开关
	        selectedMode: true,
	        // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	        // selected: null,
	        // 图例内容（详见legend.data，数组中每一项代表一个item
	        // data: [],

	        // Tooltip 相关配置
	        tooltip: {
	            show: false
	        }
	    }
	});

	module.exports = LegendModel;

/***/ },
/* 794 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Legend action
	 */

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);

	function legendSelectActionHandler(methodName, payload, ecModel) {
	    var selectedMap = {};
	    var isToggleSelect = methodName === 'toggleSelected';
	    var isSelected;
	    // Update all legend components
	    ecModel.eachComponent('legend', function (legendModel) {
	        if (isToggleSelect && isSelected != null) {
	            // Force other legend has same selected status
	            // Or the first is toggled to true and other are toggled to false
	            // In the case one legend has some item unSelected in option. And if other legend
	            // doesn't has the item, they will assume it is selected.
	            legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	        } else {
	            legendModel[methodName](payload.name);
	            isSelected = legendModel.isSelected(payload.name);
	        }
	        var legendData = legendModel.getData();
	        zrUtil.each(legendData, function (model) {
	            var name = model.get('name');
	            // Wrap element
	            if (name === '\n' || name === '') {
	                return;
	            }
	            var isItemSelected = legendModel.isSelected(name);
	            if (name in selectedMap) {
	                // Unselected if any legend is unselected
	                selectedMap[name] = selectedMap[name] && isItemSelected;
	            } else {
	                selectedMap[name] = isItemSelected;
	            }
	        });
	    });
	    // Return the event explicitly
	    return {
	        name: payload.name,
	        selected: selectedMap
	    };
	}
	/**
	 * @event legendToggleSelect
	 * @type {Object}
	 * @property {string} type 'legendToggleSelect'
	 * @property {string} [from]
	 * @property {string} name Series name or data item name
	 */
	echarts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));

	/**
	 * @event legendSelect
	 * @type {Object}
	 * @property {string} type 'legendSelect'
	 * @property {string} name Series name or data item name
	 */
	echarts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));

	/**
	 * @event legendUnSelect
	 * @type {Object}
	 * @property {string} type 'legendUnSelect'
	 * @property {string} name Series name or data item name
	 */
	echarts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));

/***/ },
/* 795 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var symbolCreator = __webpack_require__(607);
	var graphic = __webpack_require__(543);
	var listComponentHelper = __webpack_require__(796);

	var curry = zrUtil.curry;

	function dispatchSelectAction(name, api) {
	    api.dispatchAction({
	        type: 'legendToggleSelect',
	        name: name
	    });
	}

	function dispatchHighlightAction(seriesModel, dataName, api) {
	    // If element hover will move to a hoverLayer.
	    var el = api.getZr().storage.getDisplayList()[0];
	    if (!(el && el.useHoverLayer)) {
	        seriesModel.get('legendHoverLink') && api.dispatchAction({
	            type: 'highlight',
	            seriesName: seriesModel.name,
	            name: dataName
	        });
	    }
	}

	function dispatchDownplayAction(seriesModel, dataName, api) {
	    // If element hover will move to a hoverLayer.
	    var el = api.getZr().storage.getDisplayList()[0];
	    if (!(el && el.useHoverLayer)) {
	        seriesModel.get('legendHoverLink') && api.dispatchAction({
	            type: 'downplay',
	            seriesName: seriesModel.name,
	            name: dataName
	        });
	    }
	}

	module.exports = __webpack_require__(501).extendComponentView({

	    type: 'legend',

	    init: function init() {
	        this._symbolTypeStore = {};
	    },

	    render: function render(legendModel, ecModel, api) {
	        var group = this.group;
	        group.removeAll();

	        if (!legendModel.get('show')) {
	            return;
	        }

	        var selectMode = legendModel.get('selectedMode');
	        var itemAlign = legendModel.get('align');

	        if (itemAlign === 'auto') {
	            itemAlign = legendModel.get('left') === 'right' && legendModel.get('orient') === 'vertical' ? 'right' : 'left';
	        }

	        var legendDrawedMap = {};

	        zrUtil.each(legendModel.getData(), function (itemModel) {
	            var name = itemModel.get('name');

	            // Use empty string or \n as a newline string
	            if (name === '' || name === '\n') {
	                group.add(new graphic.Group({
	                    newline: true
	                }));
	                return;
	            }

	            var seriesModel = ecModel.getSeriesByName(name)[0];

	            if (legendDrawedMap[name]) {
	                // Have been drawed
	                return;
	            }

	            // Series legend
	            if (seriesModel) {
	                var data = seriesModel.getData();
	                var color = data.getVisual('color');

	                // If color is a callback function
	                if (typeof color === 'function') {
	                    // Use the first data
	                    color = color(seriesModel.getDataParams(0));
	                }

	                // Using rect symbol defaultly
	                var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	                var symbolType = data.getVisual('symbol');

	                var itemGroup = this._createItem(name, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode);

	                itemGroup.on('click', curry(dispatchSelectAction, name, api)).on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));

	                legendDrawedMap[name] = true;
	            } else {
	                // Data legend of pie, funnel
	                ecModel.eachRawSeries(function (seriesModel) {
	                    // In case multiple series has same data name
	                    if (legendDrawedMap[name]) {
	                        return;
	                    }
	                    if (seriesModel.legendDataProvider) {
	                        var data = seriesModel.legendDataProvider();
	                        var idx = data.indexOfName(name);
	                        if (idx < 0) {
	                            return;
	                        }

	                        var color = data.getItemVisual(idx, 'color');

	                        var legendSymbolType = 'roundRect';

	                        var itemGroup = this._createItem(name, itemModel, legendModel, legendSymbolType, null, itemAlign, color, selectMode);

	                        itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                        // FIXME Should not specify the series name
	                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));

	                        legendDrawedMap[name] = true;
	                    }
	                }, this);
	            }

	            if (__DEV__) {
	                if (!legendDrawedMap[name]) {
	                    console.warn(name + ' series not exists. Legend data should be same with series name or data name.');
	                }
	            }
	        }, this);

	        listComponentHelper.layout(group, legendModel, api);
	        // Render background after group is layout
	        // FIXME
	        listComponentHelper.addBackground(group, legendModel);
	    },

	    _createItem: function _createItem(name, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode) {
	        var itemWidth = legendModel.get('itemWidth');
	        var itemHeight = legendModel.get('itemHeight');
	        var inactiveColor = legendModel.get('inactiveColor');

	        var isSelected = legendModel.isSelected(name);
	        var itemGroup = new graphic.Group();

	        var textStyleModel = itemModel.getModel('textStyle');

	        var itemIcon = itemModel.get('icon');

	        var tooltipModel = itemModel.getModel('tooltip');
	        var legendGlobalTooltipModel = tooltipModel.parentModel;

	        // Use user given icon first
	        legendSymbolType = itemIcon || legendSymbolType;
	        itemGroup.add(symbolCreator.createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor));

	        // Compose symbols
	        // PENDING
	        if (!itemIcon && symbolType
	        // At least show one symbol, can't be all none
	        && (symbolType !== legendSymbolType || symbolType == 'none')) {
	            var size = itemHeight * 0.8;
	            if (symbolType === 'none') {
	                symbolType = 'circle';
	            }
	            // Put symbol in the center
	            itemGroup.add(symbolCreator.createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : inactiveColor));
	        }

	        // Text
	        var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	        var textAlign = itemAlign;

	        var formatter = legendModel.get('formatter');
	        var content = name;
	        if (typeof formatter === 'string' && formatter) {
	            content = formatter.replace('{name}', name != null ? name : '');
	        } else if (typeof formatter === 'function') {
	            content = formatter(name);
	        }

	        var text = new graphic.Text({
	            style: {
	                text: content,
	                x: textX,
	                y: itemHeight / 2,
	                fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
	                textFont: textStyleModel.getFont(),
	                textAlign: textAlign,
	                textVerticalAlign: 'middle'
	            }
	        });
	        itemGroup.add(text);

	        // Add a invisible rect to increase the area of mouse hover
	        var hitRect = new graphic.Rect({
	            shape: itemGroup.getBoundingRect(),
	            invisible: true,
	            tooltip: tooltipModel.get('show') ? zrUtil.extend({
	                content: name,
	                // Defaul formatter
	                formatter: legendGlobalTooltipModel.get('formatter', true) || function () {
	                    return name;
	                },
	                formatterParams: {
	                    componentType: 'legend',
	                    legendIndex: legendModel.componentIndex,
	                    name: name,
	                    $vars: ['name']
	                }
	            }, tooltipModel.option) : null
	        });
	        itemGroup.add(hitRect);

	        itemGroup.eachChild(function (child) {
	            child.silent = true;
	        });

	        hitRect.silent = !selectMode;

	        this.group.add(itemGroup);

	        graphic.setHoverStyle(itemGroup);

	        return itemGroup;
	    }
	});

/***/ },
/* 796 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// List layout
	var _layout = __webpack_require__(521);
	var formatUtil = __webpack_require__(506);
	var graphic = __webpack_require__(543);

	function positionGroup(group, model, api) {
	    _layout.positionElement(group, model.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    }, model.get('padding'));
	}

	module.exports = {
	    /**
	     * Layout list like component.
	     * It will box layout each items in group of component and then position the whole group in the viewport
	     * @param {module:zrender/group/Group} group
	     * @param {module:echarts/model/Component} componentModel
	     * @param {module:echarts/ExtensionAPI}
	     */
	    layout: function layout(group, componentModel, api) {
	        var rect = _layout.getLayoutRect(componentModel.getBoxLayoutParams(), {
	            width: api.getWidth(),
	            height: api.getHeight()
	        }, componentModel.get('padding'));
	        _layout.box(componentModel.get('orient'), group, componentModel.get('itemGap'), rect.width, rect.height);

	        positionGroup(group, componentModel, api);
	    },

	    addBackground: function addBackground(group, componentModel) {
	        var padding = formatUtil.normalizeCssArray(componentModel.get('padding'));
	        var boundingRect = group.getBoundingRect();
	        var style = componentModel.getItemStyle(['color', 'opacity']);
	        style.fill = componentModel.get('backgroundColor');
	        var rect = new graphic.Rect({
	            shape: {
	                x: boundingRect.x - padding[3],
	                y: boundingRect.y - padding[0],
	                width: boundingRect.width + padding[1] + padding[3],
	                height: boundingRect.height + padding[0] + padding[2]
	            },
	            style: style,
	            silent: true,
	            z2: -1
	        });
	        graphic.subPixelOptimizeRect(rect);

	        group.add(rect);
	    }
	};

/***/ },
/* 797 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (ecModel) {
	    var legendModels = ecModel.findComponents({
	        mainType: 'legend'
	    });
	    if (legendModels && legendModels.length) {
	        ecModel.filterSeries(function (series) {
	            // If in any legend component the status is not selected.
	            // Because in legend series is assumed selected when it is not in the legend data.
	            for (var i = 0; i < legendModels.length; i++) {
	                if (!legendModels[i].isSelected(series.name)) {
	                    return false;
	                }
	            }
	            return true;
	        });
	    }
	};

/***/ },
/* 798 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// FIXME Better way to pack data in graphic element


	__webpack_require__(799);

	__webpack_require__(800);

	// Show tip action
	/**
	 * @action
	 * @property {string} type
	 * @property {number} seriesIndex
	 * @property {number} dataIndex
	 * @property {number} [x]
	 * @property {number} [y]
	 */
	__webpack_require__(501).registerAction({
	    type: 'showTip',
	    event: 'showTip',
	    update: 'tooltip:manuallyShowTip'
	},
	// noop
	function () {});
	// Hide tip action
	__webpack_require__(501).registerAction({
	    type: 'hideTip',
	    event: 'hideTip',
	    update: 'tooltip:manuallyHideTip'
	},
	// noop
	function () {});

/***/ },
/* 799 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(501).extendComponentModel({

	    type: 'tooltip',

	    defaultOption: {
	        zlevel: 0,

	        z: 8,

	        show: true,

	        // tooltip主体内容
	        showContent: true,

	        // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
	        trigger: 'item',

	        // 触发条件，支持 'click' | 'mousemove' | 'none'
	        triggerOn: 'mousemove',

	        // 是否永远显示 content
	        alwaysShowContent: false,

	        // 位置 {Array} | {Function}
	        // position: null

	        // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。
	        confine: false,

	        // 内容格式器：{string}（Template） ¦ {Function}
	        // formatter: null

	        showDelay: 0,

	        // 隐藏延迟，单位ms
	        hideDelay: 100,

	        // 动画变换时间，单位s
	        transitionDuration: 0.4,

	        enterable: false,

	        // 提示背景颜色，默认为透明度为0.7的黑色
	        backgroundColor: 'rgba(50,50,50,0.7)',

	        // 提示边框颜色
	        borderColor: '#333',

	        // 提示边框圆角，单位px，默认为4
	        borderRadius: 4,

	        // 提示边框线宽，单位px，默认为0（无边框）
	        borderWidth: 0,

	        // 提示内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        padding: 5,

	        // Extra css text
	        extraCssText: '',

	        // 坐标轴指示器，坐标轴触发有效
	        axisPointer: {
	            // 默认为直线
	            // 可选为：'line' | 'shadow' | 'cross'
	            type: 'line',

	            // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	            // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	            // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	            // 极坐标系会默认选择 angle 轴
	            axis: 'auto',

	            animation: true,
	            animationDurationUpdate: 200,
	            animationEasingUpdate: 'exponentialOut',

	            // 直线指示器样式设置
	            lineStyle: {
	                color: '#555',
	                width: 1,
	                type: 'solid'
	            },

	            crossStyle: {
	                color: '#555',
	                width: 1,
	                type: 'dashed',

	                // TODO formatter
	                textStyle: {}
	            },

	            // 阴影指示器样式设置
	            shadowStyle: {
	                color: 'rgba(150,150,150,0.3)'
	            }
	        },
	        textStyle: {
	            color: '#fff',
	            fontSize: 14
	        }
	    }
	});

/***/ },
/* 800 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var TooltipContent = __webpack_require__(801);
	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);
	var formatUtil = __webpack_require__(506);
	var numberUtil = __webpack_require__(507);
	var modelUtil = __webpack_require__(505);
	var parsePercent = numberUtil.parsePercent;
	var env = __webpack_require__(502);
	var Model = __webpack_require__(512);

	function dataEqual(a, b) {
	    if (!a || !b) {
	        return false;
	    }
	    var round = numberUtil.round;
	    return round(a[0]) === round(b[0]) && round(a[1]) === round(b[1]);
	}
	/**
	 * @inner
	 */
	function makeLineShape(x1, y1, x2, y2) {
	    return {
	        x1: x1,
	        y1: y1,
	        x2: x2,
	        y2: y2
	    };
	}

	/**
	 * @inner
	 */
	function makeRectShape(x, y, width, height) {
	    return {
	        x: x,
	        y: y,
	        width: width,
	        height: height
	    };
	}

	/**
	 * @inner
	 */
	function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	    return {
	        cx: cx,
	        cy: cy,
	        r0: r0,
	        r: r,
	        startAngle: startAngle,
	        endAngle: endAngle,
	        clockwise: true
	    };
	}

	function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	    var width = el.clientWidth;
	    var height = el.clientHeight;
	    var gap = 20;

	    if (x + width + gap > viewWidth) {
	        x -= width + gap;
	    } else {
	        x += gap;
	    }
	    if (y + height + gap > viewHeight) {
	        y -= height + gap;
	    } else {
	        y += gap;
	    }
	    return [x, y];
	}

	function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {
	    var width = el.clientWidth;
	    var height = el.clientHeight;

	    x = Math.min(x + width, viewWidth) - width;
	    y = Math.min(y + height, viewHeight) - height;
	    x = Math.max(x, 0);
	    y = Math.max(y, 0);

	    return [x, y];
	}

	function calcTooltipPosition(position, rect, dom) {
	    var domWidth = dom.clientWidth;
	    var domHeight = dom.clientHeight;
	    var gap = 5;
	    var x = 0;
	    var y = 0;
	    var rectWidth = rect.width;
	    var rectHeight = rect.height;
	    switch (position) {
	        case 'inside':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	            break;
	        case 'top':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y - domHeight - gap;
	            break;
	        case 'bottom':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y + rectHeight + gap;
	            break;
	        case 'left':
	            x = rect.x - domWidth - gap;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	            break;
	        case 'right':
	            x = rect.x + rectWidth + gap;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	    }
	    return [x, y];
	}

	/**
	 * @param  {string|Function|Array.<number>} positionExpr
	 * @param  {number} x Mouse x
	 * @param  {number} y Mouse y
	 * @param  {boolean} confine Whether confine tooltip content in view rect.
	 * @param  {module:echarts/component/tooltip/TooltipContent} content
	 * @param  {Object|<Array.<Object>} params
	 * @param  {module:zrender/Element} el target element
	 * @param  {module:echarts/ExtensionAPI} api
	 * @return {Array.<number>}
	 */
	function updatePosition(positionExpr, x, y, confine, content, params, el, api) {
	    var viewWidth = api.getWidth();
	    var viewHeight = api.getHeight();

	    var rect = el && el.getBoundingRect().clone();
	    el && rect.applyTransform(el.transform);
	    if (typeof positionExpr === 'function') {
	        // Callback of position can be an array or a string specify the position
	        positionExpr = positionExpr([x, y], params, content.el, rect);
	    }

	    if (zrUtil.isArray(positionExpr)) {
	        x = parsePercent(positionExpr[0], viewWidth);
	        y = parsePercent(positionExpr[1], viewHeight);
	    }
	    // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	    else if (typeof positionExpr === 'string' && el) {
	            var pos = calcTooltipPosition(positionExpr, rect, content.el);
	            x = pos[0];
	            y = pos[1];
	        } else {
	            var pos = refixTooltipPosition(x, y, content.el, viewWidth, viewHeight);
	            x = pos[0];
	            y = pos[1];
	        }

	    if (confine) {
	        var pos = confineTooltipPosition(x, y, content.el, viewWidth, viewHeight);
	        x = pos[0];
	        y = pos[1];
	    }

	    content.moveTo(x, y);
	}

	function ifSeriesSupportAxisTrigger(seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    var trigger = seriesModel.get('tooltip.trigger', true);
	    // Ignore series use item tooltip trigger and series coordinate system is not cartesian or
	    return !(!coordSys || coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis' || trigger === 'item');
	}

	__webpack_require__(501).extendComponentView({

	    type: 'tooltip',

	    _axisPointers: {},

	    init: function init(ecModel, api) {
	        if (env.node) {
	            return;
	        }
	        var tooltipContent = new TooltipContent(api.getDom(), api);
	        this._tooltipContent = tooltipContent;
	    },

	    render: function render(tooltipModel, ecModel, api) {
	        if (env.node) {
	            return;
	        }

	        // Reset
	        this.group.removeAll();

	        /**
	         * @type {Object}
	         * @private
	         */
	        this._axisPointers = {};

	        /**
	         * @private
	         * @type {module:echarts/component/tooltip/TooltipModel}
	         */
	        this._tooltipModel = tooltipModel;

	        /**
	         * @private
	         * @type {module:echarts/model/Global}
	         */
	        this._ecModel = ecModel;

	        /**
	         * @private
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this._api = api;

	        /**
	         * @type {Object}
	         * @private
	         */
	        this._lastHover = {
	            // data
	            // payloadBatch
	        };

	        var tooltipContent = this._tooltipContent;
	        tooltipContent.update();
	        tooltipContent.enterable = tooltipModel.get('enterable');
	        this._alwaysShowContent = tooltipModel.get('alwaysShowContent');

	        /**
	         * @type {Object.<string, Array>}
	         */
	        this._seriesGroupByAxis = this._prepareAxisTriggerData(tooltipModel, ecModel);

	        var crossText = this._crossText;
	        if (crossText) {
	            this.group.add(crossText);
	        }

	        var triggerOn = tooltipModel.get('triggerOn');

	        // Try to keep the tooltip show when refreshing
	        if (this._lastX != null && this._lastY != null
	        // When user is willing to control tooltip totally using API,
	        // self.manuallyShowTip({x, y}) might cause tooltip hide,
	        // which is not expected.
	        && triggerOn !== 'none') {
	            var self = this;
	            clearTimeout(this._refreshUpdateTimeout);
	            this._refreshUpdateTimeout = setTimeout(function () {
	                // Show tip next tick after other charts are rendered
	                // In case highlight action has wrong result
	                // FIXME
	                self.manuallyShowTip(tooltipModel, ecModel, api, {
	                    x: self._lastX,
	                    y: self._lastY
	                });
	            });
	        }

	        var zr = this._api.getZr();
	        zr.off('click', this._tryShow);
	        zr.off('mousemove', this._mousemove);
	        zr.off('mouseout', this._hide);
	        zr.off('globalout', this._hide);

	        if (triggerOn === 'click') {
	            zr.on('click', this._tryShow, this);
	        } else if (triggerOn === 'mousemove') {
	            zr.on('mousemove', this._mousemove, this);
	            zr.on('mouseout', this._hide, this);
	            zr.on('globalout', this._hide, this);
	        }
	        // else triggerOn is 'none', which enable user
	        // to control tooltip totally using API.
	    },

	    _mousemove: function _mousemove(e) {
	        var showDelay = this._tooltipModel.get('showDelay');
	        var self = this;
	        clearTimeout(this._showTimeout);
	        if (showDelay > 0) {
	            this._showTimeout = setTimeout(function () {
	                self._tryShow(e);
	            }, showDelay);
	        } else {
	            this._tryShow(e);
	        }
	    },

	    /**
	     * Show tip manually by
	     * dispatchAction({
	     *     type: 'showTip',
	     *     x: 10,
	     *     y: 10
	     * });
	     * Or
	     * dispatchAction({
	     *      type: 'showTip',
	     *      seriesIndex: 0,
	     *      dataIndex or dataIndexInside or name
	     * });
	     *
	     *  TODO Batch
	     */
	    manuallyShowTip: function manuallyShowTip(tooltipModel, ecModel, api, payload) {
	        // From self
	        if (payload.from === this.uid) {
	            return;
	        }

	        var ecModel = this._ecModel;
	        var seriesIndex = payload.seriesIndex;
	        var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	        var api = this._api;

	        var isTriggerAxis = this._tooltipModel.get('trigger') === 'axis';
	        function seriesHaveDataOnIndex(_series) {
	            var data = _series.getData();
	            var dataIndex = modelUtil.queryDataIndex(data, payload);
	            // Have single dataIndex
	            if (dataIndex != null && !zrUtil.isArray(dataIndex) && data.hasValue(dataIndex)) {
	                return true;
	            }
	        }

	        if (payload.x == null || payload.y == null) {
	            if (isTriggerAxis) {
	                // Find another series.
	                if (seriesModel && !seriesHaveDataOnIndex(seriesModel)) {
	                    seriesModel = null;
	                }
	                if (!seriesModel) {
	                    // Find the first series can use axis trigger And data is not null
	                    ecModel.eachSeries(function (_series) {
	                        if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {
	                            if (seriesHaveDataOnIndex(_series)) {
	                                seriesModel = _series;
	                            }
	                        }
	                    });
	                }
	            } else {
	                // Use the first series by default.
	                seriesModel = seriesModel || ecModel.getSeriesByIndex(0);
	            }
	            if (seriesModel) {
	                var data = seriesModel.getData();
	                var dataIndex = modelUtil.queryDataIndex(data, payload);

	                if (dataIndex == null || zrUtil.isArray(dataIndex)) {
	                    return;
	                }

	                var el = data.getItemGraphicEl(dataIndex);
	                var cx;
	                var cy;
	                // Try to get the point in coordinate system
	                var coordSys = seriesModel.coordinateSystem;
	                if (seriesModel.getTooltipPosition) {
	                    var point = seriesModel.getTooltipPosition(dataIndex) || [];
	                    cx = point[0];
	                    cy = point[1];
	                } else if (coordSys && coordSys.dataToPoint) {
	                    var point = coordSys.dataToPoint(data.getValues(zrUtil.map(coordSys.dimensions, function (dim) {
	                        return seriesModel.coordDimToDataDim(dim)[0];
	                    }), dataIndex, true));
	                    cx = point && point[0];
	                    cy = point && point[1];
	                } else if (el) {
	                    // Use graphic bounding rect
	                    var rect = el.getBoundingRect().clone();
	                    rect.applyTransform(el.transform);
	                    cx = rect.x + rect.width / 2;
	                    cy = rect.y + rect.height / 2;
	                }

	                if (cx != null && cy != null) {
	                    this._tryShow({
	                        offsetX: cx,
	                        offsetY: cy,
	                        position: payload.position,
	                        target: el,
	                        event: {}
	                    });
	                }
	            }
	        } else {
	            var el = api.getZr().handler.findHover(payload.x, payload.y);
	            this._tryShow({
	                offsetX: payload.x,
	                offsetY: payload.y,
	                position: payload.position,
	                target: el,
	                event: {}
	            });
	        }
	    },

	    manuallyHideTip: function manuallyHideTip(tooltipModel, ecModel, api, payload) {
	        if (payload.from === this.uid) {
	            return;
	        }

	        this._hide();
	    },

	    _prepareAxisTriggerData: function _prepareAxisTriggerData(tooltipModel, ecModel) {
	        // Prepare data for axis trigger
	        var seriesGroupByAxis = {};
	        ecModel.eachSeries(function (seriesModel) {
	            if (ifSeriesSupportAxisTrigger(seriesModel)) {
	                var coordSys = seriesModel.coordinateSystem;
	                var baseAxis;
	                var key;

	                // Only cartesian2d, polar and single support axis trigger
	                if (coordSys.type === 'cartesian2d') {
	                    // FIXME `axisPointer.axis` is not baseAxis
	                    baseAxis = coordSys.getBaseAxis();
	                    key = baseAxis.dim + baseAxis.index;
	                } else if (coordSys.type === 'singleAxis') {
	                    baseAxis = coordSys.getAxis();
	                    key = baseAxis.dim + baseAxis.type;
	                } else {
	                    baseAxis = coordSys.getBaseAxis();
	                    key = baseAxis.dim + coordSys.name;
	                }

	                seriesGroupByAxis[key] = seriesGroupByAxis[key] || {
	                    coordSys: [],
	                    series: []
	                };
	                seriesGroupByAxis[key].coordSys.push(coordSys);
	                seriesGroupByAxis[key].series.push(seriesModel);
	            }
	        }, this);

	        return seriesGroupByAxis;
	    },

	    /**
	     * mousemove handler
	     * @param {Object} e
	     * @private
	     */
	    _tryShow: function _tryShow(e) {
	        var el = e.target;
	        var tooltipModel = this._tooltipModel;
	        var globalTrigger = tooltipModel.get('trigger');
	        var ecModel = this._ecModel;
	        var api = this._api;

	        if (!tooltipModel) {
	            return;
	        }

	        // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
	        this._lastX = e.offsetX;
	        this._lastY = e.offsetY;

	        // Always show item tooltip if mouse is on the element with dataIndex
	        if (el && el.dataIndex != null) {
	            // Use dataModel in element if possible
	            // Used when mouseover on a element like markPoint or edge
	            // In which case, the data is not main data in series.
	            var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	            var dataIndex = el.dataIndex;
	            var data = dataModel.getData();
	            var itemModel = data.getItemModel(dataIndex);
	            // Series or single data may use item trigger when global is axis trigger
	            if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {
	                this._showAxisTooltip(tooltipModel, ecModel, e);
	            } else {
	                // Reset ticket
	                this._ticket = '';
	                // If either single data or series use item trigger
	                this._hideAxisPointer();
	                // Reset last hover and dispatch downplay action
	                this._resetLastHover();

	                this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);
	            }

	            api.dispatchAction({
	                type: 'showTip',
	                from: this.uid,
	                dataIndexInside: dataIndex,
	                dataIndex: data.getRawIndex(dataIndex), // expose to user.
	                seriesIndex: el.seriesIndex
	            });
	        }
	        // Tooltip provided directly. Like legend
	        else if (el && el.tooltip) {
	                var tooltipOpt = el.tooltip;
	                if (typeof tooltipOpt === 'string') {
	                    var content = tooltipOpt;
	                    tooltipOpt = {
	                        content: content,
	                        // Fixed formatter
	                        formatter: content
	                    };
	                }
	                var subTooltipModel = new Model(tooltipOpt, tooltipModel);
	                var defaultHtml = subTooltipModel.get('content');
	                var asyncTicket = Math.random();
	                this._showTooltipContent(
	                // TODO params
	                subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {}, asyncTicket, e.offsetX, e.offsetY, e.position, el, api);
	            } else {
	                if (globalTrigger === 'item') {
	                    this._hide();
	                } else {
	                    // Try show axis tooltip
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }

	                // Action of cross pointer
	                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method
	                if (tooltipModel.get('axisPointer.type') === 'cross') {
	                    api.dispatchAction({
	                        type: 'showTip',
	                        from: this.uid,
	                        x: e.offsetX,
	                        y: e.offsetY
	                    });
	                }
	            }
	    },

	    /**
	     * Show tooltip on axis
	     * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel
	     * @param {module:echarts/model/Global} ecModel
	     * @param {Object} e
	     * @private
	     */
	    _showAxisTooltip: function _showAxisTooltip(tooltipModel, ecModel, e) {
	        var axisPointerModel = tooltipModel.getModel('axisPointer');
	        var axisPointerType = axisPointerModel.get('type');

	        if (axisPointerType === 'cross') {
	            var el = e.target;
	            if (el && el.dataIndex != null) {
	                var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);
	                var dataIndex = el.dataIndex;
	                this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);
	            }
	        }

	        this._showAxisPointer();
	        var allNotShow = true;
	        zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {
	            // Try show the axis pointer
	            var allCoordSys = seriesCoordSysSameAxis.coordSys;
	            var coordSys = allCoordSys[0];

	            // If mouse position is not in the grid or polar
	            var point = [e.offsetX, e.offsetY];

	            if (!coordSys.containPoint(point)) {
	                // Hide axis pointer
	                this._hideAxisPointer(coordSys.name);
	                return;
	            }

	            allNotShow = false;
	            // Make sure point is discrete on cateogry axis
	            var dimensions = coordSys.dimensions;
	            var value = coordSys.pointToData(point, true);
	            point = coordSys.dataToPoint(value);

	            var baseAxis = coordSys.getBaseAxis();
	            var axisType = axisPointerModel.get('axis');
	            if (axisType === 'auto') {
	                axisType = baseAxis.dim;
	            }

	            if (baseAxis.isBlank() || zrUtil.eqNaN(point[0]) || zrUtil.eqNaN(point[1])) {
	                this._hideAxisPointer(coordSys.name);
	                return;
	            }

	            var contentNotChange = false;
	            var lastHover = this._lastHover;
	            if (axisPointerType === 'cross') {
	                // If hover data not changed
	                // Possible when two axes are all category
	                if (dataEqual(lastHover.data, value)) {
	                    contentNotChange = true;
	                }
	                lastHover.data = value;
	            } else {
	                var valIndex = zrUtil.indexOf(dimensions, axisType);

	                // If hover data not changed on the axis dimension
	                if (lastHover.data === value[valIndex]) {
	                    contentNotChange = true;
	                }
	                lastHover.data = value[valIndex];
	            }

	            var enableAnimation = tooltipModel.get('animation');

	            if (coordSys.type === 'cartesian2d' && !contentNotChange) {
	                this._showCartesianPointer(axisPointerModel, coordSys, axisType, point, enableAnimation);
	            } else if (coordSys.type === 'polar' && !contentNotChange) {
	                this._showPolarPointer(axisPointerModel, coordSys, axisType, point, enableAnimation);
	            } else if (coordSys.type === 'singleAxis' && !contentNotChange) {
	                this._showSinglePointer(axisPointerModel, coordSys, axisType, point, enableAnimation);
	            }

	            if (axisPointerType !== 'cross') {
	                this._dispatchAndShowSeriesTooltipContent(coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange, e.position);
	            }
	        }, this);

	        if (!this._tooltipModel.get('show')) {
	            this._hideAxisPointer();
	        }

	        if (allNotShow) {
	            this._hide();
	        }
	    },

	    /**
	     * Show tooltip on axis of cartesian coordinate
	     * @param {module:echarts/model/Model} axisPointerModel
	     * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians
	     * @param {string} axisType
	     * @param {Array.<number>} point
	     * @private
	     */
	    _showCartesianPointer: function _showCartesianPointer(axisPointerModel, cartesian, axisType, point, enableAnimation) {
	        var self = this;

	        var axisPointerType = axisPointerModel.get('type');
	        var baseAxis = cartesian.getBaseAxis();
	        var moveAnimation = enableAnimation && axisPointerType !== 'cross' && baseAxis.type === 'category' && baseAxis.getBandWidth() > 20;

	        if (axisPointerType === 'cross') {
	            moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());
	            moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());

	            this._updateCrossText(cartesian, point, axisPointerModel);
	        } else {
	            var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');
	            var otherExtent = otherAxis.getGlobalExtent();

	            if (cartesian.type === 'cartesian2d') {
	                (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(axisType, point, otherExtent);
	            }
	        }

	        /**
	         * @inner
	         */
	        function moveGridLine(axisType, point, otherExtent) {
	            var targetShape = axisType === 'x' ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1]) : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

	            var pointerEl = self._getPointerElement(cartesian, axisPointerModel, axisType, targetShape);
	            graphic.subPixelOptimizeLine({
	                shape: targetShape,
	                style: pointerEl.style
	            });

	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }

	        /**
	         * @inner
	         */
	        function moveGridShadow(axisType, point, otherExtent) {
	            var axis = cartesian.getAxis(axisType);
	            var bandWidth = axis.getBandWidth();
	            var span = otherExtent[1] - otherExtent[0];
	            var targetShape = axisType === 'x' ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span) : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);

	            var pointerEl = self._getPointerElement(cartesian, axisPointerModel, axisType, targetShape);
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	    },

	    _showSinglePointer: function _showSinglePointer(axisPointerModel, single, axisType, point, enableAnimation) {
	        var self = this;
	        var axisPointerType = axisPointerModel.get('type');
	        var moveAnimation = enableAnimation && axisPointerType !== 'cross' && single.getBaseAxis().type === 'category';
	        var rect = single.getRect();
	        var otherExtent = [rect.y, rect.y + rect.height];

	        moveSingleLine(axisType, point, otherExtent);

	        /**
	         * @inner
	         */
	        function moveSingleLine(axisType, point, otherExtent) {
	            var axis = single.getAxis();
	            var orient = axis.orient;

	            var targetShape = orient === 'horizontal' ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1]) : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

	            var pointerEl = self._getPointerElement(single, axisPointerModel, axisType, targetShape);
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	    },

	    /**
	     * Show tooltip on axis of polar coordinate
	     * @param {module:echarts/model/Model} axisPointerModel
	     * @param {Array.<module:echarts/coord/polar/Polar>} polar
	     * @param {string} axisType
	     * @param {Array.<number>} point
	     */
	    _showPolarPointer: function _showPolarPointer(axisPointerModel, polar, axisType, point, enableAnimation) {
	        var self = this;

	        var axisPointerType = axisPointerModel.get('type');

	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();

	        var moveAnimation = enableAnimation && axisPointerType !== 'cross' && polar.getBaseAxis().type === 'category';

	        if (axisPointerType === 'cross') {
	            movePolarLine('angle', point, radiusAxis.getExtent());
	            movePolarLine('radius', point, angleAxis.getExtent());

	            this._updateCrossText(polar, point, axisPointerModel);
	        } else {
	            var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');
	            var otherExtent = otherAxis.getExtent();

	            (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(axisType, point, otherExtent);
	        }
	        /**
	         * @inner
	         */
	        function movePolarLine(axisType, point, otherExtent) {
	            var mouseCoord = polar.pointToCoord(point);

	            var targetShape;

	            if (axisType === 'angle') {
	                var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);
	                var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);
	                targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);
	            } else {
	                targetShape = {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r: mouseCoord[0]
	                };
	            }

	            var pointerEl = self._getPointerElement(polar, axisPointerModel, axisType, targetShape);

	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }

	        /**
	         * @inner
	         */
	        function movePolarShadow(axisType, point, otherExtent) {
	            var axis = polar.getAxis(axisType);
	            var bandWidth = axis.getBandWidth();

	            var mouseCoord = polar.pointToCoord(point);

	            var targetShape;

	            var radian = Math.PI / 180;

	            if (axisType === 'angle') {
	                targetShape = makeSectorShape(polar.cx, polar.cy, otherExtent[0], otherExtent[1],
	                // In ECharts y is negative if angle is positive
	                (-mouseCoord[1] - bandWidth / 2) * radian, (-mouseCoord[1] + bandWidth / 2) * radian);
	            } else {
	                targetShape = makeSectorShape(polar.cx, polar.cy, mouseCoord[0] - bandWidth / 2, mouseCoord[0] + bandWidth / 2, 0, Math.PI * 2);
	            }

	            var pointerEl = self._getPointerElement(polar, axisPointerModel, axisType, targetShape);
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	    },

	    _updateCrossText: function _updateCrossText(coordSys, point, axisPointerModel) {
	        var crossStyleModel = axisPointerModel.getModel('crossStyle');
	        var textStyleModel = crossStyleModel.getModel('textStyle');

	        var tooltipModel = this._tooltipModel;

	        var text = this._crossText;
	        if (!text) {
	            text = this._crossText = new graphic.Text({
	                style: {
	                    textAlign: 'left',
	                    textVerticalAlign: 'bottom'
	                }
	            });
	            this.group.add(text);
	        }

	        var value = coordSys.pointToData(point);

	        var dims = coordSys.dimensions;
	        value = zrUtil.map(value, function (val, idx) {
	            var axis = coordSys.getAxis(dims[idx]);
	            if (axis.type === 'category' || axis.type === 'time') {
	                val = axis.scale.getLabel(val);
	            } else {
	                val = formatUtil.addCommas(val.toFixed(axis.getPixelPrecision()));
	            }
	            return val;
	        });

	        text.setStyle({
	            fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),
	            textFont: textStyleModel.getFont(),
	            text: value.join(', '),
	            x: point[0] + 5,
	            y: point[1] - 5
	        });
	        text.z = tooltipModel.get('z');
	        text.zlevel = tooltipModel.get('zlevel');
	    },

	    _getPointerElement: function _getPointerElement(coordSys, pointerModel, axisType, initShape) {
	        var tooltipModel = this._tooltipModel;
	        var z = tooltipModel.get('z');
	        var zlevel = tooltipModel.get('zlevel');
	        var axisPointers = this._axisPointers;
	        var coordSysName = coordSys.name;
	        axisPointers[coordSysName] = axisPointers[coordSysName] || {};
	        if (axisPointers[coordSysName][axisType]) {
	            return axisPointers[coordSysName][axisType];
	        }

	        // Create if not exists
	        var pointerType = pointerModel.get('type');
	        var styleModel = pointerModel.getModel(pointerType + 'Style');
	        var isShadow = pointerType === 'shadow';
	        var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();

	        var elementType = coordSys.type === 'polar' ? isShadow ? 'Sector' : axisType === 'radius' ? 'Circle' : 'Line' : isShadow ? 'Rect' : 'Line';

	        isShadow ? style.stroke = null : style.fill = null;

	        var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({
	            style: style,
	            z: z,
	            zlevel: zlevel,
	            silent: true,
	            shape: initShape
	        });

	        this.group.add(el);
	        return el;
	    },

	    /**
	     * Dispatch actions and show tooltip on series
	     * @param {Array.<module:echarts/model/Series>} seriesList
	     * @param {Array.<number>} point
	     * @param {Array.<number>} value
	     * @param {boolean} contentNotChange
	     * @param {Array.<number>|string|Function} [positionExpr]
	     */
	    _dispatchAndShowSeriesTooltipContent: function _dispatchAndShowSeriesTooltipContent(coordSys, seriesList, point, value, contentNotChange, positionExpr) {

	        var rootTooltipModel = this._tooltipModel;

	        var baseAxis = coordSys.getBaseAxis();
	        var baseDimIndex = { x: 1, radius: 1, single: 1 }[baseAxis.dim] ? 0 : 1;

	        if (!seriesList.length) {
	            return;
	        }

	        var payloadBatch = zrUtil.map(seriesList, function (series) {
	            return {
	                seriesIndex: series.seriesIndex,
	                dataIndexInside: series.getAxisTooltipDataIndex ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis) : series.getData().indexOfNearest(series.coordDimToDataDim(baseAxis.dim)[0], value[baseDimIndex],
	                // Add a threshold to avoid find the wrong dataIndex when data length is not same
	                false, baseAxis.type === 'category' ? 0.5 : null)
	            };
	        });
	        var sampleSeriesIndex;
	        zrUtil.each(payloadBatch, function (payload, idx) {
	            if (seriesList[idx].getData().hasValue(payload.dataIndexInside)) {
	                sampleSeriesIndex = idx;
	            }
	        });
	        // Fallback to 0.
	        sampleSeriesIndex = sampleSeriesIndex || 0;

	        var lastHover = this._lastHover;
	        var api = this._api;
	        // Dispatch downplay action
	        if (lastHover.payloadBatch && !contentNotChange) {
	            api.dispatchAction({
	                type: 'downplay',
	                batch: lastHover.payloadBatch
	            });
	        }
	        // Dispatch highlight action
	        if (!contentNotChange) {
	            api.dispatchAction({
	                type: 'highlight',
	                batch: payloadBatch
	            });
	            lastHover.payloadBatch = payloadBatch;
	        }
	        // Dispatch showTip action
	        var dataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;
	        api.dispatchAction({
	            type: 'showTip',
	            dataIndexInside: dataIndex,
	            // expose to user.
	            dataIndex: seriesList[sampleSeriesIndex].getData().getRawIndex(dataIndex),
	            seriesIndex: payloadBatch[sampleSeriesIndex].seriesIndex,
	            from: this.uid
	        });

	        if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {
	            var paramsList = zrUtil.map(seriesList, function (series, index) {
	                return series.getDataParams(payloadBatch[index].dataIndexInside);
	            });

	            if (!contentNotChange) {
	                // Update html content
	                var firstDataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;

	                // Default tooltip content
	                // FIXME
	                // (1) shold be the first data which has name?
	                // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
	                var firstLine = baseAxis.type === 'time' ? baseAxis.scale.getLabel(value[baseDimIndex]) : seriesList[sampleSeriesIndex].getData().getName(firstDataIndex);
	                var defaultHtml = (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '') + zrUtil.map(seriesList, function (series, index) {
	                    return series.formatTooltip(payloadBatch[index].dataIndexInside, true);
	                }).join('<br />');

	                var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;

	                this._showTooltipContent(rootTooltipModel, defaultHtml, paramsList, asyncTicket, point[0], point[1], positionExpr, null, api);
	            } else {
	                updatePosition(positionExpr || rootTooltipModel.get('position'), point[0], point[1], rootTooltipModel.get('confine'), this._tooltipContent, paramsList, null, api);
	            }
	        }
	    },

	    /**
	     * Show tooltip on item
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {number} dataIndex
	     * @param {string} dataType
	     * @param {Object} e
	     */
	    _showItemTooltipContent: function _showItemTooltipContent(seriesModel, dataIndex, dataType, e) {
	        // FIXME Graph data
	        var api = this._api;
	        var data = seriesModel.getData(dataType);
	        var itemModel = data.getItemModel(dataIndex);

	        var tooltipOpt = itemModel.get('tooltip', true);
	        if (typeof tooltipOpt === 'string') {
	            // In each data item tooltip can be simply write:
	            // {
	            //  value: 10,
	            //  tooltip: 'Something you need to know'
	            // }
	            var tooltipContent = tooltipOpt;
	            tooltipOpt = {
	                formatter: tooltipContent
	            };
	        }
	        var rootTooltipModel = this._tooltipModel;
	        var seriesTooltipModel = seriesModel.getModel('tooltip', rootTooltipModel);
	        var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);

	        var params = seriesModel.getDataParams(dataIndex, dataType);
	        var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);

	        var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;

	        this._showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, e.offsetX, e.offsetY, e.position, e.target, api);
	    },

	    _showTooltipContent: function _showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, target, api) {
	        // Reset ticket
	        this._ticket = '';

	        if (tooltipModel.get('showContent') && tooltipModel.get('show')) {
	            var tooltipContent = this._tooltipContent;
	            var confine = tooltipModel.get('confine');

	            var formatter = tooltipModel.get('formatter');
	            positionExpr = positionExpr || tooltipModel.get('position');
	            var html = defaultHtml;

	            if (formatter) {
	                if (typeof formatter === 'string') {
	                    html = formatUtil.formatTpl(formatter, params, true);
	                } else if (typeof formatter === 'function') {
	                    var self = this;
	                    var ticket = asyncTicket;
	                    var callback = function callback(cbTicket, html) {
	                        if (cbTicket === self._ticket) {
	                            tooltipContent.setContent(html);

	                            updatePosition(positionExpr, x, y, confine, tooltipContent, params, target, api);
	                        }
	                    };
	                    self._ticket = ticket;
	                    html = formatter(params, ticket, callback);
	                }
	            }

	            tooltipContent.show(tooltipModel);
	            tooltipContent.setContent(html);

	            updatePosition(positionExpr, x, y, confine, tooltipContent, params, target, api);
	        }
	    },

	    /**
	     * Show axis pointer
	     * @param {string} [coordSysName]
	     */
	    _showAxisPointer: function _showAxisPointer(coordSysName) {
	        if (coordSysName) {
	            var axisPointers = this._axisPointers[coordSysName];
	            axisPointers && zrUtil.each(axisPointers, function (el) {
	                el.show();
	            });
	        } else {
	            this.group.eachChild(function (child) {
	                child.show();
	            });
	            this.group.show();
	        }
	    },

	    _resetLastHover: function _resetLastHover() {
	        var lastHover = this._lastHover;
	        if (lastHover.payloadBatch) {
	            this._api.dispatchAction({
	                type: 'downplay',
	                batch: lastHover.payloadBatch
	            });
	        }
	        // Reset lastHover
	        this._lastHover = {};
	    },
	    /**
	     * Hide axis pointer
	     * @param {string} [coordSysName]
	     */
	    _hideAxisPointer: function _hideAxisPointer(coordSysName) {
	        if (coordSysName) {
	            var axisPointers = this._axisPointers[coordSysName];
	            axisPointers && zrUtil.each(axisPointers, function (el) {
	                el.hide();
	            });
	        } else {
	            if (this.group.children().length) {
	                this.group.hide();
	            }
	        }
	    },

	    _hide: function _hide() {
	        clearTimeout(this._showTimeout);

	        this._hideAxisPointer();
	        this._resetLastHover();
	        if (!this._alwaysShowContent) {
	            this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	        }

	        this._api.dispatchAction({
	            type: 'hideTip',
	            from: this.uid
	        });

	        this._lastX = this._lastY = null;
	    },

	    dispose: function dispose(ecModel, api) {
	        if (env.node) {
	            return;
	        }
	        var zr = api.getZr();
	        this._tooltipContent.hide();

	        zr.off('click', this._tryShow);
	        zr.off('mousemove', this._mousemove);
	        zr.off('mouseout', this._hide);
	        zr.off('globalout', this._hide);
	    }
	});

/***/ },
/* 801 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/component/tooltip/TooltipContent
	 */

	var zrUtil = __webpack_require__(504);
	var zrColor = __webpack_require__(539);
	var eventUtil = __webpack_require__(588);
	var formatUtil = __webpack_require__(506);
	var each = zrUtil.each;
	var toCamelCase = formatUtil.toCamelCase;
	var env = __webpack_require__(502);

	var vendors = ['', '-webkit-', '-moz-', '-o-'];

	var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';

	/**
	 * @param {number} duration
	 * @return {string}
	 * @inner
	 */
	function assembleTransition(duration) {
	    var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	    var transitionText = 'left ' + duration + 's ' + transitionCurve + ',' + 'top ' + duration + 's ' + transitionCurve;
	    return zrUtil.map(vendors, function (vendorPrefix) {
	        return vendorPrefix + 'transition:' + transitionText;
	    }).join(';');
	}

	/**
	 * @param {Object} textStyle
	 * @return {string}
	 * @inner
	 */
	function assembleFont(textStyleModel) {
	    var cssText = [];

	    var fontSize = textStyleModel.get('fontSize');
	    var color = textStyleModel.getTextColor();

	    color && cssText.push('color:' + color);

	    cssText.push('font:' + textStyleModel.getFont());

	    fontSize && cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');

	    each(['decoration', 'align'], function (name) {
	        var val = textStyleModel.get(name);
	        val && cssText.push('text-' + name + ':' + val);
	    });

	    return cssText.join(';');
	}

	/**
	 * @param {Object} tooltipModel
	 * @return {string}
	 * @inner
	 */
	function assembleCssText(tooltipModel) {

	    tooltipModel = tooltipModel;

	    var cssText = [];

	    var transitionDuration = tooltipModel.get('transitionDuration');
	    var backgroundColor = tooltipModel.get('backgroundColor');
	    var textStyleModel = tooltipModel.getModel('textStyle');
	    var padding = tooltipModel.get('padding');

	    // Animation transition
	    transitionDuration && cssText.push(assembleTransition(transitionDuration));

	    if (backgroundColor) {
	        if (env.canvasSupported) {
	            cssText.push('background-Color:' + backgroundColor);
	        } else {
	            // for ie
	            cssText.push('background-Color:#' + zrColor.toHex(backgroundColor));
	            cssText.push('filter:alpha(opacity=70)');
	        }
	    }

	    // Border style
	    each(['width', 'color', 'radius'], function (name) {
	        var borderName = 'border-' + name;
	        var camelCase = toCamelCase(borderName);
	        var val = tooltipModel.get(camelCase);
	        val != null && cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	    });

	    // Text style
	    cssText.push(assembleFont(textStyleModel));

	    // Padding
	    if (padding != null) {
	        cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	    }

	    return cssText.join(';') + ';';
	}

	/**
	 * @alias module:echarts/component/tooltip/TooltipContent
	 * @constructor
	 */
	function TooltipContent(container, api) {
	    var el = document.createElement('div');
	    var zr = api.getZr();

	    this.el = el;

	    this._x = api.getWidth() / 2;
	    this._y = api.getHeight() / 2;

	    container.appendChild(el);

	    this._container = container;

	    this._show = false;

	    /**
	     * @private
	     */
	    this._hideTimeout;

	    var self = this;
	    el.onmouseenter = function () {
	        // clear the timeout in hideLater and keep showing tooltip
	        if (self.enterable) {
	            clearTimeout(self._hideTimeout);
	            self._show = true;
	        }
	        self._inContent = true;
	    };
	    el.onmousemove = function (e) {
	        e = e || window.event;
	        if (!self.enterable) {
	            // Try trigger zrender event to avoid mouse
	            // in and out shape too frequently
	            var handler = zr.handler;
	            eventUtil.normalizeEvent(container, e, true);
	            handler.dispatch('mousemove', e);
	        }
	    };
	    el.onmouseleave = function () {
	        if (self.enterable) {
	            if (self._show) {
	                self.hideLater(self._hideDelay);
	            }
	        }
	        self._inContent = false;
	    };
	}

	TooltipContent.prototype = {

	    constructor: TooltipContent,

	    enterable: true,

	    /**
	     * Update when tooltip is rendered
	     */
	    update: function update() {
	        var container = this._container;
	        var stl = container.currentStyle || document.defaultView.getComputedStyle(container);
	        var domStyle = container.style;
	        if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	            domStyle.position = 'relative';
	        }
	        // Hide the tooltip
	        // PENDING
	        // this.hide();
	    },

	    show: function show(tooltipModel) {
	        clearTimeout(this._hideTimeout);
	        var el = this.el;

	        el.style.cssText = gCssText + assembleCssText(tooltipModel)
	        // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	        + ';left:' + this._x + 'px;top:' + this._y + 'px;' + (tooltipModel.get('extraCssText') || '');

	        el.style.display = el.innerHTML ? 'block' : 'none';

	        this._show = true;
	    },

	    setContent: function setContent(content) {
	        var el = this.el;
	        el.innerHTML = content;
	        el.style.display = content ? 'block' : 'none';
	    },

	    moveTo: function moveTo(x, y) {
	        var style = this.el.style;
	        style.left = x + 'px';
	        style.top = y + 'px';

	        this._x = x;
	        this._y = y;
	    },

	    hide: function hide() {
	        this.el.style.display = 'none';
	        this._show = false;
	    },

	    // showLater: function ()

	    hideLater: function hideLater(time) {
	        if (this._show && !(this._inContent && this.enterable)) {
	            if (time) {
	                this._hideDelay = time;
	                // Set show false to avoid invoke hideLater mutiple times
	                this._show = false;
	                this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	            } else {
	                this.hide();
	            }
	        }
	    },

	    isShow: function isShow() {
	        return this._show;
	    }
	};

	module.exports = TooltipContent;

/***/ },
/* 802 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(803);
	__webpack_require__(809);
	__webpack_require__(811);

	// Polar view
	__webpack_require__(501).extendComponentView({
	    type: 'polar'
	});

/***/ },
/* 803 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO Axis scale


	var Polar = __webpack_require__(804);
	var numberUtil = __webpack_require__(507);
	var zrUtil = __webpack_require__(504);

	var axisHelper = __webpack_require__(615);
	var niceScaleExtent = axisHelper.niceScaleExtent;

	// 依赖 PolarModel 做预处理
	__webpack_require__(807);

	/**
	 * Resize method bound to the polar
	 * @param {module:echarts/coord/polar/PolarModel} polarModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function resizePolar(polarModel, api) {
	    var center = polarModel.get('center');
	    var radius = polarModel.get('radius');
	    var width = api.getWidth();
	    var height = api.getHeight();
	    var parsePercent = numberUtil.parsePercent;

	    this.cx = parsePercent(center[0], width);
	    this.cy = parsePercent(center[1], height);

	    var radiusAxis = this.getRadiusAxis();
	    var size = Math.min(width, height) / 2;
	    // var idx = radiusAxis.inverse ? 1 : 0;
	    radiusAxis.setExtent(0, parsePercent(radius, size));
	}

	/**
	 * Update polar
	 */
	function updatePolarScale(ecModel, api) {
	    var polar = this;
	    var angleAxis = polar.getAngleAxis();
	    var radiusAxis = polar.getRadiusAxis();
	    // Reset scale
	    angleAxis.scale.setExtent(Infinity, -Infinity);
	    radiusAxis.scale.setExtent(Infinity, -Infinity);

	    ecModel.eachSeries(function (seriesModel) {
	        if (seriesModel.coordinateSystem === polar) {
	            var data = seriesModel.getData();
	            radiusAxis.scale.unionExtentFromData(data, 'radius');
	            angleAxis.scale.unionExtentFromData(data, 'angle');
	        }
	    });

	    niceScaleExtent(angleAxis, angleAxis.model);
	    niceScaleExtent(radiusAxis, radiusAxis.model);

	    // Fix extent of category angle axis
	    if (angleAxis.type === 'category' && !angleAxis.onBand) {
	        var extent = angleAxis.getExtent();
	        var diff = 360 / angleAxis.scale.count();
	        angleAxis.inverse ? extent[1] += diff : extent[1] -= diff;
	        angleAxis.setExtent(extent[0], extent[1]);
	    }
	}

	/**
	 * Set common axis properties
	 * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	 * @param {module:echarts/coord/polar/AxisModel}
	 * @inner
	 */
	function setAxis(axis, axisModel) {
	    axis.type = axisModel.get('type');
	    axis.scale = axisHelper.createScaleByModel(axisModel);
	    axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';

	    // FIXME Radius axis not support inverse axis
	    if (axisModel.mainType === 'angleAxis') {
	        var startAngle = axisModel.get('startAngle');
	        axis.inverse = axisModel.get('inverse') ^ axisModel.get('clockwise');
	        axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));
	    }

	    // Inject axis instance
	    axisModel.axis = axis;
	    axis.model = axisModel;
	}

	var polarCreator = {

	    dimensions: Polar.prototype.dimensions,

	    create: function create(ecModel, api) {
	        var polarList = [];
	        ecModel.eachComponent('polar', function (polarModel, idx) {
	            var polar = new Polar(idx);
	            // Inject resize and update method
	            polar.resize = resizePolar;
	            polar.update = updatePolarScale;

	            var radiusAxis = polar.getRadiusAxis();
	            var angleAxis = polar.getAngleAxis();

	            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	            var angleAxisModel = polarModel.findAxisModel('angleAxis');

	            setAxis(radiusAxis, radiusAxisModel);
	            setAxis(angleAxis, angleAxisModel);

	            polar.resize(polarModel, api);
	            polarList.push(polar);

	            polarModel.coordinateSystem = polar;
	        });
	        // Inject coordinateSystem to series
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'polar') {
	                var polarModel = ecModel.queryComponents({
	                    mainType: 'polar',
	                    index: seriesModel.get('polarIndex'),
	                    id: seriesModel.get('polarId')
	                })[0];

	                if (__DEV__) {
	                    if (!polarModel) {
	                        throw new Error('Polar "' + zrUtil.retrieve(seriesModel.get('polarIndex'), seriesModel.get('polarId'), 0) + '" not found');
	                    }
	                }
	                seriesModel.coordinateSystem = polarModel.coordinateSystem;
	            }
	        });

	        return polarList;
	    }
	};

	__webpack_require__(526).register('polar', polarCreator);

/***/ },
/* 804 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/coord/polar/Polar
	 */

	var RadiusAxis = __webpack_require__(805);
	var AngleAxis = __webpack_require__(806);

	/**
	 * @alias {module:echarts/coord/polar/Polar}
	 * @constructor
	 * @param {string} name
	 */
	var Polar = function Polar(name) {

	  /**
	   * @type {string}
	   */
	  this.name = name || '';

	  /**
	   * x of polar center
	   * @type {number}
	   */
	  this.cx = 0;

	  /**
	   * y of polar center
	   * @type {number}
	   */
	  this.cy = 0;

	  /**
	   * @type {module:echarts/coord/polar/RadiusAxis}
	   * @private
	   */
	  this._radiusAxis = new RadiusAxis();

	  /**
	   * @type {module:echarts/coord/polar/AngleAxis}
	   * @private
	   */
	  this._angleAxis = new AngleAxis();
	};

	Polar.prototype = {

	  constructor: Polar,

	  type: 'polar',

	  /**
	   * @param {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['radius', 'angle'],

	  /**
	   * If contain coord
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  containPoint: function containPoint(point) {
	    var coord = this.pointToCoord(point);
	    return this._radiusAxis.contain(coord[0]) && this._angleAxis.contain(coord[1]);
	  },

	  /**
	   * If contain data
	   * @param {Array.<number>} data
	   * @return {boolean}
	   */
	  containData: function containData(data) {
	    return this._radiusAxis.containData(data[0]) && this._angleAxis.containData(data[1]);
	  },

	  /**
	   * @param {string} axisType
	   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	   */
	  getAxis: function getAxis(axisType) {
	    return this['_' + axisType + 'Axis'];
	  },

	  /**
	   * Get axes by type of scale
	   * @param {string} scaleType
	   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	   */
	  getAxesByScale: function getAxesByScale(scaleType) {
	    var axes = [];
	    var angleAxis = this._angleAxis;
	    var radiusAxis = this._radiusAxis;
	    angleAxis.scale.type === scaleType && axes.push(angleAxis);
	    radiusAxis.scale.type === scaleType && axes.push(radiusAxis);

	    return axes;
	  },

	  /**
	   * @return {module:echarts/coord/polar/AngleAxis}
	   */
	  getAngleAxis: function getAngleAxis() {
	    return this._angleAxis;
	  },

	  /**
	   * @return {module:echarts/coord/polar/RadiusAxis}
	   */
	  getRadiusAxis: function getRadiusAxis() {
	    return this._radiusAxis;
	  },

	  /**
	   * @param {module:echarts/coord/polar/Axis}
	   * @return {module:echarts/coord/polar/Axis}
	   */
	  getOtherAxis: function getOtherAxis(axis) {
	    var angleAxis = this._angleAxis;
	    return axis === angleAxis ? this._radiusAxis : angleAxis;
	  },

	  /**
	   * Base axis will be used on stacking.
	   *
	   * @return {module:echarts/coord/polar/Axis}
	   */
	  getBaseAxis: function getBaseAxis() {
	    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAngleAxis();
	  },

	  /**
	   * Convert series data to a list of (x, y) points
	   * @param {module:echarts/data/List} data
	   * @return {Array}
	   *  Return list of coordinates. For example:
	   *  `[[10, 10], [20, 20], [30, 30]]`
	   */
	  dataToPoints: function dataToPoints(data) {
	    return data.mapArray(this.dimensions, function (radius, angle) {
	      return this.dataToPoint([radius, angle]);
	    }, this);
	  },

	  /**
	   * Convert a single data item to (x, y) point.
	   * Parameter data is an array which the first element is radius and the second is angle
	   * @param {Array.<number>} data
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  dataToPoint: function dataToPoint(data, clamp) {
	    return this.coordToPoint([this._radiusAxis.dataToRadius(data[0], clamp), this._angleAxis.dataToAngle(data[1], clamp)]);
	  },

	  /**
	   * Convert a (x, y) point to data
	   * @param {Array.<number>} point
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  pointToData: function pointToData(point, clamp) {
	    var coord = this.pointToCoord(point);
	    return [this._radiusAxis.radiusToData(coord[0], clamp), this._angleAxis.angleToData(coord[1], clamp)];
	  },

	  /**
	   * Convert a (x, y) point to (radius, angle) coord
	   * @param {Array.<number>} point
	   * @return {Array.<number>}
	   */
	  pointToCoord: function pointToCoord(point) {
	    var dx = point[0] - this.cx;
	    var dy = point[1] - this.cy;
	    var angleAxis = this.getAngleAxis();
	    var extent = angleAxis.getExtent();
	    var minAngle = Math.min(extent[0], extent[1]);
	    var maxAngle = Math.max(extent[0], extent[1]);
	    // Fix fixed extent in polarCreator
	    // FIXME
	    angleAxis.inverse ? minAngle = maxAngle - 360 : maxAngle = minAngle + 360;

	    var radius = Math.sqrt(dx * dx + dy * dy);
	    dx /= radius;
	    dy /= radius;

	    var radian = Math.atan2(-dy, dx) / Math.PI * 180;

	    // move to angleExtent
	    var dir = radian < minAngle ? 1 : -1;
	    while (radian < minAngle || radian > maxAngle) {
	      radian += dir * 360;
	    }

	    return [radius, radian];
	  },

	  /**
	   * Convert a (radius, angle) coord to (x, y) point
	   * @param {Array.<number>} coord
	   * @return {Array.<number>}
	   */
	  coordToPoint: function coordToPoint(coord) {
	    var radius = coord[0];
	    var radian = coord[1] / 180 * Math.PI;
	    var x = Math.cos(radian) * radius + this.cx;
	    // Inverse the y
	    var y = -Math.sin(radian) * radius + this.cy;

	    return [x, y];
	  }
	};

	module.exports = Polar;

/***/ },
/* 805 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Axis = __webpack_require__(624);

	function RadiusAxis(scale, radiusExtent) {

	    Axis.call(this, 'radius', scale, radiusExtent);

	    /**
	     * Axis type
	     *  - 'category'
	     *  - 'value'
	     *  - 'time'
	     *  - 'log'
	     * @type {string}
	     */
	    this.type = 'category';
	}

	RadiusAxis.prototype = {

	    constructor: RadiusAxis,

	    dataToRadius: Axis.prototype.dataToCoord,

	    radiusToData: Axis.prototype.coordToData
	};

	zrUtil.inherits(RadiusAxis, Axis);

	module.exports = RadiusAxis;

/***/ },
/* 806 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Axis = __webpack_require__(624);

	function AngleAxis(scale, angleExtent) {

	    angleExtent = angleExtent || [0, 360];

	    Axis.call(this, 'angle', scale, angleExtent);

	    /**
	     * Axis type
	     *  - 'category'
	     *  - 'value'
	     *  - 'time'
	     *  - 'log'
	     * @type {string}
	     */
	    this.type = 'category';
	}

	AngleAxis.prototype = {

	    constructor: AngleAxis,

	    dataToAngle: Axis.prototype.dataToCoord,

	    angleToData: Axis.prototype.coordToData
	};

	zrUtil.inherits(AngleAxis, Axis);

	module.exports = AngleAxis;

/***/ },
/* 807 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(808);

	__webpack_require__(501).extendComponentModel({

	    type: 'polar',

	    dependencies: ['polarAxis', 'angleAxis'],

	    /**
	     * @type {module:echarts/coord/polar/Polar}
	     */
	    coordinateSystem: null,

	    /**
	     * @param {string} axisType
	     * @return {module:echarts/coord/polar/AxisModel}
	     */
	    findAxisModel: function findAxisModel(axisType) {
	        var foundAxisModel;
	        var ecModel = this.ecModel;

	        ecModel.eachComponent(axisType, function (axisModel) {
	            if (axisModel.getCoordSysModel() === this) {
	                foundAxisModel = axisModel;
	            }
	        }, this);
	        return foundAxisModel;
	    },

	    defaultOption: {

	        zlevel: 0,

	        z: 0,

	        center: ['50%', '50%'],

	        radius: '80%'
	    }
	});

/***/ },
/* 808 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var ComponentModel = __webpack_require__(519);
	var axisModelCreator = __webpack_require__(628);

	var PolarAxisModel = ComponentModel.extend({

	    type: 'polarAxis',

	    /**
	     * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	     */
	    axis: null,

	    /**
	     * @override
	     */
	    getCoordSysModel: function getCoordSysModel() {
	        return this.ecModel.queryComponents({
	            mainType: 'polar',
	            index: this.option.polarIndex,
	            id: this.option.polarId
	        })[0];
	    }

	});

	zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(630));

	var polarAxisDefaultExtendedOption = {
	    angle: {
	        // polarIndex: 0,
	        // polarId: '',

	        startAngle: 90,

	        clockwise: true,

	        splitNumber: 12,

	        axisLabel: {
	            rotate: false
	        }
	    },
	    radius: {
	        // polarIndex: 0,
	        // polarId: '',

	        splitNumber: 5
	    }
	};

	function getAxisType(axisDim, option) {
	    // Default axis with data is category axis
	    return option.type || (option.data ? 'category' : 'value');
	}

	axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);
	axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);

/***/ },
/* 809 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(803);

	__webpack_require__(810);

/***/ },
/* 810 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var Model = __webpack_require__(512);

	var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];

	function getAxisLineShape(polar, r0, r, angle) {
	    var start = polar.coordToPoint([r0, angle]);
	    var end = polar.coordToPoint([r, angle]);

	    return {
	        x1: start[0],
	        y1: start[1],
	        x2: end[0],
	        y2: end[1]
	    };
	}
	__webpack_require__(501).extendComponentView({

	    type: 'angleAxis',

	    render: function render(angleAxisModel, ecModel) {
	        this.group.removeAll();
	        if (!angleAxisModel.get('show')) {
	            return;
	        }

	        var polarModel = ecModel.getComponent('polar', angleAxisModel.get('polarIndex'));
	        var angleAxis = angleAxisModel.axis;
	        var polar = polarModel.coordinateSystem;
	        var radiusExtent = polar.getRadiusAxis().getExtent();
	        var ticksAngles = angleAxis.getTicksCoords();

	        if (angleAxis.type !== 'category') {
	            // Remove the last tick which will overlap the first tick
	            ticksAngles.pop();
	        }

	        zrUtil.each(elementList, function (name) {
	            if (angleAxisModel.get(name + '.show') && (!angleAxis.isBlank() || name === 'axisLine')) {
	                this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);
	            }
	        }, this);
	    },

	    /**
	     * @private
	     */
	    _axisLine: function _axisLine(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');

	        var circle = new graphic.Circle({
	            shape: {
	                cx: polar.cx,
	                cy: polar.cy,
	                r: radiusExtent[1]
	            },
	            style: lineStyleModel.getLineStyle(),
	            z2: 1,
	            silent: true
	        });
	        circle.style.fill = null;

	        this.group.add(circle);
	    },

	    /**
	     * @private
	     */
	    _axisTick: function _axisTick(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var tickModel = angleAxisModel.getModel('axisTick');

	        var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');

	        var lines = zrUtil.map(ticksAngles, function (tickAngle) {
	            return new graphic.Line({
	                shape: getAxisLineShape(polar, radiusExtent[1], radiusExtent[1] + tickLen, tickAngle)
	            });
	        });
	        this.group.add(graphic.mergePath(lines, {
	            style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {
	                stroke: angleAxisModel.get('axisLine.lineStyle.color')
	            })
	        }));
	    },

	    /**
	     * @private
	     */
	    _axisLabel: function _axisLabel(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var axis = angleAxisModel.axis;

	        var categoryData = angleAxisModel.get('data');

	        var labelModel = angleAxisModel.getModel('axisLabel');
	        var axisTextStyleModel = labelModel.getModel('textStyle');

	        var labels = angleAxisModel.getFormattedLabels();

	        var labelMargin = labelModel.get('margin');
	        var labelsAngles = axis.getLabelsCoords();

	        // Use length of ticksAngles because it may remove the last tick to avoid overlapping
	        for (var i = 0; i < ticksAngles.length; i++) {
	            var r = radiusExtent[1];
	            var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);
	            var cx = polar.cx;
	            var cy = polar.cy;

	            var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';
	            var labelTextBaseline = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';

	            var textStyleModel = axisTextStyleModel;
	            if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	                textStyleModel = new Model(categoryData[i].textStyle, axisTextStyleModel);
	            }
	            this.group.add(new graphic.Text({
	                style: {
	                    x: p[0],
	                    y: p[1],
	                    fill: textStyleModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),
	                    text: labels[i],
	                    textAlign: labelTextAlign,
	                    textVerticalAlign: labelTextBaseline,
	                    textFont: textStyleModel.getFont()
	                },
	                silent: true
	            }));
	        }
	    },

	    /**
	     * @private
	     */
	    _splitLine: function _splitLine(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var splitLineModel = angleAxisModel.getModel('splitLine');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var lineColors = lineStyleModel.get('color');
	        var lineCount = 0;

	        lineColors = lineColors instanceof Array ? lineColors : [lineColors];

	        var splitLines = [];

	        for (var i = 0; i < ticksAngles.length; i++) {
	            var colorIndex = lineCount++ % lineColors.length;
	            splitLines[colorIndex] = splitLines[colorIndex] || [];
	            splitLines[colorIndex].push(new graphic.Line({
	                shape: getAxisLineShape(polar, radiusExtent[0], radiusExtent[1], ticksAngles[i])
	            }));
	        }

	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitLines.length; i++) {
	            this.group.add(graphic.mergePath(splitLines[i], {
	                style: zrUtil.defaults({
	                    stroke: lineColors[i % lineColors.length]
	                }, lineStyleModel.getLineStyle()),
	                silent: true,
	                z: angleAxisModel.get('z')
	            }));
	        }
	    },

	    /**
	     * @private
	     */
	    _splitArea: function _splitArea(angleAxisModel, polar, ticksAngles, radiusExtent) {

	        var splitAreaModel = angleAxisModel.getModel('splitArea');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');
	        var areaColors = areaStyleModel.get('color');
	        var lineCount = 0;

	        areaColors = areaColors instanceof Array ? areaColors : [areaColors];

	        var splitAreas = [];

	        var RADIAN = Math.PI / 180;
	        var prevAngle = -ticksAngles[0] * RADIAN;
	        var r0 = Math.min(radiusExtent[0], radiusExtent[1]);
	        var r1 = Math.max(radiusExtent[0], radiusExtent[1]);

	        var clockwise = angleAxisModel.get('clockwise');

	        for (var i = 1; i < ticksAngles.length; i++) {
	            var colorIndex = lineCount++ % areaColors.length;
	            splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	            splitAreas[colorIndex].push(new graphic.Sector({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r0: r0,
	                    r: r1,
	                    startAngle: prevAngle,
	                    endAngle: -ticksAngles[i] * RADIAN,
	                    clockwise: clockwise
	                },
	                silent: true
	            }));
	            prevAngle = -ticksAngles[i] * RADIAN;
	        }

	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitAreas.length; i++) {
	            this.group.add(graphic.mergePath(splitAreas[i], {
	                style: zrUtil.defaults({
	                    fill: areaColors[i % areaColors.length]
	                }, areaStyleModel.getAreaStyle()),
	                silent: true
	            }));
	        }
	    }
	});

/***/ },
/* 811 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(803);

	__webpack_require__(812);

/***/ },
/* 812 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var AxisBuilder = __webpack_require__(633);

	var axisBuilderAttrs = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];
	var selfBuilderAttrs = ['splitLine', 'splitArea'];

	__webpack_require__(501).extendComponentView({

	    type: 'radiusAxis',

	    render: function render(radiusAxisModel, ecModel) {
	        this.group.removeAll();
	        if (!radiusAxisModel.get('show')) {
	            return;
	        }
	        var polarModel = ecModel.getComponent('polar', radiusAxisModel.get('polarIndex'));
	        var angleAxis = polarModel.coordinateSystem.getAngleAxis();
	        var radiusAxis = radiusAxisModel.axis;
	        var polar = polarModel.coordinateSystem;
	        var ticksCoords = radiusAxis.getTicksCoords();
	        var axisAngle = angleAxis.getExtent()[0];
	        var radiusExtent = radiusAxis.getExtent();

	        var layout = layoutAxis(polar, radiusAxisModel, axisAngle);
	        var axisBuilder = new AxisBuilder(radiusAxisModel, layout);
	        zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	        this.group.add(axisBuilder.getGroup());

	        zrUtil.each(selfBuilderAttrs, function (name) {
	            if (radiusAxisModel.get(name + '.show') && !radiusAxis.isBlank()) {
	                this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);
	            }
	        }, this);
	    },

	    /**
	     * @private
	     */
	    _splitLine: function _splitLine(radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	        var splitLineModel = radiusAxisModel.getModel('splitLine');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var lineColors = lineStyleModel.get('color');
	        var lineCount = 0;

	        lineColors = lineColors instanceof Array ? lineColors : [lineColors];

	        var splitLines = [];

	        for (var i = 0; i < ticksCoords.length; i++) {
	            var colorIndex = lineCount++ % lineColors.length;
	            splitLines[colorIndex] = splitLines[colorIndex] || [];
	            splitLines[colorIndex].push(new graphic.Circle({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r: ticksCoords[i]
	                },
	                silent: true
	            }));
	        }

	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitLines.length; i++) {
	            this.group.add(graphic.mergePath(splitLines[i], {
	                style: zrUtil.defaults({
	                    stroke: lineColors[i % lineColors.length],
	                    fill: null
	                }, lineStyleModel.getLineStyle()),
	                silent: true
	            }));
	        }
	    },

	    /**
	     * @private
	     */
	    _splitArea: function _splitArea(radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {

	        var splitAreaModel = radiusAxisModel.getModel('splitArea');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');
	        var areaColors = areaStyleModel.get('color');
	        var lineCount = 0;

	        areaColors = areaColors instanceof Array ? areaColors : [areaColors];

	        var splitAreas = [];

	        var prevRadius = ticksCoords[0];
	        for (var i = 1; i < ticksCoords.length; i++) {
	            var colorIndex = lineCount++ % areaColors.length;
	            splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	            splitAreas[colorIndex].push(new graphic.Sector({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r0: prevRadius,
	                    r: ticksCoords[i],
	                    startAngle: 0,
	                    endAngle: Math.PI * 2
	                },
	                silent: true
	            }));
	            prevRadius = ticksCoords[i];
	        }

	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitAreas.length; i++) {
	            this.group.add(graphic.mergePath(splitAreas[i], {
	                style: zrUtil.defaults({
	                    fill: areaColors[i % areaColors.length]
	                }, areaStyleModel.getAreaStyle()),
	                silent: true
	            }));
	        }
	    }
	});

	/**
	 * @inner
	 */
	function layoutAxis(polar, radiusAxisModel, axisAngle) {
	    return {
	        position: [polar.cx, polar.cy],
	        rotation: axisAngle / 180 * Math.PI,
	        labelDirection: -1,
	        tickDirection: -1,
	        nameDirection: 1,
	        labelRotation: radiusAxisModel.getModel('axisLabel').get('rotate'),
	        // Over splitLine and splitArea
	        z2: 1
	    };
	}

/***/ },
/* 813 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(814);

	__webpack_require__(666);

	__webpack_require__(815);

	__webpack_require__(679);

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);

	function makeAction(method, actionInfo) {
	    actionInfo.update = 'updateView';
	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	        var selected = {};

	        ecModel.eachComponent({ mainType: 'geo', query: payload }, function (geoModel) {
	            geoModel[method](payload.name);
	            var geo = geoModel.coordinateSystem;
	            zrUtil.each(geo.regions, function (region) {
	                selected[region.name] = geoModel.isSelected(region.name) || false;
	            });
	        });

	        return {
	            selected: selected,
	            name: payload.name
	        };
	    });
	}

	makeAction('toggleSelected', {
	    type: 'geoToggleSelect',
	    event: 'geoselectchanged'
	});
	makeAction('select', {
	    type: 'geoSelect',
	    event: 'geoselected'
	});
	makeAction('unSelect', {
	    type: 'geoUnSelect',
	    event: 'geounselected'
	});

/***/ },
/* 814 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var modelUtil = __webpack_require__(505);
	var ComponentModel = __webpack_require__(519);
	var Model = __webpack_require__(512);
	var zrUtil = __webpack_require__(504);

	var selectableMixin = __webpack_require__(643);

	var geoCreator = __webpack_require__(666);

	var GeoModel = ComponentModel.extend({

	    type: 'geo',

	    /**
	     * @type {module:echarts/coord/geo/Geo}
	     */
	    coordinateSystem: null,

	    layoutMode: 'box',

	    init: function init(option) {
	        ComponentModel.prototype.init.apply(this, arguments);

	        // Default label emphasis `position` and `show`
	        modelUtil.defaultEmphasis(option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']);
	    },

	    optionUpdated: function optionUpdated() {
	        var option = this.option;
	        var self = this;

	        option.regions = geoCreator.getFilledRegions(option.regions, option.map);

	        this._optionModelMap = zrUtil.reduce(option.regions || [], function (obj, regionOpt) {
	            if (regionOpt.name) {
	                obj[regionOpt.name] = new Model(regionOpt, self);
	            }
	            return obj;
	        }, {});

	        this.updateSelectedMap(option.regions);
	    },

	    defaultOption: {

	        zlevel: 0,

	        z: 0,

	        show: true,

	        left: 'center',

	        top: 'center',

	        // width:,
	        // height:,
	        // right
	        // bottom

	        // Aspect is width / height. Inited to be geoJson bbox aspect
	        // This parameter is used for scale this aspect
	        aspectScale: 0.75,

	        ///// Layout with center and size
	        // If you wan't to put map in a fixed size box with right aspect ratio
	        // This two properties may more conveninet
	        // layoutCenter: [50%, 50%]
	        // layoutSize: 100


	        silent: false,

	        // Map type
	        map: '',

	        // Default on center of map
	        center: null,

	        zoom: 1,

	        scaleLimit: null,

	        // selectedMode: false

	        label: {
	            normal: {
	                show: false,
	                textStyle: {
	                    color: '#000'
	                }
	            },
	            emphasis: {
	                show: true,
	                textStyle: {
	                    color: 'rgb(100,0,0)'
	                }
	            }
	        },

	        itemStyle: {
	            normal: {
	                // color: 各异,
	                borderWidth: 0.5,
	                borderColor: '#444',
	                color: '#eee'
	            },
	            emphasis: { // 也是选中样式
	                color: 'rgba(255,215,0,0.8)'
	            }
	        },

	        regions: []
	    },

	    /**
	     * Get model of region
	     * @param  {string} name
	     * @return {module:echarts/model/Model}
	     */
	    getRegionModel: function getRegionModel(name) {
	        return this._optionModelMap[name];
	    },

	    /**
	     * Format label
	     * @param {string} name Region name
	     * @param {string} [status='normal'] 'normal' or 'emphasis'
	     * @return {string}
	     */
	    getFormattedLabel: function getFormattedLabel(name, status) {
	        var formatter = this.get('label.' + status + '.formatter');
	        var params = {
	            name: name
	        };
	        if (typeof formatter === 'function') {
	            params.status = status;
	            return formatter(params);
	        } else if (typeof formatter === 'string') {
	            var serName = params.seriesName;
	            return formatter.replace('{a}', serName != null ? serName : '');
	        }
	    },

	    setZoom: function setZoom(zoom) {
	        this.option.zoom = zoom;
	    },

	    setCenter: function setCenter(center) {
	        this.option.center = center;
	    }
	});

	zrUtil.mixin(GeoModel, selectableMixin);

	module.exports = GeoModel;

/***/ },
/* 815 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var MapDraw = __webpack_require__(676);

	module.exports = __webpack_require__(501).extendComponentView({

	    type: 'geo',

	    init: function init(ecModel, api) {
	        var mapDraw = new MapDraw(api, true);
	        this._mapDraw = mapDraw;

	        this.group.add(mapDraw.group);
	    },

	    render: function render(geoModel, ecModel, api, payload) {
	        // Not render if it is an toggleSelect action from self
	        if (payload && payload.type === 'geoToggleSelect' && payload.from === this.uid) {
	            return;
	        }

	        var mapDraw = this._mapDraw;
	        if (geoModel.get('show')) {
	            mapDraw.draw(geoModel, ecModel, api, this, payload);
	        } else {
	            this._mapDraw.group.removeAll();
	        }

	        this.group.silent = geoModel.get('silent');
	    },

	    dispose: function dispose() {
	        this._mapDraw && this._mapDraw.remove();
	    }

	});

/***/ },
/* 816 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Brush component entry
	 */

	__webpack_require__(501).registerPreprocessor(__webpack_require__(817));

	__webpack_require__(818);
	__webpack_require__(822);
	__webpack_require__(823);
	__webpack_require__(824);

	__webpack_require__(825);

/***/ },
/* 817 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file brush preprocessor
	 */

	var zrUtil = __webpack_require__(504);

	var DEFAULT_TOOLBOX_BTNS = ['rect', 'polygon', 'keep', 'clear'];

	module.exports = function (option, isNew) {
	    var brushComponents = option && option.brush;
	    if (!zrUtil.isArray(brushComponents)) {
	        brushComponents = brushComponents ? [brushComponents] : [];
	    }

	    if (!brushComponents.length) {
	        return;
	    }

	    var brushComponentSpecifiedBtns = [];

	    zrUtil.each(brushComponents, function (brushOpt) {
	        var tbs = brushOpt.hasOwnProperty('toolbox') ? brushOpt.toolbox : [];

	        if (tbs instanceof Array) {
	            brushComponentSpecifiedBtns = brushComponentSpecifiedBtns.concat(tbs);
	        }
	    });

	    var toolbox = option && option.toolbox;

	    if (zrUtil.isArray(toolbox)) {
	        toolbox = toolbox[0];
	    }
	    if (!toolbox) {
	        toolbox = { feature: {} };
	        option.toolbox = [toolbox];
	    }

	    var toolboxFeature = toolbox.feature || (toolbox.feature = {});
	    var toolboxBrush = toolboxFeature.brush || (toolboxFeature.brush = {});
	    var brushTypes = toolboxBrush.type || (toolboxBrush.type = []);

	    brushTypes.push.apply(brushTypes, brushComponentSpecifiedBtns);

	    removeDuplicate(brushTypes);

	    if (isNew && !brushTypes.length) {
	        brushTypes.push.apply(brushTypes, DEFAULT_TOOLBOX_BTNS);
	    }
	};

	function removeDuplicate(arr) {
	    var map = {};
	    zrUtil.each(arr, function (val) {
	        map[val] = 1;
	    });
	    arr.length = 0;
	    zrUtil.each(map, function (flag, val) {
	        arr.push(val);
	    });
	}

/***/ },
/* 818 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Brush visual coding.
	 */

	var echarts = __webpack_require__(501);
	var visualSolution = __webpack_require__(819);
	var zrUtil = __webpack_require__(504);
	var BoundingRect = __webpack_require__(509);
	var selector = __webpack_require__(820);
	var throttle = __webpack_require__(581);
	var brushHelper = __webpack_require__(821);

	var STATE_LIST = ['inBrush', 'outOfBrush'];
	var DISPATCH_METHOD = '__ecBrushSelect';
	var DISPATCH_FLAG = '__ecInBrushSelectEvent';
	var PRIORITY_BRUSH = echarts.PRIORITY.VISUAL.BRUSH;

	/**
	 * Layout for visual, the priority higher than other layout, and before brush visual.
	 */
	echarts.registerLayout(PRIORITY_BRUSH, function (ecModel, api, payload) {
	    ecModel.eachComponent({ mainType: 'brush' }, function (brushModel) {

	        payload && payload.type === 'takeGlobalCursor' && brushModel.setBrushOption(payload.key === 'brush' ? payload.brushOption : { brushType: false });

	        brushModel.coordInfoList = brushHelper.makeCoordInfoList(brushModel.option, ecModel);

	        brushHelper.parseInputRanges(brushModel, ecModel);
	    });
	});

	/**
	 * Register the visual encoding if this modules required.
	 */
	echarts.registerVisual(PRIORITY_BRUSH, function (ecModel, api, payload) {

	    var brushSelected = [];
	    var throttleType;
	    var throttleDelay;

	    ecModel.eachComponent({ mainType: 'brush' }, function (brushModel, brushIndex) {

	        var thisBrushSelected = {
	            brushId: brushModel.id,
	            brushIndex: brushIndex,
	            brushName: brushModel.name,
	            areas: zrUtil.clone(brushModel.areas),
	            selected: []
	        };
	        // Every brush component exists in event params, convenient
	        // for user to find by index.
	        brushSelected.push(thisBrushSelected);

	        var brushOption = brushModel.option;
	        var brushLink = brushOption.brushLink;
	        var linkedSeriesMap = [];
	        var selectedDataIndexForLink = [];
	        var rangeInfoBySeries = [];
	        var hasBrushExists = 0;

	        if (!brushIndex) {
	            // Only the first throttle setting works.
	            throttleType = brushOption.throttleType;
	            throttleDelay = brushOption.throttleDelay;
	        }

	        // Add boundingRect and selectors to range.
	        var areas = zrUtil.map(brushModel.areas, function (area) {
	            return bindSelector(zrUtil.defaults({ boundingRect: boundingRectBuilders[area.brushType](area) }, area));
	        });

	        var visualMappings = visualSolution.createVisualMappings(brushModel.option, STATE_LIST, function (mappingOption) {
	            mappingOption.mappingMethod = 'fixed';
	        });

	        zrUtil.isArray(brushLink) && zrUtil.each(brushLink, function (seriesIndex) {
	            linkedSeriesMap[seriesIndex] = 1;
	        });

	        function linkOthers(seriesIndex) {
	            return brushLink === 'all' || linkedSeriesMap[seriesIndex];
	        }

	        // If no supported brush or no brush on the series,
	        // all visuals should be in original state.
	        function brushed(rangeInfoList) {
	            return !!rangeInfoList.length;
	        }

	        /**
	         * Logic for each series: (If the logic has to be modified one day, do it carefully!)
	         *
	         * ( brushed ┬ && ┬hasBrushExist ┬ && linkOthers  ) => StepA: ┬record, ┬ StepB: ┬visualByRecord.
	         *   !brushed┘    ├hasBrushExist ┤                            └nothing,┘        ├visualByRecord.
	         *                └!hasBrushExist┘                                              └nothing.
	         * ( !brushed  && ┬hasBrushExist ┬ && linkOthers  ) => StepA:  nothing,  StepB: ┬visualByRecord.
	         *                └!hasBrushExist┘                                              └nothing.
	         * ( brushed ┬ &&                     !linkOthers ) => StepA:  nothing,  StepB: ┬visualByCheck.
	         *   !brushed┘                                                                  └nothing.
	         * ( !brushed  &&                     !linkOthers ) => StepA:  nothing,  StepB:  nothing.
	         */

	        // Step A
	        ecModel.eachSeries(function (seriesModel, seriesIndex) {
	            var rangeInfoList = rangeInfoBySeries[seriesIndex] = [];

	            seriesModel.subType === 'parallel' ? stepAParallel(seriesModel, seriesIndex, rangeInfoList) : stepAOthers(seriesModel, seriesIndex, rangeInfoList);
	        });

	        function stepAParallel(seriesModel, seriesIndex) {
	            var coordSys = seriesModel.coordinateSystem;
	            hasBrushExists |= coordSys.hasAxisbrushed();

	            linkOthers(seriesIndex) && coordSys.eachActiveState(seriesModel.getData(), function (activeState, dataIndex) {
	                activeState === 'active' && (selectedDataIndexForLink[dataIndex] = 1);
	            });
	        }

	        function stepAOthers(seriesModel, seriesIndex, rangeInfoList) {
	            var selectorsByBrushType = getSelectorsByBrushType(seriesModel);
	            if (!selectorsByBrushType || brushModelNotControll(brushModel, seriesIndex)) {
	                return;
	            }

	            zrUtil.each(areas, function (area) {
	                selectorsByBrushType[area.brushType] && brushHelper.controlSeries(area, brushModel, seriesModel) && rangeInfoList.push(area);
	                hasBrushExists |= brushed(rangeInfoList);
	            });

	            if (linkOthers(seriesIndex) && brushed(rangeInfoList)) {
	                var data = seriesModel.getData();
	                data.each(function (dataIndex) {
	                    if (checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)) {
	                        selectedDataIndexForLink[dataIndex] = 1;
	                    }
	                });
	            }
	        }

	        // Step B
	        ecModel.eachSeries(function (seriesModel, seriesIndex) {
	            var seriesBrushSelected = {
	                seriesId: seriesModel.id,
	                seriesIndex: seriesIndex,
	                seriesName: seriesModel.name,
	                dataIndex: []
	            };
	            // Every series exists in event params, convenient
	            // for user to find series by seriesIndex.
	            thisBrushSelected.selected.push(seriesBrushSelected);

	            var selectorsByBrushType = getSelectorsByBrushType(seriesModel);
	            var rangeInfoList = rangeInfoBySeries[seriesIndex];

	            var data = seriesModel.getData();
	            var getValueState = linkOthers(seriesIndex) ? function (dataIndex) {
	                return selectedDataIndexForLink[dataIndex] ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush') : 'outOfBrush';
	            } : function (dataIndex) {
	                return checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush') : 'outOfBrush';
	            };

	            // If no supported brush or no brush, all visuals are in original state.
	            (linkOthers(seriesIndex) ? hasBrushExists : brushed(rangeInfoList)) && visualSolution.applyVisual(STATE_LIST, visualMappings, data, getValueState);
	        });
	    });

	    dispatchAction(api, throttleType, throttleDelay, brushSelected, payload);
	});

	function dispatchAction(api, throttleType, throttleDelay, brushSelected, payload) {
	    // This event will not be triggered when `setOpion`, otherwise dead lock may
	    // triggered when do `setOption` in event listener, which we do not find
	    // satisfactory way to solve yet. Some considered resolutions:
	    // (a) Diff with prevoius selected data ant only trigger event when changed.
	    // But store previous data and diff precisely (i.e., not only by dataIndex, but
	    // also detect value changes in selected data) might bring complexity or fragility.
	    // (b) Use spectial param like `silent` to suppress event triggering.
	    // But such kind of volatile param may be weird in `setOption`.
	    if (!payload) {
	        return;
	    }

	    var zr = api.getZr();
	    if (zr[DISPATCH_FLAG]) {
	        return;
	    }

	    if (!zr[DISPATCH_METHOD]) {
	        zr[DISPATCH_METHOD] = doDispatch;
	    }

	    var fn = throttle.createOrUpdate(zr, DISPATCH_METHOD, throttleDelay, throttleType);

	    fn(api, brushSelected);
	}

	function doDispatch(api, brushSelected) {
	    if (!api.isDisposed()) {
	        var zr = api.getZr();
	        zr[DISPATCH_FLAG] = true;
	        api.dispatchAction({
	            type: 'brushSelect',
	            batch: brushSelected
	        });
	        zr[DISPATCH_FLAG] = false;
	    }
	}

	function checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) {
	    var itemLayout = data.getItemLayout(dataIndex);
	    for (var i = 0, len = rangeInfoList.length; i < len; i++) {
	        var area = rangeInfoList[i];
	        if (selectorsByBrushType[area.brushType](itemLayout, area.selectors, area)) {
	            return true;
	        }
	    }
	}

	function getSelectorsByBrushType(seriesModel) {
	    var brushSelector = seriesModel.brushSelector;
	    if (zrUtil.isString(brushSelector)) {
	        var sels = [];
	        zrUtil.each(selector, function (selectorsByElementType, brushType) {
	            sels[brushType] = selectorsByElementType[brushSelector];
	        });
	        return sels;
	    } else if (zrUtil.isFunction(brushSelector)) {
	        var bSelector = {};
	        zrUtil.each(selector, function (sel, brushType) {
	            bSelector[brushType] = brushSelector;
	        });
	        return bSelector;
	    }
	    return brushSelector;
	}

	function brushModelNotControll(brushModel, seriesIndex) {
	    var seriesIndices = brushModel.option.seriesIndex;
	    return seriesIndices != null && seriesIndices !== 'all' && (zrUtil.isArray(seriesIndices) ? zrUtil.indexOf(seriesIndices, seriesIndex) < 0 : seriesIndex !== seriesIndices);
	}

	function bindSelector(area) {
	    var selectors = area.selectors = {};
	    zrUtil.each(selector[area.brushType], function (selFn, elType) {
	        // Do not use function binding or curry for performance.
	        selectors[elType] = function (itemLayout) {
	            return selFn(itemLayout, selectors, area);
	        };
	    });
	    return area;
	}

	var boundingRectBuilders = {

	    lineX: zrUtil.noop,

	    lineY: zrUtil.noop,

	    rect: function rect(area) {
	        return getBoundingRectFromMinMax(area.range);
	    },

	    polygon: function polygon(area) {
	        var minMax;
	        var range = area.range;

	        for (var i = 0, len = range.length; i < len; i++) {
	            minMax = minMax || [[Infinity, -Infinity], [Infinity, -Infinity]];
	            var rg = range[i];
	            rg[0] < minMax[0][0] && (minMax[0][0] = rg[0]);
	            rg[0] > minMax[0][1] && (minMax[0][1] = rg[0]);
	            rg[1] < minMax[1][0] && (minMax[1][0] = rg[1]);
	            rg[1] > minMax[1][1] && (minMax[1][1] = rg[1]);
	        }

	        return minMax && getBoundingRectFromMinMax(minMax);
	    }
	};

	function getBoundingRectFromMinMax(minMax) {
	    return new BoundingRect(minMax[0][0], minMax[1][0], minMax[0][1] - minMax[0][0], minMax[1][1] - minMax[1][0]);
	}

/***/ },
/* 819 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Visual solution, for consistent option specification.
	 */

	var zrUtil = __webpack_require__(504);
	var VisualMapping = __webpack_require__(695);
	var each = zrUtil.each;

	function hasKeys(obj) {
	    if (obj) {
	        for (var name in obj) {
	            if (obj.hasOwnProperty(name)) {
	                return true;
	            }
	        }
	    }
	}

	var visualSolution = {

	    /**
	     * @param {Object} option
	     * @param {Array.<string>} stateList
	     * @param {Function} [supplementVisualOption]
	     * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>
	     */
	    createVisualMappings: function createVisualMappings(option, stateList, supplementVisualOption) {
	        var visualMappings = {};

	        each(stateList, function (state) {
	            var mappings = visualMappings[state] = createMappings();

	            each(option[state], function (visualData, visualType) {
	                if (!VisualMapping.isValidType(visualType)) {
	                    return;
	                }
	                var mappingOption = {
	                    type: visualType,
	                    visual: visualData
	                };
	                supplementVisualOption && supplementVisualOption(mappingOption, state);
	                mappings[visualType] = new VisualMapping(mappingOption);

	                // Prepare a alpha for opacity, for some case that opacity
	                // is not supported, such as rendering using gradient color.
	                if (visualType === 'opacity') {
	                    mappingOption = zrUtil.clone(mappingOption);
	                    mappingOption.type = 'colorAlpha';
	                    mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);
	                }
	            });
	        });

	        return visualMappings;

	        function createMappings() {
	            var Creater = function Creater() {};
	            // Make sure hidden fields will not be visited by
	            // object iteration (with hasOwnProperty checking).
	            Creater.prototype.__hidden = Creater.prototype;
	            var obj = new Creater();
	            return obj;
	        }
	    },

	    /**
	     * @param {Object} thisOption
	     * @param {Object} newOption
	     * @param {Array.<string>} keys
	     */
	    replaceVisualOption: function replaceVisualOption(thisOption, newOption, keys) {
	        // Visual attributes merge is not supported, otherwise it
	        // brings overcomplicated merge logic. See #2853. So if
	        // newOption has anyone of these keys, all of these keys
	        // will be reset. Otherwise, all keys remain.
	        var has;
	        zrUtil.each(keys, function (key) {
	            if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	                has = true;
	            }
	        });
	        has && zrUtil.each(keys, function (key) {
	            if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	                thisOption[key] = zrUtil.clone(newOption[key]);
	            } else {
	                delete thisOption[key];
	            }
	        });
	    },

	    /**
	     * @param {Array.<string>} stateList
	     * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>
	     * @param {module:echarts/data/List} list
	     * @param {Function} getValueState param: valueOrIndex, return: state.
	     * @param {object} [scope] Scope for getValueState
	     * @param {string} [dimension] Concrete dimension, if used.
	     */
	    applyVisual: function applyVisual(stateList, visualMappings, data, getValueState, scope, dimension) {
	        var visualTypesMap = {};
	        zrUtil.each(stateList, function (state) {
	            var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
	            visualTypesMap[state] = visualTypes;
	        });

	        var dataIndex;

	        function getVisual(key) {
	            return data.getItemVisual(dataIndex, key);
	        }

	        function setVisual(key, value) {
	            data.setItemVisual(dataIndex, key, value);
	        }

	        if (dimension == null) {
	            data.each(eachItem, true);
	        } else {
	            data.each([dimension], eachItem, true);
	        }

	        function eachItem(valueOrIndex, index) {
	            dataIndex = dimension == null ? valueOrIndex : index;

	            var rawDataItem = data.getRawDataItem(dataIndex);
	            // Consider performance
	            if (rawDataItem && rawDataItem.visualMap === false) {
	                return;
	            }

	            var valueState = getValueState.call(scope, valueOrIndex);
	            var mappings = visualMappings[valueState];
	            var visualTypes = visualTypesMap[valueState];

	            for (var i = 0, len = visualTypes.length; i < len; i++) {
	                var type = visualTypes[i];
	                mappings[type] && mappings[type].applyVisual(valueOrIndex, getVisual, setVisual);
	            }
	        }
	    }
	};

	module.exports = visualSolution;

/***/ },
/* 820 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var polygonContain = __webpack_require__(670).contain;
	var BoundingRect = __webpack_require__(509);

	// Key of the first level is brushType: `line`, `rect`, `polygon`.
	// Key of the second level is chart element type: `point`, `rect`.
	// See moudule:echarts/component/helper/BrushController
	// function param:
	//      {Object} itemLayout fetch from data.getItemLayout(dataIndex)
	//      {Object} selectors {point: selector, rect: selector, ...}
	//      {Object} area {range: [[], [], ..], boudingRect}
	// function return:
	//      {boolean} Whether in the given brush.
	var selector = {
	    lineX: getLineSelectors(0),
	    lineY: getLineSelectors(1),
	    rect: {
	        point: function point(itemLayout, selectors, area) {
	            return area.boundingRect.contain(itemLayout[0], itemLayout[1]);
	        },
	        rect: function rect(itemLayout, selectors, area) {
	            return area.boundingRect.intersect(itemLayout);
	        }
	    },
	    polygon: {
	        point: function point(itemLayout, selectors, area) {
	            return area.boundingRect.contain(itemLayout[0], itemLayout[1]) && polygonContain(area.range, itemLayout[0], itemLayout[1]);
	        },
	        rect: function rect(itemLayout, selectors, area) {
	            // FIXME
	            // 随意写的，没有考察过效率。
	            var points = area.range;

	            if (points.length <= 1) {
	                return false;
	            }

	            var x = itemLayout.x;
	            var y = itemLayout.y;
	            var width = itemLayout.width;
	            var height = itemLayout.height;
	            var p = points[0];

	            if (polygonContain(points, x, y) || polygonContain(points, x + width, y) || polygonContain(points, x, y + height) || polygonContain(points, x + width, y + height) || BoundingRect.create(itemLayout).contain(p[0], p[1]) || lineIntersectPolygon(x, y, x + width, y, points) || lineIntersectPolygon(x, y, x, y + height, points) || lineIntersectPolygon(x + width, y, x + width, y + height, points) || lineIntersectPolygon(x, y + height, x + width, y + height, points)) {
	                return true;
	            }
	        }
	    }
	};

	function getLineSelectors(xyIndex) {
	    var xy = ['x', 'y'];
	    var wh = ['width', 'height'];

	    return {
	        point: function point(itemLayout, selectors, area) {
	            var range = area.range;
	            var p = itemLayout[xyIndex];
	            return inLineRange(p, range);
	        },
	        rect: function rect(itemLayout, selectors, area) {
	            var range = area.range;
	            return inLineRange(itemLayout[xy[xyIndex]], range) || inLineRange(itemLayout[xy[xyIndex]] + itemLayout[wh[xyIndex]], range);
	        }
	    };
	}

	function inLineRange(p, range) {
	    return range[0] <= p && p <= range[1];
	}

	// FIXME
	// 随意写的，没考察过效率。
	function lineIntersectPolygon(lx, ly, l2x, l2y, points) {
	    for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {
	        var p = points[i];
	        if (lineIntersect(lx, ly, l2x, l2y, p[0], p[1], p2[0], p2[1])) {
	            return true;
	        }
	        p2 = p;
	    }
	}

	// Code from <http://blog.csdn.net/rickliuxiao/article/details/6259322> with some fix.
	// See <https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection>
	function lineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
	    var delta = determinant(a2x - a1x, b1x - b2x, a2y - a1y, b1y - b2y);
	    if (nearZero(delta)) {
	        // parallel
	        return false;
	    }
	    var namenda = determinant(b1x - a1x, b1x - b2x, b1y - a1y, b1y - b2y) / delta;
	    if (namenda < 0 || namenda > 1) {
	        return false;
	    }
	    var miu = determinant(a2x - a1x, b1x - a1x, a2y - a1y, b1y - a1y) / delta;
	    if (miu < 0 || miu > 1) {
	        return false;
	    }
	    return true;
	}

	function nearZero(val) {
	    return val <= 1e-6 && val >= -1e-6;
	}

	function determinant(v1, v2, v3, v4) {
	    return v1 * v4 - v2 * v3;
	}

	module.exports = selector;

/***/ },
/* 821 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);

	var each = zrUtil.each;

	var helper = {};

	var COMPONENT_NAMES = ['geo', 'xAxis', 'yAxis'];
	var PANEL_ID_SPLIT = '--';
	var COORD_CONVERTS = ['dataToPoint', 'pointToData'];

	helper.parseOutputRanges = function (areas, coordInfoList, ecModel, rangesCoordInfo) {
	    each(areas, function (area, index) {
	        var panelId = area.panelId;

	        if (panelId) {
	            panelId = panelId.split(PANEL_ID_SPLIT);

	            area[panelId[0] + 'Index'] = +panelId[1];

	            var coordInfo = findCoordInfo(area, coordInfoList);
	            area.coordRange = coordConvert[area.brushType](1, coordInfo, area.range);
	            rangesCoordInfo && (rangesCoordInfo[index] = coordInfo);
	        }
	    });
	};

	helper.parseInputRanges = function (brushModel, ecModel) {
	    each(brushModel.areas, function (area) {
	        var coordInfo = findCoordInfo(area, brushModel.coordInfoList);

	        if (__DEV__) {
	            zrUtil.assert(!coordInfo || coordInfo === true || area.coordRange, 'coordRange must be specified when coord index specified.');
	            zrUtil.assert(!coordInfo || coordInfo !== true || area.range, 'range must be specified.');
	        }

	        area.range = area.range || [];

	        // convert coordRange to global range and set panelId.
	        if (coordInfo && coordInfo !== true) {
	            area.range = coordConvert[area.brushType](0, coordInfo, area.coordRange);
	            area.panelId = coordInfo.panelId;
	        }
	    });
	};

	helper.makePanelOpts = function (coordInfoList) {
	    var panelOpts = [];

	    each(coordInfoList, function (coordInfo) {
	        var coordSys = coordInfo.coordSys;
	        var rect;

	        if (coordInfo.geoIndex >= 0) {
	            rect = coordSys.getBoundingRect().clone();
	            // geo roam and zoom transform
	            rect.applyTransform(graphic.getTransform(coordSys));
	        } else {
	            // xAxis or yAxis
	            // grid is not Transformable.
	            rect = coordSys.grid.getRect().clone();
	        }

	        panelOpts.push({ panelId: coordInfo.panelId, rect: rect });
	    });

	    return panelOpts;
	};

	/**
	 * @param {Object} option {xAxisIndex, yAxisIndex, geoIndex}
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Array.<Obejct>} coordInfoList
	 */
	helper.makeCoordInfoList = function (option, ecModel) {
	    var coordInfoList = [];

	    each(COMPONENT_NAMES, function (componentName) {
	        var componentIndices = option[componentName + 'Index'];
	        if (componentIndices == null || componentIndices === 'none') {
	            return;
	        }
	        if (componentIndices !== 'all' && !zrUtil.isArray(componentIndices)) {
	            componentIndices = [componentIndices];
	        }

	        ecModel.eachComponent({ mainType: componentName }, function (componentModel, index) {
	            if (componentIndices !== 'all' && zrUtil.indexOf(componentIndices, index) < 0) {
	                return;
	            }

	            var grid;
	            var coordSys;

	            componentName === 'xAxis' || componentName === 'yAxis' ? grid = componentModel.axis.grid : coordSys = componentModel.coordinateSystem; // geo

	            var coordInfo;

	            // Check duplicate and find cartesian when tranval to yAxis.
	            for (var i = 0, len = coordInfoList.length; i < len; i++) {
	                var cInfo = coordInfoList[i];
	                if (__DEV__) {
	                    zrUtil.assert(cInfo[componentName + 'Index'] != index, 'Coord should not be defined duplicately: ' + componentName + index);
	                }
	                // CoordSys is always required for `rect brush` or `polygon brush`.
	                // If both xAxisIndex and yAxisIndex specified, fetch cartesian by them.
	                if (componentName === 'yAxis' && !cInfo.yAxis && cInfo.xAxis) {
	                    var aCoordSys = grid.getCartesian(cInfo.xAxisIndex, index);
	                    if (aCoordSys) {
	                        // The yAxis and xAxis are in the same cartesian.
	                        coordSys = aCoordSys;
	                        coordInfo = cInfo;
	                        break;
	                    }
	                }
	            }

	            !coordInfo && coordInfoList.push(coordInfo = {});

	            coordInfo[componentName] = componentModel;
	            coordInfo[componentName + 'Index'] = index;
	            // If both xAxisIndex and yAxisIndex specified, panelId only use yAxisIndex,
	            // which is enough to index panel.
	            coordInfo.panelId = componentName + PANEL_ID_SPLIT + index;
	            coordInfo.coordSys = coordSys
	            // If only xAxisIndex or only yAxisIndex specified, find its first cartesian.
	            || grid.getCartesian(coordInfo.xAxisIndex, coordInfo.yAxisIndex);

	            coordInfo.coordSys ? coordInfoList[componentName + 'Has'] = true : coordInfoList.pop(); // If a coordInfo exists originally, existance of coordSys is ensured.
	        });
	    });

	    return coordInfoList;
	};

	helper.controlSeries = function (area, brushModel, seriesModel) {
	    // Check whether area is bound in coord, and series do not belong to that coord.
	    // If do not do this check, some brush (like lineX) will controll all axes.
	    var coordInfo = findCoordInfo(area, brushModel.coordInfoList);
	    return coordInfo === true || coordInfo && coordInfo.coordSys === seriesModel.coordinateSystem;
	};

	function formatMinMax(minMax) {
	    minMax[0] > minMax[1] && minMax.reverse();
	    return minMax;
	}

	/**
	 * If return Object, a coord found.
	 * If reutrn true, global found.
	 * Otherwise nothing found.
	 *
	 * @param {Object} area {<componentName>Index}
	 * @param {Array} coordInfoList
	 * @return {Obejct|boolean}
	 */
	function findCoordInfo(area, coordInfoList) {
	    var isGlobal = true;
	    for (var j = 0; j < COMPONENT_NAMES.length; j++) {
	        var indexAttr = COMPONENT_NAMES[j] + 'Index';
	        if (area[indexAttr] >= 0) {
	            isGlobal = false;
	            for (var i = 0; i < coordInfoList.length; i++) {
	                if (coordInfoList[i][indexAttr] === area[indexAttr]) {
	                    return coordInfoList[i];
	                }
	            }
	        }
	    }
	    return isGlobal;
	}

	function axisConvert(axisName, to, coordInfo, coordRange) {
	    var axis = coordInfo.coordSys.getAxis(axisName);

	    if (__DEV__) {
	        zrUtil.assert(axis, 'line brush is only available in cartesian (grid).');
	    }

	    return formatMinMax(zrUtil.map([0, 1], function (i) {
	        return to ? axis.coordToData(axis.toLocalCoord(coordRange[i])) : axis.toGlobalCoord(axis.dataToCoord(coordRange[i]));
	    }));
	}

	var coordConvert = {

	    lineX: zrUtil.curry(axisConvert, 'x'),

	    lineY: zrUtil.curry(axisConvert, 'y'),

	    rect: function rect(to, coordInfo, coordRange) {
	        var coordSys = coordInfo.coordSys;
	        var xminymin = coordSys[COORD_CONVERTS[to]]([coordRange[0][0], coordRange[1][0]]);
	        var xmaxymax = coordSys[COORD_CONVERTS[to]]([coordRange[0][1], coordRange[1][1]]);
	        return [formatMinMax([xminymin[0], xmaxymax[0]]), formatMinMax([xminymin[1], xmaxymax[1]])];
	    },

	    polygon: function polygon(to, coordInfo, coordRange) {
	        var coordSys = coordInfo.coordSys;
	        return zrUtil.map(coordRange, coordSys[COORD_CONVERTS[to]], coordSys);
	    }
	};

	module.exports = helper;

/***/ },
/* 822 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Brush model
	 */

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);
	var visualSolution = __webpack_require__(819);
	var Model = __webpack_require__(512);

	var DEFAULT_OUT_OF_BRUSH_COLOR = ['#ddd'];

	var BrushModel = echarts.extendComponentModel({

	    type: 'brush',

	    dependencies: ['geo', 'grid', 'xAxis', 'yAxis', 'parallel', 'series'],

	    /**
	     * @protected
	     */
	    defaultOption: {
	        // inBrush: null,
	        // outOfBrush: null,
	        toolbox: null, // Default value see preprocessor.
	        brushLink: null, // Series indices array, broadcast using dataIndex.
	        // or 'all', which means all series. 'none' or null means no series.
	        seriesIndex: 'all', // seriesIndex array, specify series controlled by this brush component.
	        geoIndex: null, //
	        xAxisIndex: null,
	        yAxisIndex: null,

	        brushType: 'rect', // Default brushType, see BrushController.
	        brushMode: 'single', // Default brushMode, 'single' or 'multiple'
	        transformable: true, // Default transformable.
	        brushStyle: { // Default brushStyle
	            borderWidth: 1,
	            color: 'rgba(120,140,180,0.3)',
	            borderColor: 'rgba(120,140,180,0.8)',
	            width: null // do not use bursh width in line brush, but fetch from grid.
	        },

	        throttleType: 'fixRate', // Throttle in brushSelected event. 'fixRate' or 'debounce'.
	        // If null, no throttle. Valid only in the first brush component
	        throttleDelay: 0, // Unit: ms, 0 means every event will be triggered.

	        // FIXME
	        // 试验效果
	        removeOnClick: true
	    },

	    /**
	     * @readOnly
	     * @type {Array.<Object>}
	     */
	    areas: [],

	    /**
	     * Current activated brush type.
	     * If null, brush is inactived.
	     * see module:echarts/component/helper/BrushController
	     * @readOnly
	     * @type {string}
	     */
	    brushType: null,

	    /**
	     * Current brush opt.
	     * see module:echarts/component/helper/BrushController
	     * @readOnly
	     * @type {Object}
	     */
	    brushOption: {},

	    /**
	     * @readOnly
	     * @type {Array.<Object>}
	     */
	    coordInfoList: [],

	    optionUpdated: function optionUpdated(newOption, isInit) {
	        var thisOption = this.option;

	        !isInit && visualSolution.replaceVisualOption(thisOption, newOption, ['inBrush', 'outOfBrush']);

	        thisOption.inBrush = thisOption.inBrush || {};
	        // Always give default visual, consider setOption at the second time.
	        thisOption.outOfBrush = thisOption.outOfBrush || { color: DEFAULT_OUT_OF_BRUSH_COLOR };
	    },

	    /**
	     * If ranges is null/undefined, range state remain.
	     *
	     * @param {Array.<Object>} [ranges]
	     */
	    setAreas: function setAreas(areas) {
	        if (__DEV__) {
	            zrUtil.assert(zrUtil.isArray(areas));
	            zrUtil.each(areas, function (area) {
	                zrUtil.assert(area.brushType, 'Illegal areas');
	            });
	        }

	        // If ranges is null/undefined, range state remain.
	        // This helps user to dispatchAction({type: 'brush'}) with no areas
	        // set but just want to get the current brush select info from a `brush` event.
	        if (!areas) {
	            return;
	        }

	        this.areas = zrUtil.map(areas, function (area) {
	            return this._mergeBrushOption(area);
	        }, this);
	    },

	    /**
	     * see module:echarts/component/helper/BrushController
	     * @param {Object} brushOption
	     */
	    setBrushOption: function setBrushOption(brushOption) {
	        this.brushOption = this._mergeBrushOption(brushOption);
	        this.brushType = this.brushOption.brushType;
	    },

	    /**
	     * @private
	     */
	    _mergeBrushOption: function _mergeBrushOption(brushOption) {
	        var option = this.option;
	        return zrUtil.merge({
	            brushType: option.brushType,
	            brushMode: option.brushMode,
	            transformable: option.transformable,
	            brushStyle: new Model(option.brushStyle).getItemStyle(),
	            removeOnClick: option.removeOnClick
	        }, brushOption, true);
	    }

	});

	module.exports = BrushModel;

/***/ },
/* 823 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var BrushController = __webpack_require__(736);
	var echarts = __webpack_require__(501);
	var brushHelper = __webpack_require__(821);

	module.exports = echarts.extendComponentView({

	  type: 'brush',

	  init: function init(ecModel, api) {

	    /**
	     * @readOnly
	     * @type {module:echarts/model/Global}
	     */
	    this.ecModel = ecModel;

	    /**
	     * @readOnly
	     * @type {module:echarts/ExtensionAPI}
	     */
	    this.api = api;

	    /**
	     * @readOnly
	     * @type {module:echarts/component/brush/BrushModel}
	     */
	    this.model;

	    /**
	     * @private
	     * @type {module:echarts/component/helper/BrushController}
	     */
	    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();
	  },

	  /**
	   * @override
	   */
	  render: function render(brushModel) {
	    this.model = brushModel;
	    return updateController.apply(this, arguments);
	  },

	  /**
	   * @override
	   */
	  updateView: updateController,

	  /**
	   * @override
	   */
	  updateLayout: updateController,

	  /**
	   * @override
	   */
	  updateVisual: updateController,

	  /**
	   * @override
	   */
	  dispose: function dispose() {
	    this._brushController.dispose();
	  },

	  /**
	   * @private
	   */
	  _onBrush: function _onBrush(areas, opt) {
	    var modelId = this.model.id;

	    brushHelper.parseOutputRanges(areas, this.model.coordInfoList, this.ecModel);

	    // Action is not dispatched on drag end, because the drag end
	    // emits the same params with the last drag move event, and
	    // may have some delay when using touch pad, which makes
	    // animation not smooth (when using debounce).
	    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({
	      type: 'brush',
	      brushId: modelId,
	      areas: zrUtil.clone(areas),
	      $from: modelId
	    });
	  }

	});

	function updateController(brushModel, ecModel, api, payload) {
	  // Do not update controller when drawing.
	  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushHelper.makePanelOpts(brushModel.coordInfoList)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());
	}

/***/ },
/* 824 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Brush action
	 */

	var echarts = __webpack_require__(501);

	/**
	 * payload: {
	 *      brushIndex: number, or,
	 *      brushId: string, or,
	 *      brushName: string,
	 *      globalRanges: Array
	 * }
	 */
	echarts.registerAction({ type: 'brush', event: 'brush', update: 'updateView' }, function (payload, ecModel) {
	  ecModel.eachComponent({ mainType: 'brush', query: payload }, function (brushModel) {
	    brushModel.setAreas(payload.areas);
	  });
	});

	/**
	 * payload: {
	 *      brushComponents: [
	 *          {
	 *              brushId,
	 *              brushIndex,
	 *              brushName,
	 *              series: [
	 *                  {
	 *                      seriesId,
	 *                      seriesIndex,
	 *                      seriesName,
	 *                      rawIndices: [21, 34, ...]
	 *                  },
	 *                  ...
	 *              ]
	 *          },
	 *          ...
	 *      ]
	 * }
	 */
	echarts.registerAction({ type: 'brushSelect', event: 'brushSelected', update: 'none' }, function () {});

/***/ },
/* 825 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var featureManager = __webpack_require__(826);
	var zrUtil = __webpack_require__(504);

	function Brush(model, ecModel, api) {
	    this.model = model;
	    this.ecModel = ecModel;
	    this.api = api;

	    /**
	     * @private
	     * @type {string}
	     */
	    this._brushType;

	    /**
	     * @private
	     * @type {string}
	     */
	    this._brushMode;
	}

	Brush.defaultOption = {
	    show: true,
	    type: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
	    icon: {
	        rect: 'M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13', // jshint ignore:line
	        polygon: 'M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2', // jshint ignore:line
	        lineX: 'M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4', // jshint ignore:line
	        lineY: 'M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4', // jshint ignore:line
	        keep: 'M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z', // jshint ignore:line
	        clear: 'M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2' // jshint ignore:line
	    },
	    title: {
	        rect: '矩形选择',
	        polygon: '圈选',
	        lineX: '横向选择',
	        lineY: '纵向选择',
	        keep: '保持选择',
	        clear: '清除选择'
	    }
	};

	var proto = Brush.prototype;

	proto.render = proto.updateView = proto.updateLayout = function (featureModel, ecModel, api) {
	    var brushType;
	    var brushMode;
	    var isBrushed;

	    ecModel.eachComponent({ mainType: 'brush' }, function (brushModel) {
	        brushType = brushModel.brushType;
	        brushMode = brushModel.brushOption.brushMode || 'single';
	        isBrushed |= brushModel.areas.length;
	    });
	    this._brushType = brushType;
	    this._brushMode = brushMode;

	    zrUtil.each(featureModel.get('type', true), function (type) {
	        featureModel.setIconStatus(type, (type === 'keep' ? brushMode === 'multiple' : type === 'clear' ? isBrushed : type === brushType) ? 'emphasis' : 'normal');
	    });
	};

	proto.getIcons = function () {
	    var model = this.model;
	    var availableIcons = model.get('icon', true);
	    var icons = {};
	    zrUtil.each(model.get('type', true), function (type) {
	        if (availableIcons[type]) {
	            icons[type] = availableIcons[type];
	        }
	    });
	    return icons;
	};

	proto.onclick = function (ecModel, api, type) {
	    var api = this.api;
	    var brushType = this._brushType;
	    var brushMode = this._brushMode;

	    if (type === 'clear') {
	        api.dispatchAction({
	            type: 'brush',
	            // Clear all areas of all brush components.
	            areas: []
	        });
	    } else {
	        api.dispatchAction({
	            type: 'takeGlobalCursor',
	            key: 'brush',
	            brushOption: {
	                brushType: type === 'keep' ? brushType : brushType === type ? false : type,
	                brushMode: type === 'keep' ? brushMode === 'multiple' ? 'single' : 'multiple' : brushMode
	            }
	        });
	    }
	};

	featureManager.register('brush', Brush);

	module.exports = Brush;

/***/ },
/* 826 */
/***/ function(module, exports) {

	'use strict';

	var features = {};

	module.exports = {
	    register: function register(name, ctor) {
	        features[name] = ctor;
	    },

	    get: function get(name) {
	        return features[name];
	    }
	};

/***/ },
/* 827 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var echarts = __webpack_require__(501);
	var graphic = __webpack_require__(543);
	var layout = __webpack_require__(521);

	// Model
	echarts.extendComponentModel({

	    type: 'title',

	    layoutMode: { type: 'box', ignoreSize: true },

	    defaultOption: {
	        // 一级层叠
	        zlevel: 0,
	        // 二级层叠
	        z: 6,
	        show: true,

	        text: '',
	        // 超链接跳转
	        // link: null,
	        // 仅支持self | blank
	        target: 'blank',
	        subtext: '',

	        // 超链接跳转
	        // sublink: null,
	        // 仅支持self | blank
	        subtarget: 'blank',

	        // 'center' ¦ 'left' ¦ 'right'
	        // ¦ {number}（x坐标，单位px）
	        left: 0,
	        // 'top' ¦ 'bottom' ¦ 'center'
	        // ¦ {number}（y坐标，单位px）
	        top: 0,

	        // 水平对齐
	        // 'auto' | 'left' | 'right' | 'center'
	        // 默认根据 left 的位置判断是左对齐还是右对齐
	        // textAlign: null
	        //
	        // 垂直对齐
	        // 'auto' | 'top' | 'bottom' | 'middle'
	        // 默认根据 top 位置判断是上对齐还是下对齐
	        // textBaseline: null

	        backgroundColor: 'rgba(0,0,0,0)',

	        // 标题边框颜色
	        borderColor: '#ccc',

	        // 标题边框线宽，单位px，默认为0（无边框）
	        borderWidth: 0,

	        // 标题内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        padding: 5,

	        // 主副标题纵向间隔，单位px，默认为10，
	        itemGap: 10,
	        textStyle: {
	            fontSize: 18,
	            fontWeight: 'bolder',
	            color: '#333'
	        },
	        subtextStyle: {
	            color: '#aaa'
	        }
	    }
	});

	// View
	echarts.extendComponentView({

	    type: 'title',

	    render: function render(titleModel, ecModel, api) {
	        this.group.removeAll();

	        if (!titleModel.get('show')) {
	            return;
	        }

	        var group = this.group;

	        var textStyleModel = titleModel.getModel('textStyle');
	        var subtextStyleModel = titleModel.getModel('subtextStyle');

	        var textAlign = titleModel.get('textAlign');
	        var textBaseline = titleModel.get('textBaseline');

	        var textEl = new graphic.Text({
	            style: {
	                text: titleModel.get('text'),
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            },
	            z2: 10
	        });

	        var textRect = textEl.getBoundingRect();

	        var subText = titleModel.get('subtext');
	        var subTextEl = new graphic.Text({
	            style: {
	                text: subText,
	                textFont: subtextStyleModel.getFont(),
	                fill: subtextStyleModel.getTextColor(),
	                y: textRect.height + titleModel.get('itemGap'),
	                textBaseline: 'top'
	            },
	            z2: 10
	        });

	        var link = titleModel.get('link');
	        var sublink = titleModel.get('sublink');

	        textEl.silent = !link;
	        subTextEl.silent = !sublink;

	        if (link) {
	            textEl.on('click', function () {
	                window.open(link, '_' + titleModel.get('target'));
	            });
	        }
	        if (sublink) {
	            subTextEl.on('click', function () {
	                window.open(sublink, '_' + titleModel.get('subtarget'));
	            });
	        }

	        group.add(textEl);
	        subText && group.add(subTextEl);
	        // If no subText, but add subTextEl, there will be an empty line.

	        var groupRect = group.getBoundingRect();
	        var layoutOption = titleModel.getBoxLayoutParams();
	        layoutOption.width = groupRect.width;
	        layoutOption.height = groupRect.height;
	        var layoutRect = layout.getLayoutRect(layoutOption, {
	            width: api.getWidth(),
	            height: api.getHeight()
	        }, titleModel.get('padding'));
	        // Adjust text align based on position
	        if (!textAlign) {
	            // Align left if title is on the left. center and right is same
	            textAlign = titleModel.get('left') || titleModel.get('right');
	            if (textAlign === 'middle') {
	                textAlign = 'center';
	            }
	            // Adjust layout by text align
	            if (textAlign === 'right') {
	                layoutRect.x += layoutRect.width;
	            } else if (textAlign === 'center') {
	                layoutRect.x += layoutRect.width / 2;
	            }
	        }
	        if (!textBaseline) {
	            textBaseline = titleModel.get('top') || titleModel.get('bottom');
	            if (textBaseline === 'center') {
	                textBaseline = 'middle';
	            }
	            if (textBaseline === 'bottom') {
	                layoutRect.y += layoutRect.height;
	            } else if (textBaseline === 'middle') {
	                layoutRect.y += layoutRect.height / 2;
	            }

	            textBaseline = textBaseline || 'top';
	        }

	        group.attr('position', [layoutRect.x, layoutRect.y]);
	        var alignStyle = {
	            textAlign: textAlign,
	            textVerticalAlign: textBaseline
	        };
	        textEl.setStyle(alignStyle);
	        subTextEl.setStyle(alignStyle);

	        // Render background
	        // Get groupRect again because textAlign has been changed
	        groupRect = group.getBoundingRect();
	        var padding = layoutRect.margin;
	        var style = titleModel.getItemStyle(['color', 'opacity']);
	        style.fill = titleModel.get('backgroundColor');
	        var rect = new graphic.Rect({
	            shape: {
	                x: groupRect.x - padding[3],
	                y: groupRect.y - padding[0],
	                width: groupRect.width + padding[1] + padding[3],
	                height: groupRect.height + padding[0] + padding[2]
	            },
	            style: style,
	            silent: true
	        });
	        graphic.subPixelOptimizeRect(rect);

	        group.add(rect);
	    }
	});

/***/ },
/* 828 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * DataZoom component entry
	 */

	__webpack_require__(829);

	__webpack_require__(830);
	__webpack_require__(833);

	__webpack_require__(834);
	__webpack_require__(835);

	__webpack_require__(837);
	__webpack_require__(838);

	__webpack_require__(840);
	__webpack_require__(841);

/***/ },
/* 829 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(519).registerSubTypeDefaulter('dataZoom', function (option) {
	    // Default 'slider' when no type specified.
	    return 'slider';
	});

/***/ },
/* 830 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data zoom model
	 */

	var zrUtil = __webpack_require__(504);
	var env = __webpack_require__(502);
	var echarts = __webpack_require__(501);
	var modelUtil = __webpack_require__(505);
	var helper = __webpack_require__(831);
	var AxisProxy = __webpack_require__(832);
	var each = zrUtil.each;
	var eachAxisDim = helper.eachAxisDim;

	var DataZoomModel = echarts.extendComponentModel({

	    type: 'dataZoom',

	    dependencies: ['xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'],

	    /**
	     * @protected
	     */
	    defaultOption: {
	        zlevel: 0,
	        z: 4, // Higher than normal component (z: 2).
	        orient: null, // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
	        xAxisIndex: null, // Default the first horizontal category axis.
	        yAxisIndex: null, // Default the first vertical category axis.

	        filterMode: 'filter', // Possible values: 'filter' or 'empty'.
	        // 'filter': data items which are out of window will be removed.
	        //           This option is applicable when filtering outliers.
	        // 'empty': data items which are out of window will be set to empty.
	        //          This option is applicable when user should not neglect
	        //          that there are some data items out of window.
	        // Taking line chart as an example, line will be broken in
	        // the filtered points when filterModel is set to 'empty', but
	        // be connected when set to 'filter'.

	        throttle: null, // Dispatch action by the fixed rate, avoid frequency.
	        // default 100. Do not throttle when use null/undefined.
	        // If animation === true and animationDurationUpdate > 0,
	        // default value is 100, otherwise 20.
	        start: 0, // Start percent. 0 ~ 100
	        end: 100, // End percent. 0 ~ 100
	        startValue: null, // Start value. If startValue specified, start is ignored.
	        endValue: null // End value. If endValue specified, end is ignored.
	    },

	    /**
	     * @override
	     */
	    init: function init(option, parentModel, ecModel) {

	        /**
	         * key like x_0, y_1
	         * @private
	         * @type {Object}
	         */
	        this._dataIntervalByAxis = {};

	        /**
	         * @private
	         */
	        this._dataInfo = {};

	        /**
	         * key like x_0, y_1
	         * @private
	         */
	        this._axisProxies = {};

	        /**
	         * @readOnly
	         */
	        this.textStyleModel;

	        /**
	         * @private
	         */
	        this._autoThrottle = true;

	        var rawOption = retrieveRaw(option);

	        this.mergeDefaultAndTheme(option, ecModel);

	        this.doInit(rawOption);
	    },

	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(newOption) {
	        var rawOption = retrieveRaw(newOption);

	        //FIX #2591
	        zrUtil.merge(this.option, newOption, true);

	        this.doInit(rawOption);
	    },

	    /**
	     * @protected
	     */
	    doInit: function doInit(rawOption) {
	        var thisOption = this.option;

	        // Disable realtime view update if canvas is not supported.
	        if (!env.canvasSupported) {
	            thisOption.realtime = false;
	        }

	        this._setDefaultThrottle(rawOption);

	        processRangeProp('start', 'startValue', rawOption, thisOption);
	        processRangeProp('end', 'endValue', rawOption, thisOption);

	        this.textStyleModel = this.getModel('textStyle');

	        this._resetTarget();

	        this._giveAxisProxies();
	    },

	    /**
	     * @private
	     */
	    _giveAxisProxies: function _giveAxisProxies() {
	        var axisProxies = this._axisProxies;

	        this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
	            var axisModel = this.dependentModels[dimNames.axis][axisIndex];

	            // If exists, share axisProxy with other dataZoomModels.
	            var axisProxy = axisModel.__dzAxisProxy || (
	            // Use the first dataZoomModel as the main model of axisProxy.
	            axisModel.__dzAxisProxy = new AxisProxy(dimNames.name, axisIndex, this, ecModel));
	            // FIXME
	            // dispose __dzAxisProxy

	            axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
	        }, this);
	    },

	    /**
	     * @private
	     */
	    _resetTarget: function _resetTarget() {
	        var thisOption = this.option;

	        var autoMode = this._judgeAutoMode();

	        eachAxisDim(function (dimNames) {
	            var axisIndexName = dimNames.axisIndex;
	            thisOption[axisIndexName] = modelUtil.normalizeToArray(thisOption[axisIndexName]);
	        }, this);

	        if (autoMode === 'axisIndex') {
	            this._autoSetAxisIndex();
	        } else if (autoMode === 'orient') {
	            this._autoSetOrient();
	        }
	    },

	    /**
	     * @private
	     */
	    _judgeAutoMode: function _judgeAutoMode() {
	        // Auto set only works for setOption at the first time.
	        // The following is user's reponsibility. So using merged
	        // option is OK.
	        var thisOption = this.option;

	        var hasIndexSpecified = false;
	        eachAxisDim(function (dimNames) {
	            // When user set axisIndex as a empty array, we think that user specify axisIndex
	            // but do not want use auto mode. Because empty array may be encountered when
	            // some error occured.
	            if (thisOption[dimNames.axisIndex] != null) {
	                hasIndexSpecified = true;
	            }
	        }, this);

	        var orient = thisOption.orient;

	        if (orient == null && hasIndexSpecified) {
	            return 'orient';
	        } else if (!hasIndexSpecified) {
	            if (orient == null) {
	                thisOption.orient = 'horizontal';
	            }
	            return 'axisIndex';
	        }
	    },

	    /**
	     * @private
	     */
	    _autoSetAxisIndex: function _autoSetAxisIndex() {
	        var autoAxisIndex = true;
	        var orient = this.get('orient', true);
	        var thisOption = this.option;
	        var dependentModels = this.dependentModels;

	        if (autoAxisIndex) {
	            // Find axis that parallel to dataZoom as default.
	            var dimName = orient === 'vertical' ? 'y' : 'x';

	            if (dependentModels[dimName + 'Axis'].length) {
	                thisOption[dimName + 'AxisIndex'] = [0];
	                autoAxisIndex = false;
	            } else {
	                each(dependentModels.singleAxis, function (singleAxisModel) {
	                    if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {
	                        thisOption.singleAxisIndex = [singleAxisModel.componentIndex];
	                        autoAxisIndex = false;
	                    }
	                });
	            }
	        }

	        if (autoAxisIndex) {
	            // Find the first category axis as default. (consider polar)
	            eachAxisDim(function (dimNames) {
	                if (!autoAxisIndex) {
	                    return;
	                }
	                var axisIndices = [];
	                var axisModels = this.dependentModels[dimNames.axis];
	                if (axisModels.length && !axisIndices.length) {
	                    for (var i = 0, len = axisModels.length; i < len; i++) {
	                        if (axisModels[i].get('type') === 'category') {
	                            axisIndices.push(i);
	                        }
	                    }
	                }
	                thisOption[dimNames.axisIndex] = axisIndices;
	                if (axisIndices.length) {
	                    autoAxisIndex = false;
	                }
	            }, this);
	        }

	        if (autoAxisIndex) {
	            // FIXME
	            // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
	            // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？

	            // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
	            // dataZoom component auto adopts series that reference to
	            // both xAxis and yAxis which type is 'value'.
	            this.ecModel.eachSeries(function (seriesModel) {
	                if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
	                    eachAxisDim(function (dimNames) {
	                        var axisIndices = thisOption[dimNames.axisIndex];

	                        var axisIndex = seriesModel.get(dimNames.axisIndex);
	                        var axisId = seriesModel.get(dimNames.axisId);

	                        var axisModel = seriesModel.ecModel.queryComponents({
	                            mainType: dimNames.axis,
	                            index: axisIndex,
	                            id: axisId
	                        })[0];

	                        if (__DEV__) {
	                            if (!axisModel) {
	                                throw new Error(dimNames.axis + ' "' + zrUtil.retrieve(axisIndex, axisId, 0) + '" not found');
	                            }
	                        }
	                        axisIndex = axisModel.componentIndex;

	                        if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
	                            axisIndices.push(axisIndex);
	                        }
	                    });
	                }
	            }, this);
	        }
	    },

	    /**
	     * @private
	     */
	    _autoSetOrient: function _autoSetOrient() {
	        var dim;

	        // Find the first axis
	        this.eachTargetAxis(function (dimNames) {
	            !dim && (dim = dimNames.name);
	        }, this);

	        this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
	    },

	    /**
	     * @private
	     */
	    _isSeriesHasAllAxesTypeOf: function _isSeriesHasAllAxesTypeOf(seriesModel, axisType) {
	        // FIXME
	        // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
	        // 例如series.type === scatter时。

	        var is = true;
	        eachAxisDim(function (dimNames) {
	            var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
	            var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];

	            if (!axisModel || axisModel.get('type') !== axisType) {
	                is = false;
	            }
	        }, this);
	        return is;
	    },

	    /**
	     * @private
	     */
	    _setDefaultThrottle: function _setDefaultThrottle(rawOption) {
	        // When first time user set throttle, auto throttle ends.
	        if (rawOption.hasOwnProperty('throttle')) {
	            this._autoThrottle = false;
	        }
	        if (this._autoThrottle) {
	            var globalOption = this.ecModel.option;
	            this.option.throttle = globalOption.animation && globalOption.animationDurationUpdate > 0 ? 100 : 20;
	        }
	    },

	    /**
	     * @public
	     */
	    getFirstTargetAxisModel: function getFirstTargetAxisModel() {
	        var firstAxisModel;
	        eachAxisDim(function (dimNames) {
	            if (firstAxisModel == null) {
	                var indices = this.get(dimNames.axisIndex);
	                if (indices.length) {
	                    firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
	                }
	            }
	        }, this);

	        return firstAxisModel;
	    },

	    /**
	     * @public
	     * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
	     */
	    eachTargetAxis: function eachTargetAxis(callback, context) {
	        var ecModel = this.ecModel;
	        eachAxisDim(function (dimNames) {
	            each(this.get(dimNames.axisIndex), function (axisIndex) {
	                callback.call(context, dimNames, axisIndex, this, ecModel);
	            }, this);
	        }, this);
	    },

	    getAxisProxy: function getAxisProxy(dimName, axisIndex) {
	        return this._axisProxies[dimName + '_' + axisIndex];
	    },

	    /**
	     * If not specified, set to undefined.
	     *
	     * @public
	     * @param {Object} opt
	     * @param {number} [opt.start]
	     * @param {number} [opt.end]
	     * @param {number} [opt.startValue]
	     * @param {number} [opt.endValue]
	     */
	    setRawRange: function setRawRange(opt) {
	        each(['start', 'end', 'startValue', 'endValue'], function (name) {
	            // If any of those prop is null/undefined, we should alos set
	            // them, because only one pair between start/end and
	            // startValue/endValue can work.
	            this.option[name] = opt[name];
	        }, this);
	    },

	    /**
	     * @public
	     * @return {Array.<number>} [startPercent, endPercent]
	     */
	    getPercentRange: function getPercentRange() {
	        var axisProxy = this.findRepresentativeAxisProxy();
	        if (axisProxy) {
	            return axisProxy.getDataPercentWindow();
	        }
	    },

	    /**
	     * @public
	     * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
	     *
	     * @param {string} [axisDimName]
	     * @param {number} [axisIndex]
	     * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.
	     */
	    getValueRange: function getValueRange(axisDimName, axisIndex) {
	        if (axisDimName == null && axisIndex == null) {
	            var axisProxy = this.findRepresentativeAxisProxy();
	            if (axisProxy) {
	                return axisProxy.getDataValueWindow();
	            }
	        } else {
	            return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
	        }
	    },

	    /**
	     * @public
	     * @return {module:echarts/component/dataZoom/AxisProxy}
	     */
	    findRepresentativeAxisProxy: function findRepresentativeAxisProxy() {
	        // Find the first hosted axisProxy
	        var axisProxies = this._axisProxies;
	        for (var key in axisProxies) {
	            if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
	                return axisProxies[key];
	            }
	        }

	        // If no hosted axis find not hosted axisProxy.
	        // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
	        // and the option.start or option.end settings are different. The percentRange
	        // should follow axisProxy.
	        // (We encounter this problem in toolbox data zoom.)
	        for (var key in axisProxies) {
	            if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
	                return axisProxies[key];
	            }
	        }
	    }

	});

	function retrieveRaw(option) {
	    var ret = {};
	    each(['start', 'end', 'startValue', 'endValue', 'throttle'], function (name) {
	        option.hasOwnProperty(name) && (ret[name] = option[name]);
	    });
	    return ret;
	}

	function processRangeProp(percentProp, valueProp, rawOption, thisOption) {
	    // start/end has higher priority over startValue/endValue,
	    // but we should make chart.setOption({endValue: 1000}) effective,
	    // rather than chart.setOption({endValue: 1000, end: null}).
	    if (rawOption[valueProp] != null && rawOption[percentProp] == null) {
	        thisOption[percentProp] = null;
	    }
	    // Otherwise do nothing and use the merge result.
	}

	module.exports = DataZoomModel;

/***/ },
/* 831 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var formatUtil = __webpack_require__(506);
	var zrUtil = __webpack_require__(504);

	var helper = {};

	var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];
	// Supported coords.
	var COORDS = ['cartesian2d', 'polar', 'singleAxis'];

	/**
	 * @param {string} coordType
	 * @return {boolean}
	 */
	helper.isCoordSupported = function (coordType) {
	    return zrUtil.indexOf(COORDS, coordType) >= 0;
	};

	/**
	 * Create "each" method to iterate names.
	 *
	 * @pubilc
	 * @param  {Array.<string>} names
	 * @param  {Array.<string>=} attrs
	 * @return {Function}
	 */
	helper.createNameEach = function (names, attrs) {
	    names = names.slice();
	    var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);
	    attrs = (attrs || []).slice();
	    var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);

	    return function (callback, context) {
	        zrUtil.each(names, function (name, index) {
	            var nameObj = { name: name, capital: capitalNames[index] };

	            for (var j = 0; j < attrs.length; j++) {
	                nameObj[attrs[j]] = name + capitalAttrs[j];
	            }

	            callback.call(context, nameObj);
	        });
	    };
	};

	/**
	 * Iterate each dimension name.
	 *
	 * @public
	 * @param {Function} callback The parameter is like:
	 *                            {
	 *                                name: 'angle',
	 *                                capital: 'Angle',
	 *                                axis: 'angleAxis',
	 *                                axisIndex: 'angleAixs',
	 *                                index: 'angleIndex'
	 *                            }
	 * @param {Object} context
	 */
	helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);

	/**
	 * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	 * dataZoomModels and 'links' make up one or more graphics.
	 * This function finds the graphic where the source dataZoomModel is in.
	 *
	 * @public
	 * @param {Function} forEachNode Node iterator.
	 * @param {Function} forEachEdgeType edgeType iterator
	 * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	 * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	 */
	helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {

	    return function (sourceNode) {
	        var result = {
	            nodes: [],
	            records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).
	        };

	        forEachEdgeType(function (edgeType) {
	            result.records[edgeType.name] = {};
	        });

	        if (!sourceNode) {
	            return result;
	        }

	        absorb(sourceNode, result);

	        var existsLink;
	        do {
	            existsLink = false;
	            forEachNode(processSingleNode);
	        } while (existsLink);

	        function processSingleNode(node) {
	            if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	                absorb(node, result);
	                existsLink = true;
	            }
	        }

	        return result;
	    };

	    function isNodeAbsorded(node, result) {
	        return zrUtil.indexOf(result.nodes, node) >= 0;
	    }

	    function isLinked(node, result) {
	        var hasLink = false;
	        forEachEdgeType(function (edgeType) {
	            zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                result.records[edgeType.name][edgeId] && (hasLink = true);
	            });
	        });
	        return hasLink;
	    }

	    function absorb(node, result) {
	        result.nodes.push(node);
	        forEachEdgeType(function (edgeType) {
	            zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                result.records[edgeType.name][edgeId] = true;
	            });
	        });
	    }
	};

	module.exports = helper;

/***/ },
/* 832 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Axis operator
	 */

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var helper = __webpack_require__(831);
	var each = zrUtil.each;
	var asc = numberUtil.asc;

	/**
	 * Operate single axis.
	 * One axis can only operated by one axis operator.
	 * Different dataZoomModels may be defined to operate the same axis.
	 * (i.e. 'inside' data zoom and 'slider' data zoom components)
	 * So dataZoomModels share one axisProxy in that case.
	 *
	 * @class
	 */
	var AxisProxy = function AxisProxy(dimName, axisIndex, dataZoomModel, ecModel) {

	    /**
	     * @private
	     * @type {string}
	     */
	    this._dimName = dimName;

	    /**
	     * @private
	     */
	    this._axisIndex = axisIndex;

	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._valueWindow;

	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._percentWindow;

	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._dataExtent;

	    /**
	     * @readOnly
	     * @type {module: echarts/model/Global}
	     */
	    this.ecModel = ecModel;

	    /**
	     * @private
	     * @type {module: echarts/component/dataZoom/DataZoomModel}
	     */
	    this._dataZoomModel = dataZoomModel;
	};

	AxisProxy.prototype = {

	    constructor: AxisProxy,

	    /**
	     * Whether the axisProxy is hosted by dataZoomModel.
	     *
	     * @public
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     * @return {boolean}
	     */
	    hostedBy: function hostedBy(dataZoomModel) {
	        return this._dataZoomModel === dataZoomModel;
	    },

	    /**
	     * @return {Array.<number>} Value can only be NaN or finite value.
	     */
	    getDataValueWindow: function getDataValueWindow() {
	        return this._valueWindow.slice();
	    },

	    /**
	     * @return {Array.<number>}
	     */
	    getDataPercentWindow: function getDataPercentWindow() {
	        return this._percentWindow.slice();
	    },

	    /**
	     * @public
	     * @param {number} axisIndex
	     * @return {Array} seriesModels
	     */
	    getTargetSeriesModels: function getTargetSeriesModels() {
	        var seriesModels = [];
	        var ecModel = this.ecModel;

	        ecModel.eachSeries(function (seriesModel) {
	            if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {
	                var dimName = this._dimName;
	                var axisModel = ecModel.queryComponents({
	                    mainType: dimName + 'Axis',
	                    index: seriesModel.get(dimName + 'AxisIndex'),
	                    id: seriesModel.get(dimName + 'AxisId')
	                })[0];
	                if (this._axisIndex === (axisModel && axisModel.componentIndex)) {
	                    seriesModels.push(seriesModel);
	                }
	            }
	        }, this);

	        return seriesModels;
	    },

	    getAxisModel: function getAxisModel() {
	        return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
	    },

	    getOtherAxisModel: function getOtherAxisModel() {
	        var axisDim = this._dimName;
	        var ecModel = this.ecModel;
	        var axisModel = this.getAxisModel();
	        var isCartesian = axisDim === 'x' || axisDim === 'y';
	        var otherAxisDim;
	        var coordSysIndexName;
	        if (isCartesian) {
	            coordSysIndexName = 'gridIndex';
	            otherAxisDim = axisDim === 'x' ? 'y' : 'x';
	        } else {
	            coordSysIndexName = 'polarIndex';
	            otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
	        }
	        var foundOtherAxisModel;
	        ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
	            if ((otherAxisModel.get(coordSysIndexName) || 0) === (axisModel.get(coordSysIndexName) || 0)) {
	                foundOtherAxisModel = otherAxisModel;
	            }
	        });
	        return foundOtherAxisModel;
	    },

	    /**
	     * Only calculate by given range and this._dataExtent, do not change anything.
	     *
	     * @param {Object} opt
	     * @param {number} [opt.start]
	     * @param {number} [opt.end]
	     * @param {number} [opt.startValue]
	     * @param {number} [opt.endValue]
	     */
	    calculateDataWindow: function calculateDataWindow(opt) {
	        var dataExtent = this._dataExtent;
	        var axisModel = this.getAxisModel();
	        var scale = axisModel.axis.scale;
	        var percentExtent = [0, 100];
	        var percentWindow = [opt.start, opt.end];
	        var valueWindow = [];

	        // In percent range is used and axis min/max/scale is set,
	        // window should be based on min/max/0, but should not be
	        // based on the extent of filtered data.
	        dataExtent = dataExtent.slice();
	        fixExtentByAxis(dataExtent, axisModel);

	        each(['startValue', 'endValue'], function (prop) {
	            valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);
	        });

	        // Normalize bound.
	        each([0, 1], function (idx) {
	            var boundValue = valueWindow[idx];
	            var boundPercent = percentWindow[idx];

	            // start/end has higher priority over startValue/endValue,
	            // because start/end can be consistent among different type
	            // of axis but startValue/endValue not.

	            if (boundPercent != null || boundValue == null) {
	                if (boundPercent == null) {
	                    boundPercent = percentExtent[idx];
	                }
	                // Use scale.parse to math round for category or time axis.
	                boundValue = scale.parse(numberUtil.linearMap(boundPercent, percentExtent, dataExtent, true));
	            } else {
	                // boundPercent == null && boundValue != null
	                boundPercent = numberUtil.linearMap(boundValue, dataExtent, percentExtent, true);
	            }
	            // valueWindow[idx] = round(boundValue);
	            // percentWindow[idx] = round(boundPercent);
	            valueWindow[idx] = boundValue;
	            percentWindow[idx] = boundPercent;
	        });

	        return {
	            valueWindow: asc(valueWindow),
	            percentWindow: asc(percentWindow)
	        };
	    },

	    /**
	     * Notice: reset should not be called before series.restoreData() called,
	     * so it is recommanded to be called in "process stage" but not "model init
	     * stage".
	     *
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     */
	    reset: function reset(dataZoomModel) {
	        if (dataZoomModel !== this._dataZoomModel) {
	            return;
	        }

	        // Culculate data window and data extent, and record them.
	        this._dataExtent = calculateDataExtent(this._dimName, this.getTargetSeriesModels());
	        var dataWindow = this.calculateDataWindow(dataZoomModel.option);
	        this._valueWindow = dataWindow.valueWindow;
	        this._percentWindow = dataWindow.percentWindow;

	        // Update axis setting then.
	        setAxisModel(this);
	    },

	    /**
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     */
	    restore: function restore(dataZoomModel) {
	        if (dataZoomModel !== this._dataZoomModel) {
	            return;
	        }

	        this._valueWindow = this._percentWindow = null;
	        setAxisModel(this, true);
	    },

	    /**
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     */
	    filterData: function filterData(dataZoomModel) {
	        if (dataZoomModel !== this._dataZoomModel) {
	            return;
	        }

	        var axisDim = this._dimName;
	        var seriesModels = this.getTargetSeriesModels();
	        var filterMode = dataZoomModel.get('filterMode');
	        var valueWindow = this._valueWindow;

	        // FIXME
	        // Toolbox may has dataZoom injected. And if there are stacked bar chart
	        // with NaN data, NaN will be filtered and stack will be wrong.
	        // So we need to force the mode to be set empty.
	        // In fect, it is not a big deal that do not support filterMode-'filter'
	        // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
	        // selection" some day, which might need "adapt to data extent on the
	        // otherAxis", which is disabled by filterMode-'empty'.
	        var otherAxisModel = this.getOtherAxisModel();
	        if (dataZoomModel.get('$fromToolbox') && otherAxisModel && otherAxisModel.get('type') === 'category') {
	            filterMode = 'empty';
	        }

	        // Process series data
	        each(seriesModels, function (seriesModel) {
	            var seriesData = seriesModel.getData();

	            seriesData && each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                if (filterMode === 'empty') {
	                    seriesModel.setData(seriesData.map(dim, function (value) {
	                        return !isInWindow(value) ? NaN : value;
	                    }));
	                } else {
	                    seriesData.filterSelf(dim, isInWindow);
	                }
	            });
	        });

	        function isInWindow(value) {
	            return value >= valueWindow[0] && value <= valueWindow[1];
	        }
	    }
	};

	function calculateDataExtent(axisDim, seriesModels) {
	    var dataExtent = [Infinity, -Infinity];

	    each(seriesModels, function (seriesModel) {
	        var seriesData = seriesModel.getData();
	        if (seriesData) {
	            each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                var seriesExtent = seriesData.getDataExtent(dim);
	                seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
	                seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
	            });
	        }
	    }, this);

	    if (dataExtent[1] < dataExtent[0]) {
	        dataExtent = [NaN, NaN];
	    }

	    return dataExtent;
	}

	function fixExtentByAxis(dataExtent, axisModel) {
	    var min = axisModel.getMin(true);
	    if (min != null && min !== 'dataMin') {
	        dataExtent[0] = min;
	    }
	    var max = axisModel.getMax(true);
	    if (max != null && max !== 'dataMax') {
	        dataExtent[1] = max;
	    }

	    if (!axisModel.get('scale', true)) {
	        dataExtent[0] > 0 && (dataExtent[0] = 0);
	        dataExtent[1] < 0 && (dataExtent[1] = 0);
	    }

	    return dataExtent;
	}

	function setAxisModel(axisProxy, isRestore) {
	    var axisModel = axisProxy.getAxisModel();

	    var percentWindow = axisProxy._percentWindow;
	    var valueWindow = axisProxy._valueWindow;

	    if (!percentWindow) {
	        return;
	    }

	    // [0, 500]: arbitrary value, guess axis extent.
	    var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);
	    // isRestore or isFull
	    var useOrigin = isRestore || percentWindow[0] === 0 && percentWindow[1] === 100;

	    axisModel.setRange(useOrigin ? null : +valueWindow[0].toFixed(precision), useOrigin ? null : +valueWindow[1].toFixed(precision));
	}

	module.exports = AxisProxy;

/***/ },
/* 833 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ComponentView = __webpack_require__(529);

	module.exports = ComponentView.extend({

	    type: 'dataZoom',

	    render: function render(dataZoomModel, ecModel, api, payload) {
	        this.dataZoomModel = dataZoomModel;
	        this.ecModel = ecModel;
	        this.api = api;
	    },

	    /**
	     * Find the first target coordinate system.
	     *
	     * @protected
	     * @return {Object} {
	     *                   grid: [
	     *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
	     *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
	     *                       ...
	     *                   ],  // cartesians must not be null/undefined.
	     *                   polar: [
	     *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
	     *                       ...
	     *                   ],  // polars must not be null/undefined.
	     *                   singleAxis: [
	     *                       {model: coord0, axisModels: [], coordIndex: 0}
	     *                   ]
	     */
	    getTargetCoordInfo: function getTargetCoordInfo() {
	        var dataZoomModel = this.dataZoomModel;
	        var ecModel = this.ecModel;
	        var coordSysLists = {};

	        dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	            var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);
	            if (axisModel) {
	                var coordModel = axisModel.getCoordSysModel();
	                coordModel && save(coordModel, axisModel, coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []), coordModel.componentIndex);
	            }
	        }, this);

	        function save(coordModel, axisModel, store, coordIndex) {
	            var item;
	            for (var i = 0; i < store.length; i++) {
	                if (store[i].model === coordModel) {
	                    item = store[i];
	                    break;
	                }
	            }
	            if (!item) {
	                store.push(item = {
	                    model: coordModel, axisModels: [], coordIndex: coordIndex
	                });
	            }
	            item.axisModels.push(axisModel);
	        }

	        return coordSysLists;
	    }

	});

/***/ },
/* 834 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data zoom model
	 */

	var DataZoomModel = __webpack_require__(830);

	var SliderZoomModel = DataZoomModel.extend({

	    type: 'dataZoom.slider',

	    layoutMode: 'box',

	    /**
	     * @protected
	     */
	    defaultOption: {
	        show: true,

	        // ph => placeholder. Using placehoder here because
	        // deault value can only be drived in view stage.
	        right: 'ph', // Default align to grid rect.
	        top: 'ph', // Default align to grid rect.
	        width: 'ph', // Default align to grid rect.
	        height: 'ph', // Default align to grid rect.
	        left: null, // Default align to grid rect.
	        bottom: null, // Default align to grid rect.

	        backgroundColor: 'rgba(47,69,84,0)', // Background of slider zoom component.
	        // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,
	        // highest priority, remain for compatibility of
	        // previous version, but not recommended any more.
	        dataBackground: {
	            lineStyle: {
	                color: '#2f4554',
	                width: 0.5,
	                opacity: 0.3
	            },
	            areaStyle: {
	                color: 'rgba(47,69,84,0.3)',
	                opacity: 0.3
	            }
	        },
	        borderColor: '#ddd', // border color of the box. For compatibility,
	        // if dataBackgroundColor is set, borderColor
	        // is ignored.

	        fillerColor: 'rgba(167,183,204,0.4)', // Color of selected area.
	        // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.
	        // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',
	        handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',
	        // Percent of the slider height
	        handleSize: '100%',

	        handleStyle: {
	            color: '#a7b7cc'
	        },

	        labelPrecision: null,
	        labelFormatter: null,
	        showDetail: true,
	        showDataShadow: 'auto', // Default auto decision.
	        realtime: true,
	        zoomLock: false, // Whether disable zoom.
	        textStyle: {
	            color: '#333'
	        }
	    }

	});

	module.exports = SliderZoomModel;

/***/ },
/* 835 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var throttle = __webpack_require__(581);
	var DataZoomView = __webpack_require__(833);
	var Rect = graphic.Rect;
	var numberUtil = __webpack_require__(507);
	var linearMap = numberUtil.linearMap;
	var layout = __webpack_require__(521);
	var sliderMove = __webpack_require__(836);
	var asc = numberUtil.asc;
	var bind = zrUtil.bind;
	// var mathMax = Math.max;
	var each = zrUtil.each;

	// Constants
	var DEFAULT_LOCATION_EDGE_GAP = 7;
	var DEFAULT_FRAME_BORDER_WIDTH = 1;
	var DEFAULT_FILLER_SIZE = 30;
	var HORIZONTAL = 'horizontal';
	var VERTICAL = 'vertical';
	var LABEL_GAP = 5;
	var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];

	var SliderZoomView = DataZoomView.extend({

	    type: 'dataZoom.slider',

	    init: function init(ecModel, api) {

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._displayables = {};

	        /**
	         * @private
	         * @type {string}
	         */
	        this._orient;

	        /**
	         * [0, 100]
	         * @private
	         */
	        this._range;

	        /**
	         * [coord of the first handle, coord of the second handle]
	         * @private
	         */
	        this._handleEnds;

	        /**
	         * [length, thick]
	         * @private
	         * @type {Array.<number>}
	         */
	        this._size;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._handleWidth;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._handleHeight;

	        /**
	         * @private
	         */
	        this._location;

	        /**
	         * @private
	         */
	        this._dragging;

	        /**
	         * @private
	         */
	        this._dataShadowInfo;

	        this.api = api;
	    },

	    /**
	     * @override
	     */
	    render: function render(dataZoomModel, ecModel, api, payload) {
	        SliderZoomView.superApply(this, 'render', arguments);

	        throttle.createOrUpdate(this, '_dispatchZoomAction', this.dataZoomModel.get('throttle'), 'fixRate');

	        this._orient = dataZoomModel.get('orient');

	        if (this.dataZoomModel.get('show') === false) {
	            this.group.removeAll();
	            return;
	        }

	        // Notice: this._resetInterval() should not be executed when payload.type
	        // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
	        // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,
	        if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
	            this._buildView();
	        }

	        this._updateView();
	    },

	    /**
	     * @override
	     */
	    remove: function remove() {
	        SliderZoomView.superApply(this, 'remove', arguments);
	        throttle.clear(this, '_dispatchZoomAction');
	    },

	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        SliderZoomView.superApply(this, 'dispose', arguments);
	        throttle.clear(this, '_dispatchZoomAction');
	    },

	    _buildView: function _buildView() {
	        var thisGroup = this.group;

	        thisGroup.removeAll();

	        this._resetLocation();
	        this._resetInterval();

	        var barGroup = this._displayables.barGroup = new graphic.Group();

	        this._renderBackground();

	        this._renderHandle();

	        this._renderDataShadow();

	        thisGroup.add(barGroup);

	        this._positionGroup();
	    },

	    /**
	     * @private
	     */
	    _resetLocation: function _resetLocation() {
	        var dataZoomModel = this.dataZoomModel;
	        var api = this.api;

	        // If some of x/y/width/height are not specified,
	        // auto-adapt according to target grid.
	        var coordRect = this._findCoordRect();
	        var ecSize = { width: api.getWidth(), height: api.getHeight() };
	        // Default align by coordinate system rect.
	        var positionInfo = this._orient === HORIZONTAL ? {
	            // Why using 'right', because right should be used in vertical,
	            // and it is better to be consistent for dealing with position param merge.
	            right: ecSize.width - coordRect.x - coordRect.width,
	            top: ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP,
	            width: coordRect.width,
	            height: DEFAULT_FILLER_SIZE
	        } : { // vertical
	            right: DEFAULT_LOCATION_EDGE_GAP,
	            top: coordRect.y,
	            width: DEFAULT_FILLER_SIZE,
	            height: coordRect.height
	        };

	        // Do not write back to option and replace value 'ph', because
	        // the 'ph' value should be recalculated when resize.
	        var layoutParams = layout.getLayoutParams(dataZoomModel.option);

	        // Replace the placeholder value.
	        zrUtil.each(['right', 'top', 'width', 'height'], function (name) {
	            if (layoutParams[name] === 'ph') {
	                layoutParams[name] = positionInfo[name];
	            }
	        });

	        var layoutRect = layout.getLayoutRect(layoutParams, ecSize, dataZoomModel.padding);

	        this._location = { x: layoutRect.x, y: layoutRect.y };
	        this._size = [layoutRect.width, layoutRect.height];
	        this._orient === VERTICAL && this._size.reverse();
	    },

	    /**
	     * @private
	     */
	    _positionGroup: function _positionGroup() {
	        var thisGroup = this.group;
	        var location = this._location;
	        var orient = this._orient;

	        // Just use the first axis to determine mapping.
	        var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
	        var inverse = targetAxisModel && targetAxisModel.get('inverse');

	        var barGroup = this._displayables.barGroup;
	        var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;

	        // Transform barGroup.
	        barGroup.attr(orient === HORIZONTAL && !inverse ? { scale: otherAxisInverse ? [1, 1] : [1, -1] } : orient === HORIZONTAL && inverse ? { scale: otherAxisInverse ? [-1, 1] : [-1, -1] } : orient === VERTICAL && !inverse ? { scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2 }
	        // Dont use Math.PI, considering shadow direction.
	        : { scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2 });

	        // Position barGroup
	        var rect = thisGroup.getBoundingRect([barGroup]);
	        thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);
	    },

	    /**
	     * @private
	     */
	    _getViewExtent: function _getViewExtent() {
	        return [0, this._size[0]];
	    },

	    _renderBackground: function _renderBackground() {
	        var dataZoomModel = this.dataZoomModel;
	        var size = this._size;

	        this._displayables.barGroup.add(new Rect({
	            silent: true,
	            shape: {
	                x: 0, y: 0, width: size[0], height: size[1]
	            },
	            style: {
	                fill: dataZoomModel.get('backgroundColor')
	            },
	            z2: -40
	        }));
	    },

	    _renderDataShadow: function _renderDataShadow() {
	        var info = this._dataShadowInfo = this._prepareDataShadowInfo();

	        if (!info) {
	            return;
	        }

	        var size = this._size;
	        var seriesModel = info.series;
	        var data = seriesModel.getRawData();
	        var otherDim = seriesModel.getShadowDim ? seriesModel.getShadowDim() // @see candlestick
	        : info.otherDim;

	        if (otherDim == null) {
	            return;
	        }

	        var otherDataExtent = data.getDataExtent(otherDim);
	        // Nice extent.
	        var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
	        otherDataExtent = [otherDataExtent[0] - otherOffset, otherDataExtent[1] + otherOffset];
	        var otherShadowExtent = [0, size[1]];

	        var thisShadowExtent = [0, size[0]];

	        var areaPoints = [[size[0], 0], [0, 0]];
	        var linePoints = [];
	        var step = thisShadowExtent[1] / (data.count() - 1);
	        var thisCoord = 0;

	        // Optimize for large data shadow
	        var stride = Math.round(data.count() / size[0]);
	        var lastIsEmpty;
	        data.each([otherDim], function (value, index) {
	            if (stride > 0 && index % stride) {
	                thisCoord += step;
	                return;
	            }

	            // FIXME
	            // Should consider axis.min/axis.max when drawing dataShadow.

	            // FIXME
	            // 应该使用统一的空判断？还是在list里进行空判断？
	            var isEmpty = value == null || isNaN(value) || value === '';
	            // See #4235.
	            var otherCoord = isEmpty ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);

	            // Attempt to draw data shadow precisely when there are empty value.
	            if (isEmpty && !lastIsEmpty && index) {
	                areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);
	                linePoints.push([linePoints[linePoints.length - 1][0], 0]);
	            } else if (!isEmpty && lastIsEmpty) {
	                areaPoints.push([thisCoord, 0]);
	                linePoints.push([thisCoord, 0]);
	            }

	            areaPoints.push([thisCoord, otherCoord]);
	            linePoints.push([thisCoord, otherCoord]);

	            thisCoord += step;
	            lastIsEmpty = isEmpty;
	        });

	        var dataZoomModel = this.dataZoomModel;
	        // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');
	        this._displayables.barGroup.add(new graphic.Polygon({
	            shape: { points: areaPoints },
	            style: zrUtil.defaults({ fill: dataZoomModel.get('dataBackgroundColor') }, dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()),
	            silent: true,
	            z2: -20
	        }));
	        this._displayables.barGroup.add(new graphic.Polyline({
	            shape: { points: linePoints },
	            style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),
	            silent: true,
	            z2: -19
	        }));
	    },

	    _prepareDataShadowInfo: function _prepareDataShadowInfo() {
	        var dataZoomModel = this.dataZoomModel;
	        var showDataShadow = dataZoomModel.get('showDataShadow');

	        if (showDataShadow === false) {
	            return;
	        }

	        // Find a representative series.
	        var result;
	        var ecModel = this.ecModel;

	        dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	            var seriesModels = dataZoomModel.getAxisProxy(dimNames.name, axisIndex).getTargetSeriesModels();

	            zrUtil.each(seriesModels, function (seriesModel) {
	                if (result) {
	                    return;
	                }

	                if (showDataShadow !== true && zrUtil.indexOf(SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')) < 0) {
	                    return;
	                }

	                var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;
	                var otherDim = getOtherDim(dimNames.name);
	                var otherAxisInverse;
	                var coordSys = seriesModel.coordinateSystem;
	                if (otherDim != null && coordSys.getOtherAxis) {
	                    otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
	                }

	                result = {
	                    thisAxis: thisAxis,
	                    series: seriesModel,
	                    thisDim: dimNames.name,
	                    otherDim: otherDim,
	                    otherAxisInverse: otherAxisInverse
	                };
	            }, this);
	        }, this);

	        return result;
	    },

	    _renderHandle: function _renderHandle() {
	        var displaybles = this._displayables;
	        var handles = displaybles.handles = [];
	        var handleLabels = displaybles.handleLabels = [];
	        var barGroup = this._displayables.barGroup;
	        var size = this._size;
	        var dataZoomModel = this.dataZoomModel;

	        barGroup.add(displaybles.filler = new Rect({
	            draggable: true,
	            cursor: 'move',
	            drift: bind(this._onDragMove, this, 'all'),
	            ondragstart: bind(this._showDataInfo, this, true),
	            ondragend: bind(this._onDragEnd, this),
	            onmouseover: bind(this._showDataInfo, this, true),
	            onmouseout: bind(this._showDataInfo, this, false),
	            style: {
	                fill: dataZoomModel.get('fillerColor'),
	                textPosition: 'inside'
	            }
	        }));

	        // Frame border.
	        barGroup.add(new Rect(graphic.subPixelOptimizeRect({
	            silent: true,
	            shape: {
	                x: 0,
	                y: 0,
	                width: size[0],
	                height: size[1]
	            },
	            style: {
	                stroke: dataZoomModel.get('dataBackgroundColor') || dataZoomModel.get('borderColor'),
	                lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
	                fill: 'rgba(0,0,0,0)'
	            }
	        })));

	        var iconStr = dataZoomModel.get('handleIcon');
	        each([0, 1], function (handleIndex) {
	            var path = graphic.makePath(iconStr, {
	                style: {
	                    strokeNoScale: true
	                },
	                rectHover: true,
	                cursor: this._orient === 'vertical' ? 'ns-resize' : 'ew-resize',
	                draggable: true,
	                drift: bind(this._onDragMove, this, handleIndex),
	                ondragend: bind(this._onDragEnd, this),
	                onmouseover: bind(this._showDataInfo, this, true),
	                onmouseout: bind(this._showDataInfo, this, false)
	            }, {
	                x: -0.5,
	                y: 0,
	                width: 1,
	                height: 1
	            }, 'center');

	            var bRect = path.getBoundingRect();
	            this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);
	            this._handleWidth = bRect.width / bRect.height * this._handleHeight;

	            path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());
	            var handleColor = dataZoomModel.get('handleColor');
	            // Compatitable with previous version
	            if (handleColor != null) {
	                path.style.fill = handleColor;
	            }

	            barGroup.add(handles[handleIndex] = path);

	            var textStyleModel = dataZoomModel.textStyleModel;

	            this.group.add(handleLabels[handleIndex] = new graphic.Text({
	                silent: true,
	                invisible: true,
	                style: {
	                    x: 0, y: 0, text: '',
	                    textVerticalAlign: 'middle',
	                    textAlign: 'center',
	                    fill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont()
	                },
	                z2: 10
	            }));
	        }, this);
	    },

	    /**
	     * @private
	     */
	    _resetInterval: function _resetInterval() {
	        var range = this._range = this.dataZoomModel.getPercentRange();
	        var viewExtent = this._getViewExtent();

	        this._handleEnds = [linearMap(range[0], [0, 100], viewExtent, true), linearMap(range[1], [0, 100], viewExtent, true)];
	    },

	    /**
	     * @private
	     * @param {(number|string)} handleIndex 0 or 1 or 'all'
	     * @param {number} dx
	     * @param {number} dy
	     */
	    _updateInterval: function _updateInterval(handleIndex, delta) {
	        var handleEnds = this._handleEnds;
	        var viewExtend = this._getViewExtent();

	        sliderMove(delta, handleEnds, viewExtend, handleIndex === 'all' || this.dataZoomModel.get('zoomLock') ? 'rigid' : 'cross', handleIndex);

	        this._range = asc([linearMap(handleEnds[0], viewExtend, [0, 100], true), linearMap(handleEnds[1], viewExtend, [0, 100], true)]);
	    },

	    /**
	     * @private
	     */
	    _updateView: function _updateView(nonRealtime) {
	        var displaybles = this._displayables;
	        var handleEnds = this._handleEnds;
	        var handleInterval = asc(handleEnds.slice());
	        var size = this._size;

	        each([0, 1], function (handleIndex) {
	            // Handles
	            var handle = displaybles.handles[handleIndex];
	            var handleHeight = this._handleHeight;
	            handle.attr({
	                scale: [handleHeight, handleHeight],
	                position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]
	            });
	        }, this);

	        // Filler
	        displaybles.filler.setShape({
	            x: handleInterval[0],
	            y: 0,
	            width: handleInterval[1] - handleInterval[0],
	            height: size[1]
	        });

	        this._updateDataInfo(nonRealtime);
	    },

	    /**
	     * @private
	     */
	    _updateDataInfo: function _updateDataInfo(nonRealtime) {
	        var dataZoomModel = this.dataZoomModel;
	        var displaybles = this._displayables;
	        var handleLabels = displaybles.handleLabels;
	        var orient = this._orient;
	        var labelTexts = ['', ''];

	        // FIXME
	        // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）
	        if (dataZoomModel.get('showDetail')) {
	            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();

	            if (axisProxy) {
	                var axis = axisProxy.getAxisModel().axis;
	                var range = this._range;

	                var dataInterval = nonRealtime
	                // See #4434, data and axis are not processed and reset yet in non-realtime mode.
	                ? axisProxy.calculateDataWindow({
	                    start: range[0], end: range[1]
	                }).valueWindow : axisProxy.getDataValueWindow();

	                labelTexts = [this._formatLabel(dataInterval[0], axis), this._formatLabel(dataInterval[1], axis)];
	            }
	        }

	        var orderedHandleEnds = asc(this._handleEnds.slice());

	        setLabel.call(this, 0);
	        setLabel.call(this, 1);

	        function setLabel(handleIndex) {
	            // Label
	            // Text should not transform by barGroup.
	            // Ignore handlers transform
	            var barTransform = graphic.getTransform(displaybles.handles[handleIndex].parent, this.group);
	            var direction = graphic.transformDirection(handleIndex === 0 ? 'right' : 'left', barTransform);
	            var offset = this._handleWidth / 2 + LABEL_GAP;
	            var textPoint = graphic.applyTransform([orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset), this._size[1] / 2], barTransform);
	            handleLabels[handleIndex].setStyle({
	                x: textPoint[0],
	                y: textPoint[1],
	                textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
	                textAlign: orient === HORIZONTAL ? direction : 'center',
	                text: labelTexts[handleIndex]
	            });
	        }
	    },

	    /**
	     * @private
	     */
	    _formatLabel: function _formatLabel(value, axis) {
	        var dataZoomModel = this.dataZoomModel;
	        var labelFormatter = dataZoomModel.get('labelFormatter');

	        var labelPrecision = dataZoomModel.get('labelPrecision');
	        if (labelPrecision == null || labelPrecision === 'auto') {
	            labelPrecision = axis.getPixelPrecision();
	        }

	        var valueStr = value == null || isNaN(value) ? ''
	        // FIXME Glue code
	        : axis.type === 'category' || axis.type === 'time' ? axis.scale.getLabel(Math.round(value))
	        // param of toFixed should less then 20.
	        : value.toFixed(Math.min(labelPrecision, 20));

	        return zrUtil.isFunction(labelFormatter) ? labelFormatter(value, valueStr) : zrUtil.isString(labelFormatter) ? labelFormatter.replace('{value}', valueStr) : valueStr;
	    },

	    /**
	     * @private
	     * @param {boolean} showOrHide true: show, false: hide
	     */
	    _showDataInfo: function _showDataInfo(showOrHide) {
	        // Always show when drgging.
	        showOrHide = this._dragging || showOrHide;

	        var handleLabels = this._displayables.handleLabels;
	        handleLabels[0].attr('invisible', !showOrHide);
	        handleLabels[1].attr('invisible', !showOrHide);
	    },

	    _onDragMove: function _onDragMove(handleIndex, dx, dy) {
	        this._dragging = true;

	        // Transform dx, dy to bar coordination.
	        var vertex = this._applyBarTransform([dx, dy], true);

	        this._updateInterval(handleIndex, vertex[0]);

	        var realtime = this.dataZoomModel.get('realtime');

	        this._updateView(!realtime);

	        if (realtime) {
	            realtime && this._dispatchZoomAction();
	        }
	    },

	    _onDragEnd: function _onDragEnd() {
	        this._dragging = false;
	        this._showDataInfo(false);
	        this._dispatchZoomAction();
	    },

	    /**
	     * This action will be throttled.
	     * @private
	     */
	    _dispatchZoomAction: function _dispatchZoomAction() {
	        var range = this._range;

	        this.api.dispatchAction({
	            type: 'dataZoom',
	            from: this.uid,
	            dataZoomId: this.dataZoomModel.id,
	            start: range[0],
	            end: range[1]
	        });
	    },

	    /**
	     * @private
	     */
	    _applyBarTransform: function _applyBarTransform(vertex, inverse) {
	        var barTransform = this._displayables.barGroup.getLocalTransform();
	        return graphic.applyTransform(vertex, barTransform, inverse);
	    },

	    /**
	     * @private
	     */
	    _findCoordRect: function _findCoordRect() {
	        // Find the grid coresponding to the first axis referred by dataZoom.
	        var rect;
	        each(this.getTargetCoordInfo(), function (coordInfoList) {
	            if (!rect && coordInfoList.length) {
	                var coordSys = coordInfoList[0].model.coordinateSystem;
	                rect = coordSys.getRect && coordSys.getRect();
	            }
	        });
	        if (!rect) {
	            var width = this.api.getWidth();
	            var height = this.api.getHeight();
	            rect = {
	                x: width * 0.2,
	                y: height * 0.2,
	                width: width * 0.6,
	                height: height * 0.6
	            };
	        }

	        return rect;
	    }

	});

	function getOtherDim(thisDim) {
	    // FIXME
	    // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
	    var map = { x: 'y', y: 'x', radius: 'angle', angle: 'radius' };
	    return map[thisDim];
	}

	module.exports = SliderZoomView;

/***/ },
/* 836 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Calculate slider move result.
	 *
	 * @param {number} delta Move length.
	 * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].
	 *                                    handleEnds will be modified in this method.
	 * @param {Array.<number>} extent handleEnds is restricted by extent.
	 *                                extent[0] should less or equals than extent[1].
	 * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,
	 *                      'cross' handleEnds[0] can be bigger then handleEnds[1],
	 *                      'push' handleEnds[0] can not be bigger then handleEnds[1],
	 *                              when they touch, one push other.
	 * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.
	 * @param {Array.<number>} The input handleEnds.
	 */
	module.exports = function (delta, handleEnds, extent, mode, handleIndex) {
	    if (!delta) {
	        return handleEnds;
	    }

	    if (mode === 'rigid') {
	        delta = getRealDelta(delta, handleEnds, extent);
	        handleEnds[0] += delta;
	        handleEnds[1] += delta;
	    } else {
	        delta = getRealDelta(delta, handleEnds[handleIndex], extent);
	        handleEnds[handleIndex] += delta;

	        if (mode === 'push' && handleEnds[0] > handleEnds[1]) {
	            handleEnds[1 - handleIndex] = handleEnds[handleIndex];
	        }
	    }

	    return handleEnds;

	    function getRealDelta(delta, handleEnds, extent) {
	        var handleMinMax = !handleEnds.length ? [handleEnds, handleEnds] : handleEnds.slice();
	        handleEnds[0] > handleEnds[1] && handleMinMax.reverse();

	        if (delta < 0 && handleMinMax[0] + delta < extent[0]) {
	            delta = extent[0] - handleMinMax[0];
	        }
	        if (delta > 0 && handleMinMax[1] + delta > extent[1]) {
	            delta = extent[1] - handleMinMax[1];
	        }
	        return delta;
	    }
	};

/***/ },
/* 837 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data zoom model
	 */

	module.exports = __webpack_require__(830).extend({

	    type: 'dataZoom.inside',

	    /**
	     * @protected
	     */
	    defaultOption: {
	        disabled: false, // Whether disable this inside zoom.
	        zoomLock: false // Whether disable zoom but only pan.
	    }
	});

/***/ },
/* 838 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DataZoomView = __webpack_require__(833);
	var zrUtil = __webpack_require__(504);
	var sliderMove = __webpack_require__(836);
	var roams = __webpack_require__(839);
	var bind = zrUtil.bind;

	var InsideZoomView = DataZoomView.extend({

	    type: 'dataZoom.inside',

	    /**
	     * @override
	     */
	    init: function init(ecModel, api) {
	        /**
	         * 'throttle' is used in this.dispatchAction, so we save range
	         * to avoid missing some 'pan' info.
	         * @private
	         * @type {Array.<number>}
	         */
	        this._range;
	    },

	    /**
	     * @override
	     */
	    render: function render(dataZoomModel, ecModel, api, payload) {
	        InsideZoomView.superApply(this, 'render', arguments);

	        // Notice: origin this._range should be maintained, and should not be re-fetched
	        // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'
	        // info will be missed because of 'throttle' of this.dispatchAction.
	        if (roams.shouldRecordRange(payload, dataZoomModel.id)) {
	            this._range = dataZoomModel.getPercentRange();
	        }

	        // Reset controllers.
	        zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {

	            var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {
	                return roams.generateCoordId(coordInfo.model);
	            });

	            zrUtil.each(coordInfoList, function (coordInfo) {
	                var coordModel = coordInfo.model;

	                roams.register(api, {
	                    coordId: roams.generateCoordId(coordModel),
	                    allCoordIds: allCoordIds,
	                    containsPoint: function containsPoint(x, y) {
	                        return coordModel.coordinateSystem.containPoint([x, y]);
	                    },
	                    dataZoomId: dataZoomModel.id,
	                    throttleRate: dataZoomModel.get('throttle', true),
	                    panGetRange: bind(this._onPan, this, coordInfo, coordSysName),
	                    zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName)
	                });
	            }, this);
	        }, this);
	    },

	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        roams.unregister(this.api, this.dataZoomModel.id);
	        InsideZoomView.superApply(this, 'dispose', arguments);
	        this._range = null;
	    },

	    /**
	     * @private
	     */
	    _onPan: function _onPan(coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {
	        if (this.dataZoomModel.option.disabled) {
	            return this._range;
	        }

	        var range = this._range.slice();

	        // Calculate transform by the first axis.
	        var axisModel = coordInfo.axisModels[0];
	        if (!axisModel) {
	            return;
	        }

	        var directionInfo = getDirectionInfo[coordSysName]([oldX, oldY], [newX, newY], axisModel, controller, coordInfo);

	        var percentDelta = directionInfo.signal * (range[1] - range[0]) * directionInfo.pixel / directionInfo.pixelLength;

	        sliderMove(percentDelta, range, [0, 100], 'rigid');

	        return this._range = range;
	    },

	    /**
	     * @private
	     */
	    _onZoom: function _onZoom(coordInfo, coordSysName, controller, scale, mouseX, mouseY) {
	        var option = this.dataZoomModel.option;

	        if (option.disabled || option.zoomLock) {
	            return this._range;
	        }

	        var range = this._range.slice();

	        // Calculate transform by the first axis.
	        var axisModel = coordInfo.axisModels[0];
	        if (!axisModel) {
	            return;
	        }

	        var directionInfo = getDirectionInfo[coordSysName](null, [mouseX, mouseY], axisModel, controller, coordInfo);

	        var percentPoint = (directionInfo.pixel - directionInfo.pixelStart) / directionInfo.pixelLength * (range[1] - range[0]) + range[0];

	        scale = Math.max(1 / scale, 0);
	        range[0] = (range[0] - percentPoint) * scale + percentPoint;
	        range[1] = (range[1] - percentPoint) * scale + percentPoint;
	        return this._range = fixRange(range);
	    }

	});

	var getDirectionInfo = {

	    grid: function grid(oldPoint, newPoint, axisModel, controller, coordInfo) {
	        var axis = axisModel.axis;
	        var ret = {};
	        var rect = coordInfo.model.coordinateSystem.getRect();
	        oldPoint = oldPoint || [0, 0];

	        if (axis.dim === 'x') {
	            ret.pixel = newPoint[0] - oldPoint[0];
	            ret.pixelLength = rect.width;
	            ret.pixelStart = rect.x;
	            ret.signal = axis.inverse ? 1 : -1;
	        } else {
	            // axis.dim === 'y'
	            ret.pixel = newPoint[1] - oldPoint[1];
	            ret.pixelLength = rect.height;
	            ret.pixelStart = rect.y;
	            ret.signal = axis.inverse ? -1 : 1;
	        }

	        return ret;
	    },

	    polar: function polar(oldPoint, newPoint, axisModel, controller, coordInfo) {
	        var axis = axisModel.axis;
	        var ret = {};
	        var polar = coordInfo.model.coordinateSystem;
	        var radiusExtent = polar.getRadiusAxis().getExtent();
	        var angleExtent = polar.getAngleAxis().getExtent();

	        oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];
	        newPoint = polar.pointToCoord(newPoint);

	        if (axisModel.mainType === 'radiusAxis') {
	            ret.pixel = newPoint[0] - oldPoint[0];
	            // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);
	            // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);
	            ret.pixelLength = radiusExtent[1] - radiusExtent[0];
	            ret.pixelStart = radiusExtent[0];
	            ret.signal = axis.inverse ? 1 : -1;
	        } else {
	            // 'angleAxis'
	            ret.pixel = newPoint[1] - oldPoint[1];
	            // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);
	            // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);
	            ret.pixelLength = angleExtent[1] - angleExtent[0];
	            ret.pixelStart = angleExtent[0];
	            ret.signal = axis.inverse ? -1 : 1;
	        }

	        return ret;
	    },

	    singleAxis: function singleAxis(oldPoint, newPoint, axisModel, controller, coordInfo) {
	        var axis = axisModel.axis;
	        var rect = coordInfo.model.coordinateSystem.getRect();
	        var ret = {};

	        oldPoint = oldPoint || [0, 0];

	        if (axis.orient === 'horizontal') {
	            ret.pixel = newPoint[0] - oldPoint[0];
	            ret.pixelLength = rect.width;
	            ret.pixelStart = rect.x;
	            ret.signal = axis.inverse ? 1 : -1;
	        } else {
	            // 'vertical'
	            ret.pixel = newPoint[1] - oldPoint[1];
	            ret.pixelLength = rect.height;
	            ret.pixelStart = rect.y;
	            ret.signal = axis.inverse ? -1 : 1;
	        }

	        return ret;
	    }
	};

	function fixRange(range) {
	    // Clamp, using !(<= or >=) to handle NaN.
	    // jshint ignore:start
	    var bound = [0, 100];
	    !(range[0] <= bound[1]) && (range[0] = bound[1]);
	    !(range[1] <= bound[1]) && (range[1] = bound[1]);
	    !(range[0] >= bound[0]) && (range[0] = bound[0]);
	    !(range[1] >= bound[0]) && (range[1] = bound[0]);
	    // jshint ignore:end

	    return range;
	}

	module.exports = InsideZoomView;

/***/ },
/* 839 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Roam controller manager.
	 */

	// Only create one roam controller for each coordinate system.
	// one roam controller might be refered by two inside data zoom
	// components (for example, one for x and one for y). When user
	// pan or zoom, only dispatch one action for those data zoom
	// components.

	var zrUtil = __webpack_require__(504);
	var RoamController = __webpack_require__(677);
	var throttle = __webpack_require__(581);
	var curry = zrUtil.curry;

	var ATTR = '\0_ec_dataZoom_roams';

	var roams = {

	    /**
	     * @public
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Object} dataZoomInfo
	     * @param {string} dataZoomInfo.coordId
	     * @param {Function} dataZoomInfo.containsPoint
	     * @param {Array.<string>} dataZoomInfo.allCoordIds
	     * @param {string} dataZoomInfo.dataZoomId
	     * @param {number} dataZoomInfo.throttleRate
	     * @param {Function} dataZoomInfo.panGetRange
	     * @param {Function} dataZoomInfo.zoomGetRange
	     */
	    register: function register(api, dataZoomInfo) {
	        var store = giveStore(api);
	        var theDataZoomId = dataZoomInfo.dataZoomId;
	        var theCoordId = dataZoomInfo.coordId;

	        // Do clean when a dataZoom changes its target coordnate system.
	        // Avoid memory leak, dispose all not-used-registered.
	        zrUtil.each(store, function (record, coordId) {
	            var dataZoomInfos = record.dataZoomInfos;
	            if (dataZoomInfos[theDataZoomId] && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0) {
	                delete dataZoomInfos[theDataZoomId];
	                record.count--;
	            }
	        });

	        cleanStore(store);

	        var record = store[theCoordId];
	        // Create if needed.
	        if (!record) {
	            record = store[theCoordId] = {
	                coordId: theCoordId,
	                dataZoomInfos: {},
	                count: 0
	            };
	            record.controller = createController(api, dataZoomInfo, record);
	            record.dispatchAction = zrUtil.curry(dispatchAction, api);
	        }

	        // Consider resize, area should be always updated.
	        record.controller.setContainsPoint(dataZoomInfo.containsPoint);

	        // Update throttle.
	        throttle.createOrUpdate(record, 'dispatchAction', dataZoomInfo.throttleRate, 'fixRate');

	        // Update reference of dataZoom.
	        !record.dataZoomInfos[theDataZoomId] && record.count++;
	        record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
	    },

	    /**
	     * @public
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {string} dataZoomId
	     */
	    unregister: function unregister(api, dataZoomId) {
	        var store = giveStore(api);

	        zrUtil.each(store, function (record) {
	            record.controller.dispose();
	            var dataZoomInfos = record.dataZoomInfos;
	            if (dataZoomInfos[dataZoomId]) {
	                delete dataZoomInfos[dataZoomId];
	                record.count--;
	            }
	        });

	        cleanStore(store);
	    },

	    /**
	     * @public
	     */
	    shouldRecordRange: function shouldRecordRange(payload, dataZoomId) {
	        if (payload && payload.type === 'dataZoom' && payload.batch) {
	            for (var i = 0, len = payload.batch.length; i < len; i++) {
	                if (payload.batch[i].dataZoomId === dataZoomId) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    },

	    /**
	     * @public
	     */
	    generateCoordId: function generateCoordId(coordModel) {
	        return coordModel.type + '\0_' + coordModel.id;
	    }
	};

	/**
	 * Key: coordId, value: {dataZoomInfos: [], count, controller}
	 * @type {Array.<Object>}
	 */
	function giveStore(api) {
	    // Mount store on zrender instance, so that we do not
	    // need to worry about dispose.
	    var zr = api.getZr();
	    return zr[ATTR] || (zr[ATTR] = {});
	}

	function createController(api, dataZoomInfo, newRecord) {
	    var controller = new RoamController(api.getZr());
	    controller.enable();
	    controller.on('pan', curry(onPan, newRecord));
	    controller.on('zoom', curry(onZoom, newRecord));

	    return controller;
	}

	function cleanStore(store) {
	    zrUtil.each(store, function (record, coordId) {
	        if (!record.count) {
	            record.controller.dispose();
	            delete store[coordId];
	        }
	    });
	}

	function onPan(record, dx, dy, oldX, oldY, newX, newY) {
	    wrapAndDispatch(record, function (info) {
	        return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);
	    });
	}

	function onZoom(record, scale, mouseX, mouseY) {
	    wrapAndDispatch(record, function (info) {
	        return info.zoomGetRange(record.controller, scale, mouseX, mouseY);
	    });
	}

	function wrapAndDispatch(record, getRange) {
	    var batch = [];

	    zrUtil.each(record.dataZoomInfos, function (info) {
	        var range = getRange(info);
	        range && batch.push({
	            dataZoomId: info.dataZoomId,
	            start: range[0],
	            end: range[1]
	        });
	    });

	    record.dispatchAction(batch);
	}

	/**
	 * This action will be throttled.
	 */
	function dispatchAction(api, batch) {
	    api.dispatchAction({
	        type: 'dataZoom',
	        batch: batch
	    });
	}

	module.exports = roams;

/***/ },
/* 840 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data zoom processor
	 */

	var echarts = __webpack_require__(501);

	echarts.registerProcessor(function (ecModel, api) {

	    ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	        // We calculate window and reset axis here but not in model
	        // init stage and not after action dispatch handler, because
	        // reset should be called after seriesData.restoreData.
	        dataZoomModel.eachTargetAxis(resetSingleAxis);

	        // Caution: data zoom filtering is order sensitive when using
	        // percent range and no min/max/scale set on axis.
	        // For example, we have dataZoom definition:
	        // [
	        //      {xAxisIndex: 0, start: 30, end: 70},
	        //      {yAxisIndex: 0, start: 20, end: 80}
	        // ]
	        // In this case, [20, 80] of y-dataZoom should be based on data
	        // that have filtered by x-dataZoom using range of [30, 70],
	        // but should not be based on full raw data. Thus sliding
	        // x-dataZoom will change both ranges of xAxis and yAxis,
	        // while sliding y-dataZoom will only change the range of yAxis.
	        // So we should filter x-axis after reset x-axis immediately,
	        // and then reset y-axis and filter y-axis.
	        dataZoomModel.eachTargetAxis(filterSingleAxis);
	    });

	    ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	        // Fullfill all of the range props so that user
	        // is able to get them from chart.getOption().
	        var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	        var percentRange = axisProxy.getDataPercentWindow();
	        var valueRange = axisProxy.getDataValueWindow();

	        dataZoomModel.setRawRange({
	            start: percentRange[0],
	            end: percentRange[1],
	            startValue: valueRange[0],
	            endValue: valueRange[1]
	        });
	    });
	});

	function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {
	    dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);
	}

	function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {
	    dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);
	}

/***/ },
/* 841 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data zoom action
	 */

	var zrUtil = __webpack_require__(504);
	var helper = __webpack_require__(831);
	var echarts = __webpack_require__(501);

	echarts.registerAction('dataZoom', function (payload, ecModel) {

	    var linkedNodesFinder = helper.createLinkedNodesFinder(zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'), helper.eachAxisDim, function (model, dimNames) {
	        return model.get(dimNames.axisIndex);
	    });

	    var effectedModels = [];

	    ecModel.eachComponent({ mainType: 'dataZoom', query: payload }, function (model, index) {
	        effectedModels.push.apply(effectedModels, linkedNodesFinder(model).nodes);
	    });

	    zrUtil.each(effectedModels, function (dataZoomModel, index) {
	        dataZoomModel.setRawRange({
	            start: payload.start,
	            end: payload.end,
	            startValue: payload.startValue,
	            endValue: payload.endValue
	        });
	    });
	});

/***/ },
/* 842 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * visualMap component entry
	 */

	__webpack_require__(843);
	__webpack_require__(854);

/***/ },
/* 843 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * DataZoom component entry
	 */

	__webpack_require__(501).registerPreprocessor(__webpack_require__(844));

	__webpack_require__(845);
	__webpack_require__(846);
	__webpack_require__(847);
	__webpack_require__(850);
	__webpack_require__(853);

/***/ },
/* 844 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file VisualMap preprocessor
	 */

	var zrUtil = __webpack_require__(504);
	var each = zrUtil.each;

	module.exports = function (option) {
	    var visualMap = option && option.visualMap;

	    if (!zrUtil.isArray(visualMap)) {
	        visualMap = visualMap ? [visualMap] : [];
	    }

	    each(visualMap, function (opt) {
	        if (!opt) {
	            return;
	        }

	        // rename splitList to pieces
	        if (has(opt, 'splitList') && !has(opt, 'pieces')) {
	            opt.pieces = opt.splitList;
	            delete opt.splitList;
	        }

	        var pieces = opt.pieces;
	        if (pieces && zrUtil.isArray(pieces)) {
	            each(pieces, function (piece) {
	                if (zrUtil.isObject(piece)) {
	                    if (has(piece, 'start') && !has(piece, 'min')) {
	                        piece.min = piece.start;
	                    }
	                    if (has(piece, 'end') && !has(piece, 'max')) {
	                        piece.max = piece.end;
	                    }
	                }
	            });
	        }
	    });
	};

	function has(obj, name) {
	    return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
	}

/***/ },
/* 845 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(519).registerSubTypeDefaulter('visualMap', function (option) {
	    // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.
	    return !option.categories && (!(option.pieces ? option.pieces.length > 0 : option.splitNumber > 0) || option.calculable) ? 'continuous' : 'piecewise';
	});

/***/ },
/* 846 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data range visual coding.
	 */

	var echarts = __webpack_require__(501);
	var visualSolution = __webpack_require__(819);
	var VisualMapping = __webpack_require__(695);
	var zrUtil = __webpack_require__(504);

	echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {
	    ecModel.eachComponent('visualMap', function (visualMapModel) {
	        processSingleVisualMap(visualMapModel, ecModel);
	    });

	    prepareVisualMeta(ecModel);
	});

	function processSingleVisualMap(visualMapModel, ecModel) {
	    visualMapModel.eachTargetSeries(function (seriesModel) {
	        var data = seriesModel.getData();

	        visualSolution.applyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, data, visualMapModel.getValueState, visualMapModel, visualMapModel.getDataDimension(data));
	    });
	}

	// Only support color.
	function prepareVisualMeta(ecModel) {
	    ecModel.eachSeries(function (seriesModel) {
	        var data = seriesModel.getData();
	        var visualMetaList = [];

	        ecModel.eachComponent('visualMap', function (visualMapModel) {
	            if (visualMapModel.isTargetSeries(seriesModel)) {
	                var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || { stops: [], outerColors: [] };
	                visualMeta.dimension = visualMapModel.getDataDimension(data);
	                visualMetaList.push(visualMeta);
	            }
	        });

	        // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));
	        seriesModel.getData().setVisual('visualMeta', visualMetaList);
	    });
	}

	// FIXME
	// performance and export for heatmap?
	// value can be Infinity or -Infinity
	function getColorVisual(seriesModel, visualMapModel, value, valueState) {
	    var mappings = visualMapModel.targetVisuals[valueState];
	    var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	    var resultVisual = {
	        color: seriesModel.getData().getVisual('color') // default color.
	    };

	    for (var i = 0, len = visualTypes.length; i < len; i++) {
	        var type = visualTypes[i];
	        var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];
	        mapping && mapping.applyVisual(value, getVisual, setVisual);
	    }

	    return resultVisual.color;

	    function getVisual(key) {
	        return resultVisual[key];
	    }

	    function setVisual(key, value) {
	        resultVisual[key] = value;
	    }
	}

/***/ },
/* 847 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data zoom model
	 */

	var VisualMapModel = __webpack_require__(848);
	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);

	// Constant
	var DEFAULT_BAR_BOUND = [20, 140];

	var ContinuousModel = VisualMapModel.extend({

	    type: 'visualMap.continuous',

	    /**
	     * @protected
	     */
	    defaultOption: {
	        align: 'auto', // 'auto', 'left', 'right', 'top', 'bottom'
	        calculable: false, // This prop effect default component type determine,
	        // See echarts/component/visualMap/typeDefaulter.
	        range: null, // selected range. In default case `range` is [min, max]
	        // and can auto change along with modification of min max,
	        // util use specifid a range.
	        realtime: true, // Whether realtime update.
	        itemHeight: null, // The length of the range control edge.
	        itemWidth: null, // The length of the other side.
	        hoverLink: true, // Enable hover highlight.
	        hoverLinkDataSize: null, // The size of hovered data.
	        hoverLinkOnHandle: true // Whether trigger hoverLink when hover handle.
	    },

	    /**
	     * @override
	     */
	    optionUpdated: function optionUpdated(newOption, isInit) {
	        ContinuousModel.superApply(this, 'optionUpdated', arguments);

	        this.resetTargetSeries();
	        this.resetExtent();

	        this.resetVisual(function (mappingOption) {
	            mappingOption.mappingMethod = 'linear';
	            mappingOption.dataExtent = this.getExtent();
	        });

	        this._resetRange();
	    },

	    /**
	     * @protected
	     * @override
	     */
	    resetItemSize: function resetItemSize() {
	        ContinuousModel.superApply(this, 'resetItemSize', arguments);

	        var itemSize = this.itemSize;

	        this._orient === 'horizontal' && itemSize.reverse();

	        (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
	        (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
	    },

	    /**
	     * @private
	     */
	    _resetRange: function _resetRange() {
	        var dataExtent = this.getExtent();
	        var range = this.option.range;

	        if (!range || range.auto) {
	            // `range` should always be array (so we dont use other
	            // value like 'auto') for user-friend. (consider getOption).
	            dataExtent.auto = 1;
	            this.option.range = dataExtent;
	        } else if (zrUtil.isArray(range)) {
	            if (range[0] > range[1]) {
	                range.reverse();
	            }
	            range[0] = Math.max(range[0], dataExtent[0]);
	            range[1] = Math.min(range[1], dataExtent[1]);
	        }
	    },

	    /**
	     * @protected
	     * @override
	     */
	    completeVisualOption: function completeVisualOption() {
	        VisualMapModel.prototype.completeVisualOption.apply(this, arguments);

	        zrUtil.each(this.stateList, function (state) {
	            var symbolSize = this.option.controller[state].symbolSize;
	            if (symbolSize && symbolSize[0] !== symbolSize[1]) {
	                symbolSize[0] = 0; // For good looking.
	            }
	        }, this);
	    },

	    /**
	     * @override
	     */
	    setSelected: function setSelected(selected) {
	        this.option.range = selected.slice();
	        this._resetRange();
	    },

	    /**
	     * @public
	     */
	    getSelected: function getSelected() {
	        var dataExtent = this.getExtent();

	        var dataInterval = numberUtil.asc((this.get('range') || []).slice());

	        // Clamp
	        dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
	        dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
	        dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
	        dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);

	        return dataInterval;
	    },

	    /**
	     * @override
	     */
	    getValueState: function getValueState(value) {
	        var range = this.option.range;
	        var dataExtent = this.getExtent();

	        // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.
	        // range[1] is processed likewise.
	        return (range[0] <= dataExtent[0] || range[0] <= value) && (range[1] >= dataExtent[1] || value <= range[1]) ? 'inRange' : 'outOfRange';
	    },

	    /**
	     * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]
	     * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	     */
	    findTargetDataIndices: function findTargetDataIndices(range) {
	        var result = [];

	        this.eachTargetSeries(function (seriesModel) {
	            var dataIndices = [];
	            var data = seriesModel.getData();

	            data.each(this.getDataDimension(data), function (value, dataIndex) {
	                range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);
	            }, true, this);

	            result.push({ seriesId: seriesModel.id, dataIndex: dataIndices });
	        }, this);

	        return result;
	    },

	    /**
	     * @implement
	     */
	    getVisualMeta: function getVisualMeta(getColorVisual) {
	        var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());
	        var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());
	        var stops = [];

	        function setStop(value, valueState) {
	            stops.push({
	                value: value,
	                color: getColorVisual(value, valueState)
	            });
	        }

	        // Format to: outOfRange -- inRange -- outOfRange.
	        var iIdx = 0;
	        var oIdx = 0;
	        var iLen = iVals.length;
	        var oLen = oVals.length;

	        for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {
	            // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.
	            if (oVals[oIdx] < iVals[iIdx]) {
	                setStop(oVals[oIdx], 'outOfRange');
	            }
	        }
	        for (var first = 1; iIdx < iLen; iIdx++, first = 0) {
	            // If range is full, value beyond min, max will be clamped.
	            // make a singularity
	            first && stops.length && setStop(iVals[iIdx], 'outOfRange');
	            setStop(iVals[iIdx], 'inRange');
	        }
	        for (var first = 1; oIdx < oLen; oIdx++) {
	            if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {
	                // make a singularity
	                if (first) {
	                    stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');
	                    first = 0;
	                }
	                setStop(oVals[oIdx], 'outOfRange');
	            }
	        }

	        var stopsLen = stops.length;

	        return {
	            stops: stops,
	            outerColors: [stopsLen ? stops[0].color : 'transparent', stopsLen ? stops[stopsLen - 1].color : 'transparent']
	        };
	    }

	});

	function getColorStopValues(visualMapModel, valueState, dataExtent) {
	    if (dataExtent[0] === dataExtent[1]) {
	        return dataExtent.slice();
	    }

	    // When using colorHue mapping, it is not linear color any more.
	    // Moreover, canvas gradient seems not to be accurate linear.
	    // FIXME
	    // Should be arbitrary value 100? or based on pixel size?
	    var count = 200;
	    var step = (dataExtent[1] - dataExtent[0]) / count;

	    var value = dataExtent[0];
	    var stopValues = [];
	    for (var i = 0; i <= count && value < dataExtent[1]; i++) {
	        stopValues.push(value);
	        value += step;
	    }
	    stopValues.push(dataExtent[1]);

	    return stopValues;
	}

	module.exports = ContinuousModel;

/***/ },
/* 848 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Controller visual map model
	 */

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);
	var env = __webpack_require__(502);
	var visualDefault = __webpack_require__(849);
	var VisualMapping = __webpack_require__(695);
	var visualSolution = __webpack_require__(819);
	var mapVisual = VisualMapping.mapVisual;
	var modelUtil = __webpack_require__(505);
	var eachVisual = VisualMapping.eachVisual;
	var numberUtil = __webpack_require__(507);
	var isArray = zrUtil.isArray;
	var each = zrUtil.each;
	var asc = numberUtil.asc;
	var linearMap = numberUtil.linearMap;
	var noop = zrUtil.noop;

	var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];

	var VisualMapModel = echarts.extendComponentModel({

	    type: 'visualMap',

	    dependencies: ['series'],

	    /**
	     * @readOnly
	     * @type {Array.<string>}
	     */
	    stateList: ['inRange', 'outOfRange'],

	    /**
	     * @readOnly
	     * @type {Array.<string>}
	     */
	    replacableOptionKeys: ['inRange', 'outOfRange', 'target', 'controller', 'color'],

	    /**
	     * [lowerBound, upperBound]
	     *
	     * @readOnly
	     * @type {Array.<number>}
	     */
	    dataBound: [-Infinity, Infinity],

	    /**
	     * @readOnly
	     * @type {string|Object}
	     */
	    layoutMode: { type: 'box', ignoreSize: true },

	    /**
	     * @protected
	     */
	    defaultOption: {
	        show: true,

	        zlevel: 0,
	        z: 4,

	        seriesIndex: null, // 所控制的series indices，默认所有有value的series.

	        // set min: 0, max: 200, only for campatible with ec2.
	        // In fact min max should not have default value.
	        min: 0, // min value, must specified if pieces is not specified.
	        max: 200, // max value, must specified if pieces is not specified.

	        dimension: null,
	        inRange: null, // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',
	        // 'symbol', 'symbolSize'
	        outOfRange: null, // 'color', 'colorHue', 'colorSaturation',
	        // 'colorLightness', 'colorAlpha',
	        // 'symbol', 'symbolSize'

	        left: 0, // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)
	        right: null, // The same as left.
	        top: null, // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)
	        bottom: 0, // The same as top.

	        itemWidth: null,
	        itemHeight: null,
	        inverse: false,
	        orient: 'vertical', // 'horizontal' ¦ 'vertical'

	        backgroundColor: 'rgba(0,0,0,0)',
	        borderColor: '#ccc', // 值域边框颜色
	        contentColor: '#5793f3',
	        inactiveColor: '#aaa',
	        borderWidth: 0, // 值域边框线宽，单位px，默认为0（无边框）
	        padding: 5, // 值域内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        textGap: 10, //
	        precision: 0, // 小数精度，默认为0，无小数点
	        color: null, //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）

	        formatter: null,
	        text: null, // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值
	        textStyle: {
	            color: '#333' // 值域文字颜色
	        }
	    },

	    /**
	     * @protected
	     */
	    init: function init(option, parentModel, ecModel) {

	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._dataExtent;

	        /**
	         * @readOnly
	         */
	        this.targetVisuals = {};

	        /**
	         * @readOnly
	         */
	        this.controllerVisuals = {};

	        /**
	         * @readOnly
	         */
	        this.textStyleModel;

	        /**
	         * [width, height]
	         * @readOnly
	         * @type {Array.<number>}
	         */
	        this.itemSize;

	        this.mergeDefaultAndTheme(option, ecModel);
	    },

	    /**
	     * @protected
	     */
	    optionUpdated: function optionUpdated(newOption, isInit) {
	        var thisOption = this.option;

	        // FIXME
	        // necessary?
	        // Disable realtime view update if canvas is not supported.
	        if (!env.canvasSupported) {
	            thisOption.realtime = false;
	        }

	        !isInit && visualSolution.replaceVisualOption(thisOption, newOption, this.replacableOptionKeys);

	        this.textStyleModel = this.getModel('textStyle');

	        this.resetItemSize();

	        this.completeVisualOption();
	    },

	    /**
	     * @protected
	     */
	    resetVisual: function resetVisual(supplementVisualOption) {
	        var stateList = this.stateList;
	        supplementVisualOption = zrUtil.bind(supplementVisualOption, this);

	        this.controllerVisuals = visualSolution.createVisualMappings(this.option.controller, stateList, supplementVisualOption);
	        this.targetVisuals = visualSolution.createVisualMappings(this.option.target, stateList, supplementVisualOption);
	    },

	    /**
	     * @protected
	     */
	    resetTargetSeries: function resetTargetSeries() {
	        var thisOption = this.option;
	        var allSeriesIndex = thisOption.seriesIndex == null;
	        thisOption.seriesIndex = allSeriesIndex ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);

	        allSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {
	            thisOption.seriesIndex.push(index);
	        });
	    },

	    /**
	     * @public
	     */
	    eachTargetSeries: function eachTargetSeries(callback, context) {
	        zrUtil.each(this.option.seriesIndex, function (seriesIndex) {
	            callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));
	        }, this);
	    },

	    /**
	     * @pubilc
	     */
	    isTargetSeries: function isTargetSeries(seriesModel) {
	        var is = false;
	        this.eachTargetSeries(function (model) {
	            model === seriesModel && (is = true);
	        });
	        return is;
	    },

	    /**
	     * @example
	     * this.formatValueText(someVal); // format single numeric value to text.
	     * this.formatValueText(someVal, true); // format single category value to text.
	     * this.formatValueText([min, max]); // format numeric min-max to text.
	     * this.formatValueText([this.dataBound[0], max]); // using data lower bound.
	     * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.
	     *
	     * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].
	     * @param {boolean} [isCategory=false] Only available when value is number.
	     * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.
	     * @return {string}
	     * @protected
	     */
	    formatValueText: function formatValueText(value, isCategory, edgeSymbols) {
	        var option = this.option;
	        var precision = option.precision;
	        var dataBound = this.dataBound;
	        var formatter = option.formatter;
	        var isMinMax;
	        var textValue;
	        edgeSymbols = edgeSymbols || ['<', '>'];

	        if (zrUtil.isArray(value)) {
	            value = value.slice();
	            isMinMax = true;
	        }

	        textValue = isCategory ? value : isMinMax ? [toFixed(value[0]), toFixed(value[1])] : toFixed(value);

	        if (zrUtil.isString(formatter)) {
	            return formatter.replace('{value}', isMinMax ? textValue[0] : textValue).replace('{value2}', isMinMax ? textValue[1] : textValue);
	        } else if (zrUtil.isFunction(formatter)) {
	            return isMinMax ? formatter(value[0], value[1]) : formatter(value);
	        }

	        if (isMinMax) {
	            if (value[0] === dataBound[0]) {
	                return edgeSymbols[0] + ' ' + textValue[1];
	            } else if (value[1] === dataBound[1]) {
	                return edgeSymbols[1] + ' ' + textValue[0];
	            } else {
	                return textValue[0] + ' - ' + textValue[1];
	            }
	        } else {
	            // Format single value (includes category case).
	            return textValue;
	        }

	        function toFixed(val) {
	            return val === dataBound[0] ? 'min' : val === dataBound[1] ? 'max' : (+val).toFixed(precision);
	        }
	    },

	    /**
	     * @protected
	     */
	    resetExtent: function resetExtent() {
	        var thisOption = this.option;

	        // Can not calculate data extent by data here.
	        // Because series and data may be modified in processing stage.
	        // So we do not support the feature "auto min/max".

	        var extent = asc([thisOption.min, thisOption.max]);

	        this._dataExtent = extent;
	    },

	    /**
	     * @public
	     * @param {module:echarts/data/List} list
	     * @return {string} Concrete dimention. If return null/undefined,
	     *                  no dimension used.
	     */
	    getDataDimension: function getDataDimension(list) {
	        var optDim = this.option.dimension;
	        return optDim != null ? optDim : list.dimensions.length - 1;
	    },

	    /**
	     * @public
	     * @override
	     */
	    getExtent: function getExtent() {
	        return this._dataExtent.slice();
	    },

	    /**
	     * @protected
	     */
	    completeVisualOption: function completeVisualOption() {
	        var thisOption = this.option;
	        var base = { inRange: thisOption.inRange, outOfRange: thisOption.outOfRange };

	        var target = thisOption.target || (thisOption.target = {});
	        var controller = thisOption.controller || (thisOption.controller = {});

	        zrUtil.merge(target, base); // Do not override
	        zrUtil.merge(controller, base); // Do not override

	        var isCategory = this.isCategory();

	        completeSingle.call(this, target);
	        completeSingle.call(this, controller);
	        completeInactive.call(this, target, 'inRange', 'outOfRange');
	        // completeInactive.call(this, target, 'outOfRange', 'inRange');
	        completeController.call(this, controller);

	        function completeSingle(base) {
	            // Compatible with ec2 dataRange.color.
	            // The mapping order of dataRange.color is: [high value, ..., low value]
	            // whereas inRange.color and outOfRange.color is [low value, ..., high value]
	            // Notice: ec2 has no inverse.
	            if (isArray(thisOption.color)
	            // If there has been inRange: {symbol: ...}, adding color is a mistake.
	            // So adding color only when no inRange defined.
	            && !base.inRange) {
	                base.inRange = { color: thisOption.color.slice().reverse() };
	            }

	            // Compatible with previous logic, always give a defautl color, otherwise
	            // simple config with no inRange and outOfRange will not work.
	            // Originally we use visualMap.color as the default color, but setOption at
	            // the second time the default color will be erased. So we change to use
	            // constant DEFAULT_COLOR.
	            // If user do not want the defualt color, set inRange: {color: null}.
	            base.inRange = base.inRange || { color: DEFAULT_COLOR };

	            // If using shortcut like: {inRange: 'symbol'}, complete default value.
	            each(this.stateList, function (state) {
	                var visualType = base[state];

	                if (zrUtil.isString(visualType)) {
	                    var defa = visualDefault.get(visualType, 'active', isCategory);
	                    if (defa) {
	                        base[state] = {};
	                        base[state][visualType] = defa;
	                    } else {
	                        // Mark as not specified.
	                        delete base[state];
	                    }
	                }
	            }, this);
	        }

	        function completeInactive(base, stateExist, stateAbsent) {
	            var optExist = base[stateExist];
	            var optAbsent = base[stateAbsent];

	            if (optExist && !optAbsent) {
	                optAbsent = base[stateAbsent] = {};
	                each(optExist, function (visualData, visualType) {
	                    if (!VisualMapping.isValidType(visualType)) {
	                        return;
	                    }

	                    var defa = visualDefault.get(visualType, 'inactive', isCategory);

	                    if (defa != null) {
	                        optAbsent[visualType] = defa;

	                        // Compatibable with ec2:
	                        // Only inactive color to rgba(0,0,0,0) can not
	                        // make label transparent, so use opacity also.
	                        if (visualType === 'color' && !optAbsent.hasOwnProperty('opacity') && !optAbsent.hasOwnProperty('colorAlpha')) {
	                            optAbsent.opacity = [0, 0];
	                        }
	                    }
	                });
	            }
	        }

	        function completeController(controller) {
	            var symbolExists = (controller.inRange || {}).symbol || (controller.outOfRange || {}).symbol;
	            var symbolSizeExists = (controller.inRange || {}).symbolSize || (controller.outOfRange || {}).symbolSize;
	            var inactiveColor = this.get('inactiveColor');

	            each(this.stateList, function (state) {

	                var itemSize = this.itemSize;
	                var visuals = controller[state];

	                // Set inactive color for controller if no other color
	                // attr (like colorAlpha) specified.
	                if (!visuals) {
	                    visuals = controller[state] = {
	                        color: isCategory ? inactiveColor : [inactiveColor]
	                    };
	                }

	                // Consistent symbol and symbolSize if not specified.
	                if (visuals.symbol == null) {
	                    visuals.symbol = symbolExists && zrUtil.clone(symbolExists) || (isCategory ? 'roundRect' : ['roundRect']);
	                }
	                if (visuals.symbolSize == null) {
	                    visuals.symbolSize = symbolSizeExists && zrUtil.clone(symbolSizeExists) || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);
	                }

	                // Filter square and none.
	                visuals.symbol = mapVisual(visuals.symbol, function (symbol) {
	                    return symbol === 'none' || symbol === 'square' ? 'roundRect' : symbol;
	                });

	                // Normalize symbolSize
	                var symbolSize = visuals.symbolSize;

	                if (symbolSize != null) {
	                    var max = -Infinity;
	                    // symbolSize can be object when categories defined.
	                    eachVisual(symbolSize, function (value) {
	                        value > max && (max = value);
	                    });
	                    visuals.symbolSize = mapVisual(symbolSize, function (value) {
	                        return linearMap(value, [0, max], [0, itemSize[0]], true);
	                    });
	                }
	            }, this);
	        }
	    },

	    /**
	     * @protected
	     */
	    resetItemSize: function resetItemSize() {
	        this.itemSize = [parseFloat(this.get('itemWidth')), parseFloat(this.get('itemHeight'))];
	    },

	    /**
	     * @public
	     */
	    isCategory: function isCategory() {
	        return !!this.option.categories;
	    },

	    /**
	     * @public
	     * @abstract
	     */
	    setSelected: noop,

	    /**
	     * @public
	     * @abstract
	     * @param {*|module:echarts/data/List} valueOrData
	     * @param {number} dataIndex
	     * @return {string} state See this.stateList
	     */
	    getValueState: noop,

	    /**
	     * FIXME
	     * Do not publish to thirt-part-dev temporarily
	     * util the interface is stable. (Should it return
	     * a function but not visual meta?)
	     *
	     * @pubilc
	     * @abstract
	     * @param {Function} getColorVisual
	     *        params: value, valueState
	     *        return: color
	     * @return {Object} visualMeta
	     *        should includes {stops, outerColors}
	     *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]
	     */
	    getVisualMeta: noop

	});

	module.exports = VisualMapModel;

/***/ },
/* 849 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Visual mapping.
	 */

	var zrUtil = __webpack_require__(504);

	var visualDefault = {

	    /**
	     * @public
	     */
	    get: function get(visualType, key, isCategory) {
	        var value = zrUtil.clone((defaultOption[visualType] || {})[key]);

	        return isCategory ? zrUtil.isArray(value) ? value[value.length - 1] : value : value;
	    }

	};

	var defaultOption = {

	    color: {
	        active: ['#006edd', '#e0ffff'],
	        inactive: ['rgba(0,0,0,0)']
	    },

	    colorHue: {
	        active: [0, 360],
	        inactive: [0, 0]
	    },

	    colorSaturation: {
	        active: [0.3, 1],
	        inactive: [0, 0]
	    },

	    colorLightness: {
	        active: [0.9, 0.5],
	        inactive: [0, 0]
	    },

	    colorAlpha: {
	        active: [0.3, 1],
	        inactive: [0, 0]
	    },

	    opacity: {
	        active: [0.3, 1],
	        inactive: [0, 0]
	    },

	    symbol: {
	        active: ['circle', 'roundRect', 'diamond'],
	        inactive: ['none']
	    },

	    symbolSize: {
	        active: [10, 50],
	        inactive: [0, 0]
	    }
	};

	module.exports = visualDefault;

/***/ },
/* 850 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var VisualMapView = __webpack_require__(851);
	var graphic = __webpack_require__(543);
	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var sliderMove = __webpack_require__(836);
	var LinearGradient = __webpack_require__(578);
	var helper = __webpack_require__(852);
	var modelUtil = __webpack_require__(505);

	var linearMap = numberUtil.linearMap;
	var each = zrUtil.each;
	var mathMin = Math.min;
	var mathMax = Math.max;

	// Arbitrary value
	var HOVER_LINK_SIZE = 12;
	var HOVER_LINK_OUT = 6;

	// Notice:
	// Any "interval" should be by the order of [low, high].
	// "handle0" (handleIndex === 0) maps to
	// low data value: this._dataInterval[0] and has low coord.
	// "handle1" (handleIndex === 1) maps to
	// high data value: this._dataInterval[1] and has high coord.
	// The logic of transform is implemented in this._createBarGroup.

	var ContinuousView = VisualMapView.extend({

	    type: 'visualMap.continuous',

	    /**
	     * @override
	     */
	    init: function init() {

	        ContinuousView.superApply(this, 'init', arguments);

	        /**
	         * @private
	         */
	        this._shapes = {};

	        /**
	         * @private
	         */
	        this._dataInterval = [];

	        /**
	         * @private
	         */
	        this._handleEnds = [];

	        /**
	         * @private
	         */
	        this._orient;

	        /**
	         * @private
	         */
	        this._useHandle;

	        /**
	         * @private
	         */
	        this._hoverLinkDataIndices = [];

	        /**
	         * @private
	         */
	        this._dragging;

	        /**
	         * @private
	         */
	        this._hovering;
	    },

	    /**
	     * @protected
	     * @override
	     */
	    doRender: function doRender(visualMapModel, ecModel, api, payload) {
	        if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {
	            this._buildView();
	        }
	    },

	    /**
	     * @private
	     */
	    _buildView: function _buildView() {
	        this.group.removeAll();

	        var visualMapModel = this.visualMapModel;
	        var thisGroup = this.group;

	        this._orient = visualMapModel.get('orient');
	        this._useHandle = visualMapModel.get('calculable');

	        this._resetInterval();

	        this._renderBar(thisGroup);

	        var dataRangeText = visualMapModel.get('text');
	        this._renderEndsText(thisGroup, dataRangeText, 0);
	        this._renderEndsText(thisGroup, dataRangeText, 1);

	        // Do this for background size calculation.
	        this._updateView(true);

	        // After updating view, inner shapes is built completely,
	        // and then background can be rendered.
	        this.renderBackground(thisGroup);

	        // Real update view
	        this._updateView();

	        this._enableHoverLinkToSeries();
	        this._enableHoverLinkFromSeries();

	        this.positionGroup(thisGroup);
	    },

	    /**
	     * @private
	     */
	    _renderEndsText: function _renderEndsText(group, dataRangeText, endsIndex) {
	        if (!dataRangeText) {
	            return;
	        }

	        // Compatible with ec2, text[0] map to high value, text[1] map low value.
	        var text = dataRangeText[1 - endsIndex];
	        text = text != null ? text + '' : '';

	        var visualMapModel = this.visualMapModel;
	        var textGap = visualMapModel.get('textGap');
	        var itemSize = visualMapModel.itemSize;

	        var barGroup = this._shapes.barGroup;
	        var position = this._applyTransform([itemSize[0] / 2, endsIndex === 0 ? -textGap : itemSize[1] + textGap], barGroup);
	        var align = this._applyTransform(endsIndex === 0 ? 'bottom' : 'top', barGroup);
	        var orient = this._orient;
	        var textStyleModel = this.visualMapModel.textStyleModel;

	        this.group.add(new graphic.Text({
	            style: {
	                x: position[0],
	                y: position[1],
	                textVerticalAlign: orient === 'horizontal' ? 'middle' : align,
	                textAlign: orient === 'horizontal' ? align : 'center',
	                text: text,
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            }
	        }));
	    },

	    /**
	     * @private
	     */
	    _renderBar: function _renderBar(targetGroup) {
	        var visualMapModel = this.visualMapModel;
	        var shapes = this._shapes;
	        var itemSize = visualMapModel.itemSize;
	        var orient = this._orient;
	        var useHandle = this._useHandle;
	        var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);
	        var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);

	        // Bar
	        barGroup.add(shapes.outOfRange = createPolygon());
	        barGroup.add(shapes.inRange = createPolygon(null, useHandle ? 'move' : null, zrUtil.bind(this._dragHandle, this, 'all', false), zrUtil.bind(this._dragHandle, this, 'all', true)));

	        var textRect = visualMapModel.textStyleModel.getTextRect('国');
	        var textSize = mathMax(textRect.width, textRect.height);

	        // Handle
	        if (useHandle) {
	            shapes.handleThumbs = [];
	            shapes.handleLabels = [];
	            shapes.handleLabelPoints = [];

	            this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);
	            this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);
	        }

	        this._createIndicator(barGroup, itemSize, textSize, orient);

	        targetGroup.add(barGroup);
	    },

	    /**
	     * @private
	     */
	    _createHandle: function _createHandle(barGroup, handleIndex, itemSize, textSize, orient) {
	        var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);
	        var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);
	        var handleThumb = createPolygon(createHandlePoints(handleIndex, textSize), 'move', onDrift, onDragEnd);
	        handleThumb.position[0] = itemSize[0];
	        barGroup.add(handleThumb);

	        // Text is always horizontal layout but should not be effected by
	        // transform (orient/inverse). So label is built separately but not
	        // use zrender/graphic/helper/RectText, and is located based on view
	        // group (according to handleLabelPoint) but not barGroup.
	        var textStyleModel = this.visualMapModel.textStyleModel;
	        var handleLabel = new graphic.Text({
	            draggable: true,
	            drift: onDrift,
	            ondragend: onDragEnd,
	            style: {
	                x: 0, y: 0, text: '',
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            }
	        });
	        this.group.add(handleLabel);

	        var handleLabelPoint = [orient === 'horizontal' ? textSize / 2 : textSize * 1.5, orient === 'horizontal' ? handleIndex === 0 ? -(textSize * 1.5) : textSize * 1.5 : handleIndex === 0 ? -textSize / 2 : textSize / 2];

	        var shapes = this._shapes;
	        shapes.handleThumbs[handleIndex] = handleThumb;
	        shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
	        shapes.handleLabels[handleIndex] = handleLabel;
	    },

	    /**
	     * @private
	     */
	    _createIndicator: function _createIndicator(barGroup, itemSize, textSize, orient) {
	        var indicator = createPolygon([[0, 0]], 'move');
	        indicator.position[0] = itemSize[0];
	        indicator.attr({ invisible: true, silent: true });
	        barGroup.add(indicator);

	        var textStyleModel = this.visualMapModel.textStyleModel;
	        var indicatorLabel = new graphic.Text({
	            silent: true,
	            invisible: true,
	            style: {
	                x: 0, y: 0, text: '',
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            }
	        });
	        this.group.add(indicatorLabel);

	        var indicatorLabelPoint = [orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3, 0];

	        var shapes = this._shapes;
	        shapes.indicator = indicator;
	        shapes.indicatorLabel = indicatorLabel;
	        shapes.indicatorLabelPoint = indicatorLabelPoint;
	    },

	    /**
	     * @private
	     */
	    _dragHandle: function _dragHandle(handleIndex, isEnd, dx, dy) {
	        if (!this._useHandle) {
	            return;
	        }

	        this._dragging = !isEnd;

	        if (!isEnd) {
	            // Transform dx, dy to bar coordination.
	            var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);
	            this._updateInterval(handleIndex, vertex[1]);

	            // Considering realtime, update view should be executed
	            // before dispatch action.
	            this._updateView();
	        }

	        // dragEnd do not dispatch action when realtime.
	        if (isEnd === !this.visualMapModel.get('realtime')) {
	            // jshint ignore:line
	            this.api.dispatchAction({
	                type: 'selectDataRange',
	                from: this.uid,
	                visualMapId: this.visualMapModel.id,
	                selected: this._dataInterval.slice()
	            });
	        }

	        if (isEnd) {
	            !this._hovering && this._clearHoverLinkToSeries();
	        } else if (useHoverLinkOnHandle(this.visualMapModel)) {
	            this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);
	        }
	    },

	    /**
	     * @private
	     */
	    _resetInterval: function _resetInterval() {
	        var visualMapModel = this.visualMapModel;

	        var dataInterval = this._dataInterval = visualMapModel.getSelected();
	        var dataExtent = visualMapModel.getExtent();
	        var sizeExtent = [0, visualMapModel.itemSize[1]];

	        this._handleEnds = [linearMap(dataInterval[0], dataExtent, sizeExtent, true), linearMap(dataInterval[1], dataExtent, sizeExtent, true)];
	    },

	    /**
	     * @private
	     * @param {(number|string)} handleIndex 0 or 1 or 'all'
	     * @param {number} dx
	     * @param {number} dy
	     */
	    _updateInterval: function _updateInterval(handleIndex, delta) {
	        delta = delta || 0;
	        var visualMapModel = this.visualMapModel;
	        var handleEnds = this._handleEnds;

	        sliderMove(delta, handleEnds, [0, visualMapModel.itemSize[1]], handleIndex === 'all' ? 'rigid' : 'push', handleIndex);
	        var dataExtent = visualMapModel.getExtent();
	        var sizeExtent = [0, visualMapModel.itemSize[1]];
	        // Update data interval.
	        this._dataInterval = [linearMap(handleEnds[0], sizeExtent, dataExtent, true), linearMap(handleEnds[1], sizeExtent, dataExtent, true)];
	    },

	    /**
	     * @private
	     */
	    _updateView: function _updateView(forSketch) {
	        var visualMapModel = this.visualMapModel;
	        var dataExtent = visualMapModel.getExtent();
	        var shapes = this._shapes;

	        var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
	        var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;

	        var visualInRange = this._createBarVisual(this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange');
	        var visualOutOfRange = this._createBarVisual(dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange');

	        shapes.inRange.setStyle({
	            fill: visualInRange.barColor,
	            opacity: visualInRange.opacity
	        }).setShape('points', visualInRange.barPoints);
	        shapes.outOfRange.setStyle({
	            fill: visualOutOfRange.barColor,
	            opacity: visualOutOfRange.opacity
	        }).setShape('points', visualOutOfRange.barPoints);

	        this._updateHandle(inRangeHandleEnds, visualInRange);
	    },

	    /**
	     * @private
	     */
	    _createBarVisual: function _createBarVisual(dataInterval, dataExtent, handleEnds, forceState) {
	        var opts = {
	            forceState: forceState,
	            convertOpacityToAlpha: true
	        };
	        var colorStops = this._makeColorGradient(dataInterval, opts);

	        var symbolSizes = [this.getControllerVisual(dataInterval[0], 'symbolSize', opts), this.getControllerVisual(dataInterval[1], 'symbolSize', opts)];
	        var barPoints = this._createBarPoints(handleEnds, symbolSizes);

	        return {
	            barColor: new LinearGradient(0, 0, 0, 1, colorStops),
	            barPoints: barPoints,
	            handlesColor: [colorStops[0].color, colorStops[colorStops.length - 1].color]
	        };
	    },

	    /**
	     * @private
	     */
	    _makeColorGradient: function _makeColorGradient(dataInterval, opts) {
	        // Considering colorHue, which is not linear, so we have to sample
	        // to calculate gradient color stops, but not only caculate head
	        // and tail.
	        var sampleNumber = 100; // Arbitrary value.
	        var colorStops = [];
	        var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;

	        colorStops.push({
	            color: this.getControllerVisual(dataInterval[0], 'color', opts),
	            offset: 0
	        });

	        for (var i = 1; i < sampleNumber; i++) {
	            var currValue = dataInterval[0] + step * i;
	            if (currValue > dataInterval[1]) {
	                break;
	            }
	            colorStops.push({
	                color: this.getControllerVisual(currValue, 'color', opts),
	                offset: i / sampleNumber
	            });
	        }

	        colorStops.push({
	            color: this.getControllerVisual(dataInterval[1], 'color', opts),
	            offset: 1
	        });

	        return colorStops;
	    },

	    /**
	     * @private
	     */
	    _createBarPoints: function _createBarPoints(handleEnds, symbolSizes) {
	        var itemSize = this.visualMapModel.itemSize;

	        return [[itemSize[0] - symbolSizes[0], handleEnds[0]], [itemSize[0], handleEnds[0]], [itemSize[0], handleEnds[1]], [itemSize[0] - symbolSizes[1], handleEnds[1]]];
	    },

	    /**
	     * @private
	     */
	    _createBarGroup: function _createBarGroup(itemAlign) {
	        var orient = this._orient;
	        var inverse = this.visualMapModel.get('inverse');

	        return new graphic.Group(orient === 'horizontal' && !inverse ? { scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2 } : orient === 'horizontal' && inverse ? { scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2 } : orient === 'vertical' && !inverse ? { scale: itemAlign === 'left' ? [1, -1] : [-1, -1] } : { scale: itemAlign === 'left' ? [1, 1] : [-1, 1] });
	    },

	    /**
	     * @private
	     */
	    _updateHandle: function _updateHandle(handleEnds, visualInRange) {
	        if (!this._useHandle) {
	            return;
	        }

	        var shapes = this._shapes;
	        var visualMapModel = this.visualMapModel;
	        var handleThumbs = shapes.handleThumbs;
	        var handleLabels = shapes.handleLabels;

	        each([0, 1], function (handleIndex) {
	            var handleThumb = handleThumbs[handleIndex];
	            handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);
	            handleThumb.position[1] = handleEnds[handleIndex];

	            // Update handle label position.
	            var textPoint = graphic.applyTransform(shapes.handleLabelPoints[handleIndex], graphic.getTransform(handleThumb, this.group));
	            handleLabels[handleIndex].setStyle({
	                x: textPoint[0],
	                y: textPoint[1],
	                text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),
	                textVerticalAlign: 'middle',
	                textAlign: this._applyTransform(this._orient === 'horizontal' ? handleIndex === 0 ? 'bottom' : 'top' : 'left', shapes.barGroup)
	            });
	        }, this);
	    },

	    /**
	     * @private
	     * @param {number} cursorValue
	     * @param {number} textValue
	     * @param {string} [rangeSymbol]
	     * @param {number} [halfHoverLinkSize]
	     */
	    _showIndicator: function _showIndicator(cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {
	        var visualMapModel = this.visualMapModel;
	        var dataExtent = visualMapModel.getExtent();
	        var itemSize = visualMapModel.itemSize;
	        var sizeExtent = [0, itemSize[1]];
	        var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);

	        var shapes = this._shapes;
	        var indicator = shapes.indicator;
	        if (!indicator) {
	            return;
	        }

	        indicator.position[1] = pos;
	        indicator.attr('invisible', false);
	        indicator.setShape('points', createIndicatorPoints(!!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]));

	        var opts = { convertOpacityToAlpha: true };
	        var color = this.getControllerVisual(cursorValue, 'color', opts);
	        indicator.setStyle('fill', color);

	        // Update handle label position.
	        var textPoint = graphic.applyTransform(shapes.indicatorLabelPoint, graphic.getTransform(indicator, this.group));

	        var indicatorLabel = shapes.indicatorLabel;
	        indicatorLabel.attr('invisible', false);
	        var align = this._applyTransform('left', shapes.barGroup);
	        var orient = this._orient;
	        indicatorLabel.setStyle({
	            text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),
	            textVerticalAlign: orient === 'horizontal' ? align : 'middle',
	            textAlign: orient === 'horizontal' ? 'center' : align,
	            x: textPoint[0],
	            y: textPoint[1]
	        });
	    },

	    /**
	     * @private
	     */
	    _enableHoverLinkToSeries: function _enableHoverLinkToSeries() {
	        var self = this;
	        this._shapes.barGroup.on('mousemove', function (e) {
	            self._hovering = true;

	            if (!self._dragging) {
	                var itemSize = self.visualMapModel.itemSize;
	                var pos = self._applyTransform([e.offsetX, e.offsetY], self._shapes.barGroup, true, true);
	                // For hover link show when hover handle, which might be
	                // below or upper than sizeExtent.
	                pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);

	                self._doHoverLinkToSeries(pos[1], 0 <= pos[0] && pos[0] <= itemSize[0]);
	            }
	        }).on('mouseout', function () {
	            // When mouse is out of handle, hoverLink still need
	            // to be displayed when realtime is set as false.
	            self._hovering = false;
	            !self._dragging && self._clearHoverLinkToSeries();
	        });
	    },

	    /**
	     * @private
	     */
	    _enableHoverLinkFromSeries: function _enableHoverLinkFromSeries() {
	        var zr = this.api.getZr();

	        if (this.visualMapModel.option.hoverLink) {
	            zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);
	            zr.on('mouseout', this._hideIndicator, this);
	        } else {
	            this._clearHoverLinkFromSeries();
	        }
	    },

	    /**
	     * @private
	     */
	    _doHoverLinkToSeries: function _doHoverLinkToSeries(cursorPos, hoverOnBar) {
	        var visualMapModel = this.visualMapModel;
	        var itemSize = visualMapModel.itemSize;

	        if (!visualMapModel.option.hoverLink) {
	            return;
	        }

	        var sizeExtent = [0, itemSize[1]];
	        var dataExtent = visualMapModel.getExtent();

	        // For hover link show when hover handle, which might be below or upper than sizeExtent.
	        cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);

	        var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);
	        var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];
	        var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);
	        var valueRange = [linearMap(hoverRange[0], sizeExtent, dataExtent, true), linearMap(hoverRange[1], sizeExtent, dataExtent, true)];
	        // Consider data range is out of visualMap range, see test/visualMap-continuous.html,
	        // where china and india has very large population.
	        hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);
	        hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);

	        // Do not show indicator when mouse is over handle,
	        // otherwise labels overlap, especially when dragging.
	        if (hoverOnBar) {
	            if (valueRange[0] === -Infinity) {
	                this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);
	            } else if (valueRange[1] === Infinity) {
	                this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);
	            } else {
	                this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);
	            }
	        }

	        // When realtime is set as false, handles, which are in barGroup,
	        // also trigger hoverLink, which help user to realize where they
	        // focus on when dragging. (see test/heatmap-large.html)
	        // When realtime is set as true, highlight will not show when hover
	        // handle, because the label on handle, which displays a exact value
	        // but not range, might mislead users.
	        var oldBatch = this._hoverLinkDataIndices;
	        var newBatch = [];
	        if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {
	            newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);
	        }

	        var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);
	        this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));
	        this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));
	    },

	    /**
	     * @private
	     */
	    _hoverLinkFromSeriesMouseOver: function _hoverLinkFromSeriesMouseOver(e) {
	        var el = e.target;

	        if (!el || el.dataIndex == null) {
	            return;
	        }

	        var dataModel = el.dataModel || this.ecModel.getSeriesByIndex(el.seriesIndex);
	        var data = dataModel.getData(el.dataType);
	        var dim = data.getDimension(this.visualMapModel.getDataDimension(data));
	        var value = data.get(dim, el.dataIndex, true);

	        if (!isNaN(value)) {
	            this._showIndicator(value, value);
	        }
	    },

	    /**
	     * @private
	     */
	    _hideIndicator: function _hideIndicator() {
	        var shapes = this._shapes;
	        shapes.indicator && shapes.indicator.attr('invisible', true);
	        shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);
	    },

	    /**
	     * @private
	     */
	    _clearHoverLinkToSeries: function _clearHoverLinkToSeries() {
	        this._hideIndicator();

	        var indices = this._hoverLinkDataIndices;

	        this._dispatchHighDown('downplay', helper.convertDataIndex(indices));

	        indices.length = 0;
	    },

	    /**
	     * @private
	     */
	    _clearHoverLinkFromSeries: function _clearHoverLinkFromSeries() {
	        this._hideIndicator();

	        var zr = this.api.getZr();
	        zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);
	        zr.off('mouseout', this._hideIndicator);
	    },

	    /**
	     * @private
	     */
	    _applyTransform: function _applyTransform(vertex, element, inverse, global) {
	        var transform = graphic.getTransform(element, global ? null : this.group);

	        return graphic[zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'](vertex, transform, inverse);
	    },

	    /**
	     * @private
	     */
	    _dispatchHighDown: function _dispatchHighDown(type, batch) {
	        batch && batch.length && this.api.dispatchAction({
	            type: type,
	            batch: batch
	        });
	    },

	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        this._clearHoverLinkFromSeries();
	        this._clearHoverLinkToSeries();
	    },

	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._clearHoverLinkFromSeries();
	        this._clearHoverLinkToSeries();
	    }

	});

	function createPolygon(points, cursor, onDrift, onDragEnd) {
	    return new graphic.Polygon({
	        shape: { points: points },
	        draggable: !!onDrift,
	        cursor: cursor,
	        drift: onDrift,
	        ondragend: onDragEnd
	    });
	}

	function createHandlePoints(handleIndex, textSize) {
	    return handleIndex === 0 ? [[0, 0], [textSize, 0], [textSize, -textSize]] : [[0, 0], [textSize, 0], [textSize, textSize]];
	}

	function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {
	    return isRange ? [// indicate range
	    [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))], [HOVER_LINK_OUT, 0], [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]] : [// indicate single value
	    [0, 0], [5, -5], [5, 5]];
	}

	function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {
	    var halfHoverLinkSize = HOVER_LINK_SIZE / 2;
	    var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');
	    if (hoverLinkDataSize) {
	        halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;
	    }
	    return halfHoverLinkSize;
	}

	function useHoverLinkOnHandle(visualMapModel) {
	    return !visualMapModel.get('realtime') && visualMapModel.get('hoverLinkOnHandle');
	}

	module.exports = ContinuousView;

/***/ },
/* 851 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var formatUtil = __webpack_require__(506);
	var layout = __webpack_require__(521);
	var echarts = __webpack_require__(501);
	var VisualMapping = __webpack_require__(695);

	module.exports = echarts.extendComponentView({

	    type: 'visualMap',

	    /**
	     * @readOnly
	     * @type {Object}
	     */
	    autoPositionValues: { left: 1, right: 1, top: 1, bottom: 1 },

	    init: function init(ecModel, api) {
	        /**
	         * @readOnly
	         * @type {module:echarts/model/Global}
	         */
	        this.ecModel = ecModel;

	        /**
	         * @readOnly
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this.api = api;

	        /**
	         * @readOnly
	         * @type {module:echarts/component/visualMap/visualMapModel}
	         */
	        this.visualMapModel;
	    },

	    /**
	     * @protected
	     */
	    render: function render(visualMapModel, ecModel, api, payload) {
	        this.visualMapModel = visualMapModel;

	        if (visualMapModel.get('show') === false) {
	            this.group.removeAll();
	            return;
	        }

	        this.doRender.apply(this, arguments);
	    },

	    /**
	     * @protected
	     */
	    renderBackground: function renderBackground(group) {
	        var visualMapModel = this.visualMapModel;
	        var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);
	        var rect = group.getBoundingRect();

	        group.add(new graphic.Rect({
	            z2: -1, // Lay background rect on the lowest layer.
	            silent: true,
	            shape: {
	                x: rect.x - padding[3],
	                y: rect.y - padding[0],
	                width: rect.width + padding[3] + padding[1],
	                height: rect.height + padding[0] + padding[2]
	            },
	            style: {
	                fill: visualMapModel.get('backgroundColor'),
	                stroke: visualMapModel.get('borderColor'),
	                lineWidth: visualMapModel.get('borderWidth')
	            }
	        }));
	    },

	    /**
	     * @protected
	     * @param {number} targetValue can be Infinity or -Infinity
	     * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'
	     * @param {Object} [opts]
	     * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.
	     * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.
	     * @return {*} Visual value.
	     */
	    getControllerVisual: function getControllerVisual(targetValue, visualCluster, opts) {
	        opts = opts || {};

	        var forceState = opts.forceState;
	        var visualMapModel = this.visualMapModel;
	        var visualObj = {};

	        // Default values.
	        if (visualCluster === 'symbol') {
	            visualObj.symbol = visualMapModel.get('itemSymbol');
	        }
	        if (visualCluster === 'color') {
	            var defaultColor = visualMapModel.get('contentColor');
	            visualObj.color = defaultColor;
	        }

	        function getter(key) {
	            return visualObj[key];
	        }

	        function setter(key, value) {
	            visualObj[key] = value;
	        }

	        var mappings = visualMapModel.controllerVisuals[forceState || visualMapModel.getValueState(targetValue)];
	        var visualTypes = VisualMapping.prepareVisualTypes(mappings);

	        zrUtil.each(visualTypes, function (type) {
	            var visualMapping = mappings[type];
	            if (opts.convertOpacityToAlpha && type === 'opacity') {
	                type = 'colorAlpha';
	                visualMapping = mappings.__alphaForOpacity;
	            }
	            if (VisualMapping.dependsOn(type, visualCluster)) {
	                visualMapping && visualMapping.applyVisual(targetValue, getter, setter);
	            }
	        });

	        return visualObj[visualCluster];
	    },

	    /**
	     * @protected
	     */
	    positionGroup: function positionGroup(group) {
	        var model = this.visualMapModel;
	        var api = this.api;

	        layout.positionElement(group, model.getBoxLayoutParams(), { width: api.getWidth(), height: api.getHeight() });
	    },

	    /**
	     * @protected
	     * @abstract
	     */
	    doRender: zrUtil.noop

	});

/***/ },
/* 852 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var layout = __webpack_require__(521);

	var helper = {

	    /**
	     * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Array.<number>} itemSize always [short, long]
	     * @return {string} 'left' or 'right' or 'top' or 'bottom'
	     */
	    getItemAlign: function getItemAlign(visualMapModel, api, itemSize) {
	        var modelOption = visualMapModel.option;
	        var itemAlign = modelOption.align;

	        if (itemAlign != null && itemAlign !== 'auto') {
	            return itemAlign;
	        }

	        // Auto decision align.
	        var ecSize = { width: api.getWidth(), height: api.getHeight() };
	        var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;

	        var paramsSet = [['left', 'right', 'width'], ['top', 'bottom', 'height']];
	        var reals = paramsSet[realIndex];
	        var fakeValue = [0, null, 10];

	        var layoutInput = {};
	        for (var i = 0; i < 3; i++) {
	            layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
	            layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
	        }

	        var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];
	        var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);

	        return reals[(rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5 < ecSize[rParam[1]] * 0.5 ? 0 : 1];
	    },

	    /**
	     * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and
	     * dataIndexInside means filtered index.
	     */
	    convertDataIndex: function convertDataIndex(batch) {
	        zrUtil.each(batch || [], function (batchItem) {
	            if (batch.dataIndex != null) {
	                batch.dataIndexInside = batch.dataIndex;
	                batch.dataIndex = null;
	            }
	        });
	        return batch;
	    }

	};

	module.exports = helper;

/***/ },
/* 853 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data range action
	 */

	var echarts = __webpack_require__(501);

	var actionInfo = {
	    type: 'selectDataRange',
	    event: 'dataRangeSelected',
	    // FIXME use updateView appears wrong
	    update: 'update'
	};

	echarts.registerAction(actionInfo, function (payload, ecModel) {

	    ecModel.eachComponent({ mainType: 'visualMap', query: payload }, function (model) {
	        model.setSelected(payload.selected);
	    });
	});

/***/ },
/* 854 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * DataZoom component entry
	 */

	__webpack_require__(501).registerPreprocessor(__webpack_require__(844));

	__webpack_require__(845);
	__webpack_require__(846);
	__webpack_require__(855);
	__webpack_require__(856);
	__webpack_require__(853);

/***/ },
/* 855 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var VisualMapModel = __webpack_require__(848);
	var zrUtil = __webpack_require__(504);
	var VisualMapping = __webpack_require__(695);
	var visualDefault = __webpack_require__(849);
	var reformIntervals = __webpack_require__(507).reformIntervals;

	var PiecewiseModel = VisualMapModel.extend({

	    type: 'visualMap.piecewise',

	    /**
	     * Order Rule:
	     *
	     * option.categories / option.pieces / option.text / option.selected:
	     *     If !option.inverse,
	     *     Order when vertical: ['top', ..., 'bottom'].
	     *     Order when horizontal: ['left', ..., 'right'].
	     *     If option.inverse, the meaning of
	     *     the order should be reversed.
	     *
	     * this._pieceList:
	     *     The order is always [low, ..., high].
	     *
	     * Mapping from location to low-high:
	     *     If !option.inverse
	     *     When vertical, top is high.
	     *     When horizontal, right is high.
	     *     If option.inverse, reverse.
	     */

	    /**
	     * @protected
	     */
	    defaultOption: {
	        selected: null, // Object. If not specified, means selected.
	        // When pieces and splitNumber: {'0': true, '5': true}
	        // When categories: {'cate1': false, 'cate3': true}
	        // When selected === false, means all unselected.

	        minOpen: false, // Whether include values that smaller than `min`.
	        maxOpen: false, // Whether include values that bigger than `max`.

	        align: 'auto', // 'auto', 'left', 'right'
	        itemWidth: 20, // When put the controller vertically, it is the length of
	        // horizontal side of each item. Otherwise, vertical side.
	        itemHeight: 14, // When put the controller vertically, it is the length of
	        // vertical side of each item. Otherwise, horizontal side.
	        itemSymbol: 'roundRect',
	        pieceList: null, // Each item is Object, with some of those attrs:
	        // {min, max, lt, gt, lte, gte, value,
	        // color, colorSaturation, colorAlpha, opacity,
	        // symbol, symbolSize}, which customize the range or visual
	        // coding of the certain piece. Besides, see "Order Rule".
	        categories: null, // category names, like: ['some1', 'some2', 'some3'].
	        // Attr min/max are ignored when categories set. See "Order Rule"
	        splitNumber: 5, // If set to 5, auto split five pieces equally.
	        // If set to 0 and component type not set, component type will be
	        // determined as "continuous". (It is less reasonable but for ec2
	        // compatibility, see echarts/component/visualMap/typeDefaulter)
	        selectedMode: 'multiple', // Can be 'multiple' or 'single'.
	        itemGap: 10, // The gap between two items, in px.
	        hoverLink: true, // Enable hover highlight.

	        showLabel: null // By default, when text is used, label will hide (the logic
	        // is remained for compatibility reason)
	    },

	    /**
	     * @override
	     */
	    optionUpdated: function optionUpdated(newOption, isInit) {
	        PiecewiseModel.superApply(this, 'optionUpdated', arguments);

	        /**
	         * The order is always [low, ..., high].
	         * [{text: string, interval: Array.<number>}, ...]
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._pieceList = [];

	        this.resetTargetSeries();
	        this.resetExtent();

	        /**
	         * 'pieces', 'categories', 'splitNumber'
	         * @type {string}
	         */
	        var mode = this._mode = this._determineMode();

	        resetMethods[this._mode].call(this);

	        this._resetSelected(newOption, isInit);

	        var categories = this.option.categories;

	        this.resetVisual(function (mappingOption, state) {
	            if (mode === 'categories') {
	                mappingOption.mappingMethod = 'category';
	                mappingOption.categories = zrUtil.clone(categories);
	            } else {
	                mappingOption.dataExtent = this.getExtent();
	                mappingOption.mappingMethod = 'piecewise';
	                mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {
	                    var piece = zrUtil.clone(piece);
	                    if (state !== 'inRange') {
	                        // FIXME
	                        // outOfRange do not support special visual in pieces.
	                        piece.visual = null;
	                    }
	                    return piece;
	                });
	            }
	        });
	    },

	    /**
	     * @protected
	     * @override
	     */
	    completeVisualOption: function completeVisualOption() {
	        // Consider this case:
	        // visualMap: {
	        //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]
	        // }
	        // where no inRange/outOfRange set but only pieces. So we should make
	        // default inRange/outOfRange for this case, otherwise visuals that only
	        // appear in `pieces` will not be taken into account in visual encoding.

	        var option = this.option;
	        var visualTypesInPieces = {};
	        var visualTypes = VisualMapping.listVisualTypes();
	        var isCategory = this.isCategory();

	        zrUtil.each(option.pieces, function (piece) {
	            zrUtil.each(visualTypes, function (visualType) {
	                if (piece.hasOwnProperty(visualType)) {
	                    visualTypesInPieces[visualType] = 1;
	                }
	            });
	        });

	        zrUtil.each(visualTypesInPieces, function (v, visualType) {
	            var exists = 0;
	            zrUtil.each(this.stateList, function (state) {
	                exists |= has(option, state, visualType) || has(option.target, state, visualType);
	            }, this);

	            !exists && zrUtil.each(this.stateList, function (state) {
	                (option[state] || (option[state] = {}))[visualType] = visualDefault.get(visualType, state === 'inRange' ? 'active' : 'inactive', isCategory);
	            });
	        }, this);

	        function has(obj, state, visualType) {
	            return obj && obj[state] && (zrUtil.isObject(obj[state]) ? obj[state].hasOwnProperty(visualType) : obj[state] === visualType // e.g., inRange: 'symbol'
	            );
	        }

	        VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	    },

	    _resetSelected: function _resetSelected(newOption, isInit) {
	        var thisOption = this.option;
	        var pieceList = this._pieceList;

	        // Selected do not merge but all override.
	        var selected = (isInit ? thisOption : newOption).selected || {};
	        thisOption.selected = selected;

	        // Consider 'not specified' means true.
	        zrUtil.each(pieceList, function (piece, index) {
	            var key = this.getSelectedMapKey(piece);
	            if (!selected.hasOwnProperty(key)) {
	                selected[key] = true;
	            }
	        }, this);

	        if (thisOption.selectedMode === 'single') {
	            // Ensure there is only one selected.
	            var hasSel = false;

	            zrUtil.each(pieceList, function (piece, index) {
	                var key = this.getSelectedMapKey(piece);
	                if (selected[key]) {
	                    hasSel ? selected[key] = false : hasSel = true;
	                }
	            }, this);
	        }
	        // thisOption.selectedMode === 'multiple', default: all selected.
	    },

	    /**
	     * @public
	     */
	    getSelectedMapKey: function getSelectedMapKey(piece) {
	        return this._mode === 'categories' ? piece.value + '' : piece.index + '';
	    },

	    /**
	     * @public
	     */
	    getPieceList: function getPieceList() {
	        return this._pieceList;
	    },

	    /**
	     * @private
	     * @return {string}
	     */
	    _determineMode: function _determineMode() {
	        var option = this.option;

	        return option.pieces && option.pieces.length > 0 ? 'pieces' : this.option.categories ? 'categories' : 'splitNumber';
	    },

	    /**
	     * @public
	     * @override
	     */
	    setSelected: function setSelected(selected) {
	        this.option.selected = zrUtil.clone(selected);
	    },

	    /**
	     * @public
	     * @override
	     */
	    getValueState: function getValueState(value) {
	        var index = VisualMapping.findPieceIndex(value, this._pieceList);

	        return index != null ? this.option.selected[this.getSelectedMapKey(this._pieceList[index])] ? 'inRange' : 'outOfRange' : 'outOfRange';
	    },

	    /**
	     * @public
	     * @params {number} pieceIndex piece index in visualMapModel.getPieceList()
	     * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	     */
	    findTargetDataIndices: function findTargetDataIndices(pieceIndex) {
	        var result = [];

	        this.eachTargetSeries(function (seriesModel) {
	            var dataIndices = [];
	            var data = seriesModel.getData();

	            data.each(this.getDataDimension(data), function (value, dataIndex) {
	                // Should always base on model pieceList, because it is order sensitive.
	                var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);
	                pIdx === pieceIndex && dataIndices.push(dataIndex);
	            }, true, this);

	            result.push({ seriesId: seriesModel.id, dataIndex: dataIndices });
	        }, this);

	        return result;
	    },

	    /**
	     * @private
	     * @param {Object} piece piece.value or piece.interval is required.
	     * @return {number} Can be Infinity or -Infinity
	     */
	    getRepresentValue: function getRepresentValue(piece) {
	        var representValue;
	        if (this.isCategory()) {
	            representValue = piece.value;
	        } else {
	            if (piece.value != null) {
	                representValue = piece.value;
	            } else {
	                var pieceInterval = piece.interval || [];
	                representValue = pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity ? 0 : (pieceInterval[0] + pieceInterval[1]) / 2;
	            }
	        }
	        return representValue;
	    },

	    getVisualMeta: function getVisualMeta(getColorVisual) {
	        // Do not support category. (category axis is ordinal, numerical)
	        if (this.isCategory()) {
	            return;
	        }

	        var stops = [];
	        var outerColors = [];
	        var visualMapModel = this;

	        function setStop(interval, valueState) {
	            var representValue = visualMapModel.getRepresentValue({ interval: interval });
	            if (!valueState) {
	                valueState = visualMapModel.getValueState(representValue);
	            }
	            var color = getColorVisual(representValue, valueState);
	            if (interval[0] === -Infinity) {
	                outerColors[0] = color;
	            } else if (interval[1] === Infinity) {
	                outerColors[1] = color;
	            } else {
	                stops.push({ value: interval[0], color: color }, { value: interval[1], color: color });
	            }
	        }

	        // Suplement
	        var pieceList = this._pieceList.slice();
	        if (!pieceList.length) {
	            pieceList.push({ interval: [-Infinity, Infinity] });
	        } else {
	            var edge = pieceList[0].interval[0];
	            edge !== -Infinity && pieceList.unshift({ interval: [-Infinity, edge] });
	            edge = pieceList[pieceList.length - 1].interval[1];
	            edge !== Infinity && pieceList.push({ interval: [edge, Infinity] });
	        }

	        var curr = -Infinity;
	        zrUtil.each(pieceList, function (piece) {
	            var interval = piece.interval;
	            if (interval) {
	                // Fulfill gap.
	                interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');
	                setStop(interval.slice());
	                curr = interval[1];
	            }
	        }, this);

	        return { stops: stops, outerColors: outerColors };
	    }

	});

	/**
	 * Key is this._mode
	 * @type {Object}
	 * @this {module:echarts/component/viusalMap/PiecewiseMode}
	 */
	var resetMethods = {

	    splitNumber: function splitNumber() {
	        var thisOption = this.option;
	        var pieceList = this._pieceList;
	        var precision = thisOption.precision;
	        var dataExtent = this.getExtent();
	        var splitNumber = thisOption.splitNumber;
	        splitNumber = Math.max(parseInt(splitNumber, 10), 1);
	        thisOption.splitNumber = splitNumber;

	        var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;
	        // Precision auto-adaption
	        while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
	            precision++;
	        }
	        thisOption.precision = precision;
	        splitStep = +splitStep.toFixed(precision);

	        var index = 0;

	        if (thisOption.minOpen) {
	            pieceList.push({
	                index: index++,
	                interval: [-Infinity, dataExtent[0]],
	                close: [0, 0]
	            });
	        }

	        for (var curr = dataExtent[0], len = index + splitNumber; index < len; curr += splitStep) {
	            var max = index === splitNumber - 1 ? dataExtent[1] : curr + splitStep;

	            pieceList.push({
	                index: index++,
	                interval: [curr, max],
	                close: [1, 1]
	            });
	        }

	        if (thisOption.maxOpen) {
	            pieceList.push({
	                index: index++,
	                interval: [dataExtent[1], Infinity],
	                close: [0, 0]
	            });
	        }

	        reformIntervals(pieceList);

	        zrUtil.each(pieceList, function (piece) {
	            piece.text = this.formatValueText(piece.interval);
	        }, this);
	    },

	    categories: function categories() {
	        var thisOption = this.option;
	        zrUtil.each(thisOption.categories, function (cate) {
	            // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。
	            // 是否改一致。
	            this._pieceList.push({
	                text: this.formatValueText(cate, true),
	                value: cate
	            });
	        }, this);

	        // See "Order Rule".
	        normalizeReverse(thisOption, this._pieceList);
	    },

	    pieces: function pieces() {
	        var thisOption = this.option;
	        var pieceList = this._pieceList;

	        zrUtil.each(thisOption.pieces, function (pieceListItem, index) {

	            if (!zrUtil.isObject(pieceListItem)) {
	                pieceListItem = { value: pieceListItem };
	            }

	            var item = { text: '', index: index };

	            if (pieceListItem.label != null) {
	                item.text = pieceListItem.label;
	            }

	            if (pieceListItem.hasOwnProperty('value')) {
	                var value = item.value = pieceListItem.value;
	                item.interval = [value, value];
	                item.close = [1, 1];
	            } else {
	                // `min` `max` is legacy option.
	                // `lt` `gt` `lte` `gte` is recommanded.
	                var interval = item.interval = [];
	                var close = item.close = [0, 0];

	                var closeList = [1, 0, 1];
	                var infinityList = [-Infinity, Infinity];

	                var useMinMax = [];
	                for (var lg = 0; lg < 2; lg++) {
	                    var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];
	                    for (var i = 0; i < 3 && interval[lg] == null; i++) {
	                        interval[lg] = pieceListItem[names[i]];
	                        close[lg] = closeList[i];
	                        useMinMax[lg] = i === 2;
	                    }
	                    interval[lg] == null && (interval[lg] = infinityList[lg]);
	                }
	                useMinMax[0] && interval[1] === Infinity && (close[0] = 0);
	                useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);

	                if (__DEV__) {
	                    if (interval[0] > interval[1]) {
	                        console.warn('Piece ' + index + 'is illegal: ' + interval + ' lower bound should not greater then uppper bound.');
	                    }
	                }

	                if (interval[0] === interval[1] && close[0] && close[1]) {
	                    // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],
	                    // we use value to lift the priority when min === max
	                    item.value = interval[0];
	                }
	            }

	            item.visual = VisualMapping.retrieveVisuals(pieceListItem);

	            pieceList.push(item);
	        }, this);

	        // See "Order Rule".
	        normalizeReverse(thisOption, pieceList);
	        // Only pieces
	        reformIntervals(pieceList);

	        zrUtil.each(pieceList, function (piece) {
	            var close = piece.close;
	            var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];
	            piece.text = piece.text || this.formatValueText(piece.value != null ? piece.value : piece.interval, false, edgeSymbols);
	        }, this);
	    }
	};

	function normalizeReverse(thisOption, pieceList) {
	    var inverse = thisOption.inverse;
	    if (thisOption.orient === 'vertical' ? !inverse : inverse) {
	        pieceList.reverse();
	    }
	}

	module.exports = PiecewiseModel;

/***/ },
/* 856 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var VisualMapView = __webpack_require__(851);
	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var symbolCreators = __webpack_require__(607);
	var layout = __webpack_require__(521);
	var helper = __webpack_require__(852);

	var PiecewiseVisualMapView = VisualMapView.extend({

	    type: 'visualMap.piecewise',

	    /**
	     * @protected
	     * @override
	     */
	    doRender: function doRender() {
	        var thisGroup = this.group;

	        thisGroup.removeAll();

	        var visualMapModel = this.visualMapModel;
	        var textGap = visualMapModel.get('textGap');
	        var textStyleModel = visualMapModel.textStyleModel;
	        var textFont = textStyleModel.getFont();
	        var textFill = textStyleModel.getTextColor();
	        var itemAlign = this._getItemAlign();
	        var itemSize = visualMapModel.itemSize;
	        var viewData = this._getViewData();
	        var endsText = viewData.endsText;
	        var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);

	        endsText && this._renderEndsText(thisGroup, endsText[0], itemSize, showLabel, itemAlign);

	        zrUtil.each(viewData.viewPieceList, renderItem, this);

	        endsText && this._renderEndsText(thisGroup, endsText[1], itemSize, showLabel, itemAlign);

	        layout.box(visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap'));

	        this.renderBackground(thisGroup);

	        this.positionGroup(thisGroup);

	        function renderItem(item) {
	            var piece = item.piece;

	            var itemGroup = new graphic.Group();
	            itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);

	            this._enableHoverLink(itemGroup, item.indexInModelPieceList);

	            var representValue = visualMapModel.getRepresentValue(piece);

	            this._createItemSymbol(itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]);

	            if (showLabel) {
	                var visualState = this.visualMapModel.getValueState(representValue);

	                itemGroup.add(new graphic.Text({
	                    style: {
	                        x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,
	                        y: itemSize[1] / 2,
	                        text: piece.text,
	                        textVerticalAlign: 'middle',
	                        textAlign: itemAlign,
	                        textFont: textFont,
	                        fill: textFill,
	                        opacity: visualState === 'outOfRange' ? 0.5 : 1
	                    }
	                }));
	            }

	            thisGroup.add(itemGroup);
	        }
	    },

	    /**
	     * @private
	     */
	    _enableHoverLink: function _enableHoverLink(itemGroup, pieceIndex) {
	        itemGroup.on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight')).on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));

	        function onHoverLink(method) {
	            var visualMapModel = this.visualMapModel;

	            visualMapModel.option.hoverLink && this.api.dispatchAction({
	                type: method,
	                batch: helper.convertDataIndex(visualMapModel.findTargetDataIndices(pieceIndex))
	            });
	        }
	    },

	    /**
	     * @private
	     */
	    _getItemAlign: function _getItemAlign() {
	        var visualMapModel = this.visualMapModel;
	        var modelOption = visualMapModel.option;

	        if (modelOption.orient === 'vertical') {
	            return helper.getItemAlign(visualMapModel, this.api, visualMapModel.itemSize);
	        } else {
	            // horizontal, most case left unless specifying right.
	            var align = modelOption.align;
	            if (!align || align === 'auto') {
	                align = 'left';
	            }
	            return align;
	        }
	    },

	    /**
	     * @private
	     */
	    _renderEndsText: function _renderEndsText(group, text, itemSize, showLabel, itemAlign) {
	        if (!text) {
	            return;
	        }

	        var itemGroup = new graphic.Group();
	        var textStyleModel = this.visualMapModel.textStyleModel;

	        itemGroup.add(new graphic.Text({
	            style: {
	                x: showLabel ? itemAlign === 'right' ? itemSize[0] : 0 : itemSize[0] / 2,
	                y: itemSize[1] / 2,
	                textVerticalAlign: 'middle',
	                textAlign: showLabel ? itemAlign : 'center',
	                text: text,
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            }
	        }));

	        group.add(itemGroup);
	    },

	    /**
	     * @private
	     * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.
	     */
	    _getViewData: function _getViewData() {
	        var visualMapModel = this.visualMapModel;

	        var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {
	            return { piece: piece, indexInModelPieceList: index };
	        });
	        var endsText = visualMapModel.get('text');

	        // Consider orient and inverse.
	        var orient = visualMapModel.get('orient');
	        var inverse = visualMapModel.get('inverse');

	        // Order of model pieceList is always [low, ..., high]
	        if (orient === 'horizontal' ? inverse : !inverse) {
	            viewPieceList.reverse();
	        }
	        // Origin order of endsText is [high, low]
	        else if (endsText) {
	                endsText = endsText.slice().reverse();
	            }

	        return { viewPieceList: viewPieceList, endsText: endsText };
	    },

	    /**
	     * @private
	     */
	    _createItemSymbol: function _createItemSymbol(group, representValue, shapeParam) {
	        group.add(symbolCreators.createSymbol(this.getControllerVisual(representValue, 'symbol'), shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3], this.getControllerVisual(representValue, 'color')));
	    },

	    /**
	     * @private
	     */
	    _onItemClick: function _onItemClick(piece) {
	        var visualMapModel = this.visualMapModel;
	        var option = visualMapModel.option;
	        var selected = zrUtil.clone(option.selected);
	        var newKey = visualMapModel.getSelectedMapKey(piece);

	        if (option.selectedMode === 'single') {
	            selected[newKey] = true;
	            zrUtil.each(selected, function (o, key) {
	                selected[key] = key === newKey;
	            });
	        } else {
	            selected[newKey] = !selected[newKey];
	        }

	        this.api.dispatchAction({
	            type: 'selectDataRange',
	            from: this.uid,
	            visualMapId: this.visualMapModel.id,
	            selected: selected
	        });
	    }
	});

	module.exports = PiecewiseVisualMapView;

/***/ },
/* 857 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// HINT Markpoint can't be used too much


	__webpack_require__(858);
	__webpack_require__(860);

	__webpack_require__(501).registerPreprocessor(function (opt) {
	    // Make sure markPoint component is enabled
	    opt.markPoint = opt.markPoint || {};
	});

/***/ },
/* 858 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(859).extend({

	    type: 'markPoint',

	    defaultOption: {
	        zlevel: 0,
	        z: 5,
	        symbol: 'pin',
	        symbolSize: 50,
	        //symbolRotate: 0,
	        //symbolOffset: [0, 0]
	        tooltip: {
	            trigger: 'item'
	        },
	        label: {
	            normal: {
	                show: true,
	                position: 'inside'
	            },
	            emphasis: {
	                show: true
	            }
	        },
	        itemStyle: {
	            normal: {
	                borderWidth: 2
	            }
	        }
	    }
	});

/***/ },
/* 859 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var modelUtil = __webpack_require__(505);
	var zrUtil = __webpack_require__(504);
	var env = __webpack_require__(502);

	var formatUtil = __webpack_require__(506);
	var addCommas = formatUtil.addCommas;
	var encodeHTML = formatUtil.encodeHTML;

	function fillLabel(opt) {
	    modelUtil.defaultEmphasis(opt.label, modelUtil.LABEL_OPTIONS);
	}
	var MarkerModel = __webpack_require__(501).extendComponentModel({

	    type: 'marker',

	    dependencies: ['series', 'grid', 'polar', 'geo'],
	    /**
	     * @overrite
	     */
	    init: function init(option, parentModel, ecModel, extraOpt) {

	        if (__DEV__) {
	            if (this.type === 'marker') {
	                throw new Error('Marker component is abstract component. Use markLine, markPoint, markArea instead.');
	            }
	        }
	        this.mergeDefaultAndTheme(option, ecModel);
	        this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
	    },

	    /**
	     * @return {boolean}
	     */
	    isAnimationEnabled: function isAnimationEnabled() {
	        if (env.node) {
	            return false;
	        }

	        var hostSeries = this.__hostSeries;
	        return this.getShallow('animation') && hostSeries && hostSeries.isAnimationEnabled();
	    },

	    mergeOption: function mergeOption(newOpt, ecModel, createdBySelf, isInit) {
	        var MarkerModel = this.constructor;
	        var modelPropName = this.mainType + 'Model';
	        if (!createdBySelf) {
	            ecModel.eachSeries(function (seriesModel) {

	                var markerOpt = seriesModel.get(this.mainType);

	                var markerModel = seriesModel[modelPropName];
	                if (!markerOpt || !markerOpt.data) {
	                    seriesModel[modelPropName] = null;
	                    return;
	                }
	                if (!markerModel) {
	                    if (isInit) {
	                        // Default label emphasis `position` and `show`
	                        fillLabel(markerOpt);
	                    }
	                    zrUtil.each(markerOpt.data, function (item) {
	                        // FIXME Overwrite fillLabel method ?
	                        if (item instanceof Array) {
	                            fillLabel(item[0]);
	                            fillLabel(item[1]);
	                        } else {
	                            fillLabel(item);
	                        }
	                    });

	                    markerModel = new MarkerModel(markerOpt, this, ecModel);

	                    zrUtil.extend(markerModel, {
	                        mainType: this.mainType,
	                        // Use the same series index and name
	                        seriesIndex: seriesModel.seriesIndex,
	                        name: seriesModel.name,
	                        createdBySelf: true
	                    });

	                    markerModel.__hostSeries = seriesModel;
	                } else {
	                    markerModel.mergeOption(markerOpt, ecModel, true);
	                }
	                seriesModel[modelPropName] = markerModel;
	            }, this);
	        }
	    },

	    formatTooltip: function formatTooltip(dataIndex) {
	        var data = this.getData();
	        var value = this.getRawValue(dataIndex);
	        var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	        var name = data.getName(dataIndex);
	        var html = encodeHTML(this.name);
	        if (value != null || name) {
	            html += '<br />';
	        }
	        if (name) {
	            html += encodeHTML(name);
	            if (value != null) {
	                html += ' : ';
	            }
	        }
	        if (value != null) {
	            html += encodeHTML(formattedValue);
	        }
	        return html;
	    },

	    getData: function getData() {
	        return this._data;
	    },

	    setData: function setData(data) {
	        this._data = data;
	    }
	});

	zrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);

	module.exports = MarkerModel;

/***/ },
/* 860 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var SymbolDraw = __webpack_require__(605);
	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);

	var List = __webpack_require__(598);

	var markerHelper = __webpack_require__(861);

	function updateMarkerLayout(mpData, seriesModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    mpData.each(function (idx) {
	        var itemModel = mpData.getItemModel(idx);
	        var point;
	        var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	        var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());
	        if (!isNaN(xPx) && !isNaN(yPx)) {
	            point = [xPx, yPx];
	        }
	        // Chart like bar may have there own marker positioning logic
	        else if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(mpData.getValues(mpData.dimensions, idx));
	            } else if (coordSys) {
	                var x = mpData.get(coordSys.dimensions[0], idx);
	                var y = mpData.get(coordSys.dimensions[1], idx);
	                point = coordSys.dataToPoint([x, y]);
	            }

	        // Use x, y if has any
	        if (!isNaN(xPx)) {
	            point[0] = xPx;
	        }
	        if (!isNaN(yPx)) {
	            point[1] = yPx;
	        }

	        mpData.setItemLayout(idx, point);
	    });
	}

	__webpack_require__(862).extend({

	    type: 'markPoint',

	    updateLayout: function updateLayout(markPointModel, ecModel, api) {
	        ecModel.eachSeries(function (seriesModel) {
	            var mpModel = seriesModel.markPointModel;
	            if (mpModel) {
	                updateMarkerLayout(mpModel.getData(), seriesModel, api);
	                this.markerGroupMap[seriesModel.name].updateLayout(mpModel);
	            }
	        }, this);
	    },

	    renderSeries: function renderSeries(seriesModel, mpModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var seriesName = seriesModel.name;
	        var seriesData = seriesModel.getData();

	        var symbolDrawMap = this.markerGroupMap;
	        var symbolDraw = symbolDrawMap[seriesName];
	        if (!symbolDraw) {
	            symbolDraw = symbolDrawMap[seriesName] = new SymbolDraw();
	        }

	        var mpData = createList(coordSys, seriesModel, mpModel);

	        // FIXME
	        mpModel.setData(mpData);

	        updateMarkerLayout(mpModel.getData(), seriesModel, api);

	        mpData.each(function (idx) {
	            var itemModel = mpData.getItemModel(idx);
	            var symbolSize = itemModel.getShallow('symbolSize');
	            if (typeof symbolSize === 'function') {
	                // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？
	                symbolSize = symbolSize(mpModel.getRawValue(idx), mpModel.getDataParams(idx));
	            }
	            mpData.setItemVisual(idx, {
	                symbolSize: symbolSize,
	                color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color'),
	                symbol: itemModel.getShallow('symbol')
	            });
	        });

	        // TODO Text are wrong
	        symbolDraw.updateData(mpData);
	        this.group.add(symbolDraw.group);

	        // Set host model for tooltip
	        // FIXME
	        mpData.eachItemGraphicEl(function (el) {
	            el.traverse(function (child) {
	                child.dataModel = mpModel;
	            });
	        });

	        symbolDraw.__keep = true;

	        symbolDraw.group.silent = mpModel.get('silent') || seriesModel.get('silent');
	    }
	});

	/**
	 * @inner
	 * @param {module:echarts/coord/*} [coordSys]
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */
	function createList(coordSys, seriesModel, mpModel) {
	    var coordDimsInfos;
	    if (coordSys) {
	        coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	            var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	            info.name = coordDim;
	            return info;
	        });
	    } else {
	        coordDimsInfos = [{
	            name: 'value',
	            type: 'float'
	        }];
	    }

	    var mpData = new List(coordDimsInfos, mpModel);
	    var dataOpt = zrUtil.map(mpModel.get('data'), zrUtil.curry(markerHelper.dataTransform, seriesModel));
	    if (coordSys) {
	        dataOpt = zrUtil.filter(dataOpt, zrUtil.curry(markerHelper.dataFilter, coordSys));
	    }

	    mpData.initData(dataOpt, null, coordSys ? markerHelper.dimValueGetter : function (item) {
	        return item.value;
	    });
	    return mpData;
	}

/***/ },
/* 861 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var numberUtil = __webpack_require__(507);
	var indexOf = zrUtil.indexOf;

	function hasXOrY(item) {
	    return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));
	}

	function hasXAndY(item) {
	    return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));
	}

	function getPrecision(data, valueAxisDim, dataIndex) {
	    var precision = -1;
	    do {
	        precision = Math.max(numberUtil.getPrecision(data.get(valueAxisDim, dataIndex)), precision);
	        data = data.stackedOn;
	    } while (data);

	    return precision;
	}

	function markerTypeCalculatorWithExtent(mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {
	    var coordArr = [];
	    var value = numCalculate(data, targetDataDim, mlType);

	    var dataIndex = data.indexOfNearest(targetDataDim, value, true);
	    coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex, true);
	    coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex, true);

	    var precision = getPrecision(data, targetDataDim, dataIndex);
	    if (precision >= 0) {
	        coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);
	    }

	    return coordArr;
	}

	var curry = zrUtil.curry;
	// TODO Specified percent
	var markerTypeCalculator = {
	    /**
	     * @method
	     * @param {module:echarts/data/List} data
	     * @param {string} baseAxisDim
	     * @param {string} valueAxisDim
	     */
	    min: curry(markerTypeCalculatorWithExtent, 'min'),
	    /**
	     * @method
	     * @param {module:echarts/data/List} data
	     * @param {string} baseAxisDim
	     * @param {string} valueAxisDim
	     */
	    max: curry(markerTypeCalculatorWithExtent, 'max'),

	    /**
	     * @method
	     * @param {module:echarts/data/List} data
	     * @param {string} baseAxisDim
	     * @param {string} valueAxisDim
	     */
	    average: curry(markerTypeCalculatorWithExtent, 'average')
	};

	/**
	 * Transform markPoint data item to format used in List by do the following
	 * 1. Calculate statistic like `max`, `min`, `average`
	 * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array
	 * @param  {module:echarts/model/Series} seriesModel
	 * @param  {module:echarts/coord/*} [coordSys]
	 * @param  {Object} item
	 * @return {Object}
	 */
	var dataTransform = function dataTransform(seriesModel, item) {
	    var data = seriesModel.getData();
	    var coordSys = seriesModel.coordinateSystem;

	    // 1. If not specify the position with pixel directly
	    // 2. If `coord` is not a data array. Which uses `xAxis`,
	    // `yAxis` to specify the coord on each dimension

	    // parseFloat first because item.x and item.y can be percent string like '20%'
	    if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {
	        var dims = coordSys.dimensions;
	        var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);

	        // Clone the option
	        // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value
	        item = zrUtil.clone(item);

	        if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {
	            var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
	            var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);

	            item.coord = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex);
	            // Force to use the value of calculated value.
	            item.value = item.coord[targetCoordIndex];
	        } else {
	            // FIXME Only has one of xAxis and yAxis.
	            var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis];
	            // Each coord support max, min, average
	            for (var i = 0; i < 2; i++) {
	                if (markerTypeCalculator[coord[i]]) {
	                    var dataDim = seriesModel.coordDimToDataDim(dims[i])[0];
	                    coord[i] = numCalculate(data, dataDim, coord[i]);
	                }
	            }
	            item.coord = coord;
	        }
	    }
	    return item;
	};

	var getAxisInfo = function getAxisInfo(item, data, coordSys, seriesModel) {
	    var ret = {};

	    if (item.valueIndex != null || item.valueDim != null) {
	        ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;
	        ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));
	        ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
	        ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	    } else {
	        ret.baseAxis = seriesModel.getBaseAxis();
	        ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
	        ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	        ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];
	    }

	    return ret;
	};

	/**
	 * Filter data which is out of coordinateSystem range
	 * [dataFilter description]
	 * @param  {module:echarts/coord/*} [coordSys]
	 * @param  {Object} item
	 * @return {boolean}
	 */
	var dataFilter = function dataFilter(coordSys, item) {
	    // Alwalys return true if there is no coordSys
	    return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;
	};

	var dimValueGetter = function dimValueGetter(item, dimName, dataIndex, dimIndex) {
	    // x, y, radius, angle
	    if (dimIndex < 2) {
	        return item.coord && item.coord[dimIndex];
	    }
	    return item.value;
	};

	var numCalculate = function numCalculate(data, valueDataDim, type) {
	    if (type === 'average') {
	        var sum = 0;
	        var count = 0;
	        data.each(valueDataDim, function (val, idx) {
	            if (!isNaN(val)) {
	                sum += val;
	                count++;
	            }
	        }, true);
	        return sum / count;
	    } else {
	        return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];
	    }
	};

	module.exports = {
	    dataTransform: dataTransform,
	    dataFilter: dataFilter,
	    dimValueGetter: dimValueGetter,
	    getAxisInfo: getAxisInfo,
	    numCalculate: numCalculate
	};

/***/ },
/* 862 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(501).extendComponentView({

	    type: 'marker',

	    init: function init() {
	        /**
	         * Markline grouped by series
	         * @private
	         * @type {Object}
	         */
	        this.markerGroupMap = {};
	    },

	    render: function render(markerModel, ecModel, api) {
	        var markerGroupMap = this.markerGroupMap;
	        for (var name in markerGroupMap) {
	            if (markerGroupMap.hasOwnProperty(name)) {
	                markerGroupMap[name].__keep = false;
	            }
	        }

	        var markerModelKey = this.type + 'Model';
	        ecModel.eachSeries(function (seriesModel) {
	            var markerModel = seriesModel[markerModelKey];
	            markerModel && this.renderSeries(seriesModel, markerModel, ecModel, api);
	        }, this);

	        for (var name in markerGroupMap) {
	            if (markerGroupMap.hasOwnProperty(name) && !markerGroupMap[name].__keep) {
	                this.group.remove(markerGroupMap[name].group);
	            }
	        }
	    },

	    renderSeries: function renderSeries() {}
	});

/***/ },
/* 863 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(864);
	__webpack_require__(865);

	__webpack_require__(501).registerPreprocessor(function (opt) {
	    // Make sure markLine component is enabled
	    opt.markLine = opt.markLine || {};
	});

/***/ },
/* 864 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(859).extend({

	    type: 'markLine',

	    defaultOption: {
	        zlevel: 0,
	        z: 5,

	        symbol: ['circle', 'arrow'],
	        symbolSize: [8, 16],

	        //symbolRotate: 0,

	        precision: 2,
	        tooltip: {
	            trigger: 'item'
	        },
	        label: {
	            normal: {
	                show: true,
	                position: 'end'
	            },
	            emphasis: {
	                show: true
	            }
	        },
	        lineStyle: {
	            normal: {
	                type: 'dashed'
	            },
	            emphasis: {
	                width: 3
	            }
	        },
	        animationEasing: 'linear'
	    }
	});

/***/ },
/* 865 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var List = __webpack_require__(598);
	var numberUtil = __webpack_require__(507);

	var markerHelper = __webpack_require__(861);

	var LineDraw = __webpack_require__(702);

	var markLineTransform = function markLineTransform(seriesModel, coordSys, mlModel, item) {
	    var data = seriesModel.getData();
	    // Special type markLine like 'min', 'max', 'average'
	    var mlType = item.type;

	    if (!zrUtil.isArray(item) && (mlType === 'min' || mlType === 'max' || mlType === 'average'
	    // In case
	    // data: [{
	    //   yAxis: 10
	    // }]
	    || item.xAxis != null || item.yAxis != null)) {
	        var valueAxis;
	        var valueDataDim;
	        var value;

	        if (item.yAxis != null || item.xAxis != null) {
	            valueDataDim = item.yAxis != null ? 'y' : 'x';
	            valueAxis = coordSys.getAxis(valueDataDim);

	            value = zrUtil.retrieve(item.yAxis, item.xAxis);
	        } else {
	            var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);
	            valueDataDim = axisInfo.valueDataDim;
	            valueAxis = axisInfo.valueAxis;
	            value = markerHelper.numCalculate(data, valueDataDim, mlType);
	        }
	        var valueIndex = valueDataDim === 'x' ? 0 : 1;
	        var baseIndex = 1 - valueIndex;

	        var mlFrom = zrUtil.clone(item);
	        var mlTo = {};

	        mlFrom.type = null;

	        mlFrom.coord = [];
	        mlTo.coord = [];
	        mlFrom.coord[baseIndex] = -Infinity;
	        mlTo.coord[baseIndex] = Infinity;

	        var precision = mlModel.get('precision');
	        if (precision >= 0 && typeof value === 'number') {
	            value = +value.toFixed(precision);
	        }

	        mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;

	        item = [mlFrom, mlTo, { // Extra option for tooltip and label
	            type: mlType,
	            valueIndex: item.valueIndex,
	            // Force to use the value of calculated value.
	            value: value
	        }];
	    }

	    item = [markerHelper.dataTransform(seriesModel, item[0]), markerHelper.dataTransform(seriesModel, item[1]), zrUtil.extend({}, item[2])];

	    // Avoid line data type is extended by from(to) data type
	    item[2].type = item[2].type || '';

	    // Merge from option and to option into line option
	    zrUtil.merge(item[2], item[0]);
	    zrUtil.merge(item[2], item[1]);

	    return item;
	};

	function isInifinity(val) {
	    return !isNaN(val) && !isFinite(val);
	}

	// If a markLine has one dim
	function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	    var otherDimIndex = 1 - dimIndex;
	    var dimName = coordSys.dimensions[dimIndex];
	    return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]) && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);
	}

	function markLineFilter(coordSys, item) {
	    if (coordSys.type === 'cartesian2d') {
	        var fromCoord = item[0].coord;
	        var toCoord = item[1].coord;
	        // In case
	        // {
	        //  markLine: {
	        //    data: [{ yAxis: 2 }]
	        //  }
	        // }
	        if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {
	            return true;
	        }
	    }
	    return markerHelper.dataFilter(coordSys, item[0]) && markerHelper.dataFilter(coordSys, item[1]);
	}

	function updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    var itemModel = data.getItemModel(idx);

	    var point;
	    var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	    var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());
	    if (!isNaN(xPx) && !isNaN(yPx)) {
	        point = [xPx, yPx];
	    } else {
	        // Chart like bar may have there own marker positioning logic
	        if (seriesModel.getMarkerPosition) {
	            // Use the getMarkerPoisition
	            point = seriesModel.getMarkerPosition(data.getValues(data.dimensions, idx));
	        } else {
	            var dims = coordSys.dimensions;
	            var x = data.get(dims[0], idx);
	            var y = data.get(dims[1], idx);
	            point = coordSys.dataToPoint([x, y]);
	        }
	        // Expand line to the edge of grid if value on one axis is Inifnity
	        // In case
	        //  markLine: {
	        //    data: [{
	        //      yAxis: 2
	        //      // or
	        //      type: 'average'
	        //    }]
	        //  }
	        if (coordSys.type === 'cartesian2d') {
	            var xAxis = coordSys.getAxis('x');
	            var yAxis = coordSys.getAxis('y');
	            var dims = coordSys.dimensions;
	            if (isInifinity(data.get(dims[0], idx))) {
	                point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);
	            } else if (isInifinity(data.get(dims[1], idx))) {
	                point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);
	            }
	        }

	        // Use x, y if has any
	        if (!isNaN(xPx)) {
	            point[0] = xPx;
	        }
	        if (!isNaN(yPx)) {
	            point[1] = yPx;
	        }
	    }

	    data.setItemLayout(idx, point);
	}

	__webpack_require__(862).extend({

	    type: 'markLine',

	    updateLayout: function updateLayout(markLineModel, ecModel, api) {
	        ecModel.eachSeries(function (seriesModel) {
	            var mlModel = seriesModel.markLineModel;
	            if (mlModel) {
	                var mlData = mlModel.getData();
	                var fromData = mlModel.__from;
	                var toData = mlModel.__to;
	                // Update visual and layout of from symbol and to symbol
	                fromData.each(function (idx) {
	                    updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);
	                    updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);
	                });
	                // Update layout of line
	                mlData.each(function (idx) {
	                    mlData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);
	                });

	                this.markerGroupMap[seriesModel.name].updateLayout();
	            }
	        }, this);
	    },

	    renderSeries: function renderSeries(seriesModel, mlModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var seriesName = seriesModel.name;
	        var seriesData = seriesModel.getData();

	        var lineDrawMap = this.markerGroupMap;
	        var lineDraw = lineDrawMap[seriesName];
	        if (!lineDraw) {
	            lineDraw = lineDrawMap[seriesName] = new LineDraw();
	        }
	        this.group.add(lineDraw.group);

	        var mlData = createList(coordSys, seriesModel, mlModel);

	        var fromData = mlData.from;
	        var toData = mlData.to;
	        var lineData = mlData.line;

	        mlModel.__from = fromData;
	        mlModel.__to = toData;
	        // Line data for tooltip and formatter
	        mlModel.setData(lineData);

	        var symbolType = mlModel.get('symbol');
	        var symbolSize = mlModel.get('symbolSize');
	        if (!zrUtil.isArray(symbolType)) {
	            symbolType = [symbolType, symbolType];
	        }
	        if (typeof symbolSize === 'number') {
	            symbolSize = [symbolSize, symbolSize];
	        }

	        // Update visual and layout of from symbol and to symbol
	        mlData.from.each(function (idx) {
	            updateDataVisualAndLayout(fromData, idx, true);
	            updateDataVisualAndLayout(toData, idx, false);
	        });

	        // Update visual and layout of line
	        lineData.each(function (idx) {
	            var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');
	            lineData.setItemVisual(idx, {
	                color: lineColor || fromData.getItemVisual(idx, 'color')
	            });
	            lineData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);

	            lineData.setItemVisual(idx, {
	                'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),
	                'fromSymbol': fromData.getItemVisual(idx, 'symbol'),
	                'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),
	                'toSymbol': toData.getItemVisual(idx, 'symbol')
	            });
	        });

	        lineDraw.updateData(lineData);

	        // Set host model for tooltip
	        // FIXME
	        mlData.line.eachItemGraphicEl(function (el, idx) {
	            el.traverse(function (child) {
	                child.dataModel = mlModel;
	            });
	        });

	        function updateDataVisualAndLayout(data, idx, isFrom) {
	            var itemModel = data.getItemModel(idx);

	            updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api);

	            data.setItemVisual(idx, {
	                symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],
	                symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],
	                color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')
	            });
	        }

	        lineDraw.__keep = true;

	        lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');
	    }
	});

	/**
	 * @inner
	 * @param {module:echarts/coord/*} coordSys
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */
	function createList(coordSys, seriesModel, mlModel) {

	    var coordDimsInfos;
	    if (coordSys) {
	        coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	            var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	            info.name = coordDim;
	            return info;
	        });
	    } else {
	        coordDimsInfos = [{
	            name: 'value',
	            type: 'float'
	        }];
	    }

	    var fromData = new List(coordDimsInfos, mlModel);
	    var toData = new List(coordDimsInfos, mlModel);
	    // No dimensions
	    var lineData = new List([], mlModel);

	    var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(markLineTransform, seriesModel, coordSys, mlModel));
	    if (coordSys) {
	        optData = zrUtil.filter(optData, zrUtil.curry(markLineFilter, coordSys));
	    }
	    var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {
	        return item.value;
	    };
	    fromData.initData(zrUtil.map(optData, function (item) {
	        return item[0];
	    }), null, dimValueGetter);
	    toData.initData(zrUtil.map(optData, function (item) {
	        return item[1];
	    }), null, dimValueGetter);
	    lineData.initData(zrUtil.map(optData, function (item) {
	        return item[2];
	    }));
	    lineData.hasItemOption = true;
	    return {
	        from: fromData,
	        to: toData,
	        line: lineData
	    };
	}

/***/ },
/* 866 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(867);
	__webpack_require__(868);

	__webpack_require__(501).registerPreprocessor(function (opt) {
	    // Make sure markArea component is enabled
	    opt.markArea = opt.markArea || {};
	});

/***/ },
/* 867 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(859).extend({

	    type: 'markArea',

	    defaultOption: {
	        zlevel: 0,
	        // PENDING
	        z: 1,
	        tooltip: {
	            trigger: 'item'
	        },
	        // markArea should fixed on the coordinate system
	        animation: false,
	        label: {
	            normal: {
	                show: true,
	                position: 'top'
	            },
	            emphasis: {
	                show: true,
	                position: 'top'
	            }
	        },
	        itemStyle: {
	            normal: {
	                // color and borderColor default to use color from series
	                // color: 'auto'
	                // borderColor: 'auto'
	                borderWidth: 0
	            }
	        }
	    }
	});

/***/ },
/* 868 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO Better on polar


	var zrUtil = __webpack_require__(504);
	var List = __webpack_require__(598);
	var numberUtil = __webpack_require__(507);
	var graphic = __webpack_require__(543);
	var colorUtil = __webpack_require__(539);

	var markerHelper = __webpack_require__(861);

	var markAreaTransform = function markAreaTransform(seriesModel, coordSys, maModel, item) {
	    var lt = markerHelper.dataTransform(seriesModel, item[0]);
	    var rb = markerHelper.dataTransform(seriesModel, item[1]);
	    var retrieve = zrUtil.retrieve;

	    // FIXME make sure lt is less than rb
	    var ltCoord = lt.coord;
	    var rbCoord = rb.coord;
	    ltCoord[0] = retrieve(ltCoord[0], -Infinity);
	    ltCoord[1] = retrieve(ltCoord[1], -Infinity);

	    rbCoord[0] = retrieve(rbCoord[0], Infinity);
	    rbCoord[1] = retrieve(rbCoord[1], Infinity);

	    // Merge option into one
	    var result = zrUtil.mergeAll([{}, lt, rb]);

	    result.coord = [lt.coord, rb.coord];
	    result.x0 = lt.x;
	    result.y0 = lt.y;
	    result.x1 = rb.x;
	    result.y1 = rb.y;
	    return result;
	};

	function isInifinity(val) {
	    return !isNaN(val) && !isFinite(val);
	}

	// If a markArea has one dim
	function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	    var otherDimIndex = 1 - dimIndex;
	    return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);
	}

	function markAreaFilter(coordSys, item) {
	    var fromCoord = item.coord[0];
	    var toCoord = item.coord[1];
	    if (coordSys.type === 'cartesian2d') {
	        // In case
	        // {
	        //  markArea: {
	        //    data: [{ yAxis: 2 }]
	        //  }
	        // }
	        if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {
	            return true;
	        }
	    }
	    return markerHelper.dataFilter(coordSys, {
	        coord: fromCoord,
	        x: item.x0,
	        y: item.y0
	    }) || markerHelper.dataFilter(coordSys, {
	        coord: toCoord,
	        x: item.x1,
	        y: item.y1
	    });
	}

	// dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']
	function getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    var itemModel = data.getItemModel(idx);

	    var point;
	    var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());
	    var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());
	    if (!isNaN(xPx) && !isNaN(yPx)) {
	        point = [xPx, yPx];
	    } else {
	        // Chart like bar may have there own marker positioning logic
	        if (seriesModel.getMarkerPosition) {
	            // Use the getMarkerPoisition
	            point = seriesModel.getMarkerPosition(data.getValues(dims, idx));
	        } else {
	            var x = data.get(dims[0], idx);
	            var y = data.get(dims[1], idx);
	            point = coordSys.dataToPoint([x, y], true);
	        }
	        if (coordSys.type === 'cartesian2d') {
	            var xAxis = coordSys.getAxis('x');
	            var yAxis = coordSys.getAxis('y');
	            var x = data.get(dims[0], idx);
	            var y = data.get(dims[1], idx);
	            if (isInifinity(x)) {
	                point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);
	            } else if (isInifinity(y)) {
	                point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);
	            }
	        }

	        // Use x, y if has any
	        if (!isNaN(xPx)) {
	            point[0] = xPx;
	        }
	        if (!isNaN(yPx)) {
	            point[1] = yPx;
	        }
	    }

	    return point;
	}

	var dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];

	__webpack_require__(862).extend({

	    type: 'markArea',

	    updateLayout: function updateLayout(markAreaModel, ecModel, api) {
	        ecModel.eachSeries(function (seriesModel) {
	            var maModel = seriesModel.markAreaModel;
	            if (maModel) {
	                var areaData = maModel.getData();
	                areaData.each(function (idx) {
	                    var points = zrUtil.map(dimPermutations, function (dim) {
	                        return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	                    });
	                    // Layout
	                    areaData.setItemLayout(idx, points);
	                    var el = areaData.getItemGraphicEl(idx);
	                    el.setShape('points', points);
	                });
	            }
	        }, this);
	    },

	    renderSeries: function renderSeries(seriesModel, maModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var seriesName = seriesModel.name;
	        var seriesData = seriesModel.getData();

	        var areaGroupMap = this.markerGroupMap;
	        var polygonGroup = areaGroupMap[seriesName];
	        if (!polygonGroup) {
	            polygonGroup = areaGroupMap[seriesName] = {
	                group: new graphic.Group()
	            };
	        }
	        this.group.add(polygonGroup.group);
	        polygonGroup.__keep = true;

	        var areaData = createList(coordSys, seriesModel, maModel);

	        // Line data for tooltip and formatter
	        maModel.setData(areaData);

	        // Update visual and layout of line
	        areaData.each(function (idx) {
	            // Layout
	            areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {
	                return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	            }));

	            // Visual
	            areaData.setItemVisual(idx, {
	                color: seriesData.getVisual('color')
	            });
	        });

	        areaData.diff(polygonGroup.__data).add(function (idx) {
	            var polygon = new graphic.Polygon({
	                shape: {
	                    points: areaData.getItemLayout(idx)
	                }
	            });
	            areaData.setItemGraphicEl(idx, polygon);
	            polygonGroup.group.add(polygon);
	        }).update(function (newIdx, oldIdx) {
	            var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);
	            graphic.updateProps(polygon, {
	                shape: {
	                    points: areaData.getItemLayout(newIdx)
	                }
	            }, maModel, newIdx);
	            polygonGroup.group.add(polygon);
	            areaData.setItemGraphicEl(newIdx, polygon);
	        }).remove(function (idx) {
	            var polygon = polygonGroup.__data.getItemGraphicEl(idx);
	            polygonGroup.group.remove(polygon);
	        }).execute();

	        areaData.eachItemGraphicEl(function (polygon, idx) {
	            var itemModel = areaData.getItemModel(idx);
	            var labelModel = itemModel.getModel('label.normal');
	            var labelHoverModel = itemModel.getModel('label.emphasis');
	            var color = areaData.getItemVisual(idx, 'color');
	            polygon.useStyle(zrUtil.defaults(itemModel.getModel('itemStyle.normal').getItemStyle(), {
	                fill: colorUtil.modifyAlpha(color, 0.4),
	                stroke: color
	            }));

	            polygon.hoverStyle = itemModel.getModel('itemStyle.normal').getItemStyle();

	            var defaultValue = areaData.getName(idx) || '';
	            var textColor = color || polygon.style.fill;

	            if (labelModel.getShallow('show')) {
	                graphic.setText(polygon.style, labelModel, textColor);
	                polygon.style.text = zrUtil.retrieve(maModel.getFormattedLabel(idx, 'normal'), defaultValue);
	            } else {
	                polygon.style.text = '';
	            }

	            if (labelHoverModel.getShallow('show')) {
	                graphic.setText(polygon.hoverStyle, labelHoverModel, textColor);
	                polygon.hoverStyle.text = zrUtil.retrieve(maModel.getFormattedLabel(idx, 'emphasis'), defaultValue);
	            } else {
	                polygon.hoverStyle.text = '';
	            }

	            graphic.setHoverStyle(polygon, {});

	            polygon.dataModel = maModel;
	        });

	        polygonGroup.__data = areaData;

	        polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');
	    }
	});

	/**
	 * @inner
	 * @param {module:echarts/coord/*} coordSys
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */
	function createList(coordSys, seriesModel, maModel) {

	    var coordDimsInfos;
	    var areaData;
	    var dims = ['x0', 'y0', 'x1', 'y1'];
	    if (coordSys) {
	        coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	            var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	            info.name = coordDim;
	            return info;
	        });
	        areaData = new List(zrUtil.map(dims, function (dim, idx) {
	            return {
	                name: dim,
	                type: coordDimsInfos[idx % 2].type
	            };
	        }), maModel);
	    } else {
	        coordDimsInfos = [{
	            name: 'value',
	            type: 'float'
	        }];
	        areaData = new List(coordDimsInfos, maModel);
	    }

	    var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(markAreaTransform, seriesModel, coordSys, maModel));
	    if (coordSys) {
	        optData = zrUtil.filter(optData, zrUtil.curry(markAreaFilter, coordSys));
	    }

	    var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {
	        return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];
	    } : function (item) {
	        return item.value;
	    };
	    areaData.initData(optData, null, dimValueGetter);
	    areaData.hasItemOption = true;
	    return areaData;
	}

/***/ },
/* 869 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * DataZoom component entry
	 */

	var echarts = __webpack_require__(501);

	echarts.registerPreprocessor(__webpack_require__(870));

	__webpack_require__(871);
	__webpack_require__(872);
	__webpack_require__(873);
	__webpack_require__(875);

/***/ },
/* 870 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Timeline preprocessor
	 */

	var zrUtil = __webpack_require__(504);

	module.exports = function (option) {
	    var timelineOpt = option && option.timeline;

	    if (!zrUtil.isArray(timelineOpt)) {
	        timelineOpt = timelineOpt ? [timelineOpt] : [];
	    }

	    zrUtil.each(timelineOpt, function (opt) {
	        if (!opt) {
	            return;
	        }

	        compatibleEC2(opt);
	    });
	};

	function compatibleEC2(opt) {
	    var type = opt.type;

	    var ec2Types = { 'number': 'value', 'time': 'time' };

	    // Compatible with ec2
	    if (ec2Types[type]) {
	        opt.axisType = ec2Types[type];
	        delete opt.type;
	    }

	    transferItem(opt);

	    if (has(opt, 'controlPosition')) {
	        var controlStyle = opt.controlStyle || (opt.controlStyle = {});
	        if (!has(controlStyle, 'position')) {
	            controlStyle.position = opt.controlPosition;
	        }
	        if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {
	            controlStyle.show = false;
	            delete controlStyle.position;
	        }
	        delete opt.controlPosition;
	    }

	    zrUtil.each(opt.data || [], function (dataItem) {
	        if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {
	            if (!has(dataItem, 'value') && has(dataItem, 'name')) {
	                // In ec2, using name as value.
	                dataItem.value = dataItem.name;
	            }
	            transferItem(dataItem);
	        }
	    });
	}

	function transferItem(opt) {
	    var itemStyle = opt.itemStyle || (opt.itemStyle = {});

	    var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {});

	    // Transfer label out
	    var label = opt.label || opt.label || {};
	    var labelNormal = label.normal || (label.normal = {});
	    var excludeLabelAttr = { normal: 1, emphasis: 1 };

	    zrUtil.each(label, function (value, name) {
	        if (!excludeLabelAttr[name] && !has(labelNormal, name)) {
	            labelNormal[name] = value;
	        }
	    });

	    if (itemStyleEmphasis.label && !has(label, 'emphasis')) {
	        label.emphasis = itemStyleEmphasis.label;
	        delete itemStyleEmphasis.label;
	    }
	}

	function has(obj, attr) {
	    return obj.hasOwnProperty(attr);
	}

/***/ },
/* 871 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(519).registerSubTypeDefaulter('timeline', function () {
	    // Only slider now.
	    return 'slider';
	});

/***/ },
/* 872 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Timeilne action
	 */

	var echarts = __webpack_require__(501);
	var zrUtil = __webpack_require__(504);

	echarts.registerAction({ type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate' }, function (payload, ecModel) {

	    var timelineModel = ecModel.getComponent('timeline');
	    if (timelineModel && payload.currentIndex != null) {
	        timelineModel.setCurrentIndex(payload.currentIndex);

	        if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {
	            timelineModel.setPlayState(false);
	        }
	    }

	    // Set normalized currentIndex to payload.
	    ecModel.resetOption('timeline');

	    return zrUtil.defaults({
	        currentIndex: timelineModel.option.currentIndex
	    }, payload);
	});

	echarts.registerAction({ type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update' }, function (payload, ecModel) {
	    var timelineModel = ecModel.getComponent('timeline');
	    if (timelineModel && payload.playState != null) {
	        timelineModel.setPlayState(payload.playState);
	    }
	});

/***/ },
/* 873 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Silder timeline model
	 */

	var TimelineModel = __webpack_require__(874);
	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);

	var SliderTimelineModel = TimelineModel.extend({

	    type: 'timeline.slider',

	    /**
	     * @protected
	     */
	    defaultOption: {

	        backgroundColor: 'rgba(0,0,0,0)', // 时间轴背景颜色
	        borderColor: '#ccc', // 时间轴边框颜色
	        borderWidth: 0, // 时间轴边框线宽，单位px，默认为0（无边框）

	        orient: 'horizontal', // 'vertical'
	        inverse: false,

	        tooltip: { // boolean or Object
	            trigger: 'item' // data item may also have tootip attr.
	        },

	        symbol: 'emptyCircle',
	        symbolSize: 10,

	        lineStyle: {
	            show: true,
	            width: 2,
	            color: '#304654'
	        },
	        label: { // 文本标签
	            position: 'auto', // auto left right top bottom
	            // When using number, label position is not
	            // restricted by viewRect.
	            // positive: right/bottom, negative: left/top
	            normal: {
	                show: true,
	                interval: 'auto',
	                rotate: 0,
	                // formatter: null,
	                textStyle: { // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: '#304654'
	                }
	            },
	            emphasis: {
	                show: true,
	                textStyle: { // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: '#c23531'
	                }
	            }
	        },
	        itemStyle: {
	            normal: {
	                color: '#304654',
	                borderWidth: 1
	            },
	            emphasis: {
	                color: '#c23531'
	            }
	        },

	        checkpointStyle: {
	            symbol: 'circle',
	            symbolSize: 13,
	            color: '#c23531',
	            borderWidth: 5,
	            borderColor: 'rgba(194,53,49, 0.5)',
	            animation: true,
	            animationDuration: 300,
	            animationEasing: 'quinticInOut'
	        },

	        controlStyle: {
	            show: true,
	            showPlayBtn: true,
	            showPrevBtn: true,
	            showNextBtn: true,
	            itemSize: 22,
	            itemGap: 12,
	            position: 'left', // 'left' 'right' 'top' 'bottom'
	            playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z', // jshint ignore:line
	            stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z', // jshint ignore:line
	            nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z', // jshint ignore:line
	            prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z', // jshint ignore:line
	            normal: {
	                color: '#304654',
	                borderColor: '#304654',
	                borderWidth: 1
	            },
	            emphasis: {
	                color: '#c23531',
	                borderColor: '#c23531',
	                borderWidth: 2
	            }
	        },
	        data: []
	    }

	});

	zrUtil.mixin(SliderTimelineModel, modelUtil.dataFormatMixin);

	module.exports = SliderTimelineModel;

/***/ },
/* 874 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Timeline model
	 */

	var ComponentModel = __webpack_require__(519);
	var List = __webpack_require__(598);
	var zrUtil = __webpack_require__(504);
	var modelUtil = __webpack_require__(505);

	var TimelineModel = ComponentModel.extend({

	    type: 'timeline',

	    layoutMode: 'box',

	    /**
	     * @protected
	     */
	    defaultOption: {

	        zlevel: 0, // 一级层叠
	        z: 4, // 二级层叠
	        show: true,

	        axisType: 'time', // 模式是时间类型，支持 value, category

	        realtime: true,

	        left: '20%',
	        top: null,
	        right: '20%',
	        bottom: 0,
	        width: null,
	        height: 40,
	        padding: 5,

	        controlPosition: 'left', // 'left' 'right' 'top' 'bottom' 'none'
	        autoPlay: false,
	        rewind: false, // 反向播放
	        loop: true,
	        playInterval: 2000, // 播放时间间隔，单位ms

	        currentIndex: 0,

	        itemStyle: {
	            normal: {},
	            emphasis: {}
	        },
	        label: {
	            normal: {
	                textStyle: {
	                    color: '#000'
	                }
	            },
	            emphasis: {}
	        },

	        data: []
	    },

	    /**
	     * @override
	     */
	    init: function init(option, parentModel, ecModel) {

	        /**
	         * @private
	         * @type {module:echarts/data/List}
	         */
	        this._data;

	        /**
	         * @private
	         * @type {Array.<string>}
	         */
	        this._names;

	        this.mergeDefaultAndTheme(option, ecModel);
	        this._initData();
	    },

	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(option) {
	        TimelineModel.superApply(this, 'mergeOption', arguments);
	        this._initData();
	    },

	    /**
	     * @param {number} [currentIndex]
	     */
	    setCurrentIndex: function setCurrentIndex(currentIndex) {
	        if (currentIndex == null) {
	            currentIndex = this.option.currentIndex;
	        }
	        var count = this._data.count();

	        if (this.option.loop) {
	            currentIndex = (currentIndex % count + count) % count;
	        } else {
	            currentIndex >= count && (currentIndex = count - 1);
	            currentIndex < 0 && (currentIndex = 0);
	        }

	        this.option.currentIndex = currentIndex;
	    },

	    /**
	     * @return {number} currentIndex
	     */
	    getCurrentIndex: function getCurrentIndex() {
	        return this.option.currentIndex;
	    },

	    /**
	     * @return {boolean}
	     */
	    isIndexMax: function isIndexMax() {
	        return this.getCurrentIndex() >= this._data.count() - 1;
	    },

	    /**
	     * @param {boolean} state true: play, false: stop
	     */
	    setPlayState: function setPlayState(state) {
	        this.option.autoPlay = !!state;
	    },

	    /**
	     * @return {boolean} true: play, false: stop
	     */
	    getPlayState: function getPlayState() {
	        return !!this.option.autoPlay;
	    },

	    /**
	     * @private
	     */
	    _initData: function _initData() {
	        var thisOption = this.option;
	        var dataArr = thisOption.data || [];
	        var axisType = thisOption.axisType;
	        var names = this._names = [];

	        if (axisType === 'category') {
	            var idxArr = [];
	            zrUtil.each(dataArr, function (item, index) {
	                var value = modelUtil.getDataItemValue(item);
	                var newItem;

	                if (zrUtil.isObject(item)) {
	                    newItem = zrUtil.clone(item);
	                    newItem.value = index;
	                } else {
	                    newItem = index;
	                }

	                idxArr.push(newItem);

	                if (!zrUtil.isString(value) && (value == null || isNaN(value))) {
	                    value = '';
	                }

	                names.push(value + '');
	            });
	            dataArr = idxArr;
	        }

	        var dimType = { category: 'ordinal', time: 'time' }[axisType] || 'number';

	        var data = this._data = new List([{ name: 'value', type: dimType }], this);

	        data.initData(dataArr, names);
	    },

	    getData: function getData() {
	        return this._data;
	    },

	    /**
	     * @public
	     * @return {Array.<string>} categoreis
	     */
	    getCategories: function getCategories() {
	        if (this.get('axisType') === 'category') {
	            return this._names.slice();
	        }
	    }

	});

	module.exports = TimelineModel;

/***/ },
/* 875 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Silder timeline view
	 */

	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var layout = __webpack_require__(521);
	var TimelineView = __webpack_require__(876);
	var TimelineAxis = __webpack_require__(877);
	var symbolUtil = __webpack_require__(607);
	var axisHelper = __webpack_require__(615);
	var BoundingRect = __webpack_require__(509);
	var matrix = __webpack_require__(511);
	var numberUtil = __webpack_require__(507);
	var formatUtil = __webpack_require__(506);
	var encodeHTML = formatUtil.encodeHTML;

	var bind = zrUtil.bind;
	var each = zrUtil.each;

	var PI = Math.PI;

	module.exports = TimelineView.extend({

	    type: 'timeline.slider',

	    init: function init(ecModel, api) {

	        this.api = api;

	        /**
	         * @private
	         * @type {module:echarts/component/timeline/TimelineAxis}
	         */
	        this._axis;

	        /**
	         * @private
	         * @type {module:zrender/core/BoundingRect}
	         */
	        this._viewRect;

	        /**
	         * @type {number}
	         */
	        this._timer;

	        /**
	         * @type {module:zrende/Element}
	         */
	        this._currentPointer;

	        /**
	         * @type {module:zrender/container/Group}
	         */
	        this._mainGroup;

	        /**
	         * @type {module:zrender/container/Group}
	         */
	        this._labelGroup;
	    },

	    /**
	     * @override
	     */
	    render: function render(timelineModel, ecModel, api, payload) {
	        this.model = timelineModel;
	        this.api = api;
	        this.ecModel = ecModel;

	        this.group.removeAll();

	        if (timelineModel.get('show', true)) {

	            var layoutInfo = this._layout(timelineModel, api);
	            var mainGroup = this._createGroup('mainGroup');
	            var labelGroup = this._createGroup('labelGroup');

	            /**
	             * @private
	             * @type {module:echarts/component/timeline/TimelineAxis}
	             */
	            var axis = this._axis = this._createAxis(layoutInfo, timelineModel);

	            timelineModel.formatTooltip = function (dataIndex) {
	                return encodeHTML(axis.scale.getLabel(dataIndex));
	            };

	            each(['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'], function (name) {
	                this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);
	            }, this);

	            this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);
	            this._position(layoutInfo, timelineModel);
	        }

	        this._doPlayStop();
	    },

	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._clearTimer();
	        this.group.removeAll();
	    },

	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        this._clearTimer();
	    },

	    _layout: function _layout(timelineModel, api) {
	        var labelPosOpt = timelineModel.get('label.normal.position');
	        var orient = timelineModel.get('orient');
	        var viewRect = getViewRect(timelineModel, api);
	        // Auto label offset.
	        if (labelPosOpt == null || labelPosOpt === 'auto') {
	            labelPosOpt = orient === 'horizontal' ? viewRect.y + viewRect.height / 2 < api.getHeight() / 2 ? '-' : '+' : viewRect.x + viewRect.width / 2 < api.getWidth() / 2 ? '+' : '-';
	        } else if (isNaN(labelPosOpt)) {
	            labelPosOpt = {
	                horizontal: { top: '-', bottom: '+' },
	                vertical: { left: '-', right: '+' }
	            }[orient][labelPosOpt];
	        }

	        // FIXME
	        // 暂没有实现用户传入
	        // var labelAlign = timelineModel.get('label.normal.textStyle.align');
	        // var labelBaseline = timelineModel.get('label.normal.textStyle.baseline');
	        var labelAlignMap = {
	            horizontal: 'center',
	            vertical: labelPosOpt >= 0 || labelPosOpt === '+' ? 'left' : 'right'
	        };

	        var labelBaselineMap = {
	            horizontal: labelPosOpt >= 0 || labelPosOpt === '+' ? 'top' : 'bottom',
	            vertical: 'middle'
	        };
	        var rotationMap = {
	            horizontal: 0,
	            vertical: PI / 2
	        };

	        // Position
	        var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;

	        var controlModel = timelineModel.getModel('controlStyle');
	        var showControl = controlModel.get('show');
	        var controlSize = showControl ? controlModel.get('itemSize') : 0;
	        var controlGap = showControl ? controlModel.get('itemGap') : 0;
	        var sizePlusGap = controlSize + controlGap;

	        // Special label rotate.
	        var labelRotation = timelineModel.get('label.normal.rotate') || 0;
	        labelRotation = labelRotation * PI / 180; // To radian.

	        var playPosition;
	        var prevBtnPosition;
	        var nextBtnPosition;
	        var axisExtent;
	        var controlPosition = controlModel.get('position', true);
	        var showControl = controlModel.get('show', true);
	        var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);
	        var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);
	        var showNextBtn = showControl && controlModel.get('showNextBtn', true);
	        var xLeft = 0;
	        var xRight = mainLength;

	        // position[0] means left, position[1] means middle.
	        if (controlPosition === 'left' || controlPosition === 'bottom') {
	            showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);
	            showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);
	            showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	        } else {
	            // 'top' 'right'
	            showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	            showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);
	            showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	        }
	        axisExtent = [xLeft, xRight];

	        if (timelineModel.get('inverse')) {
	            axisExtent.reverse();
	        }

	        return {
	            viewRect: viewRect,
	            mainLength: mainLength,
	            orient: orient,

	            rotation: rotationMap[orient],
	            labelRotation: labelRotation,
	            labelPosOpt: labelPosOpt,
	            labelAlign: labelAlignMap[orient],
	            labelBaseline: labelBaselineMap[orient],

	            // Based on mainGroup.
	            playPosition: playPosition,
	            prevBtnPosition: prevBtnPosition,
	            nextBtnPosition: nextBtnPosition,
	            axisExtent: axisExtent,

	            controlSize: controlSize,
	            controlGap: controlGap
	        };
	    },

	    _position: function _position(layoutInfo, timelineModel) {
	        // Position is be called finally, because bounding rect is needed for
	        // adapt content to fill viewRect (auto adapt offset).

	        // Timeline may be not all in the viewRect when 'offset' is specified
	        // as a number, because it is more appropriate that label aligns at
	        // 'offset' but not the other edge defined by viewRect.

	        var mainGroup = this._mainGroup;
	        var labelGroup = this._labelGroup;

	        var viewRect = layoutInfo.viewRect;
	        if (layoutInfo.orient === 'vertical') {
	            // transfrom to horizontal, inverse rotate by left-top point.
	            var m = matrix.create();
	            var rotateOriginX = viewRect.x;
	            var rotateOriginY = viewRect.y + viewRect.height;
	            matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);
	            matrix.rotate(m, m, -PI / 2);
	            matrix.translate(m, m, [rotateOriginX, rotateOriginY]);
	            viewRect = viewRect.clone();
	            viewRect.applyTransform(m);
	        }

	        var viewBound = getBound(viewRect);
	        var mainBound = getBound(mainGroup.getBoundingRect());
	        var labelBound = getBound(labelGroup.getBoundingRect());

	        var mainPosition = mainGroup.position;
	        var labelsPosition = labelGroup.position;

	        labelsPosition[0] = mainPosition[0] = viewBound[0][0];

	        var labelPosOpt = layoutInfo.labelPosOpt;

	        if (isNaN(labelPosOpt)) {
	            // '+' or '-'
	            var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;
	            toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	            toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);
	        } else {
	            var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;
	            toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	            labelsPosition[1] = mainPosition[1] + labelPosOpt;
	        }

	        mainGroup.attr('position', mainPosition);
	        labelGroup.attr('position', labelsPosition);
	        mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;

	        setOrigin(mainGroup);
	        setOrigin(labelGroup);

	        function setOrigin(targetGroup) {
	            var pos = targetGroup.position;
	            targetGroup.origin = [viewBound[0][0] - pos[0], viewBound[1][0] - pos[1]];
	        }

	        function getBound(rect) {
	            // [[xmin, xmax], [ymin, ymax]]
	            return [[rect.x, rect.x + rect.width], [rect.y, rect.y + rect.height]];
	        }

	        function toBound(fromPos, from, to, dimIdx, boundIdx) {
	            fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];
	        }
	    },

	    _createAxis: function _createAxis(layoutInfo, timelineModel) {
	        var data = timelineModel.getData();
	        var axisType = timelineModel.get('axisType');

	        var scale = axisHelper.createScaleByModel(timelineModel, axisType);
	        var dataExtent = data.getDataExtent('value');
	        scale.setExtent(dataExtent[0], dataExtent[1]);
	        this._customizeScale(scale, data);
	        scale.niceTicks();

	        var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);
	        axis.model = timelineModel;

	        return axis;
	    },

	    _customizeScale: function _customizeScale(scale, data) {

	        scale.getTicks = function () {
	            return data.mapArray(['value'], function (value) {
	                return value;
	            });
	        };

	        scale.getTicksLabels = function () {
	            return zrUtil.map(this.getTicks(), scale.getLabel, scale);
	        };
	    },

	    _createGroup: function _createGroup(name) {
	        var newGroup = this['_' + name] = new graphic.Group();
	        this.group.add(newGroup);
	        return newGroup;
	    },

	    _renderAxisLine: function _renderAxisLine(layoutInfo, group, axis, timelineModel) {
	        var axisExtent = axis.getExtent();

	        if (!timelineModel.get('lineStyle.show')) {
	            return;
	        }

	        group.add(new graphic.Line({
	            shape: {
	                x1: axisExtent[0], y1: 0,
	                x2: axisExtent[1], y2: 0
	            },
	            style: zrUtil.extend({ lineCap: 'round' }, timelineModel.getModel('lineStyle').getLineStyle()),
	            silent: true,
	            z2: 1
	        }));
	    },

	    /**
	     * @private
	     */
	    _renderAxisTick: function _renderAxisTick(layoutInfo, group, axis, timelineModel) {
	        var data = timelineModel.getData();
	        var ticks = axis.scale.getTicks();

	        each(ticks, function (value, dataIndex) {

	            var tickCoord = axis.dataToCoord(value);
	            var itemModel = data.getItemModel(dataIndex);
	            var itemStyleModel = itemModel.getModel('itemStyle.normal');
	            var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');
	            var symbolOpt = {
	                position: [tickCoord, 0],
	                onclick: bind(this._changeTimeline, this, dataIndex)
	            };
	            var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);
	            graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());

	            if (itemModel.get('tooltip')) {
	                el.dataIndex = dataIndex;
	                el.dataModel = timelineModel;
	            } else {
	                el.dataIndex = el.dataModel = null;
	            }
	        }, this);
	    },

	    /**
	     * @private
	     */
	    _renderAxisLabel: function _renderAxisLabel(layoutInfo, group, axis, timelineModel) {
	        var labelModel = timelineModel.getModel('label.normal');

	        if (!labelModel.get('show')) {
	            return;
	        }

	        var data = timelineModel.getData();
	        var ticks = axis.scale.getTicks();
	        var labels = axisHelper.getFormattedLabels(axis, labelModel.get('formatter'));
	        var labelInterval = axis.getLabelInterval();

	        each(ticks, function (tick, dataIndex) {
	            if (axis.isLabelIgnored(dataIndex, labelInterval)) {
	                return;
	            }

	            var itemModel = data.getItemModel(dataIndex);
	            var itemTextStyleModel = itemModel.getModel('label.normal.textStyle');
	            var hoverTextStyleModel = itemModel.getModel('label.emphasis.textStyle');
	            var tickCoord = axis.dataToCoord(tick);
	            var textEl = new graphic.Text({
	                style: {
	                    text: labels[dataIndex],
	                    textAlign: layoutInfo.labelAlign,
	                    textVerticalAlign: layoutInfo.labelBaseline,
	                    textFont: itemTextStyleModel.getFont(),
	                    fill: itemTextStyleModel.getTextColor()
	                },
	                position: [tickCoord, 0],
	                rotation: layoutInfo.labelRotation - layoutInfo.rotation,
	                onclick: bind(this._changeTimeline, this, dataIndex),
	                silent: false
	            });

	            group.add(textEl);
	            graphic.setHoverStyle(textEl, hoverTextStyleModel.getItemStyle());
	        }, this);
	    },

	    /**
	     * @private
	     */
	    _renderControl: function _renderControl(layoutInfo, group, axis, timelineModel) {
	        var controlSize = layoutInfo.controlSize;
	        var rotation = layoutInfo.rotation;

	        var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();
	        var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();
	        var rect = [0, -controlSize / 2, controlSize, controlSize];
	        var playState = timelineModel.getPlayState();
	        var inverse = timelineModel.get('inverse', true);

	        makeBtn(layoutInfo.nextBtnPosition, 'controlStyle.nextIcon', bind(this._changeTimeline, this, inverse ? '-' : '+'));
	        makeBtn(layoutInfo.prevBtnPosition, 'controlStyle.prevIcon', bind(this._changeTimeline, this, inverse ? '+' : '-'));
	        makeBtn(layoutInfo.playPosition, 'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'), bind(this._handlePlayClick, this, !playState), true);

	        function makeBtn(position, iconPath, onclick, willRotate) {
	            if (!position) {
	                return;
	            }
	            var opt = {
	                position: position,
	                origin: [controlSize / 2, 0],
	                rotation: willRotate ? -rotation : 0,
	                rectHover: true,
	                style: itemStyle,
	                onclick: onclick
	            };
	            var btn = makeIcon(timelineModel, iconPath, rect, opt);
	            group.add(btn);
	            graphic.setHoverStyle(btn, hoverStyle);
	        }
	    },

	    _renderCurrentPointer: function _renderCurrentPointer(layoutInfo, group, axis, timelineModel) {
	        var data = timelineModel.getData();
	        var currentIndex = timelineModel.getCurrentIndex();
	        var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');
	        var me = this;

	        var callback = {
	            onCreate: function onCreate(pointer) {
	                pointer.draggable = true;
	                pointer.drift = bind(me._handlePointerDrag, me);
	                pointer.ondragend = bind(me._handlePointerDragend, me);
	                pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);
	            },
	            onUpdate: function onUpdate(pointer) {
	                pointerMoveTo(pointer, currentIndex, axis, timelineModel);
	            }
	        };

	        // Reuse when exists, for animation and drag.
	        this._currentPointer = giveSymbol(pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback);
	    },

	    _handlePlayClick: function _handlePlayClick(nextState) {
	        this._clearTimer();
	        this.api.dispatchAction({
	            type: 'timelinePlayChange',
	            playState: nextState,
	            from: this.uid
	        });
	    },

	    _handlePointerDrag: function _handlePointerDrag(dx, dy, e) {
	        this._clearTimer();
	        this._pointerChangeTimeline([e.offsetX, e.offsetY]);
	    },

	    _handlePointerDragend: function _handlePointerDragend(e) {
	        this._pointerChangeTimeline([e.offsetX, e.offsetY], true);
	    },

	    _pointerChangeTimeline: function _pointerChangeTimeline(mousePos, trigger) {
	        var toCoord = this._toAxisCoord(mousePos)[0];

	        var axis = this._axis;
	        var axisExtent = numberUtil.asc(axis.getExtent().slice());

	        toCoord > axisExtent[1] && (toCoord = axisExtent[1]);
	        toCoord < axisExtent[0] && (toCoord = axisExtent[0]);

	        this._currentPointer.position[0] = toCoord;
	        this._currentPointer.dirty();

	        var targetDataIndex = this._findNearestTick(toCoord);
	        var timelineModel = this.model;

	        if (trigger || targetDataIndex !== timelineModel.getCurrentIndex() && timelineModel.get('realtime')) {
	            this._changeTimeline(targetDataIndex);
	        }
	    },

	    _doPlayStop: function _doPlayStop() {
	        this._clearTimer();

	        if (this.model.getPlayState()) {
	            this._timer = setTimeout(bind(handleFrame, this), this.model.get('playInterval'));
	        }

	        function handleFrame() {
	            // Do not cache
	            var timelineModel = this.model;
	            this._changeTimeline(timelineModel.getCurrentIndex() + (timelineModel.get('rewind', true) ? -1 : 1));
	        }
	    },

	    _toAxisCoord: function _toAxisCoord(vertex) {
	        var trans = this._mainGroup.getLocalTransform();
	        return graphic.applyTransform(vertex, trans, true);
	    },

	    _findNearestTick: function _findNearestTick(axisCoord) {
	        var data = this.model.getData();
	        var dist = Infinity;
	        var targetDataIndex;
	        var axis = this._axis;

	        data.each(['value'], function (value, dataIndex) {
	            var coord = axis.dataToCoord(value);
	            var d = Math.abs(coord - axisCoord);
	            if (d < dist) {
	                dist = d;
	                targetDataIndex = dataIndex;
	            }
	        });

	        return targetDataIndex;
	    },

	    _clearTimer: function _clearTimer() {
	        if (this._timer) {
	            clearTimeout(this._timer);
	            this._timer = null;
	        }
	    },

	    _changeTimeline: function _changeTimeline(nextIndex) {
	        var currentIndex = this.model.getCurrentIndex();

	        if (nextIndex === '+') {
	            nextIndex = currentIndex + 1;
	        } else if (nextIndex === '-') {
	            nextIndex = currentIndex - 1;
	        }

	        this.api.dispatchAction({
	            type: 'timelineChange',
	            currentIndex: nextIndex,
	            from: this.uid
	        });
	    }

	});

	function getViewRect(model, api) {
	    return layout.getLayoutRect(model.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    }, model.get('padding'));
	}

	function makeIcon(timelineModel, objPath, rect, opts) {
	    var icon = graphic.makePath(timelineModel.get(objPath).replace(/^path:\/\//, ''), zrUtil.clone(opts || {}), new BoundingRect(rect[0], rect[1], rect[2], rect[3]), 'center');

	    return icon;
	}

	/**
	 * Create symbol or update symbol
	 * opt: basic position and event handlers
	 */
	function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {
	    var color = itemStyleModel.get('color');

	    if (!symbol) {
	        var symbolType = hostModel.get('symbol');
	        symbol = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);
	        symbol.setStyle('strokeNoScale', true);
	        group.add(symbol);
	        callback && callback.onCreate(symbol);
	    } else {
	        symbol.setColor(color);
	        group.add(symbol); // Group may be new, also need to add.
	        callback && callback.onUpdate(symbol);
	    }

	    // Style
	    var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);
	    symbol.setStyle(itemStyle);

	    // Transform and events.
	    opt = zrUtil.merge({
	        rectHover: true,
	        z2: 100
	    }, opt, true);

	    var symbolSize = hostModel.get('symbolSize');
	    symbolSize = symbolSize instanceof Array ? symbolSize.slice() : [+symbolSize, +symbolSize];
	    symbolSize[0] /= 2;
	    symbolSize[1] /= 2;
	    opt.scale = symbolSize;

	    var symbolOffset = hostModel.get('symbolOffset');
	    if (symbolOffset) {
	        var pos = opt.position = opt.position || [0, 0];
	        pos[0] += numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	        pos[1] += numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	    }

	    var symbolRotate = hostModel.get('symbolRotate');
	    opt.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;

	    symbol.attr(opt);

	    // FIXME
	    // (1) When symbol.style.strokeNoScale is true and updateTransform is not performed,
	    // getBoundingRect will return wrong result.
	    // (This is supposed to be resolved in zrender, but it is a little difficult to
	    // leverage performance and auto updateTransform)
	    // (2) All of ancesters of symbol do not scale, so we can just updateTransform symbol.
	    symbol.updateTransform();

	    return symbol;
	}

	function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {
	    if (pointer.dragging) {
	        return;
	    }

	    var pointerModel = timelineModel.getModel('checkpointStyle');
	    var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));

	    if (noAnimation || !pointerModel.get('animation', true)) {
	        pointer.attr({ position: [toCoord, 0] });
	    } else {
	        pointer.stopAnimation(true);
	        pointer.animateTo({ position: [toCoord, 0] }, pointerModel.get('animationDuration', true), pointerModel.get('animationEasing', true));
	    }
	}

/***/ },
/* 876 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Timeline view
	 */

	// var zrUtil = require('zrender/lib/core/util');
	// var graphic = require('../../util/graphic');
	var ComponentView = __webpack_require__(529);

	module.exports = ComponentView.extend({

	    type: 'timeline'
	});

/***/ },
/* 877 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var Axis = __webpack_require__(624);
	var axisHelper = __webpack_require__(615);

	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var TimelineAxis = function TimelineAxis(dim, scale, coordExtent, axisType) {

	    Axis.call(this, dim, scale, coordExtent);

	    /**
	     * Axis type
	     *  - 'category'
	     *  - 'value'
	     *  - 'time'
	     *  - 'log'
	     * @type {string}
	     */
	    this.type = axisType || 'value';

	    /**
	     * @private
	     * @type {number}
	     */
	    this._autoLabelInterval;

	    /**
	     * Axis model
	     * @param {module:echarts/component/TimelineModel}
	     */
	    this.model = null;
	};

	TimelineAxis.prototype = {

	    constructor: TimelineAxis,

	    /**
	     * @public
	     * @return {number}
	     */
	    getLabelInterval: function getLabelInterval() {
	        var timelineModel = this.model;
	        var labelModel = timelineModel.getModel('label.normal');
	        var labelInterval = labelModel.get('interval');

	        if (labelInterval != null && labelInterval != 'auto') {
	            return labelInterval;
	        }

	        var labelInterval = this._autoLabelInterval;

	        if (!labelInterval) {
	            labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(zrUtil.map(this.scale.getTicks(), this.dataToCoord, this), axisHelper.getFormattedLabels(this, labelModel.get('formatter')), labelModel.getModel('textStyle').getFont(), timelineModel.get('orient') === 'horizontal');
	        }

	        return labelInterval;
	    },

	    /**
	     * If label is ignored.
	     * Automatically used when axis is category and label can not be all shown
	     * @public
	     * @param  {number} idx
	     * @return {boolean}
	     */
	    isLabelIgnored: function isLabelIgnored(idx) {
	        if (this.type === 'category') {
	            var labelInterval = this.getLabelInterval();
	            return typeof labelInterval === 'function' && !labelInterval(idx, this.scale.getLabel(idx)) || idx % (labelInterval + 1);
	        }
	    }

	};

	zrUtil.inherits(TimelineAxis, Axis);

	module.exports = TimelineAxis;

/***/ },
/* 878 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(879);
	__webpack_require__(880);

	__webpack_require__(881);
	__webpack_require__(882);
	__webpack_require__(883);
	__webpack_require__(884);
	__webpack_require__(889);

/***/ },
/* 879 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var featureManager = __webpack_require__(826);
	var zrUtil = __webpack_require__(504);

	var ToolboxModel = __webpack_require__(501).extendComponentModel({

	    type: 'toolbox',

	    layoutMode: {
	        type: 'box',
	        ignoreSize: true
	    },

	    mergeDefaultAndTheme: function mergeDefaultAndTheme(option) {
	        ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);

	        zrUtil.each(this.option.feature, function (featureOpt, featureName) {
	            var Feature = featureManager.get(featureName);
	            Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
	        });
	    },

	    defaultOption: {

	        show: true,

	        z: 6,

	        zlevel: 0,

	        orient: 'horizontal',

	        left: 'right',

	        top: 'top',

	        // right
	        // bottom

	        backgroundColor: 'transparent',

	        borderColor: '#ccc',

	        borderWidth: 0,

	        padding: 5,

	        itemSize: 15,

	        itemGap: 8,

	        showTitle: true,

	        iconStyle: {
	            normal: {
	                borderColor: '#666',
	                color: 'none'
	            },
	            emphasis: {
	                borderColor: '#3E98C5'
	            }
	        }
	        // textStyle: {},

	        // feature
	    }
	});

	module.exports = ToolboxModel;

/***/ },
/* 880 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var featureManager = __webpack_require__(826);
	var zrUtil = __webpack_require__(504);
	var graphic = __webpack_require__(543);
	var Model = __webpack_require__(512);
	var DataDiffer = __webpack_require__(599);
	var listComponentHelper = __webpack_require__(796);
	var textContain = __webpack_require__(508);

	module.exports = __webpack_require__(501).extendComponentView({

	    type: 'toolbox',

	    render: function render(toolboxModel, ecModel, api, payload) {
	        var group = this.group;
	        group.removeAll();

	        if (!toolboxModel.get('show')) {
	            return;
	        }

	        var itemSize = +toolboxModel.get('itemSize');
	        var featureOpts = toolboxModel.get('feature') || {};
	        var features = this._features || (this._features = {});

	        var featureNames = [];
	        zrUtil.each(featureOpts, function (opt, name) {
	            featureNames.push(name);
	        });

	        new DataDiffer(this._featureNames || [], featureNames).add(process).update(process).remove(zrUtil.curry(process, null)).execute();

	        // Keep for diff.
	        this._featureNames = featureNames;

	        function process(newIndex, oldIndex) {
	            var featureName = featureNames[newIndex];
	            var oldName = featureNames[oldIndex];
	            var featureOpt = featureOpts[featureName];
	            var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
	            var feature;

	            if (featureName && !oldName) {
	                // Create
	                if (isUserFeatureName(featureName)) {
	                    feature = {
	                        model: featureModel,
	                        onclick: featureModel.option.onclick,
	                        featureName: featureName
	                    };
	                } else {
	                    var Feature = featureManager.get(featureName);
	                    if (!Feature) {
	                        return;
	                    }
	                    feature = new Feature(featureModel, ecModel, api);
	                }
	                features[featureName] = feature;
	            } else {
	                feature = features[oldName];
	                // If feature does not exsit.
	                if (!feature) {
	                    return;
	                }
	                feature.model = featureModel;
	                feature.ecModel = ecModel;
	                feature.api = api;
	            }

	            if (!featureName && oldName) {
	                feature.dispose && feature.dispose(ecModel, api);
	                return;
	            }

	            if (!featureModel.get('show') || feature.unusable) {
	                feature.remove && feature.remove(ecModel, api);
	                return;
	            }

	            createIconPaths(featureModel, feature, featureName);

	            featureModel.setIconStatus = function (iconName, status) {
	                var option = this.option;
	                var iconPaths = this.iconPaths;
	                option.iconStatus = option.iconStatus || {};
	                option.iconStatus[iconName] = status;
	                // FIXME
	                iconPaths[iconName] && iconPaths[iconName].trigger(status);
	            };

	            if (feature.render) {
	                feature.render(featureModel, ecModel, api, payload);
	            }
	        }

	        function createIconPaths(featureModel, feature, featureName) {
	            var iconStyleModel = featureModel.getModel('iconStyle');

	            // If one feature has mutiple icon. they are orginaized as
	            // {
	            //     icon: {
	            //         foo: '',
	            //         bar: ''
	            //     },
	            //     title: {
	            //         foo: '',
	            //         bar: ''
	            //     }
	            // }
	            var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
	            var titles = featureModel.get('title') || {};
	            if (typeof icons === 'string') {
	                var icon = icons;
	                var title = titles;
	                icons = {};
	                titles = {};
	                icons[featureName] = icon;
	                titles[featureName] = title;
	            }
	            var iconPaths = featureModel.iconPaths = {};
	            zrUtil.each(icons, function (icon, iconName) {
	                var normalStyle = iconStyleModel.getModel('normal').getItemStyle();
	                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();

	                var style = {
	                    x: -itemSize / 2,
	                    y: -itemSize / 2,
	                    width: itemSize,
	                    height: itemSize
	                };
	                var path = icon.indexOf('image://') === 0 ? (style.image = icon.slice(8), new graphic.Image({ style: style })) : graphic.makePath(icon.replace('path://', ''), {
	                    style: normalStyle,
	                    hoverStyle: hoverStyle,
	                    rectHover: true
	                }, style, 'center');

	                graphic.setHoverStyle(path);

	                if (toolboxModel.get('showTitle')) {
	                    path.__title = titles[iconName];
	                    path.on('mouseover', function () {
	                        // Should not reuse above hoverStyle, which might be modified.
	                        var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	                        path.setStyle({
	                            text: titles[iconName],
	                            textPosition: hoverStyle.textPosition || 'bottom',
	                            textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
	                            textAlign: hoverStyle.textAlign || 'center'
	                        });
	                    }).on('mouseout', function () {
	                        path.setStyle({
	                            textFill: null
	                        });
	                    });
	                }
	                path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');

	                group.add(path);
	                path.on('click', zrUtil.bind(feature.onclick, feature, ecModel, api, iconName));

	                iconPaths[iconName] = path;
	            });
	        }

	        listComponentHelper.layout(group, toolboxModel, api);
	        // Render background after group is layout
	        // FIXME
	        listComponentHelper.addBackground(group, toolboxModel);

	        // Adjust icon title positions to avoid them out of screen
	        group.eachChild(function (icon) {
	            var titleText = icon.__title;
	            var hoverStyle = icon.hoverStyle;
	            // May be background element
	            if (hoverStyle && titleText) {
	                var rect = textContain.getBoundingRect(titleText, hoverStyle.font);
	                var offsetX = icon.position[0] + group.position[0];
	                var offsetY = icon.position[1] + group.position[1] + itemSize;

	                var needPutOnTop = false;
	                if (offsetY + rect.height > api.getHeight()) {
	                    hoverStyle.textPosition = 'top';
	                    needPutOnTop = true;
	                }
	                var topOffset = needPutOnTop ? -5 - rect.height : itemSize + 8;
	                if (offsetX + rect.width / 2 > api.getWidth()) {
	                    hoverStyle.textPosition = ['100%', topOffset];
	                    hoverStyle.textAlign = 'right';
	                } else if (offsetX - rect.width / 2 < 0) {
	                    hoverStyle.textPosition = [0, topOffset];
	                    hoverStyle.textAlign = 'left';
	                }
	            }
	        });
	    },

	    updateView: function updateView(toolboxModel, ecModel, api, payload) {
	        zrUtil.each(this._features, function (feature) {
	            feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
	        });
	    },

	    updateLayout: function updateLayout(toolboxModel, ecModel, api, payload) {
	        zrUtil.each(this._features, function (feature) {
	            feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);
	        });
	    },

	    remove: function remove(ecModel, api) {
	        zrUtil.each(this._features, function (feature) {
	            feature.remove && feature.remove(ecModel, api);
	        });
	        this.group.removeAll();
	    },

	    dispose: function dispose(ecModel, api) {
	        zrUtil.each(this._features, function (feature) {
	            feature.dispose && feature.dispose(ecModel, api);
	        });
	    }
	});

	function isUserFeatureName(featureName) {
	    return featureName.indexOf('my') === 0;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 881 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var env = __webpack_require__(502);

	function SaveAsImage(model) {
	    this.model = model;
	}

	SaveAsImage.defaultOption = {
	    show: true,
	    icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
	    title: '保存为图片',
	    type: 'png',
	    // Default use option.backgroundColor
	    // backgroundColor: '#fff',
	    name: '',
	    excludeComponents: ['toolbox'],
	    pixelRatio: 1,
	    lang: ['右键另存为图片']
	};

	SaveAsImage.prototype.unusable = !env.canvasSupported;

	var proto = SaveAsImage.prototype;

	proto.onclick = function (ecModel, api) {
	    var model = this.model;
	    var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
	    var $a = document.createElement('a');
	    var type = model.get('type', true) || 'png';
	    $a.download = title + '.' + type;
	    $a.target = '_blank';
	    var url = api.getConnectedDataURL({
	        type: type,
	        backgroundColor: model.get('backgroundColor', true) || ecModel.get('backgroundColor') || '#fff',
	        excludeComponents: model.get('excludeComponents'),
	        pixelRatio: model.get('pixelRatio')
	    });
	    $a.href = url;
	    // Chrome and Firefox
	    if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {
	        var evt = new MouseEvent('click', {
	            view: window,
	            bubbles: true,
	            cancelable: false
	        });
	        $a.dispatchEvent(evt);
	    }
	    // IE
	    else {
	            var lang = model.get('lang');
	            var html = '' + '<body style="margin:0;">' + '<img src="' + url + '" style="max-width:100%;" title="' + (lang && lang[0] || '') + '" />' + '</body>';
	            var tab = window.open();
	            tab.document.write(html);
	        }
	};

	__webpack_require__(826).register('saveAsImage', SaveAsImage);

	module.exports = SaveAsImage;

/***/ },
/* 882 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);

	function MagicType(model) {
	    this.model = model;
	}

	MagicType.defaultOption = {
	    show: true,
	    type: [],
	    // Icon group
	    icon: {
	        line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
	        bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
	        stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line
	        tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
	    },
	    title: {
	        line: '切换为折线图',
	        bar: '切换为柱状图',
	        stack: '切换为堆叠',
	        tiled: '切换为平铺'
	    },
	    option: {},
	    seriesIndex: {}
	};

	var proto = MagicType.prototype;

	proto.getIcons = function () {
	    var model = this.model;
	    var availableIcons = model.get('icon');
	    var icons = {};
	    zrUtil.each(model.get('type'), function (type) {
	        if (availableIcons[type]) {
	            icons[type] = availableIcons[type];
	        }
	    });
	    return icons;
	};

	var seriesOptGenreator = {
	    'line': function line(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'bar') {
	            return zrUtil.merge({
	                id: seriesId,
	                type: 'line',
	                // Preserve data related option
	                data: seriesModel.get('data'),
	                stack: seriesModel.get('stack'),
	                markPoint: seriesModel.get('markPoint'),
	                markLine: seriesModel.get('markLine')
	            }, model.get('option.line') || {}, true);
	        }
	    },
	    'bar': function bar(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'line') {
	            return zrUtil.merge({
	                id: seriesId,
	                type: 'bar',
	                // Preserve data related option
	                data: seriesModel.get('data'),
	                stack: seriesModel.get('stack'),
	                markPoint: seriesModel.get('markPoint'),
	                markLine: seriesModel.get('markLine')
	            }, model.get('option.bar') || {}, true);
	        }
	    },
	    'stack': function stack(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'line' || seriesType === 'bar') {
	            return zrUtil.merge({
	                id: seriesId,
	                stack: '__ec_magicType_stack__'
	            }, model.get('option.stack') || {}, true);
	        }
	    },
	    'tiled': function tiled(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'line' || seriesType === 'bar') {
	            return zrUtil.merge({
	                id: seriesId,
	                stack: ''
	            }, model.get('option.tiled') || {}, true);
	        }
	    }
	};

	var radioTypes = [['line', 'bar'], ['stack', 'tiled']];

	proto.onclick = function (ecModel, api, type) {
	    var model = this.model;
	    var seriesIndex = model.get('seriesIndex.' + type);
	    // Not supported magicType
	    if (!seriesOptGenreator[type]) {
	        return;
	    }
	    var newOption = {
	        series: []
	    };
	    var generateNewSeriesTypes = function generateNewSeriesTypes(seriesModel) {
	        var seriesType = seriesModel.subType;
	        var seriesId = seriesModel.id;
	        var newSeriesOpt = seriesOptGenreator[type](seriesType, seriesId, seriesModel, model);
	        if (newSeriesOpt) {
	            // PENDING If merge original option?
	            zrUtil.defaults(newSeriesOpt, seriesModel.option);
	            newOption.series.push(newSeriesOpt);
	        }
	        // Modify boundaryGap
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {
	            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	            if (categoryAxis) {
	                var axisDim = categoryAxis.dim;
	                var axisType = axisDim + 'Axis';
	                var axisModel = ecModel.queryComponents({
	                    mainType: axisType,
	                    index: seriesModel.get(name + 'Index'),
	                    id: seriesModel.get(name + 'Id')
	                })[0];
	                var axisIndex = axisModel.componentIndex;

	                newOption[axisType] = newOption[axisType] || [];
	                for (var i = 0; i <= axisIndex; i++) {
	                    newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};
	                }
	                newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;
	            }
	        }
	    };

	    zrUtil.each(radioTypes, function (radio) {
	        if (zrUtil.indexOf(radio, type) >= 0) {
	            zrUtil.each(radio, function (item) {
	                model.setIconStatus(item, 'normal');
	            });
	        }
	    });

	    model.setIconStatus(type, 'emphasis');

	    ecModel.eachComponent({
	        mainType: 'series',
	        query: seriesIndex == null ? null : {
	            seriesIndex: seriesIndex
	        }
	    }, generateNewSeriesTypes);
	    api.dispatchAction({
	        type: 'changeMagicType',
	        currentType: type,
	        newOption: newOption
	    });
	};

	var echarts = __webpack_require__(501);
	echarts.registerAction({
	    type: 'changeMagicType',
	    event: 'magicTypeChanged',
	    update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	    ecModel.mergeOption(payload.newOption);
	});

	__webpack_require__(826).register('magicType', MagicType);

	module.exports = MagicType;

/***/ },
/* 883 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @module echarts/component/toolbox/feature/DataView
	 */

	var zrUtil = __webpack_require__(504);
	var eventTool = __webpack_require__(588);

	var BLOCK_SPLITER = new Array(60).join('-');
	var ITEM_SPLITER = '\t';
	/**
	 * Group series into two types
	 *  1. on category axis, like line, bar
	 *  2. others, like scatter, pie
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object}
	 * @inner
	 */
	function groupSeries(ecModel) {
	    var seriesGroupByCategoryAxis = {};
	    var otherSeries = [];
	    var meta = [];
	    ecModel.eachRawSeries(function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;

	        if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
	            var baseAxis = coordSys.getBaseAxis();
	            if (baseAxis.type === 'category') {
	                var key = baseAxis.dim + '_' + baseAxis.index;
	                if (!seriesGroupByCategoryAxis[key]) {
	                    seriesGroupByCategoryAxis[key] = {
	                        categoryAxis: baseAxis,
	                        valueAxis: coordSys.getOtherAxis(baseAxis),
	                        series: []
	                    };
	                    meta.push({
	                        axisDim: baseAxis.dim,
	                        axisIndex: baseAxis.index
	                    });
	                }
	                seriesGroupByCategoryAxis[key].series.push(seriesModel);
	            } else {
	                otherSeries.push(seriesModel);
	            }
	        } else {
	            otherSeries.push(seriesModel);
	        }
	    });

	    return {
	        seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
	        other: otherSeries,
	        meta: meta
	    };
	}

	/**
	 * Assemble content of series on cateogory axis
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */
	function assembleSeriesWithCategoryAxis(series) {
	    var tables = [];
	    zrUtil.each(series, function (group, key) {
	        var categoryAxis = group.categoryAxis;
	        var valueAxis = group.valueAxis;
	        var valueAxisDim = valueAxis.dim;

	        var headers = [' '].concat(zrUtil.map(group.series, function (series) {
	            return series.name;
	        }));
	        var columns = [categoryAxis.model.getCategories()];
	        zrUtil.each(group.series, function (series) {
	            columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
	                return val;
	            }));
	        });
	        // Assemble table content
	        var lines = [headers.join(ITEM_SPLITER)];
	        for (var i = 0; i < columns[0].length; i++) {
	            var items = [];
	            for (var j = 0; j < columns.length; j++) {
	                items.push(columns[j][i]);
	            }
	            lines.push(items.join(ITEM_SPLITER));
	        }
	        tables.push(lines.join('\n'));
	    });
	    return tables.join('\n\n' + BLOCK_SPLITER + '\n\n');
	}

	/**
	 * Assemble content of other series
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */
	function assembleOtherSeries(series) {
	    return zrUtil.map(series, function (series) {
	        var data = series.getRawData();
	        var lines = [series.name];
	        var vals = [];
	        data.each(data.dimensions, function () {
	            var argLen = arguments.length;
	            var dataIndex = arguments[argLen - 1];
	            var name = data.getName(dataIndex);
	            for (var i = 0; i < argLen - 1; i++) {
	                vals[i] = arguments[i];
	            }
	            lines.push((name ? name + ITEM_SPLITER : '') + vals.join(ITEM_SPLITER));
	        });
	        return lines.join('\n');
	    }).join('\n\n' + BLOCK_SPLITER + '\n\n');
	}

	/**
	 * @param {module:echarts/model/Global}
	 * @return {string}
	 * @inner
	 */
	function getContentFromModel(ecModel) {

	    var result = groupSeries(ecModel);

	    return {
	        value: zrUtil.filter([assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis), assembleOtherSeries(result.other)], function (str) {
	            return str.replace(/[\n\t\s]/g, '');
	        }).join('\n\n' + BLOCK_SPLITER + '\n\n'),

	        meta: result.meta
	    };
	}

	function trim(str) {
	    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	}
	/**
	 * If a block is tsv format
	 */
	function isTSVFormat(block) {
	    // Simple method to find out if a block is tsv format
	    var firstLine = block.slice(0, block.indexOf('\n'));
	    if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
	        return true;
	    }
	}

	var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
	/**
	 * @param {string} tsv
	 * @return {Array.<Object>}
	 */
	function parseTSVContents(tsv) {
	    var tsvLines = tsv.split(/\n+/g);
	    var headers = trim(tsvLines.shift()).split(itemSplitRegex);

	    var categories = [];
	    var series = zrUtil.map(headers, function (header) {
	        return {
	            name: header,
	            data: []
	        };
	    });
	    for (var i = 0; i < tsvLines.length; i++) {
	        var items = trim(tsvLines[i]).split(itemSplitRegex);
	        categories.push(items.shift());
	        for (var j = 0; j < items.length; j++) {
	            series[j] && (series[j].data[i] = items[j]);
	        }
	    }
	    return {
	        series: series,
	        categories: categories
	    };
	}

	/**
	 * @param {string} str
	 * @return {Array.<Object>}
	 * @inner
	 */
	function parseListContents(str) {
	    var lines = str.split(/\n+/g);
	    var seriesName = trim(lines.shift());

	    var data = [];
	    for (var i = 0; i < lines.length; i++) {
	        var items = trim(lines[i]).split(itemSplitRegex);
	        var name = '';
	        var value;
	        var hasName = false;
	        if (isNaN(items[0])) {
	            // First item is name
	            hasName = true;
	            name = items[0];
	            items = items.slice(1);
	            data[i] = {
	                name: name,
	                value: []
	            };
	            value = data[i].value;
	        } else {
	            value = data[i] = [];
	        }
	        for (var j = 0; j < items.length; j++) {
	            value.push(+items[j]);
	        }
	        if (value.length === 1) {
	            hasName ? data[i].value = value[0] : data[i] = value[0];
	        }
	    }

	    return {
	        name: seriesName,
	        data: data
	    };
	}

	/**
	 * @param {string} str
	 * @param {Array.<Object>} blockMetaList
	 * @return {Object}
	 * @inner
	 */
	function parseContents(str, blockMetaList) {
	    var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
	    var newOption = {
	        series: []
	    };
	    zrUtil.each(blocks, function (block, idx) {
	        if (isTSVFormat(block)) {
	            var result = parseTSVContents(block);
	            var blockMeta = blockMetaList[idx];
	            var axisKey = blockMeta.axisDim + 'Axis';

	            if (blockMeta) {
	                newOption[axisKey] = newOption[axisKey] || [];
	                newOption[axisKey][blockMeta.axisIndex] = {
	                    data: result.categories
	                };
	                newOption.series = newOption.series.concat(result.series);
	            }
	        } else {
	            var result = parseListContents(block);
	            newOption.series.push(result);
	        }
	    });
	    return newOption;
	}

	/**
	 * @alias {module:echarts/component/toolbox/feature/DataView}
	 * @constructor
	 * @param {module:echarts/model/Model} model
	 */
	function DataView(model) {

	    this._dom = null;

	    this.model = model;
	}

	DataView.defaultOption = {
	    show: true,
	    readOnly: false,
	    optionToContent: null,
	    contentToOption: null,

	    icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
	    title: '数据视图',
	    lang: ['数据视图', '关闭', '刷新'],
	    backgroundColor: '#fff',
	    textColor: '#000',
	    textareaColor: '#fff',
	    textareaBorderColor: '#333',
	    buttonColor: '#c23531',
	    buttonTextColor: '#fff'
	};

	DataView.prototype.onclick = function (ecModel, api) {
	    var container = api.getDom();
	    var model = this.model;
	    if (this._dom) {
	        container.removeChild(this._dom);
	    }
	    var root = document.createElement('div');
	    root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
	    root.style.backgroundColor = model.get('backgroundColor') || '#fff';

	    // Create elements
	    var header = document.createElement('h4');
	    var lang = model.get('lang') || [];
	    header.innerHTML = lang[0] || model.get('title');
	    header.style.cssText = 'margin: 10px 20px;';
	    header.style.color = model.get('textColor');

	    var viewMain = document.createElement('div');
	    var textarea = document.createElement('textarea');
	    viewMain.style.cssText = 'display:block;width:100%;overflow:hidden;';

	    var optionToContent = model.get('optionToContent');
	    var contentToOption = model.get('contentToOption');
	    var result = getContentFromModel(ecModel);
	    if (typeof optionToContent === 'function') {
	        var htmlOrDom = optionToContent(api.getOption());
	        if (typeof htmlOrDom === 'string') {
	            viewMain.innerHTML = htmlOrDom;
	        } else if (zrUtil.isDom(htmlOrDom)) {
	            viewMain.appendChild(htmlOrDom);
	        }
	    } else {
	        // Use default textarea
	        viewMain.appendChild(textarea);
	        textarea.readOnly = model.get('readOnly');
	        textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';
	        textarea.style.color = model.get('textColor');
	        textarea.style.borderColor = model.get('textareaBorderColor');
	        textarea.style.backgroundColor = model.get('textareaColor');
	        textarea.value = result.value;
	    }

	    var blockMetaList = result.meta;

	    var buttonContainer = document.createElement('div');
	    buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';

	    var buttonStyle = 'float:right;margin-right:20px;border:none;' + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
	    var closeButton = document.createElement('div');
	    var refreshButton = document.createElement('div');

	    buttonStyle += ';background-color:' + model.get('buttonColor');
	    buttonStyle += ';color:' + model.get('buttonTextColor');

	    var self = this;

	    function close() {
	        container.removeChild(root);
	        self._dom = null;
	    }
	    eventTool.addEventListener(closeButton, 'click', close);

	    eventTool.addEventListener(refreshButton, 'click', function () {
	        var newOption;
	        try {
	            if (typeof contentToOption === 'function') {
	                newOption = contentToOption(viewMain, api.getOption());
	            } else {
	                newOption = parseContents(textarea.value, blockMetaList);
	            }
	        } catch (e) {
	            close();
	            throw new Error('Data view format error ' + e);
	        }
	        if (newOption) {
	            api.dispatchAction({
	                type: 'changeDataView',
	                newOption: newOption
	            });
	        }

	        close();
	    });

	    closeButton.innerHTML = lang[1];
	    refreshButton.innerHTML = lang[2];
	    refreshButton.style.cssText = buttonStyle;
	    closeButton.style.cssText = buttonStyle;

	    !model.get('readOnly') && buttonContainer.appendChild(refreshButton);
	    buttonContainer.appendChild(closeButton);

	    // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea
	    eventTool.addEventListener(textarea, 'keydown', function (e) {
	        if ((e.keyCode || e.which) === 9) {
	            // get caret position/selection
	            var val = this.value;
	            var start = this.selectionStart;
	            var end = this.selectionEnd;

	            // set textarea value to: text before caret + tab + text after caret
	            this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);

	            // put caret at right position again
	            this.selectionStart = this.selectionEnd = start + 1;

	            // prevent the focus lose
	            eventTool.stop(e);
	        }
	    });

	    root.appendChild(header);
	    root.appendChild(viewMain);
	    root.appendChild(buttonContainer);

	    viewMain.style.height = container.clientHeight - 80 + 'px';

	    container.appendChild(root);
	    this._dom = root;
	};

	DataView.prototype.remove = function (ecModel, api) {
	    this._dom && api.getDom().removeChild(this._dom);
	};

	DataView.prototype.dispose = function (ecModel, api) {
	    this.remove(ecModel, api);
	};

	/**
	 * @inner
	 */
	function tryMergeDataOption(newData, originalData) {
	    return zrUtil.map(newData, function (newVal, idx) {
	        var original = originalData && originalData[idx];
	        if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
	            if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
	                newVal = newVal.value;
	            }
	            // Original data has option
	            return zrUtil.defaults({
	                value: newVal
	            }, original);
	        } else {
	            return newVal;
	        }
	    });
	}

	__webpack_require__(826).register('dataView', DataView);

	__webpack_require__(501).registerAction({
	    type: 'changeDataView',
	    event: 'dataViewChanged',
	    update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	    var newSeriesOptList = [];
	    zrUtil.each(payload.newOption.series, function (seriesOpt) {
	        var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
	        if (!seriesModel) {
	            // New created series
	            // Geuss the series type
	            newSeriesOptList.push(zrUtil.extend({
	                // Default is scatter
	                type: 'scatter'
	            }, seriesOpt));
	        } else {
	            var originalData = seriesModel.get('data');
	            newSeriesOptList.push({
	                name: seriesOpt.name,
	                data: tryMergeDataOption(seriesOpt.data, originalData)
	            });
	        }
	    });

	    ecModel.mergeOption(zrUtil.defaults({
	        series: newSeriesOptList
	    }, payload.newOption));
	});

	module.exports = DataView;

/***/ },
/* 884 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zrUtil = __webpack_require__(504);
	var BrushController = __webpack_require__(736);
	var brushHelper = __webpack_require__(821);
	var history = __webpack_require__(885);

	var each = zrUtil.each;

	// Use dataZoomSelect
	__webpack_require__(886);

	// Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId
	var DATA_ZOOM_ID_BASE = '\0_ec_\0toolbox-dataZoom_';

	function DataZoom(model, ecModel, api) {

	    /**
	     * @private
	     * @type {module:echarts/component/helper/BrushController}
	     */
	    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();

	    /**
	     * @private
	     * @type {boolean}
	     */
	    this._isZoomActive;
	}

	DataZoom.defaultOption = {
	    show: true,
	    // Icon group
	    icon: {
	        zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
	        back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
	    },
	    title: {
	        zoom: '区域缩放',
	        back: '区域缩放还原'
	    }
	};

	var proto = DataZoom.prototype;

	proto.render = function (featureModel, ecModel, api, payload) {
	    this.model = featureModel;
	    this.ecModel = ecModel;
	    this.api = api;

	    updateZoomBtnStatus(featureModel, ecModel, this, payload);
	    updateBackBtnStatus(featureModel, ecModel);
	};

	proto.onclick = function (ecModel, api, type) {
	    handlers[type].call(this);
	};

	proto.remove = function (ecModel, api) {
	    this._brushController.unmount();
	};

	proto.dispose = function (ecModel, api) {
	    this._brushController.dispose();
	};

	/**
	 * @private
	 */
	var handlers = {

	    zoom: function zoom() {
	        var nextActive = !this._isZoomActive;

	        this.api.dispatchAction({
	            type: 'takeGlobalCursor',
	            key: 'dataZoomSelect',
	            dataZoomSelectActive: nextActive
	        });
	    },

	    back: function back() {
	        this._dispatchZoomAction(history.pop(this.ecModel));
	    }
	};

	/**
	 * @private
	 */
	proto._onBrush = function (areas, opt) {
	    if (!opt.isEnd || !areas.length) {
	        return;
	    }
	    var snapshot = {};
	    var ecModel = this.ecModel;

	    this._brushController.updateCovers([]); // remove cover

	    var coordInfoList = brushHelper.makeCoordInfoList(retrieveAxisSetting(this.model.option), ecModel);
	    var rangesCoordInfoList = [];
	    brushHelper.parseOutputRanges(areas, coordInfoList, ecModel, rangesCoordInfoList);

	    var area = areas[0]; // dataZoom can not multiple area.
	    var coordInfo = rangesCoordInfoList[0];
	    var coordRange = area.coordRange;
	    var brushType = area.brushType;

	    if (coordInfo && coordRange) {
	        if (brushType === 'rect') {
	            setBatch('xAxis', coordRange[0], coordInfo);
	            setBatch('yAxis', coordRange[1], coordInfo);
	        } else {
	            var axisNames = { lineX: 'xAxis', lineY: 'yAxis' };
	            setBatch(axisNames[brushType], coordRange, coordInfo);
	        }
	    }

	    history.push(ecModel, snapshot);

	    this._dispatchZoomAction(snapshot);

	    function setBatch(axisName, minMax, coordInfo) {
	        var dataZoomModel = findDataZoom(axisName, coordInfo[axisName], ecModel);
	        if (dataZoomModel) {
	            snapshot[dataZoomModel.id] = {
	                dataZoomId: dataZoomModel.id,
	                startValue: minMax[0],
	                endValue: minMax[1]
	            };
	        }
	    }

	    function findDataZoom(axisName, axisModel, ecModel) {
	        var dataZoomModel;
	        ecModel.eachComponent({ mainType: 'dataZoom', subType: 'select' }, function (dzModel, dataZoomIndex) {
	            var axisIndex = dzModel.get(axisName + 'Index');
	            if (axisIndex != null && ecModel.getComponent(axisName, axisIndex) === axisModel) {
	                dataZoomModel = dzModel;
	            }
	        });
	        return dataZoomModel;
	    }
	};

	/**
	 * @private
	 */
	proto._dispatchZoomAction = function (snapshot) {
	    var batch = [];

	    // Convert from hash map to array.
	    each(snapshot, function (batchItem, dataZoomId) {
	        batch.push(zrUtil.clone(batchItem));
	    });

	    batch.length && this.api.dispatchAction({
	        type: 'dataZoom',
	        from: this.uid,
	        batch: batch
	    });
	};

	function retrieveAxisSetting(option) {
	    var setting = {};
	    // Compatible with previous setting: null => all axis, false => no axis.
	    zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {
	        setting[name] = option[name];
	        setting[name] == null && (setting[name] = 'all');
	        (setting[name] === false || setting[name] === 'none') && (setting[name] = []);
	    });
	    return setting;
	}

	function updateBackBtnStatus(featureModel, ecModel) {
	    featureModel.setIconStatus('back', history.count(ecModel) > 1 ? 'emphasis' : 'normal');
	}

	function updateZoomBtnStatus(featureModel, ecModel, view, payload) {
	    var zoomActive = view._isZoomActive;

	    if (payload && payload.type === 'takeGlobalCursor') {
	        zoomActive = payload.key === 'dataZoomSelect' ? payload.dataZoomSelectActive : false;
	    }

	    view._isZoomActive = zoomActive;

	    featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');

	    var coordInfoList = brushHelper.makeCoordInfoList(retrieveAxisSetting(featureModel.option), ecModel);
	    var brushType = coordInfoList.xAxisHas && !coordInfoList.yAxisHas ? 'lineX' : !coordInfoList.xAxisHas && coordInfoList.yAxisHas ? 'lineY' : 'rect';

	    view._brushController.setPanels(brushHelper.makePanelOpts(coordInfoList)).enableBrush(zoomActive ? {
	        brushType: brushType,
	        brushStyle: { // FIXME user customized?
	            lineWidth: 0,
	            // stroke: '#333',
	            fill: 'rgba(0,0,0,0.2)'
	        }
	    } : false);
	}

	__webpack_require__(826).register('dataZoom', DataZoom);

	// Create special dataZoom option for select
	__webpack_require__(501).registerPreprocessor(function (option) {
	    if (!option) {
	        return;
	    }

	    var dataZoomOpts = option.dataZoom || (option.dataZoom = []);
	    if (!zrUtil.isArray(dataZoomOpts)) {
	        option.dataZoom = dataZoomOpts = [dataZoomOpts];
	    }

	    var toolboxOpt = option.toolbox;
	    if (toolboxOpt) {
	        // Assume there is only one toolbox
	        if (zrUtil.isArray(toolboxOpt)) {
	            toolboxOpt = toolboxOpt[0];
	        }

	        if (toolboxOpt && toolboxOpt.feature) {
	            var dataZoomOpt = toolboxOpt.feature.dataZoom;
	            addForAxis('xAxis', dataZoomOpt);
	            addForAxis('yAxis', dataZoomOpt);
	        }
	    }

	    function addForAxis(axisName, dataZoomOpt) {
	        if (!dataZoomOpt) {
	            return;
	        }

	        // Try not to modify model, because it is not merged yet.
	        var axisIndicesName = axisName + 'Index';
	        var givenAxisIndices = dataZoomOpt[axisIndicesName];
	        if (givenAxisIndices != null && givenAxisIndices != 'all' && !zrUtil.isArray(givenAxisIndices)) {
	            givenAxisIndices = givenAxisIndices === false || givenAxisIndices === 'none' ? [] : [givenAxisIndices];
	        }

	        forEachComponent(axisName, function (axisOpt, axisIndex) {
	            if (givenAxisIndices != null && givenAxisIndices != 'all' && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1) {
	                return;
	            }
	            var newOpt = {
	                type: 'select',
	                $fromToolbox: true,
	                // Id for merge mapping.
	                id: DATA_ZOOM_ID_BASE + axisName + axisIndex
	            };
	            // FIXME
	            // Only support one axis now.
	            newOpt[axisIndicesName] = axisIndex;
	            dataZoomOpts.push(newOpt);
	        });
	    }

	    function forEachComponent(mainType, cb) {
	        var opts = option[mainType];
	        if (!zrUtil.isArray(opts)) {
	            opts = opts ? [opts] : [];
	        }
	        each(opts, cb);
	    }
	});

	module.exports = DataZoom;

/***/ },
/* 885 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file History manager.
	 */

	var zrUtil = __webpack_require__(504);
	var each = zrUtil.each;

	var ATTR = '\0_ec_hist_store';

	var history = {

	    /**
	     * @public
	     * @param {module:echarts/model/Global} ecModel
	     * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}
	     */
	    push: function push(ecModel, newSnapshot) {
	        var store = giveStore(ecModel);

	        // If previous dataZoom can not be found,
	        // complete an range with current range.
	        each(newSnapshot, function (batchItem, dataZoomId) {
	            var i = store.length - 1;
	            for (; i >= 0; i--) {
	                var snapshot = store[i];
	                if (snapshot[dataZoomId]) {
	                    break;
	                }
	            }
	            if (i < 0) {
	                // No origin range set, create one by current range.
	                var dataZoomModel = ecModel.queryComponents({ mainType: 'dataZoom', subType: 'select', id: dataZoomId })[0];
	                if (dataZoomModel) {
	                    var percentRange = dataZoomModel.getPercentRange();
	                    store[0][dataZoomId] = {
	                        dataZoomId: dataZoomId,
	                        start: percentRange[0],
	                        end: percentRange[1]
	                    };
	                }
	            }
	        });

	        store.push(newSnapshot);
	    },

	    /**
	     * @public
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Object} snapshot
	     */
	    pop: function pop(ecModel) {
	        var store = giveStore(ecModel);
	        var head = store[store.length - 1];
	        store.length > 1 && store.pop();

	        // Find top for all dataZoom.
	        var snapshot = {};
	        each(head, function (batchItem, dataZoomId) {
	            for (var i = store.length - 1; i >= 0; i--) {
	                var batchItem = store[i][dataZoomId];
	                if (batchItem) {
	                    snapshot[dataZoomId] = batchItem;
	                    break;
	                }
	            }
	        });

	        return snapshot;
	    },

	    /**
	     * @public
	     */
	    clear: function clear(ecModel) {
	        ecModel[ATTR] = null;
	    },

	    /**
	     * @public
	     * @param {module:echarts/model/Global} ecModel
	     * @return {number} records. always >= 1.
	     */
	    count: function count(ecModel) {
	        return giveStore(ecModel).length;
	    }

	};

	/**
	 * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
	 * History length of each dataZoom may be different.
	 * this._history[0] is used to store origin range.
	 * @type {Array.<Object>}
	 */
	function giveStore(ecModel) {
	    var store = ecModel[ATTR];
	    if (!store) {
	        store = ecModel[ATTR] = [{}];
	    }
	    return store;
	}

	module.exports = history;

/***/ },
/* 886 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * DataZoom component entry
	 */

	__webpack_require__(829);

	__webpack_require__(830);
	__webpack_require__(833);

	__webpack_require__(887);
	__webpack_require__(888);

	__webpack_require__(840);
	__webpack_require__(841);

/***/ },
/* 887 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Data zoom model
	 */

	var DataZoomModel = __webpack_require__(830);

	module.exports = DataZoomModel.extend({

	    type: 'dataZoom.select'

	});

/***/ },
/* 888 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(833).extend({

	    type: 'dataZoom.select'

	});

/***/ },
/* 889 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var history = __webpack_require__(885);

	function Restore(model) {
	    this.model = model;
	}

	Restore.defaultOption = {
	    show: true,
	    icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
	    title: '还原'
	};

	var proto = Restore.prototype;

	proto.onclick = function (ecModel, api, type) {
	    history.clear(ecModel);

	    api.dispatchAction({
	        type: 'restore',
	        from: this.uid
	    });
	};

	__webpack_require__(826).register('restore', Restore);

	__webpack_require__(501).registerAction({ type: 'restore', event: 'restore', update: 'prepareAndUpdate' }, function (payload, ecModel) {
	    ecModel.resetOption('recreate');
	});

	module.exports = Restore;

/***/ },
/* 890 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(891);
	__webpack_require__(582).registerPainter('vml', __webpack_require__(893));

/***/ },
/* 891 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	// http://www.w3.org/TR/NOTE-VML
	// TODO Use proxy like svg instead of overwrite brush methods


	if (!__webpack_require__(502).canvasSupported) {
	    var vec2 = __webpack_require__(510);
	    var BoundingRect = __webpack_require__(509);
	    var CMD = __webpack_require__(549).CMD;
	    var colorTool = __webpack_require__(539);
	    var textContain = __webpack_require__(508);
	    var RectText = __webpack_require__(548);
	    var Displayable = __webpack_require__(546);
	    var ZImage = __webpack_require__(561);
	    var Text = __webpack_require__(563);
	    var Path = __webpack_require__(545);

	    var Gradient = __webpack_require__(579);

	    var vmlCore = __webpack_require__(892);

	    var round = Math.round;
	    var sqrt = Math.sqrt;
	    var abs = Math.abs;
	    var cos = Math.cos;
	    var sin = Math.sin;
	    var mathMax = Math.max;

	    var applyTransform = vec2.applyTransform;

	    var comma = ',';
	    var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';

	    var Z = 21600;
	    var Z2 = Z / 2;

	    var ZLEVEL_BASE = 100000;
	    var Z_BASE = 1000;

	    var initRootElStyle = function initRootElStyle(el) {
	        el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
	        el.coordsize = Z + ',' + Z;
	        el.coordorigin = '0,0';
	    };

	    var encodeHtmlAttribute = function encodeHtmlAttribute(s) {
	        return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	    };

	    var rgb2Str = function rgb2Str(r, g, b) {
	        return 'rgb(' + [r, g, b].join(',') + ')';
	    };

	    var append = function append(parent, child) {
	        if (child && parent && child.parentNode !== parent) {
	            parent.appendChild(child);
	        }
	    };

	    var remove = function remove(parent, child) {
	        if (child && parent && child.parentNode === parent) {
	            parent.removeChild(child);
	        }
	    };

	    var getZIndex = function getZIndex(zlevel, z, z2) {
	        // z 的取值范围为 [0, 1000]
	        return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
	    };

	    var parsePercent = function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    };

	    /***************************************************
	     * PATH
	     **************************************************/

	    var setColorAndOpacity = function setColorAndOpacity(el, color, opacity) {
	        var colorArr = colorTool.parse(color);
	        opacity = +opacity;
	        if (isNaN(opacity)) {
	            opacity = 1;
	        }
	        if (colorArr) {
	            el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
	            el.opacity = opacity * colorArr[3];
	        }
	    };

	    var getColorAndAlpha = function getColorAndAlpha(color) {
	        var colorArr = colorTool.parse(color);
	        return [rgb2Str(colorArr[0], colorArr[1], colorArr[2]), colorArr[3]];
	    };

	    var updateFillNode = function updateFillNode(el, style, zrEl) {
	        // TODO pattern
	        var fill = style.fill;
	        if (fill != null) {
	            // Modified from excanvas
	            if (fill instanceof Gradient) {
	                var gradientType;
	                var angle = 0;
	                var focus = [0, 0];
	                // additional offset
	                var shift = 0;
	                // scale factor for offset
	                var expansion = 1;
	                var rect = zrEl.getBoundingRect();
	                var rectWidth = rect.width;
	                var rectHeight = rect.height;
	                if (fill.type === 'linear') {
	                    gradientType = 'gradient';
	                    var transform = zrEl.transform;
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                        applyTransform(p1, p1, transform);
	                    }
	                    var dx = p1[0] - p0[0];
	                    var dy = p1[1] - p0[1];
	                    angle = Math.atan2(dx, dy) * 180 / Math.PI;
	                    // The angle should be a non-negative number.
	                    if (angle < 0) {
	                        angle += 360;
	                    }

	                    // Very small angles produce an unexpected result because they are
	                    // converted to a scientific notation string.
	                    if (angle < 1e-6) {
	                        angle = 0;
	                    }
	                } else {
	                    gradientType = 'gradientradial';
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var transform = zrEl.transform;
	                    var scale = zrEl.scale;
	                    var width = rectWidth;
	                    var height = rectHeight;
	                    focus = [
	                    // Percent in bounding rect
	                    (p0[0] - rect.x) / width, (p0[1] - rect.y) / height];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                    }

	                    width /= scale[0] * Z;
	                    height /= scale[1] * Z;
	                    var dimension = mathMax(width, height);
	                    shift = 2 * 0 / dimension;
	                    expansion = 2 * fill.r / dimension - shift;
	                }

	                // We need to sort the color stops in ascending order by offset,
	                // otherwise IE won't interpret it correctly.
	                var stops = fill.colorStops.slice();
	                stops.sort(function (cs1, cs2) {
	                    return cs1.offset - cs2.offset;
	                });

	                var length = stops.length;
	                // Color and alpha list of first and last stop
	                var colorAndAlphaList = [];
	                var colors = [];
	                for (var i = 0; i < length; i++) {
	                    var stop = stops[i];
	                    var colorAndAlpha = getColorAndAlpha(stop.color);
	                    colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);
	                    if (i === 0 || i === length - 1) {
	                        colorAndAlphaList.push(colorAndAlpha);
	                    }
	                }

	                if (length >= 2) {
	                    var color1 = colorAndAlphaList[0][0];
	                    var color2 = colorAndAlphaList[1][0];
	                    var opacity1 = colorAndAlphaList[0][1] * style.opacity;
	                    var opacity2 = colorAndAlphaList[1][1] * style.opacity;

	                    el.type = gradientType;
	                    el.method = 'none';
	                    el.focus = '100%';
	                    el.angle = angle;
	                    el.color = color1;
	                    el.color2 = color2;
	                    el.colors = colors.join(',');
	                    // When colors attribute is used, the meanings of opacity and o:opacity2
	                    // are reversed.
	                    el.opacity = opacity2;
	                    // FIXME g_o_:opacity ?
	                    el.opacity2 = opacity1;
	                }
	                if (gradientType === 'radial') {
	                    el.focusposition = focus.join(',');
	                }
	            } else {
	                // FIXME Change from Gradient fill to color fill
	                setColorAndOpacity(el, fill, style.opacity);
	            }
	        }
	    };

	    var updateStrokeNode = function updateStrokeNode(el, style) {
	        // if (style.lineJoin != null) {
	        //     el.joinstyle = style.lineJoin;
	        // }
	        // if (style.miterLimit != null) {
	        //     el.miterlimit = style.miterLimit * Z;
	        // }
	        // if (style.lineCap != null) {
	        //     el.endcap = style.lineCap;
	        // }
	        if (style.lineDash != null) {
	            el.dashstyle = style.lineDash.join(' ');
	        }
	        if (style.stroke != null && !(style.stroke instanceof Gradient)) {
	            setColorAndOpacity(el, style.stroke, style.opacity);
	        }
	    };

	    var updateFillAndStroke = function updateFillAndStroke(vmlEl, type, style, zrEl) {
	        var isFill = type == 'fill';
	        var el = vmlEl.getElementsByTagName(type)[0];
	        // Stroke must have lineWidth
	        if (style[type] != null && style[type] !== 'none' && (isFill || !isFill && style.lineWidth)) {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'true';
	            // FIXME Remove before updating, or set `colors` will throw error
	            if (style[type] instanceof Gradient) {
	                remove(vmlEl, el);
	            }
	            if (!el) {
	                el = vmlCore.createNode(type);
	            }

	            isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
	            append(vmlEl, el);
	        } else {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
	            remove(vmlEl, el);
	        }
	    };

	    var points = [[], [], []];
	    var pathDataToString = function pathDataToString(data, m) {
	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var A = CMD.A;
	        var Q = CMD.Q;

	        var str = [];
	        var nPoint;
	        var cmdStr;
	        var cmd;
	        var i;
	        var xi;
	        var yi;
	        for (i = 0; i < data.length;) {
	            cmd = data[i++];
	            cmdStr = '';
	            nPoint = 0;
	            switch (cmd) {
	                case M:
	                    cmdStr = ' m ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case L:
	                    cmdStr = ' l ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case Q:
	                case C:
	                    cmdStr = ' c ';
	                    nPoint = 3;
	                    var x1 = data[i++];
	                    var y1 = data[i++];
	                    var x2 = data[i++];
	                    var y2 = data[i++];
	                    var x3;
	                    var y3;
	                    if (cmd === Q) {
	                        // Convert quadratic to cubic using degree elevation
	                        x3 = x2;
	                        y3 = y2;
	                        x2 = (x2 + 2 * x1) / 3;
	                        y2 = (y2 + 2 * y1) / 3;
	                        x1 = (xi + 2 * x1) / 3;
	                        y1 = (yi + 2 * y1) / 3;
	                    } else {
	                        x3 = data[i++];
	                        y3 = data[i++];
	                    }
	                    points[0][0] = x1;
	                    points[0][1] = y1;
	                    points[1][0] = x2;
	                    points[1][1] = y2;
	                    points[2][0] = x3;
	                    points[2][1] = y3;

	                    xi = x3;
	                    yi = y3;
	                    break;
	                case A:
	                    var x = 0;
	                    var y = 0;
	                    var sx = 1;
	                    var sy = 1;
	                    var angle = 0;
	                    if (m) {
	                        // Extract SRT from matrix
	                        x = m[4];
	                        y = m[5];
	                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);
	                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);
	                        angle = Math.atan2(-m[1] / sy, m[0] / sx);
	                    }

	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++] + angle;
	                    var endAngle = data[i++] + startAngle + angle;
	                    // FIXME
	                    // var psi = data[i++];
	                    i++;
	                    var clockwise = data[i++];

	                    var x0 = cx + cos(startAngle) * rx;
	                    var y0 = cy + sin(startAngle) * ry;

	                    var x1 = cx + cos(endAngle) * rx;
	                    var y1 = cy + sin(endAngle) * ry;

	                    var type = clockwise ? ' wa ' : ' at ';
	                    if (Math.abs(x0 - x1) < 1e-4) {
	                        // IE won't render arches drawn counter clockwise if x0 == x1.
	                        if (Math.abs(endAngle - startAngle) > 1e-2) {
	                            // Offset x0 by 1/80 of a pixel. Use something
	                            // that can be represented in binary
	                            if (clockwise) {
	                                x0 += 270 / Z;
	                            }
	                        } else {
	                            // Avoid case draw full circle
	                            if (Math.abs(y0 - cy) < 1e-4) {
	                                if (clockwise && x0 < cx || !clockwise && x0 > cx) {
	                                    y1 -= 270 / Z;
	                                } else {
	                                    y1 += 270 / Z;
	                                }
	                            } else if (clockwise && y0 < cy || !clockwise && y0 > cy) {
	                                x1 += 270 / Z;
	                            } else {
	                                x1 -= 270 / Z;
	                            }
	                        }
	                    }
	                    str.push(type, round(((cx - rx) * sx + x) * Z - Z2), comma, round(((cy - ry) * sy + y) * Z - Z2), comma, round(((cx + rx) * sx + x) * Z - Z2), comma, round(((cy + ry) * sy + y) * Z - Z2), comma, round((x0 * sx + x) * Z - Z2), comma, round((y0 * sy + y) * Z - Z2), comma, round((x1 * sx + x) * Z - Z2), comma, round((y1 * sy + y) * Z - Z2));

	                    xi = x1;
	                    yi = y1;
	                    break;
	                case CMD.R:
	                    var p0 = points[0];
	                    var p1 = points[1];
	                    // x0, y0
	                    p0[0] = data[i++];
	                    p0[1] = data[i++];
	                    // x1, y1
	                    p1[0] = p0[0] + data[i++];
	                    p1[1] = p0[1] + data[i++];

	                    if (m) {
	                        applyTransform(p0, p0, m);
	                        applyTransform(p1, p1, m);
	                    }

	                    p0[0] = round(p0[0] * Z - Z2);
	                    p1[0] = round(p1[0] * Z - Z2);
	                    p0[1] = round(p0[1] * Z - Z2);
	                    p1[1] = round(p1[1] * Z - Z2);
	                    str.push(
	                    // x0, y0
	                    ' m ', p0[0], comma, p0[1],
	                    // x1, y0
	                    ' l ', p1[0], comma, p0[1],
	                    // x1, y1
	                    ' l ', p1[0], comma, p1[1],
	                    // x0, y1
	                    ' l ', p0[0], comma, p1[1]);
	                    break;
	                case CMD.Z:
	                    // FIXME Update xi, yi
	                    str.push(' x ');
	            }

	            if (nPoint > 0) {
	                str.push(cmdStr);
	                for (var k = 0; k < nPoint; k++) {
	                    var p = points[k];

	                    m && applyTransform(p, p, m);
	                    // 不 round 会非常慢
	                    str.push(round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2), k < nPoint - 1 ? comma : '');
	                }
	            }
	        }

	        return str.join('');
	    };

	    // Rewrite the original path method
	    Path.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;

	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            vmlEl = vmlCore.createNode('shape');
	            initRootElStyle(vmlEl);

	            this._vmlEl = vmlEl;
	        }

	        updateFillAndStroke(vmlEl, 'fill', style, this);
	        updateFillAndStroke(vmlEl, 'stroke', style, this);

	        var m = this.transform;
	        var needTransform = m != null;
	        var strokeEl = vmlEl.getElementsByTagName('stroke')[0];
	        if (strokeEl) {
	            var lineWidth = style.lineWidth;
	            // Get the line scale.
	            // Determinant of this.m_ means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            if (needTransform && !style.strokeNoScale) {
	                var det = m[0] * m[3] - m[1] * m[2];
	                lineWidth *= sqrt(abs(det));
	            }
	            strokeEl.weight = lineWidth + 'px';
	        }

	        var path = this.path;
	        if (this.__dirtyPath) {
	            path.beginPath();
	            this.buildPath(path, this.shape);
	            path.toStatic();
	            this.__dirtyPath = false;
	        }

	        vmlEl.path = pathDataToString(path.data, this.transform);

	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

	        // Append to root
	        append(vmlRoot, vmlEl);

	        // Text
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        } else {
	            this.removeRectText(vmlRoot);
	        }
	    };

	    Path.prototype.onRemove = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);
	        this.removeRectText(vmlRoot);
	    };

	    Path.prototype.onAdd = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };

	    /***************************************************
	     * IMAGE
	     **************************************************/
	    var isImage = function isImage(img) {
	        // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
	        return (typeof img === 'undefined' ? 'undefined' : _typeof(img)) === 'object' && img.tagName && img.tagName.toUpperCase() === 'IMG';
	        // return img instanceof Image;
	    };

	    // Rewrite the original path method
	    ZImage.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;
	        var image = style.image;

	        // Image original width, height
	        var ow;
	        var oh;

	        if (isImage(image)) {
	            var src = image.src;
	            if (src === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            } else {
	                var imageRuntimeStyle = image.runtimeStyle;
	                var oldRuntimeWidth = imageRuntimeStyle.width;
	                var oldRuntimeHeight = imageRuntimeStyle.height;
	                imageRuntimeStyle.width = 'auto';
	                imageRuntimeStyle.height = 'auto';

	                // get the original size
	                ow = image.width;
	                oh = image.height;

	                // and remove overides
	                imageRuntimeStyle.width = oldRuntimeWidth;
	                imageRuntimeStyle.height = oldRuntimeHeight;

	                // Caching image original width, height and src
	                this._imageSrc = src;
	                this._imageWidth = ow;
	                this._imageHeight = oh;
	            }
	            image = src;
	        } else {
	            if (image === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            }
	        }
	        if (!image) {
	            return;
	        }

	        var x = style.x || 0;
	        var y = style.y || 0;

	        var dw = style.width;
	        var dh = style.height;

	        var sw = style.sWidth;
	        var sh = style.sHeight;
	        var sx = style.sx || 0;
	        var sy = style.sy || 0;

	        var hasCrop = sw && sh;

	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
	            // vmlEl = vmlCore.createNode('group');
	            vmlEl = vmlCore.doc.createElement('div');
	            initRootElStyle(vmlEl);

	            this._vmlEl = vmlEl;
	        }

	        var vmlElStyle = vmlEl.style;
	        var hasRotation = false;
	        var m;
	        var scaleX = 1;
	        var scaleY = 1;
	        if (this.transform) {
	            m = this.transform;
	            scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
	            scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);

	            hasRotation = m[1] || m[2];
	        }
	        if (hasRotation) {
	            // If filters are necessary (rotation exists), create them
	            // filters are bog-slow, so only create them if abbsolutely necessary
	            // The following check doesn't account for skews (which don't exist
	            // in the canvas spec (yet) anyway.
	            // From excanvas
	            var p0 = [x, y];
	            var p1 = [x + dw, y];
	            var p2 = [x, y + dh];
	            var p3 = [x + dw, y + dh];
	            applyTransform(p0, p0, m);
	            applyTransform(p1, p1, m);
	            applyTransform(p2, p2, m);
	            applyTransform(p3, p3, m);

	            var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
	            var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);

	            var transformFilter = [];
	            transformFilter.push('M11=', m[0] / scaleX, comma, 'M12=', m[2] / scaleY, comma, 'M21=', m[1] / scaleX, comma, 'M22=', m[3] / scaleY, comma, 'Dx=', round(x * scaleX + m[4]), comma, 'Dy=', round(y * scaleY + m[5]));

	            vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';
	            // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用
	            vmlElStyle.filter = imageTransformPrefix + '.Matrix(' + transformFilter.join('') + ', SizingMethod=clip)';
	        } else {
	            if (m) {
	                x = x * scaleX + m[4];
	                y = y * scaleY + m[5];
	            }
	            vmlElStyle.filter = '';
	            vmlElStyle.left = round(x) + 'px';
	            vmlElStyle.top = round(y) + 'px';
	        }

	        var imageEl = this._imageEl;
	        var cropEl = this._cropEl;

	        if (!imageEl) {
	            imageEl = vmlCore.doc.createElement('div');
	            this._imageEl = imageEl;
	        }
	        var imageELStyle = imageEl.style;
	        if (hasCrop) {
	            // Needs know image original width and height
	            if (!(ow && oh)) {
	                var tmpImage = new Image();
	                var self = this;
	                tmpImage.onload = function () {
	                    tmpImage.onload = null;
	                    ow = tmpImage.width;
	                    oh = tmpImage.height;
	                    // Adjust image width and height to fit the ratio destinationSize / sourceSize
	                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';

	                    // Caching image original width, height and src
	                    self._imageWidth = ow;
	                    self._imageHeight = oh;
	                    self._imageSrc = image;
	                };
	                tmpImage.src = image;
	            } else {
	                imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	            }

	            if (!cropEl) {
	                cropEl = vmlCore.doc.createElement('div');
	                cropEl.style.overflow = 'hidden';
	                this._cropEl = cropEl;
	            }
	            var cropElStyle = cropEl.style;
	            cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
	            cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
	            cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx=' + -sx * dw / sw * scaleX + ',Dy=' + -sy * dh / sh * scaleY + ')';

	            if (!cropEl.parentNode) {
	                vmlEl.appendChild(cropEl);
	            }
	            if (imageEl.parentNode != cropEl) {
	                cropEl.appendChild(imageEl);
	            }
	        } else {
	            imageELStyle.width = round(scaleX * dw) + 'px';
	            imageELStyle.height = round(scaleY * dh) + 'px';

	            vmlEl.appendChild(imageEl);

	            if (cropEl && cropEl.parentNode) {
	                vmlEl.removeChild(cropEl);
	                this._cropEl = null;
	            }
	        }

	        var filterStr = '';
	        var alpha = style.opacity;
	        if (alpha < 1) {
	            filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
	        }
	        filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';

	        imageELStyle.filter = filterStr;

	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

	        // Append to root
	        append(vmlRoot, vmlEl);

	        // Text
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        }
	    };

	    ZImage.prototype.onRemove = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);

	        this._vmlEl = null;
	        this._cropEl = null;
	        this._imageEl = null;

	        this.removeRectText(vmlRoot);
	    };

	    ZImage.prototype.onAdd = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };

	    /***************************************************
	     * TEXT
	     **************************************************/

	    var DEFAULT_STYLE_NORMAL = 'normal';

	    var fontStyleCache = {};
	    var fontStyleCacheCount = 0;
	    var MAX_FONT_CACHE_SIZE = 100;
	    var fontEl = document.createElement('div');

	    var getFontStyle = function getFontStyle(fontString) {
	        var fontStyle = fontStyleCache[fontString];
	        if (!fontStyle) {
	            // Clear cache
	            if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
	                fontStyleCacheCount = 0;
	                fontStyleCache = {};
	            }

	            var style = fontEl.style;
	            var fontFamily;
	            try {
	                style.font = fontString;
	                fontFamily = style.fontFamily.split(',')[0];
	            } catch (e) {}

	            fontStyle = {
	                style: style.fontStyle || DEFAULT_STYLE_NORMAL,
	                variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
	                weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
	                size: parseFloat(style.fontSize || 12) | 0,
	                family: fontFamily || 'Microsoft YaHei'
	            };

	            fontStyleCache[fontString] = fontStyle;
	            fontStyleCacheCount++;
	        }
	        return fontStyle;
	    };

	    var textMeasureEl;
	    // Overwrite measure text method
	    textContain.measureText = function (text, textFont) {
	        var doc = vmlCore.doc;
	        if (!textMeasureEl) {
	            textMeasureEl = doc.createElement('div');
	            textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;' + 'padding:0;margin:0;border:none;white-space:pre;';
	            vmlCore.doc.body.appendChild(textMeasureEl);
	        }

	        try {
	            textMeasureEl.style.font = textFont;
	        } catch (ex) {
	            // Ignore failures to set to invalid font.
	        }
	        textMeasureEl.innerHTML = '';
	        // Don't use innerHTML or innerText because they allow markup/whitespace.
	        textMeasureEl.appendChild(doc.createTextNode(text));
	        return {
	            width: textMeasureEl.offsetWidth
	        };
	    };

	    var tmpRect = new BoundingRect();

	    var drawRectText = function drawRectText(vmlRoot, rect, textRect, fromTextEl) {

	        var style = this.style;
	        var text = style.text;
	        // Convert to string
	        text != null && (text += '');
	        if (!text) {
	            return;
	        }

	        var x;
	        var y;
	        var align = style.textAlign;
	        var fontStyle = getFontStyle(style.textFont);
	        // FIXME encodeHtmlAttribute ?
	        var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' ' + fontStyle.size + 'px "' + fontStyle.family + '"';

	        var baseline = style.textBaseline;
	        var verticalAlign = style.textVerticalAlign;

	        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);

	        // Transform rect to view space
	        var m = this.transform;
	        // Ignore transform for text in other element
	        if (m && !fromTextEl) {
	            tmpRect.copy(rect);
	            tmpRect.applyTransform(m);
	            rect = tmpRect;
	        }

	        if (!fromTextEl) {
	            var textPosition = style.textPosition;
	            var distance = style.textDistance;
	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);

	                align = align || 'left';
	                baseline = baseline || 'top';
	            } else {
	                var res = textContain.adjustTextPositionOnRect(textPosition, rect, textRect, distance);
	                x = res.x;
	                y = res.y;

	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }
	        } else {
	            x = rect.x;
	            y = rect.y;
	        }
	        if (verticalAlign) {
	            switch (verticalAlign) {
	                case 'middle':
	                    y -= textRect.height / 2;
	                    break;
	                case 'bottom':
	                    y -= textRect.height;
	                    break;
	                // 'top'
	            }
	            // Ignore baseline
	            baseline = 'top';
	        }

	        var fontSize = fontStyle.size;
	        // 1.75 is an arbitrary number, as there is no info about the text baseline
	        switch (baseline) {
	            case 'hanging':
	            case 'top':
	                y += fontSize / 1.75;
	                break;
	            case 'middle':
	                break;
	            default:
	                // case null:
	                // case 'alphabetic':
	                // case 'ideographic':
	                // case 'bottom':
	                y -= fontSize / 2.25;
	                break;
	        }
	        switch (align) {
	            case 'left':
	                break;
	            case 'center':
	                x -= textRect.width / 2;
	                break;
	            case 'right':
	                x -= textRect.width;
	                break;
	            // case 'end':
	            // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
	            // break;
	            // case 'start':
	            // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
	            // break;
	            // default:
	            //     align = 'left';
	        }

	        var createNode = vmlCore.createNode;

	        var textVmlEl = this._textVmlEl;
	        var pathEl;
	        var textPathEl;
	        var skewEl;
	        if (!textVmlEl) {
	            textVmlEl = createNode('line');
	            pathEl = createNode('path');
	            textPathEl = createNode('textpath');
	            skewEl = createNode('skew');

	            // FIXME Why here is not cammel case
	            // Align 'center' seems wrong
	            textPathEl.style['v-text-align'] = 'left';

	            initRootElStyle(textVmlEl);

	            pathEl.textpathok = true;
	            textPathEl.on = true;

	            textVmlEl.from = '0 0';
	            textVmlEl.to = '1000 0.05';

	            append(textVmlEl, skewEl);
	            append(textVmlEl, pathEl);
	            append(textVmlEl, textPathEl);

	            this._textVmlEl = textVmlEl;
	        } else {
	            // 这里是在前面 appendChild 保证顺序的前提下
	            skewEl = textVmlEl.firstChild;
	            pathEl = skewEl.nextSibling;
	            textPathEl = pathEl.nextSibling;
	        }

	        var coords = [x, y];
	        var textVmlElStyle = textVmlEl.style;
	        // Ignore transform for text in other element
	        if (m && fromTextEl) {
	            applyTransform(coords, coords, m);

	            skewEl.on = true;

	            skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma + m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';

	            // Text position
	            skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);
	            // Left top point as origin
	            skewEl.origin = '0 0';

	            textVmlElStyle.left = '0px';
	            textVmlElStyle.top = '0px';
	        } else {
	            skewEl.on = false;
	            textVmlElStyle.left = round(x) + 'px';
	            textVmlElStyle.top = round(y) + 'px';
	        }

	        textPathEl.string = encodeHtmlAttribute(text);
	        // TODO
	        try {
	            textPathEl.style.font = font;
	        }
	        // Error font format
	        catch (e) {}

	        updateFillAndStroke(textVmlEl, 'fill', {
	            fill: fromTextEl ? style.fill : style.textFill,
	            opacity: style.opacity
	        }, this);
	        updateFillAndStroke(textVmlEl, 'stroke', {
	            stroke: fromTextEl ? style.stroke : style.textStroke,
	            opacity: style.opacity,
	            lineDash: style.lineDash
	        }, this);

	        textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

	        // Attached to root
	        append(vmlRoot, textVmlEl);
	    };

	    var removeRectText = function removeRectText(vmlRoot) {
	        remove(vmlRoot, this._textVmlEl);
	        this._textVmlEl = null;
	    };

	    var appendRectText = function appendRectText(vmlRoot) {
	        append(vmlRoot, this._textVmlEl);
	    };

	    var list = [RectText, Displayable, ZImage, Path, Text];

	    // In case Displayable has been mixed in RectText
	    for (var i = 0; i < list.length; i++) {
	        var proto = list[i].prototype;
	        proto.drawRectText = drawRectText;
	        proto.removeRectText = removeRectText;
	        proto.appendRectText = appendRectText;
	    }

	    Text.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, {
	                x: style.x || 0, y: style.y || 0,
	                width: 0, height: 0
	            }, this.getBoundingRect(), true);
	        } else {
	            this.removeRectText(vmlRoot);
	        }
	    };

	    Text.prototype.onRemove = function (vmlRoot) {
	        this.removeRectText(vmlRoot);
	    };

	    Text.prototype.onAdd = function (vmlRoot) {
	        this.appendRectText(vmlRoot);
	    };
	}

/***/ },
/* 892 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	if (!__webpack_require__(502).canvasSupported) {
	    var urn = 'urn:schemas-microsoft-com:vml';

	    var createNode;
	    var win = window;
	    var doc = win.document;

	    var vmlInited = false;

	    try {
	        !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);
	        createNode = function createNode(tagName) {
	            return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
	        };
	    } catch (e) {
	        createNode = function createNode(tagName) {
	            return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
	        };
	    }

	    // From raphael
	    var initVML = function initVML() {
	        if (vmlInited) {
	            return;
	        }
	        vmlInited = true;

	        var styleSheets = doc.styleSheets;
	        if (styleSheets.length < 31) {
	            doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
	        } else {
	            // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
	            styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
	        }
	    };

	    // Not useing return to avoid error when converting to CommonJS module
	    module.exports = {
	        doc: doc,
	        initVML: initVML,
	        createNode: createNode
	    };
	}

/***/ },
/* 893 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * VML Painter.
	 *
	 * @module zrender/vml/Painter
	 */

	var zrLog = __webpack_require__(540);
	var vmlCore = __webpack_require__(892);

	function parseInt10(val) {
	    return parseInt(val, 10);
	}

	/**
	 * @alias module:zrender/vml/Painter
	 */
	function VMLPainter(root, storage) {

	    vmlCore.initVML();

	    this.root = root;

	    this.storage = storage;

	    var vmlViewport = document.createElement('div');

	    var vmlRoot = document.createElement('div');

	    vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';

	    vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';

	    root.appendChild(vmlViewport);

	    this._vmlRoot = vmlRoot;
	    this._vmlViewport = vmlViewport;

	    this.resize();

	    // Modify storage
	    var oldDelFromMap = storage.delFromMap;
	    var oldAddToMap = storage.addToMap;
	    storage.delFromMap = function (elId) {
	        var el = storage.get(elId);

	        oldDelFromMap.call(storage, elId);

	        if (el) {
	            el.onRemove && el.onRemove(vmlRoot);
	        }
	    };

	    storage.addToMap = function (el) {
	        // Displayable already has a vml node
	        el.onAdd && el.onAdd(vmlRoot);

	        oldAddToMap.call(storage, el);
	    };

	    this._firstPaint = true;
	}

	VMLPainter.prototype = {

	    constructor: VMLPainter,

	    /**
	     * @return {HTMLDivElement}
	     */
	    getViewportRoot: function getViewportRoot() {
	        return this._vmlViewport;
	    },

	    /**
	     * 刷新
	     */
	    refresh: function refresh() {

	        var list = this.storage.getDisplayList(true, true);

	        this._paintList(list);
	    },

	    _paintList: function _paintList(list) {
	        var vmlRoot = this._vmlRoot;
	        for (var i = 0; i < list.length; i++) {
	            var el = list[i];
	            if (el.invisible || el.ignore) {
	                if (!el.__alreadyNotVisible) {
	                    el.onRemove(vmlRoot);
	                }
	                // Set as already invisible
	                el.__alreadyNotVisible = true;
	            } else {
	                if (el.__alreadyNotVisible) {
	                    el.onAdd(vmlRoot);
	                }
	                el.__alreadyNotVisible = false;
	                if (el.__dirty) {
	                    el.beforeBrush && el.beforeBrush();
	                    (el.brushVML || el.brush).call(el, vmlRoot);
	                    el.afterBrush && el.afterBrush();
	                }
	            }
	            el.__dirty = false;
	        }

	        if (this._firstPaint) {
	            // Detached from document at first time
	            // to avoid page refreshing too many times

	            // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
	            this._vmlViewport.appendChild(vmlRoot);
	            this._firstPaint = false;
	        }
	    },

	    resize: function resize(width, height) {
	        var width = width == null ? this._getWidth() : width;
	        var height = height == null ? this._getHeight() : height;

	        if (this._width != width || this._height != height) {
	            this._width = width;
	            this._height = height;

	            var vmlViewportStyle = this._vmlViewport.style;
	            vmlViewportStyle.width = width + 'px';
	            vmlViewportStyle.height = height + 'px';
	        }
	    },

	    dispose: function dispose() {
	        this.root.innerHTML = '';

	        this._vmlRoot = this._vmlViewport = this.storage = null;
	    },

	    getWidth: function getWidth() {
	        return this._width;
	    },

	    getHeight: function getHeight() {
	        return this._height;
	    },

	    clear: function clear() {
	        if (this._vmlViewport) {
	            this.root.removeChild(this._vmlViewport);
	        }
	    },

	    _getWidth: function _getWidth() {
	        var root = this.root;
	        var stl = root.currentStyle;

	        return (root.clientWidth || parseInt10(stl.width)) - parseInt10(stl.paddingLeft) - parseInt10(stl.paddingRight) | 0;
	    },

	    _getHeight: function _getHeight() {
	        var root = this.root;
	        var stl = root.currentStyle;

	        return (root.clientHeight || parseInt10(stl.height)) - parseInt10(stl.paddingTop) - parseInt10(stl.paddingBottom) | 0;
	    }
	};

	// Not supported methods
	function createMethodNotSupport(method) {
	    return function () {
	        zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
	    };
	}

	var notSupportedMethods = ['getLayer', 'insertLayer', 'eachLayer', 'eachBuildinLayer', 'eachOtherLayer', 'getLayers', 'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'];

	for (var i = 0; i < notSupportedMethods.length; i++) {
	    var name = notSupportedMethods[i];
	    VMLPainter.prototype[name] = createMethodNotSupport(name);
	}

	module.exports = VMLPainter;

/***/ },
/* 894 */
/***/ function(module, exports) {

	'use strict';

	var _exports = function exports(element, fn) {
	  var window = this;
	  var document = window.document;
	  var isIE;
	  var requestFrame;

	  var attachEvent = document.attachEvent;
	  if (typeof navigator !== 'undefined') {
	    isIE = navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/Edge/);
	  }

	  requestFrame = function () {
	    var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function fallbackRAF(func) {
	      return window.setTimeout(func, 20);
	    };
	    return function requestFrameFunction(func) {
	      return raf(func);
	    };
	  }();

	  var cancelFrame = function () {
	    var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;
	    return function cancelFrameFunction(id) {
	      return cancel(id);
	    };
	  }();

	  function resizeListener(e) {
	    var win = e.target || e.srcElement;
	    if (win.__resizeRAF__) {
	      cancelFrame(win.__resizeRAF__);
	    }
	    win.__resizeRAF__ = requestFrame(function () {
	      var trigger = win.__resizeTrigger__;
	      if (trigger !== undefined) {
	        trigger.__resizeListeners__.forEach(function (fn) {
	          fn.call(trigger, e);
	        });
	      }
	    });
	  }

	  function objectLoad() {
	    this.contentDocument.defaultView.__resizeTrigger__ = this.__resizeElement__;
	    this.contentDocument.defaultView.addEventListener('resize', resizeListener);
	  }

	  if (!element.__resizeListeners__) {
	    element.__resizeListeners__ = [];
	    if (attachEvent) {
	      element.__resizeTrigger__ = element;
	      element.attachEvent('onresize', resizeListener);
	    } else {
	      if (getComputedStyle(element).position === 'static') {
	        element.style.position = 'relative';
	      }
	      var obj = element.__resizeTrigger__ = document.createElement('object');
	      obj.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1; opacity: 0;');
	      obj.setAttribute('class', 'resize-sensor');
	      obj.__resizeElement__ = element;
	      obj.onload = objectLoad;
	      obj.type = 'text/html';
	      if (isIE) {
	        element.appendChild(obj);
	      }
	      obj.data = 'about:blank';
	      if (!isIE) {
	        element.appendChild(obj);
	      }
	    }
	  }
	  element.__resizeListeners__.push(fn);
	};

	_exports.unbind = function (element, fn) {
	  var attachEvent = document.attachEvent;
	  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
	  if (!element.__resizeListeners__.length) {
	    if (attachEvent) {
	      element.detachEvent('onresize', resizeListener);
	    } else {
	      element.__resizeTrigger__.contentDocument.defaultView.removeEventListener('resize', resizeListener);
	      element.__resizeTrigger__ = !element.removeChild(element.__resizeTrigger__);
	    }
	  }
	};

	module.exports = typeof window === 'undefined' ? _exports : _exports.bind(window);

/***/ },
/* 895 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _Card = __webpack_require__(381);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _Avatar = __webpack_require__(387);

	var _Avatar2 = _interopRequireDefault(_Avatar);

	var _folder = __webpack_require__(430);

	var _folder2 = _interopRequireDefault(_folder);

	var _FontIcon = __webpack_require__(364);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _List = __webpack_require__(417);

	var _List2 = _interopRequireDefault(_List);

	var _ListItem = __webpack_require__(413);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	var _TableExampleSimple = __webpack_require__(896);

	var _TableExampleSimple2 = _interopRequireDefault(_TableExampleSimple);

	var _Daily = __webpack_require__(912);

	var _Daily2 = _interopRequireDefault(_Daily);

	var _TableExample = __webpack_require__(920);

	var _TableExample2 = _interopRequireDefault(_TableExample);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Cardbb = function Cardbb() {
	  return _react2.default.createElement(
	    _MuiThemeProvider2.default,
	    { muiTheme: (0, _getMuiTheme2.default)() },
	    _react2.default.createElement(
	      _Card.Card,
	      null,
	      _react2.default.createElement(_Card.CardTitle, { title: 'Daily Forecast' }),
	      _react2.default.createElement(
	        _Card.CardText,
	        null,
	        _react2.default.createElement(_TableExample2.default, null)
	      ),
	      _react2.default.createElement(
	        _Card.CardActions,
	        null,
	        _react2.default.createElement(_Daily2.default, null)
	      )
	    )
	  );
	};

	exports.default = Cardbb;

/***/ },
/* 896 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Table = __webpack_require__(897);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var TableExampleSimple = function TableExampleSimple() {
	  return _react2.default.createElement(
	    _Table.Table,
	    null,
	    _react2.default.createElement(
	      _Table.TableBody,
	      null,
	      _react2.default.createElement(
	        _Table.TableRow,
	        null,
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'TUE'
	        ),
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'John Smith'
	        ),
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'Employed'
	        )
	      ),
	      _react2.default.createElement(
	        _Table.TableRow,
	        null,
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'WED'
	        ),
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'Randal White'
	        ),
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'Unemployed'
	        )
	      ),
	      _react2.default.createElement(
	        _Table.TableRow,
	        null,
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'THU'
	        ),
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'Stephanie Sanders'
	        ),
	        _react2.default.createElement(
	          _Table.TableRowColumn,
	          null,
	          'Employed'
	        )
	      )
	    )
	  );
	};

	exports.default = TableExampleSimple;

/***/ },
/* 897 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.TableRowColumn = exports.TableRow = exports.TableHeaderColumn = exports.TableHeader = exports.TableFooter = exports.TableBody = exports.Table = undefined;

	var _Table2 = __webpack_require__(898);

	var _Table3 = _interopRequireDefault(_Table2);

	var _TableBody2 = __webpack_require__(899);

	var _TableBody3 = _interopRequireDefault(_TableBody2);

	var _TableFooter2 = __webpack_require__(908);

	var _TableFooter3 = _interopRequireDefault(_TableFooter2);

	var _TableHeader2 = __webpack_require__(909);

	var _TableHeader3 = _interopRequireDefault(_TableHeader2);

	var _TableHeaderColumn2 = __webpack_require__(910);

	var _TableHeaderColumn3 = _interopRequireDefault(_TableHeaderColumn2);

	var _TableRow2 = __webpack_require__(911);

	var _TableRow3 = _interopRequireDefault(_TableRow2);

	var _TableRowColumn2 = __webpack_require__(907);

	var _TableRowColumn3 = _interopRequireDefault(_TableRowColumn2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.Table = _Table3.default;
	exports.TableBody = _TableBody3.default;
	exports.TableFooter = _TableFooter3.default;
	exports.TableHeader = _TableHeader3.default;
	exports.TableHeaderColumn = _TableHeaderColumn3.default;
	exports.TableRow = _TableRow3.default;
	exports.TableRowColumn = _TableRowColumn3.default;
	exports.default = _Table3.default;

/***/ },
/* 898 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      table = _context$muiTheme.table;

	  return {
	    root: {
	      backgroundColor: table.backgroundColor,
	      padding: '0 ' + baseTheme.spacing.desktopGutter + 'px',
	      width: '100%',
	      borderCollapse: 'collapse',
	      borderSpacing: 0,
	      tableLayout: 'fixed',
	      fontFamily: baseTheme.fontFamily
	    },
	    bodyTable: {
	      height: props.fixedHeader || props.fixedFooter ? props.height : 'auto',
	      overflowX: 'hidden',
	      overflowY: 'auto'
	    },
	    tableWrapper: {
	      height: props.fixedHeader || props.fixedFooter ? 'auto' : props.height,
	      overflow: 'auto'
	    }
	  };
	}

	var Table = function (_Component) {
	  (0, _inherits3.default)(Table, _Component);

	  function Table() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Table);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Table.__proto__ || (0, _getPrototypeOf2.default)(Table)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      allRowsSelected: false
	    }, _this.onCellClick = function (rowNumber, columnNumber, event) {
	      if (_this.props.onCellClick) _this.props.onCellClick(rowNumber, columnNumber, event);
	    }, _this.onCellHover = function (rowNumber, columnNumber, event) {
	      if (_this.props.onCellHover) _this.props.onCellHover(rowNumber, columnNumber, event);
	    }, _this.onCellHoverExit = function (rowNumber, columnNumber, event) {
	      if (_this.props.onCellHoverExit) _this.props.onCellHoverExit(rowNumber, columnNumber, event);
	    }, _this.onRowHover = function (rowNumber) {
	      if (_this.props.onRowHover) _this.props.onRowHover(rowNumber);
	    }, _this.onRowHoverExit = function (rowNumber) {
	      if (_this.props.onRowHoverExit) _this.props.onRowHoverExit(rowNumber);
	    }, _this.onRowSelection = function (selectedRows) {
	      if (_this.state.allRowsSelected) _this.setState({ allRowsSelected: false });
	      if (_this.props.onRowSelection) _this.props.onRowSelection(selectedRows);
	    }, _this.onSelectAll = function () {
	      if (_this.props.onRowSelection) {
	        if (!_this.state.allRowsSelected) {
	          _this.props.onRowSelection('all');
	        } else {
	          _this.props.onRowSelection('none');
	        }
	      }

	      _this.setState({ allRowsSelected: !_this.state.allRowsSelected });
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Table, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      if (this.props.allRowsSelected) {
	        this.setState({ allRowsSelected: true });
	      }
	    }
	  }, {
	    key: 'isScrollbarVisible',
	    value: function isScrollbarVisible() {
	      var tableDivHeight = this.refs.tableDiv.clientHeight;
	      var tableBodyHeight = this.refs.tableBody.clientHeight;

	      return tableBodyHeight > tableDivHeight;
	    }
	  }, {
	    key: 'createTableHeader',
	    value: function createTableHeader(base) {
	      return _react2.default.cloneElement(base, {
	        enableSelectAll: base.props.enableSelectAll && this.props.selectable && this.props.multiSelectable,
	        onSelectAll: this.onSelectAll,
	        selectAllSelected: this.state.allRowsSelected
	      });
	    }
	  }, {
	    key: 'createTableBody',
	    value: function createTableBody(base) {
	      return _react2.default.cloneElement(base, {
	        allRowsSelected: this.state.allRowsSelected,
	        multiSelectable: this.props.multiSelectable,
	        onCellClick: this.onCellClick,
	        onCellHover: this.onCellHover,
	        onCellHoverExit: this.onCellHoverExit,
	        onRowHover: this.onRowHover,
	        onRowHoverExit: this.onRowHoverExit,
	        onRowSelection: this.onRowSelection,
	        selectable: this.props.selectable,
	        style: (0, _simpleAssign2.default)({ height: this.props.height }, base.props.style)
	      });
	    }
	  }, {
	    key: 'createTableFooter',
	    value: function createTableFooter(base) {
	      return base;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          fixedFooter = _props.fixedFooter,
	          fixedHeader = _props.fixedHeader,
	          style = _props.style,
	          wrapperStyle = _props.wrapperStyle,
	          headerStyle = _props.headerStyle,
	          bodyStyle = _props.bodyStyle,
	          footerStyle = _props.footerStyle;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var tHead = void 0;
	      var tFoot = void 0;
	      var tBody = void 0;

	      _react2.default.Children.forEach(children, function (child) {
	        if (!_react2.default.isValidElement(child)) return;

	        var muiName = child.type.muiName;

	        if (muiName === 'TableBody') {
	          tBody = _this2.createTableBody(child);
	        } else if (muiName === 'TableHeader') {
	          tHead = _this2.createTableHeader(child);
	        } else if (muiName === 'TableFooter') {
	          tFoot = _this2.createTableFooter(child);
	        } else {
	          process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: Children of the Table component must be TableBody or TableHeader or TableFooter.\n           Nothing is rendered.') : void 0;
	        }
	      });

	      // If we could not find a table-header and a table-body, do not attempt to display anything.
	      if (!tBody && !tHead) return null;

	      var mergedTableStyle = (0, _simpleAssign2.default)(styles.root, style);
	      var headerTable = void 0;
	      var footerTable = void 0;
	      var inlineHeader = void 0;
	      var inlineFooter = void 0;

	      if (fixedHeader) {
	        headerTable = _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)({}, headerStyle)) }, _react2.default.createElement('table', { className: className, style: mergedTableStyle }, tHead));
	      } else {
	        inlineHeader = tHead;
	      }

	      if (tFoot !== undefined) {
	        if (fixedFooter) {
	          footerTable = _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)({}, footerStyle)) }, _react2.default.createElement('table', { className: className, style: prepareStyles(mergedTableStyle) }, tFoot));
	        } else {
	          inlineFooter = tFoot;
	        }
	      }

	      return _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)(styles.tableWrapper, wrapperStyle)) }, headerTable, _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)(styles.bodyTable, bodyStyle)), ref: 'tableDiv' }, _react2.default.createElement('table', { className: className, style: mergedTableStyle, ref: 'tableBody' }, inlineHeader, inlineFooter, tBody)), footerTable);
	    }
	  }]);
	  return Table;
	}(_react.Component);

	Table.defaultProps = {
	  allRowsSelected: false,
	  fixedFooter: true,
	  fixedHeader: true,
	  height: 'inherit',
	  multiSelectable: false,
	  selectable: true
	};
	Table.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Table.propTypes = {
	  /**
	   * Set to true to indicate that all rows should be selected.
	   */
	  allRowsSelected: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the body's table element.
	   */
	  bodyStyle: _react.PropTypes.object,
	  /**
	   * Children passed to table.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * If true, the footer will appear fixed below the table.
	   * The default value is true.
	   */
	  fixedFooter: _react.PropTypes.bool,
	  /**
	   * If true, the header will appear fixed above the table.
	   * The default value is true.
	   */
	  fixedHeader: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the footer's table element.
	   */
	  footerStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the header's table element.
	   */
	  headerStyle: _react.PropTypes.object,
	  /**
	   * The height of the table.
	   */
	  height: _react.PropTypes.string,
	  /**
	   * If true, multiple table rows can be selected.
	   * CTRL/CMD+Click and SHIFT+Click are valid actions.
	   * The default value is false.
	   */
	  multiSelectable: _react.PropTypes.bool,
	  /**
	   * Called when a row cell is clicked.
	   * rowNumber is the row number and columnId is
	   * the column number or the column key.
	   */
	  onCellClick: _react.PropTypes.func,
	  /**
	   * Called when a table cell is hovered.
	   * rowNumber is the row number of the hovered row
	   * and columnId is the column number or the column key of the cell.
	   */
	  onCellHover: _react.PropTypes.func,
	  /**
	   * Called when a table cell is no longer hovered.
	   * rowNumber is the row number of the row and columnId
	   * is the column number or the column key of the cell.
	   */
	  onCellHoverExit: _react.PropTypes.func,
	  /**
	   * Called when a table row is hovered.
	   * rowNumber is the row number of the hovered row.
	   */
	  onRowHover: _react.PropTypes.func,
	  /**
	   * Called when a table row is no longer hovered.
	   * rowNumber is the row number of the row that is no longer hovered.
	   */
	  onRowHoverExit: _react.PropTypes.func,
	  /**
	   * Called when a row is selected.
	   * selectedRows is an array of all row selections.
	   * IF all rows have been selected, the string "all"
	   * will be returned instead to indicate that all rows have been selected.
	   */
	  onRowSelection: _react.PropTypes.func,
	  /**
	   * If true, table rows can be selected.
	   * If multiple row selection is desired, enable multiSelectable.
	   * The default value is true.
	   */
	  selectable: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the table's wrapper element.
	   */
	  wrapperStyle: _react.PropTypes.object
	} : void 0;
	exports.default = Table;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 899 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getIterator2 = __webpack_require__(900);

	var _getIterator3 = _interopRequireDefault(_getIterator2);

	var _toConsumableArray2 = __webpack_require__(179);

	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	var _typeof2 = __webpack_require__(241);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Checkbox = __webpack_require__(903);

	var _Checkbox2 = _interopRequireDefault(_Checkbox);

	var _TableRowColumn = __webpack_require__(907);

	var _TableRowColumn2 = _interopRequireDefault(_TableRowColumn);

	var _ClickAwayListener = __webpack_require__(421);

	var _ClickAwayListener2 = _interopRequireDefault(_ClickAwayListener);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var TableBody = function (_Component) {
	  (0, _inherits3.default)(TableBody, _Component);

	  function TableBody() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TableBody);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TableBody.__proto__ || (0, _getPrototypeOf2.default)(TableBody)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      selectedRows: []
	    }, _this.handleClickAway = function () {
	      if (_this.props.deselectOnClickaway && _this.state.selectedRows.length) {
	        _this.setState({
	          selectedRows: []
	        });
	        if (_this.props.onRowSelection) {
	          _this.props.onRowSelection([]);
	        }
	      }
	    }, _this.onRowClick = function (event, rowNumber) {
	      event.stopPropagation();

	      if (_this.props.selectable) {
	        // Prevent text selection while selecting rows.
	        window.getSelection().removeAllRanges();
	        _this.processRowSelection(event, rowNumber);
	      }
	    }, _this.onCellClick = function (event, rowNumber, columnNumber) {
	      event.stopPropagation();
	      if (_this.props.onCellClick) {
	        _this.props.onCellClick(rowNumber, _this.getColumnId(columnNumber), event);
	      }
	    }, _this.onCellHover = function (event, rowNumber, columnNumber) {
	      if (_this.props.onCellHover) {
	        _this.props.onCellHover(rowNumber, _this.getColumnId(columnNumber), event);
	      }
	      _this.onRowHover(event, rowNumber);
	    }, _this.onCellHoverExit = function (event, rowNumber, columnNumber) {
	      if (_this.props.onCellHoverExit) {
	        _this.props.onCellHoverExit(rowNumber, _this.getColumnId(columnNumber), event);
	      }
	      _this.onRowHoverExit(event, rowNumber);
	    }, _this.onRowHover = function (event, rowNumber) {
	      if (_this.props.onRowHover) {
	        _this.props.onRowHover(rowNumber);
	      }
	    }, _this.onRowHoverExit = function (event, rowNumber) {
	      if (_this.props.onRowHoverExit) {
	        _this.props.onRowHoverExit(rowNumber);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TableBody, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setState({ selectedRows: this.calculatePreselectedRows(this.props) });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.allRowsSelected && !nextProps.allRowsSelected) {
	        this.setState({
	          selectedRows: this.state.selectedRows.length > 0 ? [this.state.selectedRows[this.state.selectedRows.length - 1]] : []
	        });
	        // TODO: should else be conditional, not run any time props other than allRowsSelected change?
	      } else {
	        this.setState({
	          selectedRows: this.calculatePreselectedRows(nextProps)
	        });
	      }
	    }
	  }, {
	    key: 'createRows',
	    value: function createRows() {
	      var _this2 = this;

	      var numChildren = _react2.default.Children.count(this.props.children);
	      var rowNumber = 0;
	      var handlers = {
	        onCellClick: this.onCellClick,
	        onCellHover: this.onCellHover,
	        onCellHoverExit: this.onCellHoverExit,
	        onRowHover: this.onRowHover,
	        onRowHoverExit: this.onRowHoverExit,
	        onRowClick: this.onRowClick
	      };

	      return _react2.default.Children.map(this.props.children, function (child) {
	        if (_react2.default.isValidElement(child)) {
	          var _ret2 = function () {
	            var props = {
	              hoverable: _this2.props.showRowHover,
	              selected: _this2.isRowSelected(rowNumber),
	              striped: _this2.props.stripedRows && rowNumber % 2 === 0,
	              rowNumber: rowNumber++
	            };

	            if (rowNumber === numChildren) {
	              props.displayBorder = false;
	            }

	            var children = [_this2.createRowCheckboxColumn(props)];

	            _react2.default.Children.forEach(child.props.children, function (child) {
	              children.push(child);
	            });

	            return {
	              v: _react2.default.cloneElement(child, (0, _extends3.default)({}, props, handlers), children)
	            };
	          }();

	          if ((typeof _ret2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret2)) === "object") return _ret2.v;
	        }
	      });
	    }
	  }, {
	    key: 'createRowCheckboxColumn',
	    value: function createRowCheckboxColumn(rowProps) {
	      if (!this.props.displayRowCheckbox) {
	        return null;
	      }

	      var key = rowProps.rowNumber + '-cb';
	      var disabled = !this.props.selectable;
	      var checkbox = _react2.default.createElement(_Checkbox2.default, {
	        ref: 'rowSelectCB',
	        name: key,
	        value: 'selected',
	        disabled: disabled,
	        checked: rowProps.selected
	      });

	      return _react2.default.createElement(_TableRowColumn2.default, {
	        key: key,
	        columnNumber: 0,
	        style: {
	          width: 24,
	          cursor: disabled ? 'not-allowed' : 'inherit'
	        }
	      }, checkbox);
	    }
	  }, {
	    key: 'calculatePreselectedRows',
	    value: function calculatePreselectedRows(props) {
	      // Determine what rows are 'pre-selected'.
	      var preSelectedRows = [];

	      if (props.selectable && props.preScanRows) {
	        (function () {
	          var index = 0;
	          _react2.default.Children.forEach(props.children, function (child) {
	            if (_react2.default.isValidElement(child)) {
	              if (child.props.selected && (preSelectedRows.length === 0 || props.multiSelectable)) {
	                preSelectedRows.push(index);
	              }

	              index++;
	            }
	          });
	        })();
	      }

	      return preSelectedRows;
	    }
	  }, {
	    key: 'isRowSelected',
	    value: function isRowSelected(rowNumber) {
	      if (this.props.allRowsSelected) {
	        return true;
	      }

	      for (var i = 0; i < this.state.selectedRows.length; i++) {
	        var selection = this.state.selectedRows[i];

	        if ((typeof selection === 'undefined' ? 'undefined' : (0, _typeof3.default)(selection)) === 'object') {
	          if (this.isValueInRange(rowNumber, selection)) return true;
	        } else {
	          if (selection === rowNumber) return true;
	        }
	      }

	      return false;
	    }
	  }, {
	    key: 'isValueInRange',
	    value: function isValueInRange(value, range) {
	      if (!range) return false;

	      if (range.start <= value && value <= range.end || range.end <= value && value <= range.start) {
	        return true;
	      }

	      return false;
	    }
	  }, {
	    key: 'processRowSelection',
	    value: function processRowSelection(event, rowNumber) {
	      var selectedRows = this.state.selectedRows;

	      if (event.shiftKey && this.props.multiSelectable && selectedRows.length) {
	        var lastIndex = selectedRows.length - 1;
	        var lastSelection = selectedRows[lastIndex];

	        if ((typeof lastSelection === 'undefined' ? 'undefined' : (0, _typeof3.default)(lastSelection)) === 'object') {
	          lastSelection.end = rowNumber;
	        } else {
	          selectedRows.splice(lastIndex, 1, { start: lastSelection, end: rowNumber });
	        }
	      } else if ((event.ctrlKey && !event.metaKey || event.metaKey && !event.ctrlKey) && this.props.multiSelectable) {
	        var idx = selectedRows.indexOf(rowNumber);
	        if (idx < 0) {
	          var foundRange = false;
	          for (var i = 0; i < selectedRows.length; i++) {
	            var range = selectedRows[i];
	            if ((typeof range === 'undefined' ? 'undefined' : (0, _typeof3.default)(range)) !== 'object') continue;

	            if (this.isValueInRange(rowNumber, range)) {
	              var _selectedRows;

	              foundRange = true;
	              var values = this.splitRange(range, rowNumber);
	              (_selectedRows = selectedRows).splice.apply(_selectedRows, [i, 1].concat((0, _toConsumableArray3.default)(values)));
	            }
	          }

	          if (!foundRange) selectedRows.push(rowNumber);
	        } else {
	          selectedRows.splice(idx, 1);
	        }
	      } else {
	        if (selectedRows.length === 1 && selectedRows[0] === rowNumber) {
	          selectedRows = [];
	        } else {
	          selectedRows = [rowNumber];
	        }
	      }

	      this.setState({ selectedRows: selectedRows });
	      if (this.props.onRowSelection) this.props.onRowSelection(this.flattenRanges(selectedRows));
	    }
	  }, {
	    key: 'splitRange',
	    value: function splitRange(range, splitPoint) {
	      var splitValues = [];
	      var startOffset = range.start - splitPoint;
	      var endOffset = range.end - splitPoint;

	      // Process start half
	      splitValues.push.apply(splitValues, (0, _toConsumableArray3.default)(this.genRangeOfValues(splitPoint, startOffset)));

	      // Process end half
	      splitValues.push.apply(splitValues, (0, _toConsumableArray3.default)(this.genRangeOfValues(splitPoint, endOffset)));

	      return splitValues;
	    }
	  }, {
	    key: 'genRangeOfValues',
	    value: function genRangeOfValues(start, offset) {
	      var values = [];
	      var dir = offset > 0 ? -1 : 1; // This forces offset to approach 0 from either direction.
	      while (offset !== 0) {
	        values.push(start + offset);
	        offset += dir;
	      }

	      return values;
	    }
	  }, {
	    key: 'flattenRanges',
	    value: function flattenRanges(selectedRows) {
	      var rows = [];
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = (0, _getIterator3.default)(selectedRows), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var selection = _step.value;

	          if ((typeof selection === 'undefined' ? 'undefined' : (0, _typeof3.default)(selection)) === 'object') {
	            var values = this.genRangeOfValues(selection.end, selection.start - selection.end);
	            rows.push.apply(rows, [selection.end].concat((0, _toConsumableArray3.default)(values)));
	          } else {
	            rows.push(selection);
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return rows.sort();
	    }
	  }, {
	    key: 'getColumnId',
	    value: function getColumnId(columnNumber) {
	      var columnId = columnNumber;
	      if (this.props.displayRowCheckbox) {
	        columnId--;
	      }

	      return columnId;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          style = _props.style;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      return _react2.default.createElement(_ClickAwayListener2.default, { onClickAway: this.handleClickAway }, _react2.default.createElement('tbody', { className: className, style: prepareStyles((0, _simpleAssign2.default)({}, style)) }, this.createRows()));
	    }
	  }]);
	  return TableBody;
	}(_react.Component);

	TableBody.muiName = 'TableBody';
	TableBody.defaultProps = {
	  allRowsSelected: false,
	  deselectOnClickaway: true,
	  displayRowCheckbox: true,
	  multiSelectable: false,
	  preScanRows: true,
	  selectable: true,
	  style: {}
	};
	TableBody.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TableBody.propTypes = {
	  /**
	   * @ignore
	   * Set to true to indicate that all rows should be selected.
	   */
	  allRowsSelected: _react.PropTypes.bool,
	  /**
	   * Children passed to table body.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * Controls whether or not to deselect all selected
	   * rows after clicking outside the table.
	   */
	  deselectOnClickaway: _react.PropTypes.bool,
	  /**
	   * Controls the display of the row checkbox. The default value is true.
	   */
	  displayRowCheckbox: _react.PropTypes.bool,
	  /**
	   * @ignore
	   * If true, multiple table rows can be selected.
	   * CTRL/CMD+Click and SHIFT+Click are valid actions.
	   * The default value is false.
	   */
	  multiSelectable: _react.PropTypes.bool,
	  /**
	   * @ignore
	   * Callback function for when a cell is clicked.
	   */
	  onCellClick: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table cell is hovered. rowNumber
	   * is the row number of the hovered row and columnId
	   * is the column number or the column key of the cell.
	   */
	  onCellHover: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table cell is no longer hovered.
	   * rowNumber is the row number of the row and columnId
	   * is the column number or the column key of the cell.
	   */
	  onCellHoverExit: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table row is hovered.
	   * rowNumber is the row number of the hovered row.
	   */
	  onRowHover: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table row is no longer
	   * hovered. rowNumber is the row number of the row
	   * that is no longer hovered.
	   */
	  onRowHoverExit: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a row is selected. selectedRows is an
	   * array of all row selections. IF all rows have been selected,
	   * the string "all" will be returned instead to indicate that
	   * all rows have been selected.
	   */
	  onRowSelection: _react.PropTypes.func,
	  /**
	   * Controls whether or not the rows are pre-scanned to determine
	   * initial state. If your table has a large number of rows and
	   * you are experiencing a delay in rendering, turn off this property.
	   */
	  preScanRows: _react.PropTypes.bool,
	  /**
	   * @ignore
	   * If true, table rows can be selected. If multiple
	   * row selection is desired, enable multiSelectable.
	   * The default value is true.
	   */
	  selectable: _react.PropTypes.bool,
	  /**
	   * If true, table rows will be highlighted when
	   * the cursor is hovering over the row. The default
	   * value is false.
	   */
	  showRowHover: _react.PropTypes.bool,
	  /**
	   * If true, every other table row starting
	   * with the first row will be striped. The default value is false.
	   */
	  stripedRows: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = TableBody;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 900 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = { "default": __webpack_require__(901), __esModule: true };

/***/ },
/* 901 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(244);
	__webpack_require__(182);
	module.exports = __webpack_require__(902);

/***/ },
/* 902 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var anObject = __webpack_require__(195),
	    get = __webpack_require__(230);
	module.exports = __webpack_require__(190).getIterator = function (it) {
	  var iterFn = get(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ },
/* 903 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Checkbox = __webpack_require__(904);

	var _Checkbox2 = _interopRequireDefault(_Checkbox);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Checkbox2.default;

/***/ },
/* 904 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _EnhancedSwitch = __webpack_require__(438);

	var _EnhancedSwitch2 = _interopRequireDefault(_EnhancedSwitch);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _checkBoxOutlineBlank = __webpack_require__(905);

	var _checkBoxOutlineBlank2 = _interopRequireDefault(_checkBoxOutlineBlank);

	var _checkBox = __webpack_require__(906);

	var _checkBox2 = _interopRequireDefault(_checkBox);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var checkbox = context.muiTheme.checkbox;

	  var checkboxSize = 24;

	  return {
	    icon: {
	      height: checkboxSize,
	      width: checkboxSize
	    },
	    check: {
	      position: 'absolute',
	      opacity: 0,
	      transform: 'scale(0)',
	      transitionOrigin: '50% 50%',
	      transition: _transitions2.default.easeOut('450ms', 'opacity', '0ms') + ', ' + _transitions2.default.easeOut('0ms', 'transform', '450ms'),
	      fill: checkbox.checkedColor
	    },
	    checkWhenSwitched: {
	      opacity: 1,
	      transform: 'scale(1)',
	      transition: _transitions2.default.easeOut('0ms', 'opacity', '0ms') + ', ' + _transitions2.default.easeOut('800ms', 'transform', '0ms')
	    },
	    checkWhenDisabled: {
	      fill: checkbox.disabledColor
	    },
	    box: {
	      position: 'absolute',
	      opacity: 1,
	      fill: checkbox.boxColor,
	      transition: _transitions2.default.easeOut('1000ms', 'opacity', '200ms')
	    },
	    boxWhenSwitched: {
	      opacity: 0,
	      transition: _transitions2.default.easeOut('650ms', 'opacity', '150ms'),
	      fill: checkbox.checkedColor
	    },
	    boxWhenDisabled: {
	      fill: props.checked ? 'transparent' : checkbox.disabledColor
	    },
	    label: {
	      color: props.disabled ? checkbox.labelDisabledColor : checkbox.labelColor
	    }
	  };
	}

	var Checkbox = function (_Component) {
	  (0, _inherits3.default)(Checkbox, _Component);

	  function Checkbox() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Checkbox);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      switched: false
	    }, _this.handleStateChange = function (newSwitched) {
	      _this.setState({
	        switched: newSwitched
	      });
	    }, _this.handleCheck = function (event, isInputChecked) {
	      if (_this.props.onCheck) {
	        _this.props.onCheck(event, isInputChecked);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Checkbox, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          checked = _props.checked,
	          defaultChecked = _props.defaultChecked,
	          valueLink = _props.valueLink;

	      if (checked || defaultChecked || valueLink && valueLink.value) {
	        this.setState({
	          switched: true
	        });
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.checked !== nextProps.checked) {
	        this.setState({
	          switched: nextProps.checked
	        });
	      }
	    }
	  }, {
	    key: 'isChecked',
	    value: function isChecked() {
	      return this.refs.enhancedSwitch.isSwitched();
	    }
	  }, {
	    key: 'setChecked',
	    value: function setChecked(newCheckedValue) {
	      this.refs.enhancedSwitch.setSwitched(newCheckedValue);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          iconStyle = _props2.iconStyle,
	          onCheck = _props2.onCheck,
	          checkedIcon = _props2.checkedIcon,
	          uncheckedIcon = _props2.uncheckedIcon,
	          other = (0, _objectWithoutProperties3.default)(_props2, ['iconStyle', 'onCheck', 'checkedIcon', 'uncheckedIcon']);

	      var styles = getStyles(this.props, this.context);
	      var boxStyles = (0, _simpleAssign2.default)(styles.box, this.state.switched && styles.boxWhenSwitched, iconStyle, this.props.disabled && styles.boxWhenDisabled);
	      var checkStyles = (0, _simpleAssign2.default)(styles.check, this.state.switched && styles.checkWhenSwitched, iconStyle, this.props.disabled && styles.checkWhenDisabled);

	      var checkedElement = checkedIcon ? _react2.default.cloneElement(checkedIcon, {
	        style: (0, _simpleAssign2.default)(checkStyles, checkedIcon.props.style)
	      }) : _react2.default.createElement(_checkBox2.default, {
	        style: checkStyles
	      });

	      var unCheckedElement = uncheckedIcon ? _react2.default.cloneElement(uncheckedIcon, {
	        style: (0, _simpleAssign2.default)(boxStyles, uncheckedIcon.props.style)
	      }) : _react2.default.createElement(_checkBoxOutlineBlank2.default, {
	        style: boxStyles
	      });

	      var checkboxElement = _react2.default.createElement('div', null, unCheckedElement, checkedElement);

	      var rippleColor = this.state.switched ? checkStyles.fill : boxStyles.fill;
	      var mergedIconStyle = (0, _simpleAssign2.default)(styles.icon, iconStyle);

	      var labelStyle = (0, _simpleAssign2.default)(styles.label, this.props.labelStyle);

	      var enhancedSwitchProps = {
	        ref: 'enhancedSwitch',
	        inputType: 'checkbox',
	        switched: this.state.switched,
	        switchElement: checkboxElement,
	        rippleColor: rippleColor,
	        iconStyle: mergedIconStyle,
	        onSwitch: this.handleCheck,
	        labelStyle: labelStyle,
	        onParentShouldUpdate: this.handleStateChange,
	        labelPosition: this.props.labelPosition
	      };

	      return _react2.default.createElement(_EnhancedSwitch2.default, (0, _extends3.default)({}, other, enhancedSwitchProps));
	    }
	  }]);
	  return Checkbox;
	}(_react.Component);

	Checkbox.defaultProps = {
	  labelPosition: 'right',
	  disabled: false
	};
	Checkbox.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Checkbox.propTypes = {
	  /**
	   * Checkbox is checked if true.
	   */
	  checked: _react.PropTypes.bool,
	  /**
	   * The SvgIcon to use for the checked state.
	   * This is useful to create icon toggles.
	   */
	  checkedIcon: _react.PropTypes.element,
	  /**
	   * The default state of our checkbox component.
	   * **Warning:** This cannot be used in conjunction with `checked`.
	   * Decide between using a controlled or uncontrolled input element and remove one of these props.
	   * More info: https://fb.me/react-controlled-components
	   */
	  defaultChecked: _react.PropTypes.bool,
	  /**
	   * Disabled if true.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * Overrides the inline-styles of the icon element.
	   */
	  iconStyle: _react.PropTypes.object,
	  /**
	   * Overrides the inline-styles of the input element.
	   */
	  inputStyle: _react.PropTypes.object,
	  /**
	   * Where the label will be placed next to the checkbox.
	   */
	  labelPosition: _react.PropTypes.oneOf(['left', 'right']),
	  /**
	   * Overrides the inline-styles of the Checkbox element label.
	   */
	  labelStyle: _react.PropTypes.object,
	  /**
	   * Callback function that is fired when the checkbox is checked.
	   *
	   * @param {object} event `change` event targeting the underlying checkbox `input`.
	   * @param {boolean} isInputChecked The `checked` value of the underlying checkbox `input`.
	   */
	  onCheck: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The SvgIcon to use for the unchecked state.
	   * This is useful to create icon toggles.
	   */
	  uncheckedIcon: _react.PropTypes.element,
	  /**
	   * ValueLink for when using controlled checkbox.
	   */
	  valueLink: _react.PropTypes.object
	} : void 0;
	exports.default = Checkbox;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 905 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var ToggleCheckBoxOutlineBlank = function ToggleCheckBoxOutlineBlank(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z' }));
	};
	ToggleCheckBoxOutlineBlank = (0, _pure2.default)(ToggleCheckBoxOutlineBlank);
	ToggleCheckBoxOutlineBlank.displayName = 'ToggleCheckBoxOutlineBlank';
	ToggleCheckBoxOutlineBlank.muiName = 'SvgIcon';

	exports.default = ToggleCheckBoxOutlineBlank;

/***/ },
/* 906 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var ToggleCheckBox = function ToggleCheckBox(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z' }));
	};
	ToggleCheckBox = (0, _pure2.default)(ToggleCheckBox);
	ToggleCheckBox.displayName = 'ToggleCheckBox';
	ToggleCheckBox.muiName = 'SvgIcon';

	exports.default = ToggleCheckBox;

/***/ },
/* 907 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var tableRowColumn = context.muiTheme.tableRowColumn;

	  var styles = {
	    root: {
	      paddingLeft: tableRowColumn.spacing,
	      paddingRight: tableRowColumn.spacing,
	      height: tableRowColumn.height,
	      textAlign: 'left',
	      fontSize: 13,
	      overflow: 'hidden',
	      whiteSpace: 'nowrap',
	      textOverflow: 'ellipsis'
	    }
	  };

	  if (_react2.default.Children.count(props.children) === 1 && !isNaN(props.children)) {
	    styles.textAlign = 'right';
	  }

	  return styles;
	}

	var TableRowColumn = function (_Component) {
	  (0, _inherits3.default)(TableRowColumn, _Component);

	  function TableRowColumn() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TableRowColumn);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TableRowColumn.__proto__ || (0, _getPrototypeOf2.default)(TableRowColumn)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false
	    }, _this.onClick = function (event) {
	      if (_this.props.onClick) {
	        _this.props.onClick(event, _this.props.columnNumber);
	      }
	    }, _this.onMouseEnter = function (event) {
	      if (_this.props.hoverable) {
	        _this.setState({ hovered: true });
	        if (_this.props.onHover) {
	          _this.props.onHover(event, _this.props.columnNumber);
	        }
	      }
	    }, _this.onMouseLeave = function (event) {
	      if (_this.props.hoverable) {
	        _this.setState({ hovered: false });
	        if (_this.props.onHoverExit) {
	          _this.props.onHoverExit(event, _this.props.columnNumber);
	        }
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TableRowColumn, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          columnNumber = _props.columnNumber,
	          hoverable = _props.hoverable,
	          onClick = _props.onClick,
	          onHover = _props.onHover,
	          onHoverExit = _props.onHoverExit,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'className', 'columnNumber', 'hoverable', 'onClick', 'onHover', 'onHoverExit', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var handlers = {
	        onClick: this.onClick,
	        onMouseEnter: this.onMouseEnter,
	        onMouseLeave: this.onMouseLeave
	      };

	      return _react2.default.createElement('td', (0, _extends3.default)({
	        className: className,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	      }, handlers, other), children);
	    }
	  }]);
	  return TableRowColumn;
	}(_react.Component);

	TableRowColumn.defaultProps = {
	  hoverable: false
	};
	TableRowColumn.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TableRowColumn.propTypes = {
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * @ignore
	   * Number to identify the header row. This property
	   * is automatically populated when used with TableHeader.
	   */
	  columnNumber: _react.PropTypes.number,
	  /**
	   * @ignore
	   * If true, this column responds to hover events.
	   */
	  hoverable: _react.PropTypes.bool,
	  /** @ignore */
	  onClick: _react.PropTypes.func,
	  /** @ignore */
	  onHover: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Callback function for hover exit event.
	   */
	  onHoverExit: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = TableRowColumn;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 908 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _toConsumableArray2 = __webpack_require__(179);

	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _TableRowColumn = __webpack_require__(907);

	var _TableRowColumn2 = _interopRequireDefault(_TableRowColumn);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var tableFooter = context.muiTheme.tableFooter;

	  return {
	    cell: {
	      borderTop: '1px solid ' + tableFooter.borderColor,
	      verticalAlign: 'bottom',
	      padding: 20,
	      textAlign: 'left',
	      whiteSpace: 'nowrap'
	    }
	  };
	}

	var TableFooter = function (_Component) {
	  (0, _inherits3.default)(TableFooter, _Component);

	  function TableFooter() {
	    (0, _classCallCheck3.default)(this, TableFooter);
	    return (0, _possibleConstructorReturn3.default)(this, (TableFooter.__proto__ || (0, _getPrototypeOf2.default)(TableFooter)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(TableFooter, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          adjustForCheckbox = _props.adjustForCheckbox,
	          children = _props.children,
	          className = _props.className,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['adjustForCheckbox', 'children', 'className', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var footerRows = _react2.default.Children.map(children, function (child, rowNumber) {
	        var newChildProps = {
	          displayBorder: false,
	          key: 'f-' + rowNumber,
	          rowNumber: rowNumber,
	          style: (0, _simpleAssign2.default)({}, styles.cell, child.props.style)
	        };

	        var newDescendants = void 0;

	        if (adjustForCheckbox) {
	          newDescendants = [_react2.default.createElement(_TableRowColumn2.default, { key: 'fpcb' + rowNumber, style: { width: 24 } })].concat((0, _toConsumableArray3.default)(_react2.default.Children.toArray(child.props.children)));
	        } else {
	          newDescendants = child.props.children;
	        }

	        return _react2.default.cloneElement(child, newChildProps, newDescendants);
	      });

	      return _react2.default.createElement('tfoot', (0, _extends3.default)({ className: className, style: prepareStyles((0, _simpleAssign2.default)({}, style)) }, other), footerRows);
	    }
	  }]);
	  return TableFooter;
	}(_react.Component);

	TableFooter.muiName = 'TableFooter';
	TableFooter.defaultProps = {
	  adjustForCheckbox: true,
	  style: {}
	};
	TableFooter.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TableFooter.propTypes = {
	  /**
	   * @ignore
	   * Controls whether or not header rows should be adjusted
	   * for a checkbox column. If the select all checkbox is true,
	   * this property will not influence the number of columns.
	   * This is mainly useful for "super header" rows so that
	   * the checkbox column does not create an offset that needs
	   * to be accounted for manually.
	   */
	  adjustForCheckbox: _react.PropTypes.bool,
	  /**
	   * Children passed to table footer.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = TableFooter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 909 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Checkbox = __webpack_require__(903);

	var _Checkbox2 = _interopRequireDefault(_Checkbox);

	var _TableHeaderColumn = __webpack_require__(910);

	var _TableHeaderColumn2 = _interopRequireDefault(_TableHeaderColumn);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var tableHeader = context.muiTheme.tableHeader;

	  return {
	    root: {
	      borderBottom: '1px solid ' + tableHeader.borderColor
	    }
	  };
	}

	var TableHeader = function (_Component) {
	  (0, _inherits3.default)(TableHeader, _Component);

	  function TableHeader() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TableHeader);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TableHeader.__proto__ || (0, _getPrototypeOf2.default)(TableHeader)).call.apply(_ref, [this].concat(args))), _this), _this.handleCheckAll = function (event, checked) {
	      if (_this.props.onSelectAll) _this.props.onSelectAll(checked);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TableHeader, [{
	    key: 'createSuperHeaderRows',
	    value: function createSuperHeaderRows() {
	      var numChildren = _react2.default.Children.count(this.props.children);
	      if (numChildren === 1) return undefined;

	      var superHeaders = [];
	      for (var index = 0; index < numChildren - 1; index++) {
	        var child = this.props.children[index];

	        if (!_react2.default.isValidElement(child)) continue;

	        var props = {
	          key: 'sh' + index,
	          rowNumber: index
	        };
	        superHeaders.push(this.createSuperHeaderRow(child, props));
	      }

	      if (superHeaders.length) return superHeaders;
	    }
	  }, {
	    key: 'createSuperHeaderRow',
	    value: function createSuperHeaderRow(child, props) {
	      var children = [];
	      if (this.props.adjustForCheckbox) {
	        children.push(this.getCheckboxPlaceholder(props));
	      }
	      _react2.default.Children.forEach(child.props.children, function (child) {
	        children.push(child);
	      });

	      return _react2.default.cloneElement(child, props, children);
	    }
	  }, {
	    key: 'createBaseHeaderRow',
	    value: function createBaseHeaderRow() {
	      var numChildren = _react2.default.Children.count(this.props.children);
	      var child = numChildren === 1 ? this.props.children : this.props.children[numChildren - 1];
	      var props = {
	        key: 'h' + numChildren,
	        rowNumber: numChildren
	      };

	      var children = [this.getSelectAllCheckboxColumn(props)];
	      _react2.default.Children.forEach(child.props.children, function (child) {
	        children.push(child);
	      });

	      return _react2.default.cloneElement(child, props, children);
	    }
	  }, {
	    key: 'getCheckboxPlaceholder',
	    value: function getCheckboxPlaceholder(props) {
	      if (!this.props.adjustForCheckbox) return null;

	      var disabled = !this.props.enableSelectAll;
	      var key = 'hpcb' + props.rowNumber;
	      return _react2.default.createElement(_TableHeaderColumn2.default, {
	        key: key,
	        style: {
	          width: 24,
	          cursor: disabled ? 'not-allowed' : 'inherit'
	        }
	      });
	    }
	  }, {
	    key: 'getSelectAllCheckboxColumn',
	    value: function getSelectAllCheckboxColumn(props) {
	      if (!this.props.displaySelectAll) return this.getCheckboxPlaceholder(props);

	      var disabled = !this.props.enableSelectAll;
	      var checkbox = _react2.default.createElement(_Checkbox2.default, {
	        key: 'selectallcb',
	        name: 'selectallcb',
	        value: 'selected',
	        disabled: disabled,
	        checked: this.props.selectAllSelected,
	        onCheck: this.handleCheckAll
	      });

	      var key = 'hpcb' + props.rowNumber;
	      return _react2.default.createElement(_TableHeaderColumn2.default, {
	        key: key,
	        style: {
	          width: 24,
	          cursor: disabled ? 'not-allowed' : 'inherit'
	        }
	      }, checkbox);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          style = _props.style;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var superHeaderRows = this.createSuperHeaderRows();
	      var baseHeaderRow = this.createBaseHeaderRow();

	      return _react2.default.createElement('thead', { className: className, style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }, superHeaderRows, baseHeaderRow);
	    }
	  }]);
	  return TableHeader;
	}(_react.Component);

	TableHeader.muiName = 'TableHeader';
	TableHeader.defaultProps = {
	  adjustForCheckbox: true,
	  displaySelectAll: true,
	  enableSelectAll: true,
	  selectAllSelected: false
	};
	TableHeader.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TableHeader.propTypes = {
	  /**
	   * Controls whether or not header rows should be
	   * adjusted for a checkbox column. If the select all
	   * checkbox is true, this property will not influence
	   * the number of columns. This is mainly useful for
	   * "super header" rows so that the checkbox column
	   * does not create an offset that needs to be accounted
	   * for manually.
	   */
	  adjustForCheckbox: _react.PropTypes.bool,
	  /**
	   * Children passed to table header.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * Controls whether or not the select all checkbox is displayed.
	   */
	  displaySelectAll: _react.PropTypes.bool,
	  /**
	   * If set to true, the select all button will be interactable.
	   * If set to false, the button will not be interactable.
	   * To hide the checkbox, set displaySelectAll to false.
	   */
	  enableSelectAll: _react.PropTypes.bool,
	  /**
	   * @ignore
	   * Callback when select all has been checked.
	   */
	  onSelectAll: _react.PropTypes.func,
	  /**
	   * @ignore
	   * True when select all has been checked.
	   */
	  selectAllSelected: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = TableHeader;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 910 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Tooltip = __webpack_require__(366);

	var _Tooltip2 = _interopRequireDefault(_Tooltip);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context) {
	  var tableHeaderColumn = context.muiTheme.tableHeaderColumn;

	  return {
	    root: {
	      fontWeight: 'normal',
	      fontSize: 12,
	      paddingLeft: tableHeaderColumn.spacing,
	      paddingRight: tableHeaderColumn.spacing,
	      height: tableHeaderColumn.height,
	      textAlign: 'left',
	      whiteSpace: 'nowrap',
	      textOverflow: 'ellipsis',
	      color: tableHeaderColumn.textColor,
	      position: 'relative'
	    },
	    tooltip: {
	      boxSizing: 'border-box',
	      marginTop: tableHeaderColumn.height / 2
	    }
	  };
	}

	var TableHeaderColumn = function (_Component) {
	  (0, _inherits3.default)(TableHeaderColumn, _Component);

	  function TableHeaderColumn() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TableHeaderColumn);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TableHeaderColumn.__proto__ || (0, _getPrototypeOf2.default)(TableHeaderColumn)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false
	    }, _this.onMouseEnter = function () {
	      if (_this.props.tooltip !== undefined) {
	        _this.setState({ hovered: true });
	      }
	    }, _this.onMouseLeave = function () {
	      if (_this.props.tooltip !== undefined) {
	        _this.setState({ hovered: false });
	      }
	    }, _this.onClick = function (event) {
	      if (_this.props.onClick) {
	        _this.props.onClick(event, _this.props.columnNumber);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TableHeaderColumn, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          columnNumber = _props.columnNumber,
	          hoverable = _props.hoverable,
	          onClick = _props.onClick,
	          onHover = _props.onHover,
	          onHoverExit = _props.onHoverExit,
	          style = _props.style,
	          tooltip = _props.tooltip,
	          tooltipStyle = _props.tooltipStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'className', 'columnNumber', 'hoverable', 'onClick', 'onHover', 'onHoverExit', 'style', 'tooltip', 'tooltipStyle']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var handlers = {
	        onMouseEnter: this.onMouseEnter,
	        onMouseLeave: this.onMouseLeave,
	        onClick: this.onClick
	      };

	      var tooltipNode = void 0;

	      if (tooltip !== undefined) {
	        tooltipNode = _react2.default.createElement(_Tooltip2.default, {
	          label: tooltip,
	          show: this.state.hovered,
	          style: (0, _simpleAssign2.default)(styles.tooltip, tooltipStyle)
	        });
	      }

	      return _react2.default.createElement('th', (0, _extends3.default)({
	        className: className,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	      }, handlers, other), tooltipNode, children);
	    }
	  }]);
	  return TableHeaderColumn;
	}(_react.Component);

	TableHeaderColumn.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TableHeaderColumn.propTypes = {
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * Number to identify the header row. This property
	   * is automatically populated when used with TableHeader.
	   */
	  columnNumber: _react.PropTypes.number,
	  /**
	   * @ignore
	   * Not used here but we need to remove it from the root element.
	   */
	  hoverable: _react.PropTypes.bool,
	  /** @ignore */
	  onClick: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Not used here but we need to remove it from the root element.
	   */
	  onHover: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Not used here but we need to remove it from the root element.
	   */
	  onHoverExit: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The string to supply to the tooltip. If not
	   * string is supplied no tooltip will be shown.
	   */
	  tooltip: _react.PropTypes.string,
	  /**
	   * Additional styling that can be applied to the tooltip.
	   */
	  tooltipStyle: _react.PropTypes.object
	} : void 0;
	exports.default = TableHeaderColumn;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 911 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context, state) {
	  var tableRow = context.muiTheme.tableRow;

	  var cellBgColor = 'inherit';
	  if (props.hovered || state.hovered) {
	    cellBgColor = tableRow.hoverColor;
	  } else if (props.selected) {
	    cellBgColor = tableRow.selectedColor;
	  } else if (props.striped) {
	    cellBgColor = tableRow.stripeColor;
	  }

	  return {
	    root: {
	      borderBottom: props.displayBorder && '1px solid ' + tableRow.borderColor,
	      color: tableRow.textColor,
	      height: tableRow.height
	    },
	    cell: {
	      backgroundColor: cellBgColor
	    }
	  };
	}

	var TableRow = function (_Component) {
	  (0, _inherits3.default)(TableRow, _Component);

	  function TableRow() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TableRow);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TableRow.__proto__ || (0, _getPrototypeOf2.default)(TableRow)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false
	    }, _this.onCellClick = function (event, columnIndex) {
	      if (_this.props.selectable && _this.props.onCellClick) {
	        _this.props.onCellClick(event, _this.props.rowNumber, columnIndex);
	      }
	      event.ctrlKey = true;
	      _this.onRowClick(event);
	    }, _this.onCellHover = function (event, columnIndex) {
	      if (_this.props.hoverable) {
	        _this.setState({ hovered: true });
	        if (_this.props.onCellHover) _this.props.onCellHover(event, _this.props.rowNumber, columnIndex);
	        _this.onRowHover(event);
	      }
	    }, _this.onCellHoverExit = function (event, columnIndex) {
	      if (_this.props.hoverable) {
	        _this.setState({ hovered: false });
	        if (_this.props.onCellHoverExit) _this.props.onCellHoverExit(event, _this.props.rowNumber, columnIndex);
	        _this.onRowHoverExit(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TableRow, [{
	    key: 'onRowClick',
	    value: function onRowClick(event) {
	      if (this.props.selectable && this.props.onRowClick) this.props.onRowClick(event, this.props.rowNumber);
	    }
	  }, {
	    key: 'onRowHover',
	    value: function onRowHover(event) {
	      if (this.props.onRowHover) this.props.onRowHover(event, this.props.rowNumber);
	    }
	  }, {
	    key: 'onRowHoverExit',
	    value: function onRowHoverExit(event) {
	      if (this.props.onRowHoverExit) this.props.onRowHoverExit(event, this.props.rowNumber);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          className = _props.className,
	          displayBorder = _props.displayBorder,
	          hoverable = _props.hoverable,
	          hovered = _props.hovered,
	          onCellClick = _props.onCellClick,
	          onCellHover = _props.onCellHover,
	          onCellHoverExit = _props.onCellHoverExit,
	          onRowClick = _props.onRowClick,
	          onRowHover = _props.onRowHover,
	          onRowHoverExit = _props.onRowHoverExit,
	          rowNumber = _props.rowNumber,
	          selectable = _props.selectable,
	          selected = _props.selected,
	          striped = _props.striped,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['className', 'displayBorder', 'hoverable', 'hovered', 'onCellClick', 'onCellHover', 'onCellHoverExit', 'onRowClick', 'onRowHover', 'onRowHoverExit', 'rowNumber', 'selectable', 'selected', 'striped', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      var rowColumns = _react2.default.Children.map(this.props.children, function (child, columnNumber) {
	        if (_react2.default.isValidElement(child)) {
	          return _react2.default.cloneElement(child, {
	            columnNumber: columnNumber,
	            hoverable: _this2.props.hoverable,
	            key: _this2.props.rowNumber + '-' + columnNumber,
	            onClick: _this2.onCellClick,
	            onHover: _this2.onCellHover,
	            onHoverExit: _this2.onCellHoverExit,
	            style: (0, _simpleAssign2.default)({}, styles.cell, child.props.style)
	          });
	        }
	      });

	      return _react2.default.createElement('tr', (0, _extends3.default)({
	        className: className,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	      }, other), rowColumns);
	    }
	  }]);
	  return TableRow;
	}(_react.Component);

	TableRow.defaultProps = {
	  displayBorder: true,
	  hoverable: false,
	  hovered: false,
	  selectable: true,
	  selected: false,
	  striped: false
	};
	TableRow.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TableRow.propTypes = {
	  /**
	   * Children passed to table row.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * If true, row border will be displayed for the row.
	   * If false, no border will be drawn.
	   */
	  displayBorder: _react.PropTypes.bool,
	  /**
	   * Controls whether or not the row reponseds to hover events.
	   */
	  hoverable: _react.PropTypes.bool,
	  /**
	   * Controls whether or not the row should be rendered as being
	   * hovered. This property is evaluated in addition to this.state.hovered
	   * and can be used to synchronize the hovered state with some other
	   * external events.
	   */
	  hovered: _react.PropTypes.bool,
	  /**
	   * @ignore
	   * Called when a row cell is clicked.
	   * rowNumber is the row number and columnId is
	   * the column number or the column key.
	   */
	  onCellClick: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table cell is hovered.
	   * rowNumber is the row number of the hovered row
	   * and columnId is the column number or the column key of the cell.
	   */
	  onCellHover: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table cell is no longer hovered.
	   * rowNumber is the row number of the row and columnId
	   * is the column number or the column key of the cell.
	   */
	  onCellHoverExit: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when row is clicked.
	   */
	  onRowClick: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table row is hovered.
	   * rowNumber is the row number of the hovered row.
	   */
	  onRowHover: _react.PropTypes.func,
	  /**
	   * @ignore
	   * Called when a table row is no longer hovered.
	   * rowNumber is the row number of the row that is no longer hovered.
	   */
	  onRowHoverExit: _react.PropTypes.func,
	  /**
	   * Number to identify the row. This property is
	   * automatically populated when used with the TableBody component.
	   */
	  rowNumber: _react.PropTypes.number,
	  /**
	   * If true, table rows can be selected. If multiple row
	   * selection is desired, enable multiSelectable.
	   * The default value is true.
	   */
	  selectable: _react.PropTypes.bool,
	  /**
	   * Indicates that a particular row is selected.
	   * This property can be used to programmatically select rows.
	   */
	  selected: _react.PropTypes.bool,
	  /**
	   * Indicates whether or not the row is striped.
	   */
	  striped: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = TableRow;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 912 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _close = __webpack_require__(440);

	var _close2 = _interopRequireDefault(_close);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _Dateaa = __webpack_require__(913);

	var _Dateaa2 = _interopRequireDefault(_Dateaa);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Daily = function (_React$Component) {
	  _inherits(Daily, _React$Component);

	  function Daily(props) {
	    _classCallCheck(this, Daily);

	    var _this = _possibleConstructorReturn(this, (Daily.__proto__ || Object.getPrototypeOf(Daily)).call(this, props));

	    _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    };

	    _this.handleClose = function () {
	      return _this.setState({ open: false });
	    };

	    _this.state = { open: false };
	    return _this;
	  }

	  _createClass(Daily, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_FlatButton2.default, {
	          label: 'More',
	          onTouchTap: this.handleToggle
	        }),
	        _react2.default.createElement(
	          _Drawer2.default,
	          { width: 380, openSecondary: true, open: this.state.open },
	          _react2.default.createElement(_AppBar2.default, {
	            title: 'Daily Forecast',
	            iconElementLeft: _react2.default.createElement(
	              _IconButton2.default,
	              { onTouchTap: this.handleClose },
	              _react2.default.createElement(_close2.default, null)
	            ) }),
	          _react2.default.createElement(_Dateaa2.default, null)
	        )
	      );
	    }
	  }]);

	  return Daily;
	}(_react2.default.Component);

	exports.default = Daily;

/***/ },
/* 913 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Table = __webpack_require__(897);

	var _TextField = __webpack_require__(914);

	var _TextField2 = _interopRequireDefault(_TextField);

	var _Toggle = __webpack_require__(436);

	var _Toggle2 = _interopRequireDefault(_Toggle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var styles = {
	  propContainer: {
	    width: 200,
	    overflow: 'hidden',
	    margin: '20px auto 0'
	  },
	  propToggleHeader: {
	    margin: '20px auto 10px'
	  }
	};

	var tableData = [{
	  index: 'WE',
	  name: '03/01',
	  status: '25~46'

	}, {
	  index: 'THU',
	  name: '03/02',
	  status: '27~55'

	}, {
	  index: 'FRI',
	  name: '03/03',
	  status: '27~55'

	}, {
	  index: 'WE',
	  name: '03/01',
	  status: '25~46'

	}, {
	  index: 'THU',
	  name: '03/02',
	  status: '27~55'

	}, {
	  index: 'FRI',
	  name: '03/03',
	  status: '27~55'

	}];

	var Dateaa = function (_React$Component) {
	  _inherits(Dateaa, _React$Component);

	  function Dateaa(props) {
	    _classCallCheck(this, Dateaa);

	    var _this = _possibleConstructorReturn(this, (Dateaa.__proto__ || Object.getPrototypeOf(Dateaa)).call(this, props));

	    _this.state = {
	      fixedHeader: false,
	      fixedFooter: false,
	      stripedRows: false,
	      showRowHover: false,
	      selectable: false,
	      multiSelectable: false,
	      enableSelectAll: false,
	      deselectOnClickaway: false,
	      height: '500px'

	    };
	    return _this;
	  }

	  _createClass(Dateaa, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { style: { marginTop: '20' } },
	        _react2.default.createElement(
	          _Table.Table,
	          {
	            height: this.state.height
	          },
	          _react2.default.createElement(
	            _Table.TableBody,
	            {
	              displayRowCheckbox: false },
	            tableData.map(function (row, index) {
	              return _react2.default.createElement(
	                _Table.TableRow,
	                {
	                  selectable: false },
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  null,
	                  _react2.default.createElement(
	                    'strong',
	                    null,
	                    row.index
	                  )
	                ),
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  { style: { color: 'gray', width: '40' } },
	                  row.name
	                ),
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  null,
	                  _react2.default.createElement('img', { src: 'img/d.jpg', width: '20px', height: '20px' })
	                ),
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  { style: { color: 'gray', width: '40' } },
	                  row.status
	                )
	              );
	            })
	          )
	        )
	      );
	    }
	  }]);

	  return Dateaa;
	}(_react2.default.Component);

	exports.default = Dateaa;

/***/ },
/* 914 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _TextField = __webpack_require__(915);

	var _TextField2 = _interopRequireDefault(_TextField);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _TextField2.default;

/***/ },
/* 915 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(347);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _EnhancedTextarea = __webpack_require__(916);

	var _EnhancedTextarea2 = _interopRequireDefault(_EnhancedTextarea);

	var _TextFieldHint = __webpack_require__(917);

	var _TextFieldHint2 = _interopRequireDefault(_TextFieldHint);

	var _TextFieldLabel = __webpack_require__(918);

	var _TextFieldLabel2 = _interopRequireDefault(_TextFieldLabel);

	var _TextFieldUnderline = __webpack_require__(919);

	var _TextFieldUnderline2 = _interopRequireDefault(_TextFieldUnderline);

	var _warning = __webpack_require__(300);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var getStyles = function getStyles(props, context, state) {
	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      _context$muiTheme$tex = _context$muiTheme.textField,
	      floatingLabelColor = _context$muiTheme$tex.floatingLabelColor,
	      focusColor = _context$muiTheme$tex.focusColor,
	      textColor = _context$muiTheme$tex.textColor,
	      disabledTextColor = _context$muiTheme$tex.disabledTextColor,
	      backgroundColor = _context$muiTheme$tex.backgroundColor,
	      errorColor = _context$muiTheme$tex.errorColor;

	  var styles = {
	    root: {
	      fontSize: 16,
	      lineHeight: '24px',
	      width: props.fullWidth ? '100%' : 256,
	      height: (props.rows - 1) * 24 + (props.floatingLabelText ? 72 : 48),
	      display: 'inline-block',
	      position: 'relative',
	      backgroundColor: backgroundColor,
	      fontFamily: baseTheme.fontFamily,
	      transition: _transitions2.default.easeOut('200ms', 'height'),
	      cursor: props.disabled ? 'not-allowed' : 'auto'
	    },
	    error: {
	      position: 'relative',
	      bottom: 2,
	      fontSize: 12,
	      lineHeight: '12px',
	      color: errorColor,
	      transition: _transitions2.default.easeOut()
	    },
	    floatingLabel: {
	      color: props.disabled ? disabledTextColor : floatingLabelColor,
	      pointerEvents: 'none'
	    },
	    input: {
	      padding: 0,
	      position: 'relative',
	      width: '100%',
	      border: 'none',
	      outline: 'none',
	      backgroundColor: 'rgba(0,0,0,0)',
	      color: props.disabled ? disabledTextColor : textColor,
	      cursor: 'inherit',
	      font: 'inherit',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)' },
	    inputNative: {
	      appearance: 'textfield' }
	  };

	  styles.textarea = (0, _simpleAssign2.default)({}, styles.input, {
	    marginTop: props.floatingLabelText ? 36 : 12,
	    marginBottom: props.floatingLabelText ? -36 : -12,
	    boxSizing: 'border-box',
	    font: 'inherit'
	  });

	  // Do not assign a height to the textarea as he handles it on his own.
	  styles.input.height = '100%';

	  if (state.isFocused) {
	    styles.floatingLabel.color = focusColor;
	  }

	  if (props.floatingLabelText) {
	    styles.input.boxSizing = 'border-box';

	    if (!props.multiLine) {
	      styles.input.marginTop = 14;
	    }

	    if (state.errorText) {
	      styles.error.bottom = !props.multiLine ? styles.error.fontSize + 3 : 3;
	    }
	  }

	  if (state.errorText) {
	    if (state.isFocused) {
	      styles.floatingLabel.color = styles.error.color;
	    }
	  }

	  return styles;
	};

	/**
	 * Check if a value is valid to be displayed inside an input.
	 *
	 * @param The value to check.
	 * @returns True if the string provided is valid, false otherwise.
	 */
	function isValid(value) {
	  return value !== '' && value !== undefined && value !== null;
	}

	var TextField = function (_Component) {
	  (0, _inherits3.default)(TextField, _Component);

	  function TextField() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TextField);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isFocused: false,
	      errorText: undefined,
	      hasValue: false
	    }, _this.handleInputBlur = function (event) {
	      _this.setState({ isFocused: false });
	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    }, _this.handleInputChange = function (event) {
	      _this.setState({ hasValue: isValid(event.target.value) });
	      if (_this.props.onChange) {
	        _this.props.onChange(event, event.target.value);
	      }
	    }, _this.handleInputFocus = function (event) {
	      if (_this.props.disabled) {
	        return;
	      }
	      _this.setState({ isFocused: true });
	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	    }, _this.handleHeightChange = function (event, height) {
	      var newHeight = height + 24;
	      if (_this.props.floatingLabelText) {
	        newHeight += 24;
	      }
	      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TextField, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          children = _props.children,
	          name = _props.name,
	          hintText = _props.hintText,
	          floatingLabelText = _props.floatingLabelText,
	          id = _props.id;

	      var propsLeaf = children ? children.props : this.props;

	      this.setState({
	        errorText: this.props.errorText,
	        hasValue: isValid(propsLeaf.value) || isValid(propsLeaf.defaultValue)
	      });

	      process.env.NODE_ENV !== "production" ? (0, _warning2.default)(name || hintText || floatingLabelText || id, 'Material-UI: We don\'t have enough information\n      to build a robust unique id for the TextField component. Please provide an id or a name.') : void 0;

	      var uniqueId = name + '-' + hintText + '-' + floatingLabelText + '-' + Math.floor(Math.random() * 0xFFFF);
	      this.uniqueId = uniqueId.replace(/[^A-Za-z0-9-]/gi, '');
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.errorText !== this.props.errorText) {
	        this.setState({
	          errorText: nextProps.errorText
	        });
	      }

	      if (nextProps.children && nextProps.children.props) {
	        nextProps = nextProps.children.props;
	      }

	      if (nextProps.hasOwnProperty('value')) {
	        var hasValue = isValid(nextProps.value);

	        this.setState({
	          hasValue: hasValue
	        });
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);
	    }
	  }, {
	    key: 'blur',
	    value: function blur() {
	      if (this.input) {
	        this.getInputNode().blur();
	      }
	    }
	  }, {
	    key: 'focus',
	    value: function focus() {
	      if (this.input) {
	        this.getInputNode().focus();
	      }
	    }
	  }, {
	    key: 'select',
	    value: function select() {
	      if (this.input) {
	        this.getInputNode().select();
	      }
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      return this.input ? this.getInputNode().value : undefined;
	    }
	  }, {
	    key: 'getInputNode',
	    value: function getInputNode() {
	      return this.props.children || this.props.multiLine ? this.input.getInputNode() : _reactDom2.default.findDOMNode(this.input);
	    }
	  }, {
	    key: '_isControlled',
	    value: function _isControlled() {
	      return this.props.hasOwnProperty('value');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props2 = this.props,
	          children = _props2.children,
	          className = _props2.className,
	          disabled = _props2.disabled,
	          errorStyle = _props2.errorStyle,
	          errorText = _props2.errorText,
	          floatingLabelFixed = _props2.floatingLabelFixed,
	          floatingLabelFocusStyle = _props2.floatingLabelFocusStyle,
	          floatingLabelShrinkStyle = _props2.floatingLabelShrinkStyle,
	          floatingLabelStyle = _props2.floatingLabelStyle,
	          floatingLabelText = _props2.floatingLabelText,
	          fullWidth = _props2.fullWidth,
	          hintText = _props2.hintText,
	          hintStyle = _props2.hintStyle,
	          id = _props2.id,
	          inputStyle = _props2.inputStyle,
	          multiLine = _props2.multiLine,
	          onBlur = _props2.onBlur,
	          onChange = _props2.onChange,
	          onFocus = _props2.onFocus,
	          style = _props2.style,
	          type = _props2.type,
	          underlineDisabledStyle = _props2.underlineDisabledStyle,
	          underlineFocusStyle = _props2.underlineFocusStyle,
	          underlineShow = _props2.underlineShow,
	          underlineStyle = _props2.underlineStyle,
	          rows = _props2.rows,
	          rowsMax = _props2.rowsMax,
	          textareaStyle = _props2.textareaStyle,
	          other = (0, _objectWithoutProperties3.default)(_props2, ['children', 'className', 'disabled', 'errorStyle', 'errorText', 'floatingLabelFixed', 'floatingLabelFocusStyle', 'floatingLabelShrinkStyle', 'floatingLabelStyle', 'floatingLabelText', 'fullWidth', 'hintText', 'hintStyle', 'id', 'inputStyle', 'multiLine', 'onBlur', 'onChange', 'onFocus', 'style', 'type', 'underlineDisabledStyle', 'underlineFocusStyle', 'underlineShow', 'underlineStyle', 'rows', 'rowsMax', 'textareaStyle']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);
	      var inputId = id || this.uniqueId;

	      var errorTextElement = this.state.errorText && _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)(styles.error, errorStyle)) }, this.state.errorText);

	      var floatingLabelTextElement = floatingLabelText && _react2.default.createElement(_TextFieldLabel2.default, {
	        muiTheme: this.context.muiTheme,
	        style: (0, _simpleAssign2.default)(styles.floatingLabel, floatingLabelStyle, this.state.isFocused ? floatingLabelFocusStyle : null),
	        shrinkStyle: floatingLabelShrinkStyle,
	        htmlFor: inputId,
	        shrink: this.state.hasValue || this.state.isFocused || floatingLabelFixed,
	        disabled: disabled
	      }, floatingLabelText);

	      var inputProps = {
	        id: inputId,
	        ref: function ref(elem) {
	          return _this2.input = elem;
	        },
	        disabled: this.props.disabled,
	        onBlur: this.handleInputBlur,
	        onChange: this.handleInputChange,
	        onFocus: this.handleInputFocus
	      };

	      var childStyleMerged = (0, _simpleAssign2.default)(styles.input, inputStyle);

	      var inputElement = void 0;
	      if (children) {
	        inputElement = _react2.default.cloneElement(children, (0, _extends3.default)({}, inputProps, children.props, {
	          style: (0, _simpleAssign2.default)(childStyleMerged, children.props.style)
	        }));
	      } else {
	        inputElement = multiLine ? _react2.default.createElement(_EnhancedTextarea2.default, (0, _extends3.default)({
	          style: childStyleMerged,
	          textareaStyle: (0, _simpleAssign2.default)(styles.textarea, styles.inputNative, textareaStyle),
	          rows: rows,
	          rowsMax: rowsMax
	        }, other, inputProps, {
	          onHeightChange: this.handleHeightChange
	        })) : _react2.default.createElement('input', (0, _extends3.default)({
	          type: type,
	          style: prepareStyles((0, _simpleAssign2.default)(styles.inputNative, childStyleMerged))
	        }, other, inputProps));
	      }

	      var rootProps = {};

	      if (children) {
	        rootProps = other;
	      }

	      return _react2.default.createElement('div', (0, _extends3.default)({}, rootProps, {
	        className: className,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	      }), floatingLabelTextElement, hintText ? _react2.default.createElement(_TextFieldHint2.default, {
	        muiTheme: this.context.muiTheme,
	        show: !(this.state.hasValue || floatingLabelText && !this.state.isFocused) || !this.state.hasValue && floatingLabelText && floatingLabelFixed && !this.state.isFocused,
	        style: hintStyle,
	        text: hintText
	      }) : null, inputElement, underlineShow ? _react2.default.createElement(_TextFieldUnderline2.default, {
	        disabled: disabled,
	        disabledStyle: underlineDisabledStyle,
	        error: !!this.state.errorText,
	        errorStyle: errorStyle,
	        focus: this.state.isFocused,
	        focusStyle: underlineFocusStyle,
	        muiTheme: this.context.muiTheme,
	        style: underlineStyle
	      }) : null, errorTextElement);
	    }
	  }]);
	  return TextField;
	}(_react.Component);

	TextField.defaultProps = {
	  disabled: false,
	  floatingLabelFixed: false,
	  multiLine: false,
	  fullWidth: false,
	  type: 'text',
	  underlineShow: true,
	  rows: 1
	};
	TextField.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? TextField.propTypes = {
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * The text string to use for the default value.
	   */
	  defaultValue: _react.PropTypes.any,
	  /**
	   * Disables the text field if set to true.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * The style object to use to override error styles.
	   */
	  errorStyle: _react.PropTypes.object,
	  /**
	   * The error content to display.
	   */
	  errorText: _react.PropTypes.node,
	  /**
	   * If true, the floating label will float even when there is no value.
	   */
	  floatingLabelFixed: _react.PropTypes.bool,
	  /**
	   * The style object to use to override floating label styles when focused.
	   */
	  floatingLabelFocusStyle: _react.PropTypes.object,
	  /**
	   * The style object to use to override floating label styles when shrunk.
	   */
	  floatingLabelShrinkStyle: _react.PropTypes.object,
	  /**
	   * The style object to use to override floating label styles.
	   */
	  floatingLabelStyle: _react.PropTypes.object,
	  /**
	   * The content to use for the floating label element.
	   */
	  floatingLabelText: _react.PropTypes.node,
	  /**
	   * If true, the field receives the property width 100%.
	   */
	  fullWidth: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the TextField's hint text element.
	   */
	  hintStyle: _react.PropTypes.object,
	  /**
	   * The hint content to display.
	   */
	  hintText: _react.PropTypes.node,
	  /**
	   * The id prop for the text field.
	   */
	  id: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the TextField's input element.
	   * When multiLine is false: define the style of the input element.
	   * When multiLine is true: define the style of the container of the textarea.
	   */
	  inputStyle: _react.PropTypes.object,
	  /**
	   * If true, a textarea element will be rendered.
	   * The textarea also grows and shrinks according to the number of lines.
	   */
	  multiLine: _react.PropTypes.bool,
	  /**
	   * Name applied to the input.
	   */
	  name: _react.PropTypes.string,
	  /** @ignore */
	  onBlur: _react.PropTypes.func,
	  /**
	   * Callback function that is fired when the textfield's value changes.
	   *
	   * @param {object} event Change event targeting the text field.
	   * @param {string} newValue The new value of the text field.
	   */
	  onChange: _react.PropTypes.func,
	  /** @ignore */
	  onFocus: _react.PropTypes.func,
	  /**
	   * Number of rows to display when multiLine option is set to true.
	   */
	  rows: _react.PropTypes.number,
	  /**
	   * Maximum number of rows to display when
	   * multiLine option is set to true.
	   */
	  rowsMax: _react.PropTypes.number,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the TextField's textarea element.
	   * The TextField use either a textarea or an input,
	   * this property has effects only when multiLine is true.
	   */
	  textareaStyle: _react.PropTypes.object,
	  /**
	   * Specifies the type of input to display
	   * such as "password" or "text".
	   */
	  type: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the
	   * TextField's underline element when disabled.
	   */
	  underlineDisabledStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the TextField's
	   * underline element when focussed.
	   */
	  underlineFocusStyle: _react.PropTypes.object,
	  /**
	   * If true, shows the underline for the text field.
	   */
	  underlineShow: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the TextField's underline element.
	   */
	  underlineStyle: _react.PropTypes.object,
	  /**
	   * The value of the text field.
	   */
	  value: _react.PropTypes.any
	} : void 0;
	exports.default = TextField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 916 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactEventListener = __webpack_require__(398);

	var _reactEventListener2 = _interopRequireDefault(_reactEventListener);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var rowsHeight = 24;

	function getStyles(props, context, state) {
	  return {
	    root: {
	      position: 'relative' },
	    textarea: {
	      height: state.height,
	      width: '100%',
	      resize: 'none',
	      font: 'inherit',
	      padding: 0,
	      cursor: 'inherit'
	    },
	    shadow: {
	      resize: 'none',
	      // Overflow also needed to here to remove the extra row
	      // added to textareas in Firefox.
	      overflow: 'hidden',
	      // Visibility needed to hide the extra text area on ipads
	      visibility: 'hidden',
	      position: 'absolute',
	      height: 'initial'
	    }
	  };
	}

	var EnhancedTextarea = function (_Component) {
	  (0, _inherits3.default)(EnhancedTextarea, _Component);

	  function EnhancedTextarea() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, EnhancedTextarea);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = EnhancedTextarea.__proto__ || (0, _getPrototypeOf2.default)(EnhancedTextarea)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      height: null
	    }, _this.handleResize = function (event) {
	      _this.syncHeightWithShadow(undefined, event);
	    }, _this.handleChange = function (event) {
	      _this.syncHeightWithShadow(event.target.value);

	      if (_this.props.hasOwnProperty('valueLink')) {
	        _this.props.valueLink.requestChange(event.target.value);
	      }

	      if (_this.props.onChange) {
	        _this.props.onChange(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(EnhancedTextarea, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setState({
	        height: this.props.rows * rowsHeight
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.syncHeightWithShadow();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.value !== this.props.value) {
	        this.syncHeightWithShadow(nextProps.value);
	      }
	    }
	  }, {
	    key: 'getInputNode',
	    value: function getInputNode() {
	      return this.refs.input;
	    }
	  }, {
	    key: 'setValue',
	    value: function setValue(value) {
	      this.getInputNode().value = value;
	      this.syncHeightWithShadow(value);
	    }
	  }, {
	    key: 'syncHeightWithShadow',
	    value: function syncHeightWithShadow(newValue, event) {
	      var shadow = this.refs.shadow;

	      if (newValue !== undefined) {
	        shadow.value = newValue;
	      }

	      var newHeight = shadow.scrollHeight;

	      // Guarding for jsdom, where scrollHeight isn't present.
	      // See https://github.com/tmpvar/jsdom/issues/1013
	      if (newHeight === undefined) return;

	      if (this.props.rowsMax >= this.props.rows) {
	        newHeight = Math.min(this.props.rowsMax * rowsHeight, newHeight);
	      }

	      newHeight = Math.max(newHeight, rowsHeight);

	      if (this.state.height !== newHeight) {
	        this.setState({
	          height: newHeight
	        });

	        if (this.props.onHeightChange) {
	          this.props.onHeightChange(event, newHeight);
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          onChange = _props.onChange,
	          onHeightChange = _props.onHeightChange,
	          rows = _props.rows,
	          rowsMax = _props.rowsMax,
	          shadowStyle = _props.shadowStyle,
	          style = _props.style,
	          textareaStyle = _props.textareaStyle,
	          valueLink = _props.valueLink,
	          other = (0, _objectWithoutProperties3.default)(_props, ['onChange', 'onHeightChange', 'rows', 'rowsMax', 'shadowStyle', 'style', 'textareaStyle', 'valueLink']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);
	      var rootStyles = (0, _simpleAssign2.default)(styles.root, style);
	      var textareaStyles = (0, _simpleAssign2.default)(styles.textarea, textareaStyle);
	      var shadowStyles = (0, _simpleAssign2.default)({}, textareaStyles, styles.shadow, shadowStyle);

	      if (this.props.hasOwnProperty('valueLink')) {
	        other.value = this.props.valueLink.value;
	      }

	      return _react2.default.createElement('div', { style: prepareStyles(rootStyles) }, _react2.default.createElement(_reactEventListener2.default, { target: 'window', onResize: this.handleResize }), _react2.default.createElement('textarea', {
	        ref: 'shadow',
	        style: prepareStyles(shadowStyles),
	        tabIndex: '-1',
	        rows: this.props.rows,
	        defaultValue: this.props.defaultValue,
	        readOnly: true,
	        value: this.props.value,
	        valueLink: this.props.valueLink
	      }), _react2.default.createElement('textarea', (0, _extends3.default)({}, other, {
	        ref: 'input',
	        rows: this.props.rows,
	        style: prepareStyles(textareaStyles),
	        onChange: this.handleChange
	      })));
	    }
	  }]);
	  return EnhancedTextarea;
	}(_react.Component);

	EnhancedTextarea.defaultProps = {
	  rows: 1
	};
	EnhancedTextarea.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? EnhancedTextarea.propTypes = {
	  defaultValue: _react.PropTypes.any,
	  disabled: _react.PropTypes.bool,
	  onChange: _react.PropTypes.func,
	  onHeightChange: _react.PropTypes.func,
	  rows: _react.PropTypes.number,
	  rowsMax: _react.PropTypes.number,
	  shadowStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  textareaStyle: _react.PropTypes.object,
	  value: _react.PropTypes.string,
	  valueLink: _react.PropTypes.object
	} : void 0;
	exports.default = EnhancedTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 917 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props) {
	  var hintColor = props.muiTheme.textField.hintColor,
	      show = props.show;

	  return {
	    root: {
	      position: 'absolute',
	      opacity: show ? 1 : 0,
	      color: hintColor,
	      transition: _transitions2.default.easeOut(),
	      bottom: 12
	    }
	  };
	}

	var TextFieldHint = function TextFieldHint(props) {
	  var prepareStyles = props.muiTheme.prepareStyles,
	      style = props.style,
	      text = props.text;

	  var styles = getStyles(props);

	  return _react2.default.createElement('div', { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }, text);
	};

	process.env.NODE_ENV !== "production" ? TextFieldHint.propTypes = {
	  /**
	   * @ignore
	   * The material-ui theme applied to this component.
	   */
	  muiTheme: _react.PropTypes.object.isRequired,
	  /**
	   * True if the hint text should be visible.
	   */
	  show: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The hint text displayed.
	   */
	  text: _react.PropTypes.node
	} : void 0;

	TextFieldHint.defaultProps = {
	  show: true
	};

	exports.default = TextFieldHint;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 918 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props) {
	  var defaultStyles = {
	    position: 'absolute',
	    lineHeight: '22px',
	    top: 38,
	    transition: _transitions2.default.easeOut(),
	    zIndex: 1, // Needed to display label above Chrome's autocomplete field background
	    transform: 'scale(1) translate(0, 0)',
	    transformOrigin: 'left top',
	    pointerEvents: 'auto',
	    userSelect: 'none'
	  };

	  var shrinkStyles = props.shrink ? (0, _simpleAssign2.default)({
	    transform: 'scale(0.75) translate(0, -28px)',
	    pointerEvents: 'none'
	  }, props.shrinkStyle) : null;

	  return {
	    root: (0, _simpleAssign2.default)(defaultStyles, props.style, shrinkStyles)
	  };
	}

	var TextFieldLabel = function TextFieldLabel(props) {
	  var muiTheme = props.muiTheme,
	      className = props.className,
	      children = props.children,
	      htmlFor = props.htmlFor,
	      onTouchTap = props.onTouchTap;
	  var prepareStyles = muiTheme.prepareStyles;

	  var styles = getStyles(props);

	  return _react2.default.createElement('label', {
	    className: className,
	    style: prepareStyles(styles.root),
	    htmlFor: htmlFor,
	    onTouchTap: onTouchTap
	  }, children);
	};

	process.env.NODE_ENV !== "production" ? TextFieldLabel.propTypes = {
	  /**
	   * The label contents.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * The css class name of the root element.
	   */
	  className: _react.PropTypes.string,
	  /**
	   * Disables the label if set to true.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * The id of the target element that this label should refer to.
	   */
	  htmlFor: _react.PropTypes.string,
	  /**
	   * @ignore
	   * The material-ui theme applied to this component.
	   */
	  muiTheme: _react.PropTypes.object.isRequired,
	  /**
	   * Callback function for when the label is selected via a touch tap.
	   *
	   * @param {object} event TouchTap event targeting the text field label.
	   */
	  onTouchTap: _react.PropTypes.func,
	  /**
	   * True if the floating label should shrink.
	   */
	  shrink: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the root element when shrunk.
	   */
	  shrinkStyle: _react.PropTypes.object,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;

	TextFieldLabel.defaultProps = {
	  disabled: false,
	  shrink: false
	};

	exports.default = TextFieldLabel;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 919 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _transitions = __webpack_require__(338);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var propTypes = {
	  /**
	   * True if the parent `TextField` is disabled.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the underline when parent `TextField` is disabled.
	   */
	  disabledStyle: _react.PropTypes.object,
	  /**
	   * True if the parent `TextField` has an error.
	   */
	  error: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the underline when parent `TextField` has an error.
	   */
	  errorStyle: _react.PropTypes.object,
	  /**
	   * True if the parent `TextField` is focused.
	   */
	  focus: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the underline when parent `TextField` is focused.
	   */
	  focusStyle: _react.PropTypes.object,
	  /**
	   * @ignore
	   * The material-ui theme applied to this component.
	   */
	  muiTheme: _react.PropTypes.object.isRequired,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	};

	var defaultProps = {
	  disabled: false,
	  disabledStyle: {},
	  error: false,
	  errorStyle: {},
	  focus: false,
	  focusStyle: {},
	  style: {}
	};

	var TextFieldUnderline = function TextFieldUnderline(props) {
	  var disabled = props.disabled,
	      disabledStyle = props.disabledStyle,
	      error = props.error,
	      errorStyle = props.errorStyle,
	      focus = props.focus,
	      focusStyle = props.focusStyle,
	      muiTheme = props.muiTheme,
	      style = props.style;
	  var errorStyleColor = errorStyle.color;
	  var prepareStyles = muiTheme.prepareStyles,
	      _muiTheme$textField = muiTheme.textField,
	      borderColor = _muiTheme$textField.borderColor,
	      disabledTextColor = _muiTheme$textField.disabledTextColor,
	      errorColor = _muiTheme$textField.errorColor,
	      focusColor = _muiTheme$textField.focusColor;

	  var styles = {
	    root: {
	      borderTop: 'none',
	      borderLeft: 'none',
	      borderRight: 'none',
	      borderBottom: 'solid 1px',
	      borderColor: borderColor,
	      bottom: 8,
	      boxSizing: 'content-box',
	      margin: 0,
	      position: 'absolute',
	      width: '100%'
	    },
	    disabled: {
	      borderBottom: 'dotted 2px',
	      borderColor: disabledTextColor
	    },
	    focus: {
	      borderBottom: 'solid 2px',
	      borderColor: focusColor,
	      transform: 'scaleX(0)',
	      transition: _transitions2.default.easeOut()
	    },
	    error: {
	      borderColor: errorStyleColor ? errorStyleColor : errorColor,
	      transform: 'scaleX(1)'
	    }
	  };

	  var underline = (0, _simpleAssign2.default)({}, styles.root, style);
	  var focusedUnderline = (0, _simpleAssign2.default)({}, underline, styles.focus, focusStyle);

	  if (disabled) underline = (0, _simpleAssign2.default)({}, underline, styles.disabled, disabledStyle);
	  if (focus) focusedUnderline = (0, _simpleAssign2.default)({}, focusedUnderline, { transform: 'scaleX(1)' });
	  if (error) focusedUnderline = (0, _simpleAssign2.default)({}, focusedUnderline, styles.error);

	  return _react2.default.createElement('div', null, _react2.default.createElement('hr', { style: prepareStyles(underline) }), _react2.default.createElement('hr', { style: prepareStyles(focusedUnderline) }));
	};

	process.env.NODE_ENV !== "production" ? TextFieldUnderline.propTypes = propTypes : void 0;
	TextFieldUnderline.defaultProps = defaultProps;

	exports.default = TextFieldUnderline;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 920 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Table = __webpack_require__(897);

	var _TextField = __webpack_require__(914);

	var _TextField2 = _interopRequireDefault(_TextField);

	var _Toggle = __webpack_require__(436);

	var _Toggle2 = _interopRequireDefault(_Toggle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var styles = {
	  propContainer: {
	    width: 200,
	    overflow: 'hidden',
	    margin: '20px auto 0'
	  },
	  propToggleHeader: {
	    margin: '20px auto 10px'
	  }
	};

	var tableData = [{
	  index: 'WE',
	  name: '03/01',
	  status: '25~46'

	}, {
	  index: 'THU',
	  name: '03/02',
	  status: '27~55'

	}, {
	  index: 'FRI',
	  name: '03/03',
	  status: '27~55'

	}];

	var TableExample = function (_React$Component) {
	  _inherits(TableExample, _React$Component);

	  function TableExample(props) {
	    _classCallCheck(this, TableExample);

	    var _this = _possibleConstructorReturn(this, (TableExample.__proto__ || Object.getPrototypeOf(TableExample)).call(this, props));

	    _this.state = {
	      fixedHeader: false,
	      fixedFooter: false,
	      stripedRows: false,
	      showRowHover: false,
	      selectable: false,
	      multiSelectable: false,
	      enableSelectAll: false,
	      deselectOnClickaway: false,
	      height: '200px'

	    };
	    return _this;
	  }

	  _createClass(TableExample, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _Table.Table,
	          {
	            height: this.state.height
	          },
	          _react2.default.createElement(
	            _Table.TableBody,
	            {
	              displayRowCheckbox: false },
	            tableData.map(function (row, index) {
	              return _react2.default.createElement(
	                _Table.TableRow,
	                {
	                  selectable: false },
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  null,
	                  _react2.default.createElement(
	                    'strong',
	                    null,
	                    row.index
	                  )
	                ),
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  { style: { color: 'gray', width: '40' } },
	                  row.name
	                ),
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  null,
	                  _react2.default.createElement('img', { src: 'img/d.jpg', width: '20px', height: '20px' })
	                ),
	                _react2.default.createElement(
	                  _Table.TableRowColumn,
	                  { style: { color: 'gray', width: '40' } },
	                  row.status
	                )
	              );
	            })
	          )
	        )
	      );
	    }
	  }]);

	  return TableExample;
	}(_react2.default.Component);

	exports.default = TableExample;

/***/ },
/* 921 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _Card = __webpack_require__(381);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _Chip = __webpack_require__(922);

	var _Chip2 = _interopRequireDefault(_Chip);

	var _FontIcon = __webpack_require__(364);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _face = __webpack_require__(925);

	var _face2 = _interopRequireDefault(_face);

	var _colors = __webpack_require__(237);

	var _Wind = __webpack_require__(926);

	var _Wind2 = _interopRequireDefault(_Wind);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = {
	  chip: {
	    margin: 4
	  },
	  wrapper: {
	    display: 'flex',
	    flexWrap: 'wrap'
	  }
	};

	var names = [3, 2, 2, 2, 2];

	var Cardcc = function Cardcc() {
	  return _react2.default.createElement(
	    _MuiThemeProvider2.default,
	    { muiTheme: (0, _getMuiTheme2.default)() },
	    _react2.default.createElement(
	      _Card.Card,
	      null,
	      _react2.default.createElement(_Card.CardTitle, { title: 'Wind ' }),
	      _react2.default.createElement(
	        _Card.CardText,
	        null,
	        _react2.default.createElement(
	          'div',
	          { style: { marginLeft: 200, size: 20 } },
	          _react2.default.createElement(
	            'strong',
	            null,
	            'Light Wind'
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { style: { marginLeft: 220, color: 'gray' } },
	          'south'
	        )
	      ),
	      _react2.default.createElement(
	        _Card.CardActions,
	        null,
	        _react2.default.createElement(_Wind2.default, null)
	      )
	    )
	  );
	};

	exports.default = Cardcc;

/***/ },
/* 922 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Chip = __webpack_require__(923);

	var _Chip2 = _interopRequireDefault(_Chip);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Chip2.default;

/***/ },
/* 923 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(329);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(334);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(311);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(309);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(314);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(318);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(319);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(335);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _keycode = __webpack_require__(345);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _colorManipulator = __webpack_require__(235);

	var _EnhancedButton = __webpack_require__(340);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _cancel = __webpack_require__(924);

	var _cancel2 = _interopRequireDefault(_cancel);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function getStyles(props, context, state) {
	  var chip = context.muiTheme.chip;

	  var backgroundColor = props.backgroundColor || chip.backgroundColor;
	  var focusColor = (0, _colorManipulator.emphasize)(backgroundColor, 0.08);
	  var pressedColor = (0, _colorManipulator.emphasize)(backgroundColor, 0.12);

	  return {
	    avatar: {
	      marginRight: -4
	    },
	    deleteIcon: {
	      color: state.deleteHovered ? (0, _colorManipulator.fade)(chip.deleteIconColor, 0.4) : chip.deleteIconColor,
	      cursor: 'pointer',
	      margin: '4px 4px 0px -8px'
	    },
	    label: {
	      color: props.labelColor || chip.textColor,
	      fontSize: chip.fontSize,
	      fontWeight: chip.fontWeight,
	      lineHeight: '32px',
	      paddingLeft: 12,
	      paddingRight: 12,
	      userSelect: 'none',
	      whiteSpace: 'nowrap'
	    },
	    root: {
	      backgroundColor: state.clicked ? pressedColor : state.focused || state.hovered ? focusColor : backgroundColor,
	      borderRadius: 16,
	      boxShadow: state.clicked ? chip.shadow : null,
	      cursor: props.onTouchTap ? 'pointer' : 'default',
	      display: 'flex',
	      whiteSpace: 'nowrap',
	      width: 'fit-content'
	    }
	  };
	}

	var Chip = function (_Component) {
	  (0, _inherits3.default)(Chip, _Component);

	  function Chip() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Chip);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Chip.__proto__ || (0, _getPrototypeOf2.default)(Chip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      clicked: false,
	      deleteHovered: false,
	      focused: false,
	      hovered: false
	    }, _this.handleBlur = function (event) {
	      _this.setState({ clicked: false, focused: false });
	      _this.props.onBlur(event);
	    }, _this.handleFocus = function (event) {
	      if (_this.props.onTouchTap || _this.props.onRequestDelete) {
	        _this.setState({ focused: true });
	      }
	      _this.props.onFocus(event);
	    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
	      if (keyboardFocused) {
	        _this.handleFocus();
	        _this.props.onFocus(event);
	      } else {
	        _this.handleBlur();
	      }

	      _this.props.onKeyboardFocus(event, keyboardFocused);
	    }, _this.handleKeyDown = function (event) {
	      if ((0, _keycode2.default)(event) === 'backspace') {
	        event.preventDefault();
	        if (_this.props.onRequestDelete) {
	          _this.props.onRequestDelete(event);
	        }
	      }
	      _this.props.onKeyDown(event);
	    }, _this.handleMouseDown = function (event) {
	      // Only listen to left clicks
	      if (event.button === 0) {
	        event.stopPropagation();
	        if (_this.props.onTouchTap) {
	          _this.setState({ clicked: true });
	        }
	      }
	      _this.props.onMouseDown(event);
	    }, _this.handleMouseEnter = function (event) {
	      if (_this.props.onTouchTap) {
	        _this.setState({ hovered: true });
	      }
	      _this.props.onMouseEnter(event);
	    }, _this.handleMouseEnterDeleteIcon = function () {
	      _this.setState({ deleteHovered: true });
	    }, _this.handleMouseLeave = function (event) {
	      _this.setState({
	        clicked: false,
	        hovered: false
	      });
	      _this.props.onMouseLeave(event);
	    }, _this.handleMouseLeaveDeleteIcon = function () {
	      _this.setState({ deleteHovered: false });
	    }, _this.handleMouseUp = function (event) {
	      _this.setState({ clicked: false });
	      _this.props.onMouseUp(event);
	    }, _this.handleTouchTapDeleteIcon = function (event) {
	      // Stop the event from bubbling up to the `Chip`
	      event.stopPropagation();
	      _this.props.onRequestDelete(event);
	    }, _this.handleTouchEnd = function (event) {
	      _this.setState({ clicked: false });
	      _this.props.onTouchEnd(event);
	    }, _this.handleTouchStart = function (event) {
	      event.stopPropagation();
	      if (_this.props.onTouchTap) {
	        _this.setState({ clicked: true });
	      }
	      _this.props.onTouchStart(event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Chip, [{
	    key: 'render',
	    value: function render() {
	      var buttonEventHandlers = {
	        onBlur: this.handleBlur,
	        onFocus: this.handleFocus,
	        onKeyDown: this.handleKeyDown,
	        onMouseDown: this.handleMouseDown,
	        onMouseEnter: this.handleMouseEnter,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseUp: this.handleMouseUp,
	        onTouchEnd: this.handleTouchEnd,
	        onTouchStart: this.handleTouchStart,
	        onKeyboardFocus: this.handleKeyboardFocus
	      };

	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      var _props = this.props,
	          childrenProp = _props.children,
	          style = _props.style,
	          className = _props.className,
	          labelStyle = _props.labelStyle,
	          labelColor = _props.labelColor,
	          backgroundColor = _props.backgroundColor,
	          onRequestDelete = _props.onRequestDelete,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'style', 'className', 'labelStyle', 'labelColor', 'backgroundColor', 'onRequestDelete']);

	      var deletable = this.props.onRequestDelete;
	      var avatar = null;

	      var deleteIcon = deletable ? _react2.default.createElement(_cancel2.default, {
	        color: styles.deleteIcon.color,
	        style: styles.deleteIcon,
	        onTouchTap: this.handleTouchTapDeleteIcon,
	        onMouseEnter: this.handleMouseEnterDeleteIcon,
	        onMouseLeave: this.handleMouseLeaveDeleteIcon
	      }) : null;

	      var children = childrenProp;
	      var childCount = _react2.default.Children.count(children);

	      // If the first child is an avatar, extract it and style it
	      if (childCount > 1) {
	        children = _react2.default.Children.toArray(children);

	        if (_react2.default.isValidElement(children[0]) && children[0].type.muiName === 'Avatar') {
	          avatar = children.shift();

	          avatar = _react2.default.cloneElement(avatar, {
	            style: (0, _simpleAssign2.default)(styles.avatar, avatar.props.style),
	            size: 32
	          });
	        }
	      }

	      return _react2.default.createElement(_EnhancedButton2.default, (0, _extends3.default)({}, other, buttonEventHandlers, {
	        className: className,
	        containerElement: 'div' // Firefox doesn't support nested buttons
	        , disableTouchRipple: true,
	        disableFocusRipple: true,
	        style: (0, _simpleAssign2.default)(styles.root, style)
	      }), avatar, _react2.default.createElement('span', { style: prepareStyles((0, _simpleAssign2.default)(styles.label, labelStyle)) }, children), deleteIcon);
	    }
	  }]);
	  return Chip;
	}(_react.Component);

	Chip.defaultProps = {
	  onBlur: function onBlur() {},
	  onFocus: function onFocus() {},
	  onKeyDown: function onKeyDown() {},
	  onKeyboardFocus: function onKeyboardFocus() {},
	  onMouseDown: function onMouseDown() {},
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  onMouseUp: function onMouseUp() {},
	  onTouchEnd: function onTouchEnd() {},
	  onTouchStart: function onTouchStart() {}
	};
	Chip.contextTypes = { muiTheme: _react.PropTypes.object.isRequired };
	process.env.NODE_ENV !== "production" ? Chip.propTypes = {
	  /**
	   * Override the background color of the chip.
	   */
	  backgroundColor: _react.PropTypes.string,
	  /**
	   * Used to render elements inside the Chip.
	   */
	  children: _react.PropTypes.node,
	  /**
	   * CSS `className` of the root element.
	   */
	  className: _react.PropTypes.node,
	  /**
	   * Override the label color.
	   */
	  labelColor: _react.PropTypes.string,
	  /**
	   * Override the inline-styles of the label.
	   */
	  labelStyle: _react.PropTypes.object,
	  /** @ignore */
	  onBlur: _react.PropTypes.func,
	  /** @ignore */
	  onFocus: _react.PropTypes.func,
	  /** @ignore */
	  onKeyDown: _react.PropTypes.func,
	  /** @ignore */
	  onKeyboardFocus: _react.PropTypes.func,
	  /** @ignore */
	  onMouseDown: _react.PropTypes.func,
	  /** @ignore */
	  onMouseEnter: _react.PropTypes.func,
	  /** @ignore */
	  onMouseLeave: _react.PropTypes.func,
	  /** @ignore */
	  onMouseUp: _react.PropTypes.func,
	  /**
	   * Callback function fired when the delete icon is clicked. If set, the delete icon will be shown.
	   * @param {object} event `touchTap` event targeting the element.
	   */
	  onRequestDelete: _react.PropTypes.func,
	  /** @ignore */
	  onTouchEnd: _react.PropTypes.func,
	  /** @ignore */
	  onTouchStart: _react.PropTypes.func,
	  /**
	   * Callback function fired when the `Chip` element is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the element.
	   */
	  onTouchTap: _react.PropTypes.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = Chip;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 924 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var NavigationCancel = function NavigationCancel(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z' }));
	};
	NavigationCancel = (0, _pure2.default)(NavigationCancel);
	NavigationCancel.displayName = 'NavigationCancel';
	NavigationCancel.muiName = 'SvgIcon';

	exports.default = NavigationCancel;

/***/ },
/* 925 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(368);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var ActionFace = function ActionFace(props) {
	  return _react2.default.createElement(_SvgIcon2.default, props, _react2.default.createElement('path', { d: 'M9 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zm6 0c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8 0-.29.02-.58.05-.86 2.36-1.05 4.23-2.98 5.21-5.37C11.07 8.33 14.05 10 17.42 10c.78 0 1.53-.09 2.25-.26.21.71.33 1.47.33 2.26 0 4.41-3.59 8-8 8z' }));
	};
	ActionFace = (0, _pure2.default)(ActionFace);
	ActionFace.displayName = 'ActionFace';
	ActionFace.muiName = 'SvgIcon';

	exports.default = ActionFace;

/***/ },
/* 926 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _close = __webpack_require__(440);

	var _close2 = _interopRequireDefault(_close);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _Card = __webpack_require__(381);

	var _Speed = __webpack_require__(927);

	var _Speed2 = _interopRequireDefault(_Speed);

	var _SimpleChart = __webpack_require__(928);

	var _SimpleChart2 = _interopRequireDefault(_SimpleChart);

	var _Dateaa = __webpack_require__(913);

	var _Dateaa2 = _interopRequireDefault(_Dateaa);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Wind = function (_React$Component) {
	  _inherits(Wind, _React$Component);

	  function Wind(props) {
	    _classCallCheck(this, Wind);

	    var _this = _possibleConstructorReturn(this, (Wind.__proto__ || Object.getPrototypeOf(Wind)).call(this, props));

	    _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    };

	    _this.handleClose = function () {
	      return _this.setState({ open: false });
	    };

	    _this.state = { open: false };
	    return _this;
	  }

	  _createClass(Wind, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_FlatButton2.default, {
	          label: 'More',
	          onTouchTap: this.handleToggle
	        }),
	        _react2.default.createElement(
	          _Drawer2.default,
	          { width: 380, openSecondary: true, open: this.state.open },
	          _react2.default.createElement(_AppBar2.default, {
	            title: 'Wind',
	            iconElementLeft: _react2.default.createElement(
	              _IconButton2.default,
	              { onTouchTap: this.handleClose },
	              _react2.default.createElement(_close2.default, null)
	            ) }),
	          _react2.default.createElement(
	            _Card.Card,
	            { style: { margin: 15 } },
	            _react2.default.createElement(
	              _Card.CardText,
	              null,
	              _react2.default.createElement(_Speed2.default, null)
	            )
	          ),
	          _react2.default.createElement(
	            _Card.Card,
	            { style: { margin: 15 } },
	            _react2.default.createElement(_Card.CardTitle, { title: 'Hourly Wind Speed(m/s)' }),
	            _react2.default.createElement(
	              _Card.CardText,
	              null,
	              _react2.default.createElement(_SimpleChart2.default, null)
	            )
	          ),
	          _react2.default.createElement(
	            _Card.Card,
	            { style: { margin: 15 } },
	            _react2.default.createElement(_Card.CardTitle, { title: 'Daily Forecast' }),
	            _react2.default.createElement(
	              _Card.CardText,
	              null,
	              _react2.default.createElement(_Dateaa2.default, null)
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Wind;
	}(_react2.default.Component);

	exports.default = Wind;

/***/ },
/* 927 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echartsForReact = __webpack_require__(499);

	var _echartsForReact2 = _interopRequireDefault(_echartsForReact);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Speed = _react2.default.createClass({
	    displayName: 'Speed',


	    getOtion: function getOtion() {
	        var option = {

	            series: [{

	                type: 'gauge',
	                detail: { formatter: '{value}m/s' },
	                data: [{ value: 30 }],

	                radius: '85%',
	                axisTick: {
	                    show: 'false',
	                    length: '0'
	                },
	                axisLable: {
	                    distance: '3'
	                }
	            }]

	        };
	        setInterval(function () {
	            option.series[0].data[0].value = (Math.random() * 100).toFixed(2) - 0;
	            myChart.setOption(option, true);
	        }, 2000);

	        return option;
	    },

	    render: function render() {

	        return _react2.default.createElement(
	            'div',
	            { className: 'examples', style: { marginLeft: '80' } },
	            _react2.default.createElement(
	                'div',
	                { className: 'parent' },
	                _react2.default.createElement(
	                    'h3',
	                    null,
	                    'Speed'
	                ),
	                _react2.default.createElement(_echartsForReact2.default, {
	                    option: this.getOtion(),
	                    style: { width: 200, height: 250, marginTop: '5px', marginRight: '50px', size: '5px' }

	                })
	            )
	        );
	    }
	});

	exports.default = Speed;

/***/ },
/* 928 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echartsForReact = __webpack_require__(499);

	var _echartsForReact2 = _interopRequireDefault(_echartsForReact);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var SimpleChartComponent = _react2.default.createClass({
	    displayName: 'SimpleChartComponent',

	    propTypes: {},
	    getOtion: function getOtion() {
	        var option = {
	            grid: {
	                left: '3%',
	                right: '4%',
	                bottom: '3%',
	                containLabel: true
	            },
	            xAxis: [{
	                type: 'category',
	                boundaryGap: false,
	                data: ['14', '15', '16', '17', '18']
	            }],
	            yAxis: [{
	                type: 'value'
	            }],
	            color: ['lightblue'],
	            series: [{
	                name: '视频广告',
	                type: 'line',
	                stack: '总量',
	                areaStyle: { normal: {} },
	                data: [3, 4, 5, 6, 4]
	            }]
	        };
	        return option;
	    },
	    render: function render() {

	        return _react2.default.createElement(
	            'div',
	            { className: 'examples' },
	            _react2.default.createElement(
	                'div',
	                { className: 'parent' },
	                _react2.default.createElement(_echartsForReact2.default, {
	                    option: this.getOtion(),
	                    style: { height: '150px', width: '100%' },
	                    className: 'react_for_echarts' })
	            )
	        );
	    }
	});

	exports.default = SimpleChartComponent;

/***/ },
/* 929 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _Card = __webpack_require__(381);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _Sun = __webpack_require__(930);

	var _Sun2 = _interopRequireDefault(_Sun);

	var _ChartWithEventComponent = __webpack_require__(931);

	var _ChartWithEventComponent2 = _interopRequireDefault(_ChartWithEventComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Carddd = function Carddd() {
	  return _react2.default.createElement(
	    _MuiThemeProvider2.default,
	    { muiTheme: (0, _getMuiTheme2.default)() },
	    _react2.default.createElement(
	      _Card.Card,
	      null,
	      _react2.default.createElement(_Card.CardTitle, { title: 'Sun&Moon' }),
	      _react2.default.createElement(
	        _Card.CardText,
	        null,
	        _react2.default.createElement(_ChartWithEventComponent2.default, null),
	        _react2.default.createElement(
	          'p',
	          null,
	          'Sunrise'
	        ),
	        _react2.default.createElement(
	          'p',
	          null,
	          'Sunset'
	        )
	      ),
	      _react2.default.createElement(
	        _Card.CardActions,
	        null,
	        _react2.default.createElement(_Sun2.default, null)
	      )
	    )
	  );
	};

	exports.default = Carddd;

/***/ },
/* 930 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _close = __webpack_require__(440);

	var _close2 = _interopRequireDefault(_close);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _Card = __webpack_require__(381);

	var _TableExample = __webpack_require__(920);

	var _TableExample2 = _interopRequireDefault(_TableExample);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Sun = function (_React$Component) {
	  _inherits(Sun, _React$Component);

	  function Sun(props) {
	    _classCallCheck(this, Sun);

	    var _this = _possibleConstructorReturn(this, (Sun.__proto__ || Object.getPrototypeOf(Sun)).call(this, props));

	    _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    };

	    _this.handleClose = function () {
	      return _this.setState({ open: false });
	    };

	    _this.state = { open: false };
	    return _this;
	  }

	  _createClass(Sun, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_FlatButton2.default, {
	          label: 'More',
	          onTouchTap: this.handleToggle
	        }),
	        _react2.default.createElement(
	          _Drawer2.default,
	          { width: 380, openSecondary: true, open: this.state.open },
	          _react2.default.createElement(_AppBar2.default, {
	            title: 'Sun & Moon',
	            iconElementLeft: _react2.default.createElement(
	              _IconButton2.default,
	              { onTouchTap: this.handleClose },
	              _react2.default.createElement(_close2.default, null)
	            ) }),
	          _react2.default.createElement(
	            _Card.Card,
	            { style: { margin: 15 } },
	            _react2.default.createElement(_Card.CardTitle, { title: 'Lunar Phase' }),
	            _react2.default.createElement(
	              _Card.CardText,
	              null,
	              'dfdfdfd'
	            )
	          ),
	          _react2.default.createElement(
	            _Card.Card,
	            { style: { margin: 15 } },
	            _react2.default.createElement(_Card.CardTitle, { title: 'Daily Forecast' }),
	            _react2.default.createElement(
	              _Card.CardText,
	              null,
	              _react2.default.createElement(_TableExample2.default, null)
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Sun;
	}(_react2.default.Component);

	exports.default = Sun;

/***/ },
/* 931 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echartsForReact = __webpack_require__(499);

	var _echartsForReact2 = _interopRequireDefault(_echartsForReact);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ChartWithEventComponent = _react2.default.createClass({
	    displayName: 'ChartWithEventComponent',


	    getOtion: function getOtion() {
	        var option = {
	            series: [{
	                name: '访问来源',
	                type: 'pie',
	                radius: ['50%', '70%'],

	                label: {
	                    normal: {
	                        show: false,
	                        position: 'center'
	                    }

	                },

	                data: [{ value: 335, name: 'day' }, { value: 310, name: 'night' }],
	                color: ['#4F94CD', '#FFC125']

	            }]
	        };
	        return option;
	    },

	    get: function get() {
	        var option = {
	            series: [{
	                name: '访问来源',
	                type: 'pie',
	                radius: ['50%', '70%'],

	                label: {
	                    normal: {
	                        show: false,
	                        position: 'center'
	                    }

	                },

	                data: [{ value: 335, name: 'day' }, { value: 310, name: 'night' }],
	                color: ['#87CEFA', '#EEDC82']
	            }]
	        };
	        return option;
	    },

	    bing: function bing() {
	        var option = {

	            series: [{
	                name: '访问来源',
	                type: 'pie',
	                radius: '55%',
	                center: ['50%', '60%'],
	                data: [{ value: 335, name: '18' }, { value: 310, name: '6' }],
	                color: ['#B2DFEE', '#EEEED1'],
	                itemStyle: {
	                    emphasis: {
	                        shadowBlur: 10,
	                        shadowOffsetX: 0,
	                        shadowColor: 'rgba(0, 0, 0, 0.5)'
	                    }
	                }
	            }]
	        };
	        return option;
	    },
	    render: function render() {

	        return _react2.default.createElement(
	            'div',
	            { className: 'examples' },
	            _react2.default.createElement(
	                'div',
	                { className: 'parent' },
	                _react2.default.createElement(_echartsForReact2.default, {
	                    option: this.getOtion(),
	                    style: { height: 250, marginTop: '5px' }

	                }),
	                _react2.default.createElement(_echartsForReact2.default, {
	                    option: this.get(),
	                    style: { height: 200, marginTop: '-220px' }

	                }),
	                _react2.default.createElement(_echartsForReact2.default, {
	                    option: this.bing(),
	                    style: { height: 180, marginTop: '-208px' }

	                })
	            )
	        );
	    }
	});

	exports.default = ChartWithEventComponent;

/***/ },
/* 932 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _getMuiTheme = __webpack_require__(178);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	var _MuiThemeProvider = __webpack_require__(310);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	var _Card = __webpack_require__(381);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _Weather = __webpack_require__(933);

	var _Weather2 = _interopRequireDefault(_Weather);

	var _colors = __webpack_require__(237);

	var _SvgIcon = __webpack_require__(377);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var iconStyles = {
	  marginLeft: 50,
	  width: 50
	};

	var HomeIcon = function HomeIcon(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _react2.default.createElement('path', { d: 'M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z' })
	  );
	};

	var Cardee = function Cardee() {
	  return _react2.default.createElement(
	    _MuiThemeProvider2.default,
	    { muiTheme: (0, _getMuiTheme2.default)() },
	    _react2.default.createElement(
	      _Card.Card,
	      null,
	      _react2.default.createElement(_Card.CardTitle, { title: 'Tips' }),
	      _react2.default.createElement(
	        _Card.CardText,
	        null,
	        _react2.default.createElement(HomeIcon, { style: iconStyles }),
	        _react2.default.createElement(HomeIcon, { style: iconStyles, color: _colors.blue500 }),
	        _react2.default.createElement(HomeIcon, { style: iconStyles, color: _colors.red500, hoverColor: _colors.greenA200 }),
	        _react2.default.createElement(
	          'div',
	          { style: { marginTop: 5, marginLeft: 35 } },
	          'DRESSING ',
	          _react2.default.createElement(
	            'p',
	            { style: { color: 'gray', marginLeft: 20 } },
	            'Cold'
	          ),
	          ' '
	        ),
	        _react2.default.createElement(
	          'div',
	          { style: { marginTop: -65, marginLeft: 150 } },
	          'SPORTS ',
	          _react2.default.createElement(
	            'p',
	            { style: { color: 'gray', marginLeft: 15 } },
	            'Unift'
	          ),
	          ' '
	        ),
	        _react2.default.createElement(
	          'div',
	          { style: { marginTop: -65, marginLeft: 240 } },
	          'UV INDEX ',
	          _react2.default.createElement(
	            'p',
	            { style: { color: 'gray', marginLeft: 15 } },
	            'Moderate'
	          ),
	          ' '
	        )
	      ),
	      _react2.default.createElement(
	        _Card.CardActions,
	        null,
	        _react2.default.createElement(_Weather2.default, null)
	      )
	    )
	  );
	};

	exports.default = Cardee;

/***/ },
/* 933 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Drawer = __webpack_require__(396);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _AppBar = __webpack_require__(327);

	var _AppBar2 = _interopRequireDefault(_AppBar);

	var _FlatButton = __webpack_require__(393);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _IconButton = __webpack_require__(336);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _close = __webpack_require__(440);

	var _close2 = _interopRequireDefault(_close);

	var _MenuItem = __webpack_require__(405);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Weather = function (_React$Component) {
	  _inherits(Weather, _React$Component);

	  function Weather(props) {
	    _classCallCheck(this, Weather);

	    var _this = _possibleConstructorReturn(this, (Weather.__proto__ || Object.getPrototypeOf(Weather)).call(this, props));

	    _this.handleToggle = function () {
	      return _this.setState({ open: !_this.state.open });
	    };

	    _this.handleClose = function () {
	      return _this.setState({ open: false });
	    };

	    _this.state = { open: false };
	    return _this;
	  }

	  _createClass(Weather, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_FlatButton2.default, {
	          label: 'More',
	          onTouchTap: this.handleToggle
	        }),
	        _react2.default.createElement(
	          _Drawer2.default,
	          { width: 380, openSecondary: true, open: this.state.open },
	          _react2.default.createElement(_AppBar2.default, {
	            title: '360 Weather',
	            iconElementLeft: _react2.default.createElement(
	              _IconButton2.default,
	              { onTouchTap: this.handleClose },
	              _react2.default.createElement(_close2.default, null)
	            ) })
	        )
	      );
	    }
	  }]);

	  return Weather;
	}(_react2.default.Component);

	exports.default = Weather;

/***/ },
/* 934 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _transformReact = __webpack_require__(935);

	var _transformReact2 = _interopRequireDefault(_transformReact);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	//动画引入

	var Donghua = function (_Component) {
	  _inherits(Donghua, _Component);

	  function Donghua(props, context) {
	    _classCallCheck(this, Donghua);

	    var _this = _possibleConstructorReturn(this, (Donghua.__proto__ || Object.getPrototypeOf(Donghua)).call(this, props, context));

	    _this.step = 0.01; //变换速度
	    _this.xStep = 3;
	    _this.skewStep = 1;
	    _this.state = {
	      el6: { scaleX: 1, scaleY: 1 }
	    };
	    _this.animate = _this.animate.bind(_this);
	    return _this;
	  }

	  _createClass(Donghua, [{
	    key: 'animate',
	    value: function animate() {
	      var _this2 = this;

	      this.state.el6.scaleX < 0.5 && (this.step *= -1);
	      this.state.el6.scaleX > 1.5 && (this.step *= -1);
	      this.setState({
	        el6: {
	          scaleX: this.state.el6.scaleX + this.step,
	          scaleY: this.state.el6.scaleY + this.step
	        }

	      }, function () {
	        requestAnimationFrame(_this2.animate);
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      setTimeout(this.animate, 100);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_transformReact2.default, { scaleX: this.state.el6.scaleX, scaleY: this.state.el6.scaleY, className: 'test',
	          style: { 'backgroundColor': '#EEFF41', 'width': '80px', 'height': '80px', 'marginLeft': '200px', 'marginTop': '50px', 'border-radius': '40px', 'opacity': '0.6' } })
	      );
	    }
	  }]);

	  return Donghua;
	}(_react.Component);

	exports.default = Donghua;

/***/ },
/* 935 */
/***/ function(module, exports, __webpack_require__) {

	/* transformjs 0.1.0
	 * By june01
	 * Github: https://github.com/AlloyTeam/AlloyTouch/tree/master/transformjs
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* thanks for dnt's Matrix3D */
	var Matrix3D = function () {
	    function Matrix3D(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
	        _classCallCheck(this, Matrix3D);

	        this.elements = window.Float32Array ? new Float32Array(16) : [];
	        var te = this.elements;
	        te[0] = n11 !== undefined ? n11 : 1;te[4] = n12 || 0;te[8] = n13 || 0;te[12] = n14 || 0;
	        te[1] = n21 || 0;te[5] = n22 !== undefined ? n22 : 1;te[9] = n23 || 0;te[13] = n24 || 0;
	        te[2] = n31 || 0;te[6] = n32 || 0;te[10] = n33 !== undefined ? n33 : 1;te[14] = n34 || 0;
	        te[3] = n41 || 0;te[7] = n42 || 0;te[11] = n43 || 0;te[15] = n44 !== undefined ? n44 : 1;
	    }

	    _createClass(Matrix3D, [{
	        key: 'set',
	        value: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
	            var te = this.elements;
	            te[0] = n11;te[4] = n12;te[8] = n13;te[12] = n14;
	            te[1] = n21;te[5] = n22;te[9] = n23;te[13] = n24;
	            te[2] = n31;te[6] = n32;te[10] = n33;te[14] = n34;
	            te[3] = n41;te[7] = n42;te[11] = n43;te[15] = n44;
	            return this;
	        }
	    }, {
	        key: 'identity',
	        value: function identity() {
	            this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
	            return this;
	        }
	    }, {
	        key: 'multiplyMatrices',
	        value: function multiplyMatrices(a, be) {

	            var ae = a.elements;
	            var te = this.elements;
	            var a11 = ae[0],
	                a12 = ae[4],
	                a13 = ae[8],
	                a14 = ae[12];
	            var a21 = ae[1],
	                a22 = ae[5],
	                a23 = ae[9],
	                a24 = ae[13];
	            var a31 = ae[2],
	                a32 = ae[6],
	                a33 = ae[10],
	                a34 = ae[14];
	            var a41 = ae[3],
	                a42 = ae[7],
	                a43 = ae[11],
	                a44 = ae[15];

	            var b11 = be[0],
	                b12 = be[1],
	                b13 = be[2],
	                b14 = be[3];
	            var b21 = be[4],
	                b22 = be[5],
	                b23 = be[6],
	                b24 = be[7];
	            var b31 = be[8],
	                b32 = be[9],
	                b33 = be[10],
	                b34 = be[11];
	            var b41 = be[12],
	                b42 = be[13],
	                b43 = be[14],
	                b44 = be[15];

	            te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
	            te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
	            te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
	            te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

	            te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
	            te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
	            te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
	            te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

	            te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
	            te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
	            te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
	            te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

	            te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
	            te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
	            te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
	            te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

	            return this;
	        }

	        // 解决角度为90的整数倍导致Math.cos得到极小的数，其实是0。导致不渲染

	    }, {
	        key: '_rounded',
	        value: function _rounded(value, i) {
	            i = Math.pow(10, i || 15);
	            // default
	            return Math.round(value * i) / i;
	        }
	    }, {
	        key: '_arrayWrap',
	        value: function _arrayWrap(arr) {
	            return window.Float32Array ? new Float32Array(arr) : arr;
	        }
	    }, {
	        key: 'appendTransform',
	        value: function appendTransform(x, y, z, scaleX, scaleY, scaleZ, rotateX, rotateY, rotateZ, skewX, skewY, originX, originY, originZ) {

	            var rx = rotateX * Matrix3D.DEG_TO_RAD;
	            var cosx = this._rounded(Math.cos(rx));
	            var sinx = this._rounded(Math.sin(rx));
	            var ry = rotateY * Matrix3D.DEG_TO_RAD;
	            var cosy = this._rounded(Math.cos(ry));
	            var siny = this._rounded(Math.sin(ry));
	            var rz = rotateZ * Matrix3D.DEG_TO_RAD;
	            var cosz = this._rounded(Math.cos(rz * -1));
	            var sinz = this._rounded(Math.sin(rz * -1));

	            this.multiplyMatrices(this, this._arrayWrap([1, 0, 0, x, 0, cosx, sinx, y, 0, -sinx, cosx, z, 0, 0, 0, 1]));

	            this.multiplyMatrices(this, this._arrayWrap([cosy, 0, siny, 0, 0, 1, 0, 0, -siny, 0, cosy, 0, 0, 0, 0, 1]));

	            this.multiplyMatrices(this, this._arrayWrap([cosz * scaleX, sinz * scaleY, 0, 0, -sinz * scaleX, cosz * scaleY, 0, 0, 0, 0, 1 * scaleZ, 0, 0, 0, 0, 1]));

	            if (skewX || skewY) {
	                this.multiplyMatrices(this, this._arrayWrap([this._rounded(Math.cos(skewX * Matrix3D.DEG_TO_RAD)), this._rounded(Math.sin(skewX * Matrix3D.DEG_TO_RAD)), 0, 0, -1 * this._rounded(Math.sin(skewY * Matrix3D.DEG_TO_RAD)), this._rounded(Math.cos(skewY * Matrix3D.DEG_TO_RAD)), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]));
	            }

	            if (originX || originY || originZ) {
	                this.elements[12] -= originX * this.elements[0] + originY * this.elements[4] + originZ * this.elements[8];
	                this.elements[13] -= originX * this.elements[1] + originY * this.elements[5] + originZ * this.elements[9];
	                this.elements[14] -= originX * this.elements[2] + originY * this.elements[6] + originZ * this.elements[10];
	            }
	            return this;
	        }
	    }], [{
	        key: 'DEG_TO_RAD',
	        get: function get() {
	            return Math.PI / 180;
	        }
	    }]);

	    return Matrix3D;
	}();

	var attrArr = ['translateX', 'translateY', 'translateZ', 'scaleX', 'scaleY', 'scaleZ', 'rotateX', 'rotateY', 'rotateZ', 'skewX', 'skewY', 'originX', 'originY', 'originZ'];
	var otherArr = ['notPerspective', 'perspective'];
	var propArr = [].concat(attrArr, otherArr);
	var hasOwnProperty = {}.hasOwnProperty;

	function isDiff(o, n) {
	    var diff = [];

	    if (!o && n || o && !n) {
	        return true;
	    } else if (n && o && o !== n) {
	        for (var i = 0, len = propArr.length; propArr.length; i++) {
	            if (o[propArr[i]] !== n[propArr[i]]) {
	                return true;
	            }
	        }
	    }

	    return false;
	}

	function isFilterProps(prop) {
	    var filterProps = [].concat(propArr, ['children']);

	    for (var i = 0, len = filterProps.length; i < filterProps.length; i++) {
	        if (filterProps[i] === prop) {
	            return true;
	        }
	    }

	    return false;
	}

	function getOtherProps(props) {
	    var newProps = {};

	    for (var i in props) {
	        if (hasOwnProperty.call(props, i) && !isFilterProps(i)) {
	            newProps[i] = props[i];
	        }
	    }

	    return newProps;
	}

	function merge(o, n) {
	    var obj = {};
	    for (var i in o) {
	        obj[i] = o[i];
	    }for (var _i in n) {
	        obj[_i] = n[_i];
	    }return obj;
	}

	var Transform = function (_React$Component) {
	    _inherits(Transform, _React$Component);

	    function Transform(props) {
	        _classCallCheck(this, Transform);

	        var _this = _possibleConstructorReturn(this, (Transform.__proto__ || Object.getPrototypeOf(Transform)).call(this, props));

	        _this.matrix3D = new Matrix3D();
	        return _this;
	    }

	    _createClass(Transform, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            return isDiff(this.props, nextProps);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var _props = this.props,
	                notPerspective = _props.notPerspective,
	                _props$perspective = _props.perspective,
	                perspective = _props$perspective === undefined ? 500 : _props$perspective;


	            var mtx = this.matrix3D.identity();
	            var arr = attrArr.map(function (attr) {
	                var val = _this2.props[attr];
	                if (!val) {
	                    return attr === 'scaleX' || attr === 'scaleY' || attr === 'scaleZ' ? 1 : 0;
	                }

	                return val;
	            });
	            mtx = mtx.appendTransform.apply(mtx, arr);

	            var styleSheet = (notPerspective ? '' : 'perspective(' + perspective + 'px)') + ' matrix3d(' + Array.prototype.slice.call(mtx.elements).join(',') + ')';

	            var styleObj = {
	                transform: styleSheet,
	                msTransform: styleSheet,
	                WebkitTransform: styleSheet,
	                MozTransform: styleSheet,
	                OTransform: styleSheet
	            };

	            var props = getOtherProps(this.props);
	            if (props.style) {
	                styleObj = merge(props.style, styleObj);
	                delete props.style;
	            }

	            return _react2.default.createElement(
	                'div',
	                _extends({ style: styleObj }, props),
	                this.props.children
	            );
	        }
	    }]);

	    return Transform;
	}(_react2.default.Component);

	exports.default = Transform;

/***/ }
/******/ ]);